id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
7782546,2017-09-16T11:20:02Z,2017-09-17T10:17:43Z,Caliburn.Micro 3.2.0,"A small house keeping release in part to get ready for Windows Template Studio work.

Included are the following:

- #443 Remove a rogue dependency on System.Web that was accidentally included.
- #462 WPF Window Manager won't override a Window's Title if it's been set. Thanks @tziemek.
- #466 Add a `Set` implementation to `PropertyChangedBase.
- #475 Platform provider methods are now virtual.",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/7782546/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/7782546,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/3.2.0,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.2.0,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/3.2.0,3.2.0,False,False
6522820,2017-05-27T10:05:41Z,2017-05-27T10:21:11Z,Caliburn.Micro 3.1.0,"A small feature and bug fix release to clean out some of the backlog before `4.0.0`. 

Included are the following

- #439 Fixes up an issue using commas in constant values `cm:Message.Attach=""ShowTitle('One, Two, Three')""`
- #432 Stop calling `InitializeCompontent` on Xamarin.Forms, this was mostly used for a underused feature of `.xaml` files without a code behind. On the non-XF platforms this method has re-entry protection, the XF version did not.
- #423 Fixes a null reference in the `Setup.WPF` sample.
- #417 Handle a `ContentPropertyAttribute` that doesn't supply a property name (WPF's `Frame` does this).
- #364 Support `OnViewLoaded` in Xamarin.Forms when the view is a `ContentPage`.
- #352 Add an extension point `BindingScope.GetVisualParent` to help people who use visual ""bridge"" libraries.
- #319 Add `$clickedItem` Special Value for WinRT / UWP based projects.
- #278 Add a navigation service for WPF and Silverlight with a sample. Note this service may change in `4.0.0` with an effort to align all the navigation services.
- #247 Add an extension point on `PropertyChangedBase` and `BindableCollection<T>` named `OnUIThread` to allow people to customize how property changed notifications are dispatched to the UI thread.",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/6522820/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/6522820,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/3.1.0,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.1.0,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/3.1.0,3.1.0,False,False
5102677,2017-01-09T08:55:15Z,2017-01-09T09:05:21Z,Caliburn.Micro 3.0.3,"This is a very small release that reverts #339.

This release changed behavior so that views were resolved from the container in the same way as view models.  The change in behavior caused problems for applications using containers that threw exceptions on failure to resolve a dependency.

This change should have been considered a breaking change and left to 4.0.0 and considered more seriously. For that I apologize.

It's also contains a typo in documentation fix. #402
",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/5102677/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/5102677,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/3.0.3,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.3,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/3.0.3,3.0.3,False,False
4841987,2016-12-06T09:02:03Z,2016-12-06T09:23:39Z,Caliburn.Micro 3.0.2,"This is a minor bug fix release.
- Fixed support for child view models at design time. #214, #358, #359, #379 
- `Caliburn.Micro.Xamarin.Forms` nuget package now depends on `Caliburn.Micro` for applications helping to ensure you have all the right packages. #323 
- Stopped extra calls to `InitializeComponent` in Xaamarin.Forms. #326 
- Support .NET 4.0 in the `Caliburn.Micro.Start` nuget package. #348 
- Ensure view model activation and deactivation is happening on back navigation in Xamarin.Forms. #342 
- `ContentView` bindings correctly deal with message targets in Xamarin.Forms. #349 
- Convention added for `DocumentViewer` in WPF. #368 
- Added some generic overloads to methods on SimpleContainer. #390 
- `ViewLocator` will now correctly call `GetInstance` for resolution of the view falling back to manual instantiation. #339 **Update:** This change was reverted in [3.0.3](https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.3)

The highest impact bug fix for this release is the last one, previously the `ViewModelLocator` would call `GetInstance` to try to resolve the view model (falling back to `GetAllInstances` and then manual instantiation), `ViewLocator` however previously only called `GetAllInstances`. 

This release makes them consistent, however it could cause problems if you're throwing exceptions on no resolution of a service from the container. I'd recommend if you are doing this checking whether the type is assignable to `UIElement` (or some view type) and return `null` (or skip throwing the exception). 
",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/4841987/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/4841987,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/3.0.2,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.2,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/3.0.2,3.0.2,False,False
3169245,2016-05-06T00:49:24Z,2016-05-06T00:53:15Z,Caliburn.Micro 3.0.1,"This is a minor bug fix release.
- Update the assembly version to match the nuget package version - #299 
- `BindingScope` updated to deal with `MenuFlyoutSubItem` in UWP - #308 
",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/3169245/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/3169245,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/3.0.1,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.1,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/3.0.1,3.0.1,False,False
2714292,2016-02-29T22:40:33Z,2016-02-29T22:42:07Z,Caliburn.Micro 3.0.0,"I'm really pleased to finally announce the release of [Caliburn.Micro 3.0.0](https://www.nuget.org/packages/Caliburn.Micro/) after a long period of being in beta. The major features of 3.0.0 are **Windows 10 / UWP** and **Xamarin.Forms** support. With this release you can use your view models across all major platforms that support C#!

It's important to note this is a change in the major versions to there may be breaking changes.

## Windows 10

The Windows 10 release follows along with the Windows 8.1 and Windows Phone 8.1 releases and combines them into a single library which is great from a maitenance perspective.  If we need to start adding features specific to Phone, Xbox or even HoloLens they'll be done using feature detection via `Windows.Foundation.Metadata.ApiInformation`.

It includes conventions for new controls such as `SplitView`.

Also included is a sample showing how to set up a `SplitView` style app with the `Frame` not being the root visual but inside the `ShellView`, this sample is available at [Hello UWP](https://github.com/Caliburn-Micro/Caliburn.Micro/tree/3.0.0/samples/Caliburn.Micro.HelloUWP).

We now use the new open sourced XAML Behaviours package.

## Windows 8.1
- Fix for transparent tiles in App Manifest Helper

## Windows 8.0

This release drops support for Windows 8.0 (different from Windows 8.1). 

## Xamarin Forms

This release brings support for [Xamarin.Forms](http://xamarin.com/forms) which in abstraction layer over the different UIs in iOS, Android and Windows Phone Silverlight (Windows 8 / 10 support coming later). What's really interesting is that it comes with it's own XAML syntax (not the same as Windows XAML but very similar), this means we can get a closer to standard Caliburn.Micro experience. I was pleasantly surprised by how much I got ported reasonable easy.

There are some limitations of the Xamarin.Forms flavour of of XAML, primarily there is no programmatic access to `x:Name` mean we cannot support named based conventions. We can still support attached properties such as `cm:Message.Attach` as well as convention based view / view model location. 

``` xml
<ListView ItemsSource=""{Binding Features}"" HasUnevenRows=""True""
          cm:Message.Attach=""[Event ItemSelected] = [ShowFeature($selectedItem)]"">
    <ListView.ItemTemplate>
        <DataTemplate>
            <ViewCell>
                <ContentView cm:View.Model=""{Binding}"" HorizontalOptions=""FillAndExpand"" VerticalOptions=""FillAndExpand""/>
            </ViewCell>
        </DataTemplate>
    </ListView.ItemTemplate>
</ListView>
```

Also included is the now standard navigation service and navigation helper methods  

``` csharp
navigationService.For<ProductViewModel>()
    .WithParam(v => v.ProductId, 42)
    .Navigate();
```

A sample of this sort of app is can be found at [Hello.Forms](https://github.com/Caliburn-Micro/Caliburn.Micro/tree/3.0.0/samples/Hello.Forms) in the GitHub repository.

One of the more interesting features here is that Xamarin.Forms runs on top of the existing mobile platform (Xamarin.iOS, Xamarin.Android and Windows Phone Silverlight). This makes it the first version where two different platforms of Caliburn.Micro have to run side by side. We essentially have two instances of `ViewModelLocator`, one in `Caliburn.Micro.ViewModelLocator` for the current host platform and one at `Caliburn.Micro.Xamarin.Forms.ViewModelLocator` if Xamarin.Forms is present.

## Xamarin.iOS and Xamarin.Android

This release primarily targets Xamarin.Forms, however work has been done to allow your view models to be reused within a Xamarin.iOS or Xamarin.Android applications with no support around binding or conventions.

These features will be added in later feature releases.

A sample of this sort of app is can be found at [Hello.Xamarin](https://github.com/Caliburn-Micro/Caliburn.Micro/tree/3.0.0/samples/Hello.Xamarin) in the GitHub repository.

## Preserving State

One new feature in this release is the `CachingFrameAdapter`. This subclass of `FrameAdapter` (which implements `INavigationService` in WinRT platforms such as Windows 8.1, Windows Phone 8.1 and Windows 10) will cache internally view models and reuse them on the appropriate navigation. This allows scenarios where the built in `NavigationCacheMode` doesn't make sense but still preserve your view model state. A sample of this in action is available at [Caliburn.Micro.State](https://github.com/Caliburn-Micro/Caliburn.Micro/tree/3.0.0/samples/Caliburn.Micro.State).

## Other Changes
- Resolved a WPF bug using `MainWindow` when it's disposed.
- Resolved `ViewLocator.LocateForModelType` failing to deal with improperly reused views in WinRT.
- Resolved a premature garbage collection issue in `Action.Invoke`.
- Removed a unnecessary explicate collection in `FrameAdapter`.
- `BindingScope` has been cleaned up a lot so will be easier to extend.
- Async methods are now taken into account for conventions. `CanLogin` will be used as a guard for `LoginAsync` and will be attached to a control with `xName=""Login""`.
- Better handling of scenarios where a root frame is not being used with the navigation service.
- Removed the case sensitivity when adding custom special values to `MessageBinder`.
- `Screen.IsActive`, `Screen.IsInitialised` and `PropertyChangedBase.IsNotifying` are now virtual, we don't see then behaviour being overriden but a lot apps will need to add their own custom attributes to these properties.

## Breaking Changes
- The extensions projects have moved into the main platform assembly, these were initially created as a place for very platform specific code but they've outlived there usefulness and removing them reduces some maintenance costs.
- `Bind.Model` had a feature enabling you to pass a string which used `IoC` to find the model. This was deprecated in 2.0.0 and has now been removed.
- `SimpleContainer` now only uses public constructors.
- The `UriFor` method has been deprecated in favour of just `For` given the lack of uri support on a number of platforms.
- WinRT platforms now make use of `AssemblySourceCache` which means if your view models do not implement `INotifyPropertyChanged` or views subclass from `UIElement` then they may not be found by `ViewLocator` or `ViewModelLocator`. This behaviour can be changed by modifying `AssemblySourceCache.ExtractTypes`.

## Thanks

Thank you to all who have contributed fixes, reported issues and generally feedback on the extended pre-release versions.

As well a bit thanks to Marker Metro who sponsored a lot of the time it took me to put this 3.0.0 release together.
",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/2714292/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/2714292,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/3.0.0,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.0,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/3.0.0,3.0.0,False,False
2208525,2015-11-30T01:45:54Z,2015-11-30T19:51:14Z,Caliburn.Micro 3.0.0-beta2,"All the release notes from [3.0.0-alpha](https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.0-alpha) and [3.0.0-beta1](https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.0-beta1) apply to this release as well.

## Windows 10
- Added runtime directives to help with .NET Native compilation.
- Added a missing convention for `SplitView`

## Windows 8.1
- Fix for transparent tiles in App Manifest Helper. Thanks @0x8DEADF00D 

## Other Changes
- Uses the new open source UWP Behaviors nuget package.
- Async methods are now taken into account for conventions. `CanLogin` will be used as a guard for `LoginAsync` and will be attached to a control with `xName=""Login""`. Thanks @BrunoJuchli 
- Better handling of scenarios where a root frame is not being used with the navigation service.

## Breaking Changes

All the breaking changes from [3.0.0-alpha](https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.0-alpha) and [3.0.0-beta1](https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.0-beta1) apply to this release as well.
- `DefaultPlatformProvider` has been removed with `PlatformProvider.Current` now throwing an exception if not correctly initialized.
",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/2208525/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/2208525,3.0.0,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/3.0.0-beta2,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.0-beta2,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/3.0.0-beta2,3.0.0-beta2,False,True
1658469,2015-08-11T20:51:41Z,2015-08-11T21:02:30Z,Caliburn.Micro 3.0.0-beta1,"All the release notes from [3.0.0-alpha](https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.0-alpha) apply to this release as well.

## Windows 10

The Windows 10 release follows along with the Windows 8.1 and Windows Phone 8.1 releases and combines them into a single library which is great from a maitenance perspective.  If we need to start adding features specific to Phone, Xbox or even HoloLens they'll be done using feature detection via `Windows.Foundation.Metadata.ApiInformation`.

Also included is a sample showing how to set up a `SplitView` style app with the `Frame` not being the root visual but inside the `ShellView`, this sample is available at [Hello UWP](https://github.com/Caliburn-Micro/Caliburn.Micro/tree/3.0.0/samples/Caliburn.Micro.HelloUWP).

## Preserving state

One new feature in this release is the `CachingFrameAdapter`. This subclass of `FrameAdapter` (which implements `INavigationService` in WinRT platforms such as Windows 8.1, Windows Phone 8.1 and Windows 10) will cache internally view models and reuse them on the appropriate navigation. This allows scenarios where the built in `NavigationCacheMode` doesn't make sense but still preserve your view model state. A sample of this in action is available at [Caliburn.Micro.State](https://github.com/Caliburn-Micro/Caliburn.Micro/tree/3.0.0/samples/Caliburn.Micro.State).

## Xamarin Forms
- Included `NavigationHelper` which adds the `For<TViewModel>` method to allow easier view model navigation.

``` csharp
navigationService.For<ProductViewModel>()
    .WithParam(v => v.ProductId, 42)
    .Navigate();
```

## Other Changes
- Resolved a WPF bug using `MainWindow` when it's disposed. Thanks [dvdorle](https://github.com/Caliburn-Micro/Caliburn.Micro/commits/3.0.0?author=dvdvorle).
- Resolved `ViewLocator.LocateForModelType` failing to deal with improperly reused views in WinRT.
- Resolved a premature garbage collection issue in `Action.Invoke`.
- Removed a unnecessary explicate collection in `FrameAdapter`.
- `BindingScope` has been cleaned up a lot so will be easier to extend.

## Breaking Changes

All the breaking changes from [3.0.0-alpha](https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.0-alpha) apply to this release as well.
- The extensions projects have moved into the main platform assembly, these were initially created as a place for very platform specific code but they've outlived there usefulness and removing them reduces some maintenance costs.
- `Bind.Model` had a feature enabling you to pass a string which used `IoC` to find the model. This was deprecated in 2.0.0 and has now been removed.
- `SimpleContainer` now only uses public constructors. Thanks [belyansky](https://github.com/Caliburn-Micro/Caliburn.Micro/commits/3.0.0?author=belyansky).
- The `UriFor` method has been deprecated in favour of just `For` given the lack of uri support on a number of platforms.
- WinRT platforms now make use of `AssemblySourceCache` which means if your view models do not implement `INotifyPropertyChanged` or views subclass from `UIElement` then they may not be found by `ViewLocator` or `ViewModelLocator`. This behaviour can be changed by modifying `AssemblySourceCache.ExtractTypes`.
",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/1658469/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/1658469,3.0.0,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/3.0.0-beta1,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.0-beta1,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/3.0.0-beta1,3.0.0-beta1,False,True
1197824,2015-04-21T00:41:10Z,2015-04-21T23:50:40Z,Caliburn.Micro 3.0.0-alpha,"# What's New?
- Caliburn.Micro.Core now supports Xamarin platforms.
- Limited support for Caliburn.Micro features in Xamarin native projects.
- Major support for Xamarin.Forms.

More information can be found on the [announcement](http://caliburnmicro.com/announcements/3.0.0-alpha/)

# Known Issues
- The current Storyboard designer for iOS in Visual Studio doesn't respect the folde r/ namespace it's placed in when generating types, as such the current conventions for view model locator `MyApp.ViewControllers.LoginViewController` to `MyApp.ViewModels.LoginViewModel` may not make sense in the long term.
- There is no programmatic access to `x:Name` in Xamarin.Forms, therefore the feature of name based conventions will not be available, you will need to use normal `{Binding Username}` and `cm:Message.Attach=""SignIn""`.
- There is no way to check to see if a `BindableProperty` has a `Binding` set. Thankfully we only use this ensure name based conventions don't overwrite existing bindings, given the first issue this is currently less of a problem.
- I'm not entirly happy with `FormsApplication` and that both Caliburn.Micro and Xamarin.Forms want to set a custom `UIApplicationDelegate`, we'll need a better way of playing together nicely.

# Breaking Changes

Right now there are no breaking API changes for the existing platforms there are some ABI ones, given the new **multi-platform** scenario with Xamarin Forms I've introduced a new assembly `Caliburn.Micro.Platform.Core` that holds some of the internal classes used the various platform assemblies. This lets us have to platforms at the same time without any type collision. 

If you're using nuget then this new assembly will automatically be referenced, but if you're doing any sort of manual references you may need to check this out. I've applied this change to all the ""modern"" platforms (.NET 4.5, Windows Phone 8, Windows 8, Windows 8.1 Windows Phone 8.1, Xamarin.iOS and Xamarin.Android). Due to the PCL profile restrictions the .NET 4.0 and Silverlight 5 platforms work as they previously did.

As the alpha progresses I expect there will be breaking changes on the Xamarin platforms, and I don't expect many if any changes on the others.

Thanks to all who contributed fixes, logged bugs etc.
",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/1197824/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/1197824,xamarin,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/3.0.0-alpha,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/3.0.0-alpha,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/3.0.0-alpha,3.0.0-alpha,False,True
1053138,2015-03-16T01:24:42Z,2015-03-16T01:48:37Z,Caliburn.Micro 2.0.2,"# What's New?
- Resolved some design time bugs.
- `PropertyChangedBase.Refresh` is now virtual.
- Added checks to guard against an async CanClose.
- Allow `SettingsWindowManager` to open independent flyouts [WinRT].
- Deal with unicode in C# identifiers.
- `AttachedCollection.On*` methods are now virtual.
- `ViewAware.GetView` is now virtual`.
- `ViewLocator.LocateForModel` falls back to `LocateForModelType` if the view could not be added to the visual tree.
- `ActionMessage.UpdateAvailablility` is now virtual.
- Removed explicit garbage collection from WinRT `FrameAdapter`.
- Resolved a bug where couldn't navigate to a view model that contained the name of the assembly.

Thanks to all who contributed fixes, logged bugs etc.
",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/1053138/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/1053138,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/2.0.2,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/2.0.2,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/2.0.2,2.0.2,False,False
502168,2014-08-20T03:12:13Z,2014-08-20T03:41:51Z,Caliburn.Micro 2.0.1,"# What's New?
- Resolved compilation errors in the Caliburn.Micro.Start package due to the breaking changes in 2.0.0.
- `PropertyChangedBase` supports DataContract serialization on appropriate platforms.
- Windows Phone 8.1 now exposes an `INavigationService.BackPressed` to better let apps handle and potentially cancel hardware back button events.
- Added a convention for Windows Phone 8.1 `Pivot`.
- Resolved a bug where `OnViewReady` argument was null.
- `ActionMessage` is more resilient to null values.
- Resolved BindingScope.FindNamedDescendants crashed on DependencyObjects
- Added `View.IsInDesignMode`.

Thanks to all who contributed fixes, logged bugs etc.
",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/502168/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/502168,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/2.0.1,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/2.0.1,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/2.0.1,2.0.1,False,False
342949,2014-05-10T10:19:30Z,2014-05-28T01:57:06Z,Caliburn.Micro 2.0.0,"# What's New?

After a long stretch Caliburn.Micro has gone 2.0.0 including better support for Portable Class Libraries and Universal apps.
- Debug symbols and and source are pushed to symbolsource.org
- Navigation Service on Windows Phone 8.1 automatically handles the hardware back button.
- Bootstrapper and CaliburnApplication have had methods aligned `Initialize` rather than `Start`.
- Bug fixes
",https://api.github.com/users/nigel-sampson,1256017,nigel-sampson,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/342949/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/342949,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/2.0.0,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/2.0.0,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/2.0.0,2.0.0,False,False
254226,2014-04-04T00:45:47Z,2014-04-03T00:53:01Z,Caliburn.Micro 2.0.0-beta2,"## What's New?
- New nugets for Caliburn.Micro 2.0.0-beta2.
- Support for the new Windows Phone 8.1 framework. Rather than being ""Silverlight"" this platform is more closely aligned with Windows 8 and shares a rather significant API. It's so similar to Windows that it was about two lines of code to get the Windows 8.1 version of CM running on Windows Phone 8.1.
- Support for new ""universal"" apps. While not quite ""write once, run anywhere"" they allow you to share Xaml and C# assets easily across apps while still allowing you to include platform-specific code when you want/need to. This new release of CM works very well with these universal apps (there’s a demo in [the repository](https://github.com/BlueSpire/Caliburn.Micro)) including sharing views/view-models, or scenarios such as separate views for the same view-model.
- Bug fixes and test coverage improvements.

### Packages
- **Caliburn.Micro.Core** - The Portable Class Library (PCL) portion of Caliburn.Micro.
- **Caliburn.Micro** - The platform-specific adapters for Caliburn.Micro.
- **Caliburn.Micro.Start** - Includes a starting bootstrapper, view model and view.
",https://api.github.com/users/EisenbergEffect,131485,EisenbergEffect,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/254226/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/254226,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/2.0.0-beta2,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/2.0.0-beta2,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/2.0.0-beta2,2.0.0-beta2,False,True
191891,2014-02-19T13:39:27Z,2014-02-19T13:45:33Z,Caliburn.Micro 2.0.0-beta,"Caliburn.Micro 2.x is a significant refactoring of the framework. It is now based on the platform's Portable Class Library (PCL) support. The packages that comprise this release are:
- **Caliburn.Micro.Core** - The Portable Class Library (PCL) portion of Caliburn.Micro.
- **Caliburn.Micro** - The platform-specific adapters for Caliburn.Micro.
- **Caliburn.Micro.Start** - Includes a starting bootstrapper, view model and view.
",https://api.github.com/users/EisenbergEffect,131485,EisenbergEffect,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/191891/assets,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/releases/191891,master,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/tarball/2.0.0-beta,https://github.com/Caliburn-Micro/Caliburn.Micro/releases/tag/2.0.0-beta,https://api.github.com/repos/Caliburn-Micro/Caliburn.Micro/zipball/2.0.0-beta,2.0.0-beta,False,True
