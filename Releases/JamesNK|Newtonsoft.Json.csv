id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
6748756,2017-06-18T01:55:15Z,2017-06-18T02:14:43Z,10.0.3,"* New feature - Added support for deserializing XmlElement, XmlNode, XObject, XNode and XContainer with XmlNodeConverter
* Change - MinClientVersion 2.12 added to NuGet package to restrict to compatible clients
* Fix - Fixed JsonSerializer.Binder to not throw an error when binder instance is compatible
* Fix - Fixed stack overflow when deserializing incomplete JSON to XML
* Fix - Fixed JSON Path recursive descent queries
* Fix - Fixed serializing ConcurrentDictionary in .NET Core 2.0
* Fix - Fixed serializing ConcurrentStack/Queue/Bag
* Fix - Fixed MemoryTraceWriter thread safety
* Fix - Fixed JSON Path root filter sometimes not correctly returning root token
* Fix - Fixed properties with JsonIgnore not being ignored with ItemRequired
* Fix - Fixed JToken.Load not reading past comment when CommentHandling is Ignore
* Fix - Fixed JsonReader.ReadAsDecimal with a JValue containing a BigInteger value
* Fix - Fixed converting JSON values to XML attributes to ignore current culture
* Fix - Fixed converting JSON byte array data to XML
* Fix - Fixed reading some types from KeyValuePairConverter incorrectly
* Fix - Fixed comparing high precision decimal JValues
* Fix - Fixed JsonWriter.WriteToken(JsonReader) not erroring on incomplete token
* Fix - Fixed not preventing negative integers with StringEnumConverters.AllowIntegerValues",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/6748756/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/6748756,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/10.0.3,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/10.0.3,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/10.0.3,10.0.3,False,False
5948075,2017-04-02T05:40:31Z,2017-04-02T06:49:25Z,10.0.2,"* Change - .NET 4 portable class library target added back to NuGet package
* Change - Changed NuGet dependencies to use NETStandard.Library 1.6.1
* Change - Changed double parsing back to double.TryParse to avoid small floating point precision errors
* Fix - Fixed binary serialization of JsonException and friends
* Fix - Fixed JsonLoadSettings.LineInfoHandling not being used correctly when loading JTokens
* Fix - Fixed serializing IListSource implementations
* Fix - Fixed handling errors when reading metadata properties during deserialization",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/5948075/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/5948075,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/10.0.2,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/10.0.2,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/10.0.2,10.0.2,False,False
5797911,2017-03-20T07:00:49Z,2017-03-20T07:29:29Z,10.0.1,"* New feature - Added async read support to JsonReader
* New feature - Added async write support to JsonWriter
* New feature - Added async support for loading JObject and JArray
* New feature - Added non-allocating parsing of double and decimal values
* New feature - Added support for TypeConverters to netstandard1.0+
* New feature - Added support for BigInteger to netstandard1.3+
* New feature - Added support for ISerializable to netstandard1.3+
* New feature - Added support for XmlDocument to netstandard1.3+
* New feature - Added support for SerializableAttribute and NonSerializedAttribute to netstandard1.3+
* New feature - Added ISerializationBinder
* New feature - Added SerializationBinder properties to JsonSerializer and JsonSerializerSettings
* New feature - Added TypeNameAssemblyFormatHandling
* New feature - Added TypeNameAssemblyFormatHandling properties to JsonSerializer and JsonSerializerSettings
* New feature - Added support for root object selector in JSONPath filters
* New feature - Added support for multiple names in JSONPath scan filter
* New feature - Added support for any combination of paths and values in JSONPath filter expressions
* New feature - Added support for extension data names to NamingStrategy
* New feature - Added ProcessExtensionDataNames flag to NamingStrategy
* New feature - Added JsonWriter.AutoCompleteOnClose to control whether JSON is auto-completed on JsonWriter.Close
* New feature - Added JsonReaderException constructor with path, line number, line position
* New feature - Added JsonWriterException constructor with path
* New feature - Added JsonReader.SetToken method overload with option not to update position array index
* New feature - Added support for automatically calling single constructor on immutable structs
* Change - Removed .NET 4 portable class library target from NuGet package
* Change - Removed obsolete JsonConverter.GetSchema method
* Change - Removed obsolete constructor from DefaultContractResolver 
* Change - Removed obsolete async methods from JsonConvert
* Change - Removed obsolete OnDeserialized, OnDeserializing, OnSerialized, OnSerializing, OnError from JsonContract
* Change - Removed obsolete JsonDictionaryContract.PropertyNameResolver
* Change - Removed obsolete ConstructorParameters, OverrideConstructor, ParametrizedConstructor from JsonObjectContract
* Change - Obsoleted TypeNameAssemblyFormat properties on JsonSerializer and JsonSerializerSettings
* Change - Obsoleted SerializationBinder
* Change - Obsoleted Binder properties on JsonSerializer and JsonSerializerSettings
* Change - Obsoleted FormatterAssemblyStyle in non-full .NET targets
* Change - Obsoleted Newtonsoft.Json.Bson (moved to new NuGet package)
* Change - Improved constructor parameter binding on .NET Core and portable builds
* Change - Improved error when attempting to convert root JSON object property to an XML attribute
* Change - Changed exception thrown when parsing invalid Unicode escape sequence to JsonReaderException
* Change - Changed StringEnumConverter.AllowIntegerValues to also reject reading integer strings
* Change - Changed StringEnumConverter.AllowIntegerValues to also reject writing enum values with no name
* Fix - Fixed JsonTextReader.ReadAsXXX methods not erroring on missing commas between values
* Fix - Fixed error when serializing F# lists with F# 4.1+
* Fix - Fixed StringEnumConverter reading specified enum names that contain a comma
* Fix - Fixed using a TraceWriter with nullable bytes
* Fix - Fixed deserializing null Regex values
* Fix - Fixed deserializing DataTable with error handling
* Fix - Fixed DynamicReflectionDelegateFactory creating typed value type constructors
* Fix - Fixed deserializing with type naming and complex nested generic types
* Fix - Fixed error when converting certain JSON to XML on .NET Core
* Fix - Fixed error handling skipping reading the next object value
* Fix - Fixed date XML precision when converting certain JSON to XML on portable builds
* Fix - Fixed not serializing readonly properties as references if they have corresponding creator parameters
* Fix - Fixed type name being written with nullable structs and TypeNameHandling.Auto
* Fix - Fixed deserializing a duplicate dictionary key from a parameterized constructor
* Fix - Fixed not erroring when deserializing incomplete JSON with a parameterized constructor
* Fix - Fixed incorrectly parsing scan filter when name is quoted
* Fix - Fixed return type for SByte and SByteNullable in JToken.ToObject
* Fix - Fixed deserializing generic only IList types with a constructor override
* Fix - Fixed null reference error with ReadAsBytes and an empty JSON object
* Fix - Fixed StringEnumConverter when EnumMember defines members that differ only by case
* Fix - Fixed serializing protected override properties
* Fix - Fixed merging null with complex type and MergeNullValueHandling.Ignore
* Fix - Fixed roundtripping double.MaxValue and float.MaxValue as dictionary keys
* Fix - Fixed JsonValidatingReader not closing underlying reader
* Fix - Fixed writing duplicate nulls to trace with TraceJsonWriter.WriteValue for object, Uri, byte[]
* Fix - Fixed BsonWriter.WriteValue erroring for null Uri or byte[]
* Fix - Fixed not calling nullable WriteValue overloads in TraceJsonWriter
* Fix - Fixed serializer not throwing an error when there is a comment followed by additional content when CheckAdditionalContent is true
* Fix - Fixed JObject/JArray Parse not throwing an error when there is a comment followed by additional content
* Fix - Fixed deserializing non-string values in some XML nodes
* Fix - Fixed converting XML to JSON when json:Array and xmlns:json attributes are used directly on the array's element
* Fix - Fixed error when attempting to populate values into read-only collection after creating object from non-default constructor",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/5797911/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/5797911,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/10.0.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/10.0.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/10.0.1,10.0.1,False,False
3529656,2016-06-13T11:03:56Z,2016-06-27T12:43:55Z,9.0.1,"- New feature - Added support for .NET Core with netstandard1.0
- New feature - Added NamingStrategy, CamelCaseNamingStrategy, SnakeCaseNamingStrategy
- New feature - Added naming strategy properties to JsonObjectAttribute and JsonPropertyAttribute
- New feature - Updated build to use .NET CLI tools
- New feature - Improved performance of many operations on large JArrays
- Fix - Fixed converting XElements without a namespace attribute to JSON
- Fix - Fixed various bugs in JSONPath equals and not equals comparisions
- Fix - Fixed JsonTextReader.ReadAsString incorrectly erroring when reading some numbers
- Fix - Fixed JTokenWriter sometimes losing types when writing JTokens
- Fix - Fixed JTokenWriter sometimes losing types with JValue.WriteTo
- Fix - Fixed incorrect check when looking for non-default constructors on collections
- Fix - Fixed JsonReader.ReadAsDouble with a JValue BigInteger
- Fix - Fixed converting dollar JSON properties to XML
- Fix - Fixed dynamic property getter type information
- Fix - Fixed JsonTextReader reading NaN, Infinity, -Infinity with ReadAsDouble and ReadAsString
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/3529656/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/3529656,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/9.0.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/9.0.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/9.0.1,9.0.1,False,False
2804843,2016-03-14T08:28:16Z,2016-03-14T09:01:49Z,8.0.3,"- New feature - Added MergeNullValueHandling
- New feature - Added constructor to StringEnumConverter for setting camelcase from attribute
- Fix - Fixed JsonTextWriter not getting buffer from buffer pool
- Fix - Fixed iterating over extension data multiple times
- Fix - Fixed JSONPath queries combining wildcard with property search
- Fix - Fixed serializing ISet with the .NET 4 portable assembly
- Fix - Fixed converting some property names to camel case
- Fix - Fixed F# serialization in partial trust issue
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/2804843/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/2804843,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/8.0.3,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/8.0.3,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/8.0.3,8.0.3,False,False
2397943,2016-01-09T00:46:57Z,2016-01-09T01:08:45Z,8.0.2,"- New feature - Added ReadAsBoolean to JsonReader
- Fix - Fixed serializing certain objects with events
- Fix - Fixed reading booleans as strings
- Fix - Fixed reading large integers as booleans
- Fix - Fixed ReadAsBytes with type name handling
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/2397943/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/2397943,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/8.0.2,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/8.0.2,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/8.0.2,8.0.2,False,False
2348624,2015-12-28T23:34:20Z,2015-12-29T01:08:02Z,8.0.1,"- New feature - Added IArrayPool and a setting on JsonTextReader and JsonTextWriter
- New feature - Added JsonReader.ReadAsDouble
- New feature - Added JsonLoadSettings and CommentHandling to control loading comments in LINQ to JSON
- New feature - Added JsonLoadSettings.LineInfoHandling
- New feature - Added support for JsonConstructorAttribute on list and dictionary collections
- New feature - Added support for deserializing string to Version
- New feature - Added ShouldDeserialize to JsonProperty
- New feature - Added Required.DisallowNull
- New feature - Added support for converting JSON to XML with invalid XML name chracters
- New feature - Improved case-insensitive deserialization performance
- New feature - Improved date parsing performance
- Change - Changed ReadAsDateTime, ReadAsDateTimeOffset, ReadAsBytes, ReadAsString, ReadAsInt32 on JsonReader from abstract to virtual
- Change - Changed parsing JArrays to not include comments by default
- Change - Changed JTokenWriter to use the last property instead of erroring when there are duplicate property names
- Change - Changed Uri JValues to use OriginalString when written to JSON
- Change - Changed DateTimeOffset JValues to return TypeCode.Object from IConvertible.GetTypeCode()
- Fix - Fixed converting JSON metadata array value to XML
- Fix - Fixed not including line information with some XML conversion errors
- Fix - Fixed error when writing certain JSON with escaped characters
- Fix - Fixed PopulateObject error when JSON starts with a comment
- Fix - Fixed incorrect IJsonLineInfo line position after the first line
- Fix - Fixed JSONPath when querying against Uri, Guid and Date values
- Fix - Fixed JsonReader.Path when the path is escaped
- Fix - Fixed writing JRaw twice when a TraceWriter is set
- Fix - Fixed getting the wrong value when reading certain large integers
- Fix - Fixed deserializing DataSet with a null DataTable
- Fix - Fixed deserializing a null DataSet
- Fix - Fixed error when serializing F# discriminated unions in Windows Store apps
- Fix - Fixed error serializing some types when there are conflicting interface properties
- Fix - Fixed error when settings ReferenceResolver is set to null
- Fix - Fixed DateTimeZoneHandling not being used when writing DateTime dictionary keys
- Fix - Fixed bug when converting an integer JValue to a nullable enum
- Fix - Fixed converting null string JValue to XML
- Fix - Fixed Mono generic class private field serialization bug
- Fix - Fixed error when deserializing ignored property with mismatched type
- Fix - Fixed deserializing to a type when setting JToken extension data
- Fix - Fixed setting default values onto properties already set in constructor
- Fix - Fixed casting dynamic JValue to JToken
- Fix - Fixed serializing non-zero based arrays
- Fix - Fixed reading 24 hour midnight ISO dates
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/2348624/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/2348624,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/8.0.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/8.0.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/8.0.1,8.0.1,False,False
1444880,2015-06-22T10:48:49Z,2015-06-22T11:15:24Z,7.0.1,"- New feature - DiscriminatedUnionConverter performance improvements 
- New feature - Added JsonRequiredAttribute 
- New feature - Added JsonSerializerSettings.ReferenceResolverProvider property 
- New feature - Added DefaultContractResolver.ResolveDictionaryKey 
- New feature - Added JsonDictionaryContract.DictionaryKeyResolver 
- New feature - Added support for reading GUID strings as bytes in JsonTextReader 
- New feature - Added EqualityComparer to JsonSerializer 
- Change - Changed reading GUIDs as bytes to only support 00000000-0000-0000-0000-000000000000 format 
- Change - Renamed aspnetcore50 target to dnxcore50 
- Change - Marked JsonSchema as obsolete 
- Change - Marked DefaultContractResolver(bool) as obsolete 
- Change - Marked JsonSerializerSettings.ReferenceResolver as obsolete 
- Change - Marked JsonDictionaryContract.PropertyNameResolver as obsolete 
- Fix - Fixed deserializing empty strings in Hashtables 
- Fix - Fixed incorrect JTokenReader.Path in certain situations 
- Fix - Fixed error when serializing certain objects in medium trust 
- Fix - Fixed deserializing large nullable UInt64 values 
- Fix - Fixed writing large UInt64 JValues 
- Fix - Fixed converting unmatched namespace prefixes in JSON to XML 
- Fix - Fixed IsoDateTimeConverter on DateTime properties with DateTimeFormatHandling.DateTimeOffset 
- Fix - Fixed preserving object references with read only properties 
- Fix - Fixed error when deserializing large JSON integers to XML 
- Fix - Fixed serializing extension data properties with no setter 
- Fix - Fixed serializing discriminated unions with type name or reference tracking enabled 
- Fix - Fixed DataTableConverter not using JsonSerializer settings 
- Fix - Fixed resolving properties from nested interfaces 
- Fix - Fixed deserializing classes derived from ConcurrentDictionary 
- Fix - Fixed passing default values to constructors 
- Fix - Fixed serializing root references from JsonConverters 
- Fix - Fixed empty strings coerced to null not erroring with Required.Always 
- Fix - Fixed invalid Required.Always error with constructor property name casing 
- Fix - Fixed empty string coerce check with Required.Always and constructor
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/1444880/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/1444880,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/7.0.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/7.0.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/7.0.1,7.0.1,False,False
842657,2015-01-11T06:46:39Z,2015-01-12T04:12:56Z,6.0.8,"- New feature - Added AttributeProvider to JsonProperty
- Fix - Fixed serializing and deserializing const fields
- Fix - Fixed using MetadataTypeAttribute with proxy classes
- Fix - Fixed bad error message when deserializing unsupported collections
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/842657/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/842657,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/6.0.8,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/6.0.8,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/6.0.8,6.0.8,False,False
804259,2014-12-22T22:58:22Z,2014-12-23T00:17:46Z,6.0.7,"- New feature - Added Annotations to LINQ to JSON
- New feature - Added DescendantsAndSelf method to JObject and JArray
- New feature - Added AncestorsAndSelf method to JToken
- New feature - Added support for tracking references in ISerializable objects
- New feature - Added CurrentToken to JTokenReader
- New feature - Added CurrentToken to JTokenWriter
- New feature - Added WriteToken(JsonToken, object) to JsonWriter
- Fix - Fixed deserializing null values onto JObject and JArray properties
- Fix - Fixed error when extension data bag doesn't inherit from Dictionary<TKey, TValue>
- Fix - Fixed deserializing complex values inside multi-dimensional arrays
- Fix - Fixed serialization settings not being used when deserializing F# unions
- Fix - Fixed MetadataTypeAttribute not being found on some platforms
- Fix - Fixed line breaks in exception messages to use Environment.NewLine
- Fix - Fixed deserializing certain XElements with comments
- Fix - Fixed casting JValues with a negative value to a nullable SByte
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/804259/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/804259,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/6.0.7,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/6.0.7,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/6.0.7,6.0.7,False,False
674681,2008-02-10T10:56:19Z,2014-11-03T18:56:20Z,2.0.1,"- New feature - LINQ to JSON!
- New feature - Ability to specify how JsonSerializer handles null values when serializing/deserializing.
- New feature - Ability to specify how JsonSerializer handles missing values when deserializing.
- Change - Improved support for reading and writing JavaScript constructors.
- Change - A new JsonWriter can now write additional tokens without erroring.
- Bug fix - JsonSerializer handles deserializing dictionaries where the key isn't a string.
- Bug fix - JsonReader now correctly parses hex character codes.
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674681/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674681,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/2.0.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/2.0.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/2.0.1,2.0.1,False,False
674677,2008-03-02T06:57:47Z,2014-11-03T18:55:26Z,2.0.2,"- New feature - Added FromObject to JObject, JArray for creating LINQ to JSON objects from regular .NET objects.
- New feature - Added support for deserializing to an anonymous type with the DeserializeAnonymousType method.
- New feature - Support for reading, writing and serializing the new DateTimeOffset type.
- New feature - Added IsoDateTimeConverter class. Converts DateTimes and DateTimeOffsets to and from the ISO 8601 format.
- New feature - Added JavaScriptDateTimeConverter class. Converts DateTimes and DateTimeOffsets to and from a JavaScript date constructor.
- New feature - XmlNodeConverter handles serializing and deserializing JavaScript constructors.
- New feature - Ability to force XmlNodeConverter to write a value in an array. Logic is controlled by an attribute in the XML, json:Array=""true"".
- New feature - JsonSerializer supports serializing to and from LINQ to JSON objects.
- New feature - Added Depth property to JsonReader. 
- New feature - Added JsonTextReader/JsonNodeReader and JsonTextWriter/JsonNodeWriter.
- Change - More concise LINQ to JSON querying API.
- Change - JsonReader and JsonWriter are now abstract.
- Change - Dates are now serialized in a JSON complient manner, similar to ASP.NET's JavaScriptSerializer or WCF's DataContractJsonSerializer.
- Change - JsonSerializer will serialize null rather than throwing an exception.
- Change - The WriteTo method on LINQ to JSON objects now support JsonConverters. 
- Fix - JsonTextReader correctly parses NaN, PositiveInfinity and NegativeInfinity constants.
- Fix - JsonSerializer properly serializes IEnumerable objects.
- Removed - AspNetAjaxDateTimeConverter. Format is no longer used by ASP.NET AJAX.
- Removed - JavaScriptObject, JavaScriptArray, JavaScriptConstructor. Replaced by LINQ to JSON objects.
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674677/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674677,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/2.0.2,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/2.0.2,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/2.0.2,2.0.2,False,False
674668,2008-04-08T08:56:32Z,2014-11-03T18:52:45Z,2.0.3,"- New feature - Added JsonObjectAttribute with ability to opt-in or opt-out members by default.
- New feature - Added Skip() method to JsonReader.
- New feature - Added ObjectCreationHandling property to JsonSerializer.
- Change - LOTS of little fixes and changes to the LINQ to JSON objects.
- Change - CultureInfo is specified across Json.NET when converting objects to and from text.
- Change - Improved behaviour of JsonReader.Depth property.
- Change - GetSerializableMembers on JsonSerializer is now virtual.
- Fix - Floating point numbers now use ToString(""r"") to avoid an overflow error when serializing and deserializing a boundary value.
- Fix - JsonSerializer now correctly serializes and deserializes DBNull.
- Fix - JsonSerializer no longer errors when skipping a multi-token JSON structure.
- Fix - Clone a JToken if it already has a parent and is being added as a child to a new token
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674668/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674668,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/2.0.3,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/2.0.3,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/2.0.3,2.0.3,False,False
674665,2008-05-04T03:16:34Z,2014-11-03T18:52:05Z,2.0.4,"- New feature - Documentation.chm included in download. Contains complete API documentation and quick start guides to Json.NET.
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674665/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674665,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/2.0.4,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/2.0.4,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/2.0.4,2.0.4,False,False
674661,2008-08-24T11:23:19Z,2014-11-03T18:50:53Z,3.0.1,"- New feature - Silverlight Json.NET build.
- New feature - JObject now implements IDictionary, JArray now implements IList.
- New feature - Added JsonConverterAttribute. Used to define a JsonConverter to serialize a class or member. Can be placed on classes or fields and properties.
- New feature - Added DateTimeFormat to IsoDateTimeConverter to customize date format.
- New feature - Added WriteValue(object) overload to JsonWriter.
- New feature - Added JTokenEqualityComparer.
- New feature - Added IJEnumerable. JEnumerable and JToken now both implement IJEnumerable.
- New feature - Added AsJEnumerable extension method.
- Change - JsonSerializer does a case insensitive compare when matching property names and constructor params.
- Change - JObject properties must have a unique name.
- Bug fix - Internal string buffer properly resizes when parsing long JSON documents.
- Bug fix - JsonWriter no longer errors in certain conditions when writing a JsonReader's position.
- Bug fix - JsonSerializer skips multi-token properties when putting together constructor values.
- Bug fix - Change IConvertible conversions to use ToXXXX methods rather than casting.
- Bug fix - GetFieldsAndProperties now properly returns a distinct list of member names for classes than have overriden abstract generic properties.
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674661/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674661,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/3.0.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/3.0.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/3.0.1,3.0.1,False,False
674657,2008-10-27T09:36:55Z,2014-11-03T18:49:47Z,3.5.1,"- New feature - Compact framework support
- New feature - Big serializer performance improvements through caching of static type data 
- New feature - Added DefaultValueHandling option to JsonSerializer 
- New feature - JsonSerializer better supports deserializing into ICollection<T> objects 
- New feature - Added JsonSerializerSettings class along with overloads to JavaScriptConvert serialize/deserialize methods 
- New feature - IsoDateTimeConverter and JavaScriptDateTimeConverter now support nullable DateTimes 
- New feature - Added JsonWriter.WriteValue overloads for nullable types 
- New feature - Newtonsoft.Json.dll is now signed 
- New feature - Much better support for reading, writing and serializing raw JSON 
- New feature - Added JsonWriter.WriteRawValue 
- Change - Renamed Identifier to JsonRaw 
- Change - JSON date constructors deserialize to a date
- Fix - JavaScriptConvert.DeserializeObject checks for addition content after deserializing an object 
- Fix - Changed JsonSerializer.Deserialize to take a TextReader instead of a StringReader 
- Fix - Changed JsonTextWriter.WriteValue(string) to write null instead of an empty string for a null value 
- Fix - JsonWriter.WriteValue(object) no longer errors on a null value 
- Fix - Corrected JContainer child ordering when adding multi values
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674657/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674657,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/3.5.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/3.5.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/3.5.1,3.5.1,False,False
674646,2009-01-04T08:52:04Z,2014-11-03T18:47:27Z,3.5.2,"- New feature - Added JSON Schema implementation 
- New feature - Added IJsonLineInfo. Implemented by JsonTextReader, JsonTokenReader, JsonValidatingReader, JToken 
- New feature - Added line details to JsonTextReader exception messages and JsonValidatingReader errors 
- New feature - Added JsonContainerAttribute with Id, Title and Description members. JsonObject and JsonArray inherit from this attribute 
- New feature - Added JsonArrayAttribute. Has flag to control whether array can contain null items 
- New feature - Added IsRequired to JsonProperty 
- New feature - Added Load(JsonReader) to JProperty, JConstructor 
- New feature - Added the ability for JsonTokenWriter to write individual values as well as arrays and objects 
- New feature - Added CreateReader to JToken 
- New feature - Added FromObject to JToken 
- New feature - Added ReadFrom to JToken 
- Change - Renamed JavaScriptConvert to JsonConvert 
- Change - Value<T> on JObject supports getting nullable values 
- Change - Type values now serialize and deserialize to the type name string 
- Change - GetSerializableMembers has been removed and replaced with GetMemberMappings on JsonSerializer 
- Fix - JsonConvert now always write a floating point number with a decimal place 
- Fix - JsonSerializer now correctly skips missing members 
- Fix - JsonWriter now allows objects and arrays to be written in a constructor 
- Fix - QuoteChar not getting set when parsing property name 
- Fix - JProperty now correctly loads content from a collection
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674646/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674646,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/3.5.2,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/3.5.2,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/3.5.2,3.5.2,False,False
674643,2009-03-21T09:19:16Z,2014-11-03T18:46:30Z,3.5.3,"- New feature - Added IMappingResolver interface and DefaultMappingResolver class. IMappingResolver property added to JsonSerializer, JsonSerializerSettings, JsonSchemaGenerator 
- New feature - Added CamelCaseMappingResolver 
- New feature - Added DeserializeNode overload to JsonConvert that allows a root element to be added to the XML 
- New feature - Added support for deserializing to IEnumerable<T>, ICollection<T>, IList<T> and IDictionary<TKey, TValue> members 
- New feature – Deserializer will now populate an object’s members with unused values after creating an object from a non-default constructor 
- New feature - Deserializer now attempts a case insensitive match to a member if the exact case match fails 
- New feature - Added a ToString(Formatting, JsonConverters[]) overload to JToken 
- New feature - Added AddAfterSelf, AddBeforeSelf methods to JToken 
- Change - JsonSerializer now ignores missing members by default 
- Fix - Made the error message when attempting to deserialize to an interface or abstract class clearer 
- Fix - Fixed the whitespace issues when writing a raw JValue token 
- Fix - XmlNodeConverter now handles nested arrays when converting JSON to XML 
- Fix - Ensure JavaScriptDateTimeConverter converts nullable DateTime members 
- Fix - Fix possible thread safety issues by adding double check locking to static reflection cache
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674643/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674643,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/3.5.3,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/3.5.3,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/3.5.3,3.5.3,False,False
674640,2009-07-06T09:36:03Z,2014-11-03T18:45:53Z,3.5.4,"- New feature - Added StringEnumConverter to convert enum values to and from their string name rather than number value 
- New feature - Added BinaryConverter which converts byte array's, Binary and SqlBinary values to and from base64 text. 
- New feature - Added NullValueHandling, DefaultValueHandling and ReferenceLoopHandling to JsonPropertyAttribute 
- New feature - Added MetadataTypeAttribute support when searching for attributes 
- New feature - JsonSerializer now looks for DataContractAttribute and DataMemberAttribute on a type 
- New feature - Now able to explicitly serialize private members when marked up with JsonPropertyAttribute or DataMemberAttribute 
- New feature - Added CustomCreationConverter. Used to customize creation of an object before the serializer populates values 
- New feature - Added Populate method to JsonSerializer. Pass existing object to serializer and have current object's values populated onto it 
- New feature - Added IsReference to JsonContainerAttribute and JsonPropertyAttribute 
- New feature - Added PreserveReferencesHandling to JsonSerializer 
- New feature - Added IReferenceResolver (replacing IMappingResolver) to JsonSerializer 
- New feature - JsonObjectAttribute will now force a collection class to be serialized as an object 
- New feature - Added JsonContract, JsonObjectContract, JsonArrayContract and JsonDictionaryContract 
- New feature - Added support for OnSerializing, OnSerialized, OnDeserializing, OnDeserialized callback methods 
- Change - Rename JsonTokenReader, JsonTokenWriter, JsonTokenType to JTokenReader, JTokenWriter, JTokenType 
- Change - DefaultDateTimeFormat on IsoDateTimeConverter no longer displays milliseconds zeros 
- Change - JObject now enumerates over KeyValuePair<string, JToken> rather than JToken 
- Change - Moved serialize stack used to check for reference loops from JsonWriter (yuck) to JsonSerializerWriter (yay) 
- Change - Renamed JsonMemberMapping to JsonProperty 
- Fix - JToken now successfully casts to a float or decimal value 
- Fix - Serializer now handles comments encountered in JSON while deserializing 
- Fix - Fixed (hopefully) cache threading issues 
- Fix - Uri objects are now correctly serizlized on Silverlight/Compact Framework 
- Fix - Whole decimals will now always be written with a decimal place
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674640/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674640,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/3.5.4,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/3.5.4,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/3.5.4,3.5.4,False,False
674625,2009-10-11T04:23:35Z,2014-11-03T18:41:35Z,3.5.5,"- New feature - Added .NET 2.0 support 
- New feature - Added serialization error handling via Error event on JsonSerializer and OnErrorAttribute 
- New feature - Added implicit conversions from primitive values to JValue 
- New feature - Added type descriptor objects to support LINQ to JSON databinding 
- New feature - Added ITypedList and IBindingList to JContainer 
- New feature - Added INotifyPropertyChanging and INotifyPropertyChanged to JObject 
- New feature - Added ConstructorHandling to allow object creation using non-public default constructors 
- New feature - Added roundtrip ADO.NET Entities serialization and deserialization 
- New feature - Added set indexer to JToken 
- Change - IsRequired now accepts null properties 
- Change - JsonSerializer now creates JObject/JArray when deserializing complex JSON to an object type 
- Change - Empty string to be deserialized as null for nullable types 
- Change - CloneNode on JToken renamed to CloneToken 
- Change - JProperty constructor that doesn't take a value made internal 
- Fix - Schema generation with negative enum values 
- Fix - Exception when loading JObject with multiple properties of the same name. Last property will be used 
- Fix - Exception when deserializing null value to List<Nullable<T>> 
- Fix - Generic type deserialization with type name tracking enabled
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674625/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674625,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/3.5.5,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/3.5.5,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/3.5.5,3.5.5,False,False
674621,2009-12-27T03:30:43Z,2014-11-03T18:41:00Z,3.5.6,"- New feature - Added reading and writing binary JSON (BSON) support via BsonReader, BsonWriter 
- New feature - Added support for reading and writing byte arrays to JsonReader, JsonWriter and LINQ to JSON classes 
- New feature - Added ReadAsBytes to JsonReader 
- New feature - Added DataSetConverter, DataTableConverter 
- New feature - Added JPath and SelectToken to JToken 
- New feature - Added ObjectCreationHandling to JsonPropertyAttribute 
- New feature - Added IValueProvider, ReflectionValueProvider, DynamicValueProvider 
- New feature - Added serialization event support to Silverlight version 
- New feature - Added DBNull support to JValue 
- Change - Removed dependency on Entity Framework, LINQ to SQL and data annotations assemblies 
- Change - Upgraded Silverlight project to Silverlight 3 
- Change - Changed IsRequired to Required enum on JsonPropertyAttribute with options Default, AllowNull and Always 
- Change - Change converter to be resolved from new Converter property on JsonProperty 
- Change - Improved error message when JSON array encountered for object and vice-versa when deserializing 
- Change - Improved error message for converting types when deserializing 
- Change - Improved error message from getting and setting properties when serializing and deserializing 
- Change - Class converter now resolved from contract
- Change - Built in serializers now resolved when contract is created
- Change - JsonRaw removed and replaced with JRaw
- Fix - Schema id not being written for collections 
- Fix - TimeSpan serialization incorrect on Compact Framework 
- Fix - Unicode line break string encoding when writing JSON 
- Fix - Empty string being incorrectly converted to null when deserializing 
- Fix - Unclosed object when including type name with array 
- Fix - Serializing objects with generic methods failing on Compact Framework 
- Fix - Remove DateTimeOffset stand-in from Compact Framework build 
- Fix - Modified .NET 2.0 build to run on environments without .NET 2.0 SP1 
- Fix - Changed deserialization to always use a new value created from a JsonConverter 
- Fix - XmlNodeConverter not converting comments in JSON 
- Fix - ToString culture inconsistency when serializing dictionary key 
- Fix - JTokenWriter not writing comments 
- Fix - Properties on existing derived objects not being populated during deserialization
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674621/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674621,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/3.5.6,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/3.5.6,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/3.5.6,3.5.6,False,False
674617,2010-04-20T07:51:33Z,2014-11-03T18:40:15Z,3.5.7,"- New feature - Improved BSON performance 
- New feature - Added WriteOid and WriteRegex to BsonWriter 
- New feature - Added support for ShouldSerialize conditional methods 
- New feature - Added TypeNameHandling to JsonProperty attribute. Allows a type names to be included on an individual property basis 
- New feature - Support for reading octal and hexadecimal numbers from JSON 
- New feature - Added support for enum values to LINQ to JSON 
- New feature - Added TypeNameAssemblyFormat property to JsonSerializer 
- New feature - Added DateTimeConverterBase 
- New feature - Added JsonPrimitiveContract and JsonLinqContract 
- New feature - Added CreateMemberValueProvider method to DefaultContractResolver 
- New feature - INotifyCollectionChanged implemented on JContainer in Silverlight 
- New feature - Included BSON in .NET 2.0, Silverlight and Compact Framework builds 
- New feature - Added ReadRootValueAsArray, DateTimeKindHandling properties to BsonReader 
- New feature - ISerializable support 
- New feature - Added GetSchema, CanRead, CanWrite to JsonConverter 
- New feature - LINQ to XML support added to XmlNodeConverter 
- New feature - SerializeXNode, DeserializeXNode methods added to JsonConvert 
- New feature - Added support for sharing a static cache for contract resolvers inheriting from DefaultControlResolver 
- New feature - Added support for switching between dynamic and late bound reflection for medium trust environments 
- New feature - Support for using implicit/explicit casts when converting a JSON property name to a dictionary value 
- Change – JsonConverter.ReadJson method is now passed the existing value of the property it is converting
- Change - Built in JsonConverters are resolved once when the contract is created rather than runtime 
- Change - JsonRaw removed and replaced with JRaw 
- Change - Type is now always written as AssemblyQualifiedName 
- Change - Dictionary key serialization falls back to ToString for keys 
- Change - Schema generator now uses JsonContracts to determine schema information 
- Change - Removed the ""-"" prefix when serializing a JSON constructor - prefix not compatible with XML naming standard 
- Change - When converting JSON to XML using XmlNodeConverter, changed special JSON properties ($id, $ref, $type) to be attributes rather than child elements 
- Fix - Fix dynamic code generation IL verification issues in .NET 4 
- Fix - Fix error when deserializing nullable array 
- Fix - Escape JSON property text 
- Fix - Silverlight serialization security error 
- Fix - Private base members marked with JsonProperty attribute now correctly serialized 
- Fix - Error message when attempting to deserialize custom dictionary with no default constructor 
- Fix - Correctly deserialize empty BSON objects 
- Fix - When a class has a metadata class defined, fall back the original class from the metadata class when attribute not found 
- Fix - Deserialize HashSet<T> without error 
- Fix - Correctly skip ignored JSON properties when deserializing via a non-default constructor 
- Fix - Schema with no properties now correctly validates 
- Fix - Dictionary and array schemas now marked as nullable 
- Fix - Serialize generic dictionary that doesn't implement IDictionary correctly 
- Fix - CustomCreationConverter no longer errors when writing JSON 
- Fix - JsonProperty.Readable and Writable not being correctly set for .NET properties with modified getter/setter visibility 
- Fix - Fix error caused by private properties on a base class when reflecting a type 
- Fix - Correct property CanRead and CanWrite coming back as false when a base class property has a private getter/setter visibility 
- Fix - Fix reading BSON multi byte UTF8 characters 
- Fix - CustomCreationConverter to return null when converting a null JSON value 
- Fix - Fix for possible errors caused by mutable GetHashCode implementations and reference tracking
- Fix - Fix JTokenReader.ReadAsBytes to read strings as base64 data
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674617/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674617,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/3.5.7,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/3.5.7,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/3.5.7,3.5.7,False,False
674614,2010-08-14T02:10:47Z,2014-11-03T18:39:11Z,3.5.8,"- New feature - Added TypeNameHandling.Auto to automatically write the type name when a value doesn't match the declared type
- New feature - Added CLSCompliant attributes
- New feature - Added Required.Always attribute validation when writing JSON
- New feature - Added DateTimeKindHandling to BsonWriter to control how a DateTime is converted prior to being serialized 
- New feature - Added SerializeCompilerGeneratedMembers to DefaultContractResolver to control serializing compiler generated fields 
- Change - Improved OverflowException message for integer values larger than an Int64 
- Change - Added interfaces, structs and enums as valid targets of JsonConverterAttribute 
- Change - Added structs as a valid target of JsonObjectAttribute 
- Change - Improved default null and value handing when JSON value is not compatible with property value 
- Change - Serialization attributes now supported in .NET 2.0 
- Change - HtmlColorConverter and System.Drawing.dll dependency removed 
- Fix - Fix reading hexadecimal numbers that contain an e 
- Fix - Generic simple type names no longer include full qualified assembly information for nested generate types 
- Fix - Corrected culture invariance issues 
- Fix - Correct incorrect BSON string reading for multi-byte characters 
- Fix - Fix error when converting a JValue to a compatible type 
- Fix - Fix security exception when generating simple type names on Silverlight 
- Fix - JsonProperty now inherited on overriden properties 
- Fix - JTokenReader.ReadAsBytes no longer errors when reading null token value
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674614/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674614,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/3.5.8,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/3.5.8,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/3.5.8,3.5.8,False,False
674605,2011-01-04T01:05:52Z,2014-11-03T18:36:25Z,4.0.1,"- New feature - Added Windows Phone 7 project 
- New feature - Added dynamic support to LINQ to JSON 
- New feature - Added dynamic support to serializer 
- New feature - Added INotifyCollectionChanged to JContainer in .NET 4 build 
- New feature - Added ReadAsDateTimeOffset to JsonReader 
- New feature - Added ReadAsDecimal to JsonReader 
- New feature - Added covariance to IJEnumerable type parameter 
- New feature - Added XmlSerializer style Specified property support 
- New feature - Added support for deserializing to JToken 
- New feature - Added CamelCaseText flag to StringEnumConverter 
- New feature - Added WriteArrayAttribute to XmlNodeConverter to include an attribute to help round tripping JSON and XML 
- New feature - Added OmitRootObject to XmlNodeConverter to skip writing the root JSON object when converting XML 
- New feature - Added DeepClone and ICloneable implementation to JToken 
- New feature - Added JSON schema PatternProperties, ExclusiveMinimum and ExclusiveMaximum for JSON schema spec 3 
- New feature - Added .NET 3.5 project 
- Change - Updated source code to VS2010 
- Change - Updated main project to .NET 4 
- Change – Updated Silverlight project to Silverlight 4 
- Change - ICustomTypeDescriptor implementation moved to JObject 
- Change - Improved error message when converting JSON with an empty property to XML 
- Change - JSON schema Required replaced with Optional, as defined in JSON schema spec 3 
- Change - JSON schema MaxDecimals replaced with DivisibleBy, as defined in JSON schema spec 3 
- Remove - Compact Framework project removed. Compact Framework is not supported in VS2010
- Remove - JTypeDescriptionProvider and JTypeDesciptor removed 
- Fix - BSON writing of binary values fixed. Added JsonNet35BinaryCompatibility flag for reading existing incorrect BSON binary values
- Fix - Timezone information no longer lost when deserializing DateTimeOffsets 
- Fix – Decimal precision no longer lost when deserializing decimals 
- Fix - SelectToken no longer skips the last project name when it is a single character 
- Fix – Deserializing structs correctly set when reusing existing values is true 
- Fix – Private getter/setters on base classes are now correctly accessible 
- Fix – Nullable structs correctly deserialize 
- Fix - JSON Schema option label now written correctly 
- Fix – Deserializing a DataSet when it is a property of another object no longer breaks 
- Fix - JToken Load and Parse methods now check that content is complete
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674605/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674605,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.0.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.0.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.0.1,4.0.1,False,False
674601,2011-04-22T03:11:42Z,2014-11-03T18:35:14Z,4.0.2,"- New feature - Added commonly used primitive value operations to dynamic JValue
- New feature - Added IComparable to JValue
- New feature - Added JsonConstructorAttribute to explicitly define which constructor to use during deserialization
- New feature - Added IFormattable to JValue
- New feature - Added Load and Parse helper methods to JToken
- New feature - Added ExpandoObjectConverter that deserializes to primitive values rather than LINQ to JSON objects for ExpandObjects
- New feature - Added EnumMemberAttribute support to StringEnumConverter
- New feature - Added CloseInput/CloseOutput to JsonReader/JsonWriter to control whether the underlying stream is closed. Default to true
- Change - JValue ToString now calls ToString on the internal value
- Change - NuGet spec file includes client profiles
- Change - BsonReader/BsonWriter close the underlying stream by default when closed
- Change - CamelCasePropertyNamesContractResolver updates dictionary and dynamic property names
- Fix – DefaultValueHandling no longer includes a property when the default value is the same value but a different type
- Fix – Objects created with paramatized constructors fixed to not set properties that aren't in JSON
- Fix – Fixed comments in JSON sometimes causing errors when deserializing
- Fix – Error when reflecting over type that has multiple index properties inherited fixed
- Fix – Error when reusing JsonSerializer with preserve references enabled fixed
- Fix – Poor error message when dynamic type cannot be created during deserialization fixed
- Fix – Error when setting a null value on a dynamic type during deserialization fixed
- Fix – JsonTextReader.ReadAsDecimal not attempting to convert string values to decimal fixed
- Fix – Duplicate type name within an assembly error fixed
- Fix – Deserializing a DataTable property fixed
- Fix – Code emit error when deserializing interfaces in certain situations fixed
- Fix – Performance issues when deserializing with partial type names fixed
- Fix – Deserializing some decimal values on classes with non-default constructors fixed
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674601/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674601,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.0.2,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.0.2,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.0.2,4.0.2,False,False
674599,2011-10-01T23:32:54Z,2014-11-03T18:34:22Z,4.0.3,"- New feature - Improved support for deserializing objects using non-default constructors
- New feature - JsonConverterAttribute now allowed on constructor parameters
- New feature - JsonPropertyAttribute now allowed on constructor parameters 
- New feature - Added Serializable attribute to exceptions
- New feature - JsonObject and JsonProperty attributes can now be placed on an interface and used when serializing implementing objects 
- New feature - Improve TypeNameHandling.Auto to skip adding an unneeded type name for collection interfaces 
- New feature - LINQ to JSON internals rewritten to use lists and dictionaries rather than linked lists
- New feature - Added support for deserializing to readonly collections and dictionaries on classes with non-default constructors 
- New feature - Added serialization constructors to all Exceptions
- New feature - Added support for serialization event attributes on base classes
- New feature - Added support for BindToName on SerializationBinder 
- New feature - Missing JSON errors can now be handled using JsonSerializer error handling 
- New feature - Added Populate and IgnoreAndPopulate options to DefaultValueHandling for automatically populating default values during deserialization
- New feature - Added support for setting readonly fields when marked up with JsonPropertyAttribute 
- New feature - Added Order to JsonPropertyAttribute to override the order of serialized JSON 
- New feature - Added Culture to JsonTextReader to use when converting values from JSON text 
- New feature - Added support for reading byte arrays from JSON integer arrays 
- New feature - Added support for deserializing IDictionary properties 
- New feature - Added ToObject to JToken for deserializing LINQ to JSON objects to a .NET object
- New feature - Added support for Guid, TimeSpan and Uri to LINQ to JSON 
- Change - Changed WriteEndObject, WriteEndArray, WriteEndConstructor on JsonWriter to be virtual 
- Change - Moved JPropertyDescriptor to Newtonsoft.Json.Linq namespace 
- Change - Additional content after the $ref property now ignored when reading schema references
- Change - Changed JToken.Children to return an empty iterator rather than erroring 
- Change - Changed the assembly file names to all be Newtonsoft.Json.dll to fix NuGet referencing 
- Change - Changed $id and $ref properties to allow null 
- Fix - Changed .NET 2.0 version to use LinqBridge source code rather than ilmerge to fix error 
- Fix - Fixed deserializing to IEnumerable<T> properties 
- Fix - Fixed DataTable and DataColumn names not being modified by CamelCasePropertyNamesContractResolver 
- Fix - Fixed JObject loading JSON with comments
- Fix - Fixed error when using a Specified property with no setter
- Fix - Fixed transient constructor error on Windows Phone 7
- Fix - Fixed deserializing null values into nullable generic dictionaries 
- Fix - Fixed potential casting error when writing JSON using a JsonReader 
- Fix - Fixed converting emtpy XML elements with an array attribute not writing other attributes
- Fix - Fixed deserializing null values into DataTables
- Fix - Fixed error when deserializing readonly IEnumerable<T> array properties
- Fix - Fixed not including type name for byte[] values 
- Fix - Fixed BsonWriter failing silently when writing values outside of an Object or Array
- Fix - Fixed serializer attempting to use dynamic code generation in partial trust 
- Fix - Fixed serializing objects with DataContract and DataMember attributes on base classes
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674599/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674599,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.0.3,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.0.3,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.0.3,4.0.3,False,False
674593,2011-11-19T09:10:38Z,2014-11-03T18:33:15Z,4.0.4,"- Change - JsonTextReader.Culture is now CultureInfo.InvariantCulture by default
- Change - KeyValurPairConverter no longer cares about the order of the key and value properties 
- Change - Time zone conversions now use new TimeZoneInfo instead of TimeZone 
- Fix - Fixed boolean values sometimes being capitalized when converting to XML
- Fix - Fixed error when deserializing ConcurrentDictionary
- Fix - Fixed serializing some Uris returning the incorrect value
- Fix - Fixed occasional error when converting non-long integer properties to XML
- Fix - Fixed deserializing byte arrays with type name information 
- Fix - Fixed flag enum items not being correctly camel cased
- Fix - Fixed JsonValidatingReader validating the first array item twice
- Fix - Fixed JsonSchema not correctly validating integers as a subset of decimal
- Fix - Fixed bad BSON when writing long strings of complex UTF8 characters
- Fix - Fixed error not being raised for additional content in JSON string for JArray.Parse and JObject.Parse 
- Fix - Fixed DataTableConverter including nulls with NullValueHandling.Ignore
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674593/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674593,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.0.4,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.0.4,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.0.4,4.0.4,False,False
674590,2011-12-10T12:09:52Z,2014-11-03T18:32:24Z,4.0.5,"- Fix - Fixed referencing the NuGet package from Windows Phone 7.1 projects
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674590/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674590,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.0.5,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.0.5,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.0.5,4.0.5,False,False
674584,2012-01-23T07:22:17Z,2014-11-03T18:30:47Z,4.0.6,"- New feature - Added line number information to deserialization errors
- New feature - Added ReadAsInt32 to JsonReader
- New feature - Added BinaryReader/BinaryWriter constructor overloads to BsonReader/BsonWriter 
- Change - JsonTextReader error message when additional JSON content found is more descriptive
- Fix - Removed unused utility methods
- Fix - Fixed elusive Intellitrace runtime destabilization error
- Fix - Fixed internal exception thrown when deserializing Decimal/DateTimeOffset/Byte lists
- Fix - Fixed potential multi-threading serializing issue 
- Fix - Fixed serializing types that hides a base classes property with a proeprty of the same name
- Fix - Fixed BsonReader to use BinaryReader instead of base stream
- Fix - Fixed referencing the NuGet package from Windows Phone 7.1 projects
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674584/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674584,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.0.6,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.0.6,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.0.6,4.0.6,False,False
674582,2012-01-24T09:12:32Z,2014-11-03T18:30:04Z,4.0.7,"- Change - Moved Culture property from JsonTextReader to JsonReader
- Fix - Fixed circular reference error when serializing nullable struct properties
- Fix - Fixed JsonReader.ReadAsXXX methods not converting string values
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674582/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674582,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.0.7,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.0.7,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.0.7,4.0.7,False,False
674577,2012-02-12T01:08:20Z,2014-11-03T18:29:31Z,4.0.8,"- New feature - Added VersionConverter for System.Version
- New feature - Added a JSON schema IsValid overload that returns a list of error messages
- Change - NuGet Silverlight/Windows Phone assembies are no longer strong-named
- Fix - Fixed Json.NET attributes on nullable struct properties not being used
- Fix - Fixed deserializing nullable enums
- Fix - Fixed JsonConstructor incorrectly being allowed on properties
- Fix - Fixed empty string being changed to null when deserializing object properties
- Fix - Fixed not replacing ignored properties when resolving an object's contract
- Fix - Fixed JsonReader.ReadAsDateTimeOffset throwing an incorrect error message
- Fix - Fixed error when converting XML to JSON with a default namespace
- Fix - Fixed JsonValidatingReader.ReadAsBytes throwing an exception
- Fix - Fixed a unit test failing because of the running computer’s timezone
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674577/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674577,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.0.8,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.0.8,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.0.8,4.0.8,False,False
674570,2012-03-20T06:33:07Z,2014-11-03T18:26:21Z,4.5.1,"- New feature - Windows 8 Metro build
- New feature - JsonTextReader automatically reads ISO strings as dates
- New feature - Added DateFormatHandling to control whether dates are written in the MS format or ISO format, with ISO as the default
- New feature - Added DateTimeZoneHandling to control reading and writing DateTime time zone details
- New feature - Added async serialize/deserialize methods to JsonConvert
- New feature - Added Path to JsonReader/JsonWriter/ErrorContext and exceptions with the JSON path of the current position
- New feature - Added collection type to JsonArrayContract
- New feature - Added dictionary key type and dictionary value type to JsonDictionaryContract
- New feature - Added reader/writer specific Formatting, DateFormatHandling and DateTimeZoneHandling to JsonSerializerSettings
- New feature - Added ReadAsDate and ReadAsString to JsonReader
- New feature - Added IgnoreSerializableInterface to DefaultContractResolver
- Change - Dates are now serialized as the ISO format by default
- Change - The ReadAsXXX methods on JsonReader now return null at the end of an array instead of throwing an error
- Change - JsonReaders now to set TokenType to JsonToken.None after finishing content
- Change - Deserializing will fallback to use a private default constructor
- Change - The error message when deserializing a JSON object/array onto the wrong kind of type is more descriptive
- Change - Serializing ISerializable types under partial trust now errors to fix potential security issue
- Fix - Fixed reading scientific notation numbers with no decimal point
- Fix - Fixed LinqBridge collision error in .NET 2.0 by moving types to a different namespace
- Fix - Fixed error when deserializing nullable types with no content
- Fix - Fixed JObject.Keys null reference error when the object has no items
- Fix - Fixed error handling when failing to parse array content
- Fix - Fixed error handling when there are missing required properties
- Fix - Fixed performance issue when building deeply nested JSON to LINQ to JSON objects
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674570/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674570,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.1,4.5.1,False,False
674565,2012-04-11T10:16:10Z,2014-11-03T18:25:03Z,4.5.2,"- New feature - Added support for the SerializableAttribute and serializing a type's internal fields
- New feature - Added MaxDepth to JsonReader/JsonSerializer/JsonSerializerSettings
- New feature - Added support for ignoring properties with the NonSerializableAttribute
- Fix - Fixed deserializing a null string throwing a NullReferenceException
- Fix - Fixed JsonTextReader reading from a slow stream
- Fix - Fixed CultureInfo not being overridden on JsonSerializerProxy
- Fix - Fixed full trust security check in .NET 2.0 & .NET 3.5
- Fix - Fixed XmlNodeConverter not turning all attribute properties into attributes
- Fix - Fixed comparing JObjects to ignore property order
- Fix - Fixed reading invalid unicode surrogate pairs
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674565/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674565,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.2,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.2,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.2,4.5.2,False,False
674564,2012-04-13T13:24:00Z,2014-11-03T18:24:07Z,4.5.3,"- Change - DefaultContractResolver.IgnoreSerializableAttribute is now true by default
- Fix - Fixed MaxDepth on JsonReader recursively throwing an error
- Fix - Fixed SerializationBinder.BindToName not being called with full assembly names
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674564/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674564,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.3,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.3,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.3,4.5.3,False,False
674562,2012-04-24T21:32:32Z,2014-11-03T18:23:28Z,4.5.4,"- New feature - Added Portable Class Library build
- New feature - Added support for customizing the JsonConverter, type name handling and reference handling of collection items
- New feature - Added Path to JsonReaderException/JsonSerializationException messages
- New feature - Added DateParseHandling to JsonReader
- New feature - Added JsonContainerContract
- New feature - Added JsonDictionaryAttribute
- Change - Instances of Exception have been changed to be a more specific exception
- Fix - Fixed Windows 8 Application Certification tool error by removing AllowPartiallyTrustedCallersAttribute from assembly
- Fix - Fixed JsonWriters not using DateTimeZoneHandling
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674562/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674562,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.4,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.4,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.4,4.5.4,False,False
674555,2012-05-08T08:08:21Z,2014-11-03T18:21:29Z,4.5.5,"- New feature - Added ItemIsReference, ItemReferenceLoopHandling, ItemTypeNameHandling, ItemConverterType to JsonPropertyAttribute
- New feature - Added ItemRequired to JsonObjectAttribute
- New feature - Added Path to JsonWriterException
- Change - Improved deserializer call stack memory usage
- Change - Moved the PDB files out of the NuGet package into a symbols package
- Fix - Fixed infinite loop from an input error when reading an array and error handling is enabled
- Fix - Fixed base object error not being handled when deserializing
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674555/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674555,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.5,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.5,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.5,4.5.5,False,False
674552,2012-05-30T07:21:43Z,2014-11-03T18:20:48Z,4.5.6,"- New feature - Added IgnoreDataMemberAttribute support
- New feature - Added GetResolvedPropertyName to DefaultContractResolver
- New feature - Added CheckAdditionalContent to JsonSerializer
- Change - Metro build now always uses late bound reflection
- Change - JsonTextReader no longer returns no content after consecutive underlying content read failures
- Fix - Fixed bad JSON in an array with error handling creating an infinite loop
- Fix - Fixed deserializing objects with a non-default constructor and reference tracking enabled
- Fix - Fixed deserializing relative Uris
- Fix - Fixed constructor name result not being type checked
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674552/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674552,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.6,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.6,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.6,4.5.6,False,False
674548,2012-06-09T03:23:35Z,2014-11-03T18:19:45Z,4.5.7,"- Fix - Fixed Metro build to pass Windows Application Certification Kit on Windows 8 Release Preview
- Fix - Fixed Metro build error caused by an anonymous type
- Fix - Fixed ItemConverter not being used when serializing dictionaries
- Fix - Fixed an incorrect object being passed to the Error event when serializing dictionaries
- Fix - Fixed decimal properties not being correctly ignored with DefaultValueHandling
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674548/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674548,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.7,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.7,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.7,4.5.7,False,False
674544,2012-08-05T02:21:01Z,2014-11-03T18:18:32Z,,"- New feature - Serialize and deserialize multidimensional arrays
- New feature - Members on dynamic objects with JsonProperty/DataMember will now be included in serialized JSON
- New feature - LINQ to JSON load methods will read past preceding comments when loading JSON
- New feature - Improved error handling to return incomplete values upon reaching the end of JSON content
- Change - Improved performance and memory usage when serializing Unicode characters
- Change - The serializer now creates objects using GetUninitializedObject when deserializing a Serializable type
- Fix - Added SecurityTransparent attribute to WinRT build
- Fix - Fixed infinite loop error caused by error handling upon reaching the end of JSON content
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674544/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674544,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.8,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.8,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.8,4.5.8,False,False
674543,2012-09-08T09:57:14Z,2014-11-03T18:17:17Z,4.5.9,"- New feature - Added JsonValueConverter
- New feature - Set a property's DefaultValueHandling to Ignore when EmitDefaultValue from DataMemberAttribute is false
- Fix - Fixed DefaultValueHandling.Ignore not igoring default values of non-nullable properties
- Fix - Fixed DefaultValueHandling.Populate error with non-nullable properties
- Fix - Fixed error when writing JSON for a JProperty with no value
- Fix - Fixed error when calling ToList on empty JObjects and JArrays
- Fix - Fixed losing decimal precision when writing decimal JValues
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674543/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674543,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.9,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.9,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.9,4.5.9,False,False
674541,2012-10-07T09:46:38Z,2014-11-03T18:16:50Z,,"- New feature - Added Portable build to NuGet package
- New feature - Added GetValue and TryGetValue with StringComparison to JObject
- Change - Improved duplicate object reference id error message
- Fix - Fixed error when comparing empty JObjects
- Fix - Fixed SecAnnotate warnings
- Fix - Fixed error when comparing DateTime JValue with a DateTimeOffset JValue
- Fix - Fixed serializer sometimes not using DateParseHandling setting
- Fix - Fixed error in JsonWriter.WriteToken when writing a DateTimeOffset
- Fix - Fixed error when serializing emitted classes that have null constructor parameter names
- Fix - Fixed empty strings not correctly deserializing as null onto nullable properties
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674541/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674541,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.10,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.10,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.10,4.5.10,False,False
674533,2012-11-20T09:44:07Z,2014-11-03T18:14:20Z,,"- New feature - Added ITraceWriter, MemoryTraceWriter, DiagnosticsTraceWriter 
- New feature - Added StringEscapeHandling with options to escape HTML and non-ASCII characters 
- New feature - Added non-generic JToken.ToObject methods 
- New feature - Deserialize ISet<T> properties as HashSet<T> 
- New feature - Added implicit conversions for Uri, TimeSpan, Guid 
- New feature - Missing byte, char, Guid, TimeSpan and Uri explicit conversion operators added to JToken 
- New feature - Special case so Version type is correctly deserialized 
- Change - Silverlight and Windows Phone assemblies in NuGet are strong named again 
- Change - Improved CamelCasePropertyNamesContractResolver camel casing property names 
- Change – Explicit JValue conversions are more flexible when converting values 
- Fix - Fixed QuoteChar not being used when writing DateTimes, TimeSpans, Uris and Guids 
- Fix - Fixed JValue constructors for Uri, TimeSpan, Guid assigning incorrect JTokenType 
- Fix - Fixed ReferenceLoopHandling not being used when serializing ISerializable and dynamic values 
- Fix - Fixed potential null reference error when getting attributes
- Fix - Fixed .NET 2.0 build incorrectly referencing DateTimeOffset
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674533/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674533,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/4.5.11,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/4.5.11,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/4.5.11,4.5.11,False,False
674531,2013-04-07T06:17:49Z,2014-11-03T18:13:26Z,,"- New feature - Added .NET 4.5 library
- New feature - Added portable library targeting .NET 4.5, Win8, WP8
- New feature - Added Path to JToken 
- New feature - Added BigInteger support 
- New feature - Added IReadOnlyCollection<T> and IReadOnlyDictionary<TKey, TValue> support 
- New feature - Added FloatFormatHandling to JsonWriter/JsonSerializer/JsonSerializerSettings 
- New feature - Added DateFormatString to JsonWriter/JsonSerializer/JsonSerializerSettings 
- New feature - Added support for multiple serialization events and use base type serialization events 
- New feature - Added DeserializeAnonymousType overload with JsonSerializerSettings 
- New feature - Added support for specifying root type when serializing JSON with TypeNameHandling.Auto
- New feature - Added support for creating lists and dictionaries with an IEnumerable<T> constructor 
- New feature - Added IConvertible support to JValue 
- New feature - Added support for serializing custom IConvertible values
- New feature - Added support for deserializing IList
- New feature - Added support for converting byte array JValues to Guid
- New feature - Added support for deserializing byte arrays to Guid
- Change - NaN and Infinity floating point values are serialized as strings by default 
- Change - Minor breaking changes to JsonSchema type  
- Change - Upgraded Windows Phone assembly to WP8
- Change - DateTime IDictionary keys are now serialized in ISO date format 
- Change - DataContractAttribute is no longer inherited to match DataConctractSerializer behavior 
- Change - StringEnumConverter converts empty strings to null for nullable enums 
- Change - Guids serialize to a binary UUID in BSON instead of a string
- Remove - Removed SL4 library
- Fix - Fixed JTokenWriter returning a null reference 
- Fix - Fixed static fields to no longer be included with fields serialization 
- Fix - Fixed recursively reading type wrapper objects when deserializing 
- Fix - Fixed incorrect namespace when converting XML to JSON 
- Fix - Fixed poor performance when serializing/deserialize dynamic objects 
- Fix - Fixed StringEnumConverter to throw JsonSerializerException on error
- Fix - Fixed hidden properties not being serialized
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674531/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674531,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/5.0.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/5.0.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/5.0.1,5.0.1,False,False
674530,2013-04-08T11:21:50Z,2014-11-03T18:12:53Z,,"- Remove - Removed WP8 library
- Fix - Fixed required System.Numerics.dll reference by removing BigInteger from external API calls
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674530/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674530,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/5.0.2,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/5.0.2,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/5.0.2,5.0.2,False,False
674528,2013-04-14T01:01:43Z,2014-11-03T18:12:20Z,,"- Fix - Fixed error serializing non-generic types that implement IEnumerable<T>
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674528/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674528,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/5.0.3,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/5.0.3,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/5.0.3,5.0.3,False,False
674519,2013-04-25T03:38:29Z,2014-11-03T18:09:14Z,,"- New feature - Added JsonWriter.SetWriteState to support inheritance from JsonWriter implementations
- Change - Changed .NET 4.5 portable library and WinRT library to use compiled expressions reflection
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674519/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674519,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/5.0.4,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/5.0.4,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/5.0.4,5.0.4,False,False
674516,2013-05-08T08:26:32Z,2014-11-03T18:08:30Z,,"- New feature - Added global default serialization settings with JsonConvert.DefaultSettings
- New feature - Added extension data support with JsonExtensionDataAttribute
- New feature - Added NullValueHandling and DefaultValueHandling support to serializing dynamic types
- Change - Changed some explicit interface methods on JArray to public to support use with ImpromtuInterface
- Fix - Fixed deserializing non-ISO formatted date dictionary keys
- Fix - Fixed values not being set when deserializing with DefaultValueHandling.IgnoreAndPopulate
- Fix - Fixed deserializing with type named handling and assemblies loaded with Assembly.LoadFrom
- Fix - Fixed deserializing Regexes when using StringEnumConverter
- Fix - Fixed serializing and deserializing typed DataSets
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674516/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674516,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/5.0.5,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/5.0.5,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/5.0.5,5.0.5,False,False
674510,2013-06-07T07:34:55Z,2014-11-03T18:07:10Z,,"- New feature - Added serialized/deserialized JSON to verbose tracing
- New feature - Added support for using type name handling with ISerializable content
- Fix - Fixed not using default serializer settings with primitive values and JToken.ToObject 
- Fix - Fixed error writing BigIntegers with JsonWriter.WriteToken 
- Fix - Fixed serializing and deserializing flag enums with EnumMember attribute
- Fix - Fixed error deserializing interfaces with a valid type converter 
- Fix - Fixed error deserializing ISerializable objects that also implement IConvertible
- Fix - Fixed potential infinite loop when parsing unquoted JSON values
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674510/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674510,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/5.0.6,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/5.0.6,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/5.0.6,5.0.6,False,False
674505,2013-10-14T06:33:30Z,2014-11-03T18:06:05Z,,"- New feature - Added support for Immutable Collections 
- New feature - Added WriteData and ReadData settings to DataExtensionAttribute 
- New feature - Added reference and type name handling support to extension data 
- New feature - Added default value and required support to constructor deserialization 
- Change - Extension data is now written when serializing 
- Fix - Added missing casts to JToken 
- Fix - Fixed parsing large floating point numbers 
- Fix - Fixed not parsing some ISO date timezones 
- Fix - Fixed schema validation of integer value when type was number 
- Fix - Fixed writing of IConvertible values when TypeCode returned was Object 
- Fix - Fixed serializing proxy objects with no default constructor
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674505/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674505,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/5.0.7,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/5.0.7,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/5.0.7,5.0.7,False,False
674502,2013-10-16T23:47:48Z,2014-11-03T18:05:21Z,,"- Fix - Fixed not writing string quotes when QuoteName is false
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674502/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674502,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/5.0.8,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/5.0.8,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/5.0.8,5.0.8,False,False
674500,2014-02-01T00:49:11Z,2014-11-03T18:04:35Z,,"- New feature - Added support for JSONPath 
- New feature - Added support for serializing F# discriminated unions 
- New feature - Added support for deserializing nested DataTables and arrays in DataTables 
- New feature - Added support for reading multiple pieces of JSON with a JsonReader 
- New feature - Added AllowIntegerValues setting to StringEnumConverter 
- New feature - Added Decimal and DateTimeOffset constructors to JValue 
- New feature - Added support for reading JSON single line comments 
- New feature - Improved number parsing error messages 
- Change - Changed assembly version to 6.0.0.0 
- Change - .NET 4 Portable build targets MonoTouch and MonoDroid in NuGet package 
- Change - .NET 4 Portable build targets WP8 and SL5 instead of WP7 and SL4 
- Removed - DefaultMemberSearchFlags on DefaultContractResolver is obsolete 
- Removed - SerializeObjectAsync, DeserializeObjectAsync, PopulateObjectAsync on JsonConvert are obsolete 
- Fix - Fixed JObject ICustomTypeDescriptor properties returning incorrect value 
- Fix - Fixed error when casting dynamic base64 string to byte array 
- Fix - Fixed EntityKeyMemberConverter not using property name resolve 
- Fix - Fixed serializing JValues with readonly JsonConverters 
- Fix - Fixed formatting override on SerializeObject methods 
- Fix - Fixed error when wrapping an exception in a JsonConverter 
- Fix - Fixed using extension data with a non-default constructor 
- Fix - Fixed Uri serialization roundtripping with Uri.OriginalString 
- Fix - Fixed TypeNameHandling.Auto with JsonSerializer.Serialize inside a JsonConverter
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674500/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674500,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/6.0.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/6.0.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/6.0.1,6.0.1,False,False
674499,2014-04-03T02:05:18Z,2014-11-03T18:04:07Z,,"- New feature - Added support for Windows Phone 8.1
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674499/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674499,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/6.0.2,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/6.0.2,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/6.0.2,6.0.2,False,False
674497,2014-04-27T03:05:22Z,2014-11-03T18:03:33Z,,"- New feature - Added MetadataPropertyHandling
- New feature - Added support for reading MS format JSON dates to ReadAsDateTime
- New feature - Added support for serializing F# lists, sets and maps
- New feature - Added support for XML document type
- Change - Blank XML elements will be written as an empty string instead of null
- Change - JValue with a null value will be written as null instead of empty string
- Change - DateFormatString is now used when reading JSON
- Fix - Fixed deserializing null values with extension data
- Fix - Fixed converting certain XML namespaces to JSON
- Fix - Fixed error with whitespace only JSONPath
- Fix - Fixed property query path that starts with $
- Fix - Fixed array query path with open brace after $
- Fix - Fixed parsing certain JSON with comments into a JObject
- Fix - Fixed bug where matching JSONPath incorrectly raises an error
- Fix - Fixed non-public base class properties being used instead of child class properties
- Fix - Fixed hiding generic properties sometimes not being detected
- Fix - Fixed potential race condition serializing F# objects
- Fix - Fixed schema divisible sometimes incorrectly validating to false
- Fix - Fixed not calling virtual ShouldSerialize methods
- Fix - Fixed invalid cast with DateParseHandling.DateTimeOffset and IsoDateTimeConverter
- Fix - Fixed StringEnumConverter thread safety
- Fix - Fixed using FloatParseHandling.Decimal with XmlNodeConverter
- Fix - Fixed using DateParseHandling.DateTimeOffset with XmlNodeConverter
- Fix - Fixed type name handling when a property already has a base type assigned
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674497/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674497,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/6.0.3,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/6.0.3,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/6.0.3,6.0.3,False,False
674495,2014-08-03T08:28:50Z,2014-11-03T18:02:40Z,,"- New feature - Added Merge to LINQ to JSON 
- New feature - Added JValue.CreateNull and JValue.CreateUndefined 
- New feature - Added Windows Phone 8.1 support to .NET 4.0 portable assembly 
- New feature - Added OverrideCreator to JsonObjectContract 
- New feature - Added support for overriding the creation of interfaces and abstract types 
- New feature - Added support for reading UUID BSON binary values as a Guid 
- New feature - Added MetadataPropertyHandling.Ignore 
- New feature - Improved performance of KeyValuePairConverter 
- New feature - Improved performance when serializing large XML documents 
- Change - Limited integer parsing size to JavaScript integer size 
- Change - Validation that numbers don't end with an invalid character 
- Fix - Fixed JToken.ReadFrom creating a string value for a comment 
- Fix - Fixed relying on Dictionary order when calling parameterized constructors 
- Fix - Fixed writing new lines to use TextWriter.WriteLine 
- Fix - Fixed deserializing non-generic IReadOnlyCollection<T> implementations 
- Fix - Fixed sending HTTP requests when resolving DTD urls in XmlNodeConverter 
- Fix - Fixed populating ignored properties with DefaultValueHandling.IgnoreAndPopulate 
- Fix - Fixed not throwing JsonReaderException when parsing some invalid numbers 
- Fix - Fixed JsonConvert.PopulateObject not setting JsonReader settings 
- Fix - Fixed deserializing JObjects starting with a comment 
- Fix - Fixed using DateParseHandling and FloatParseHandling with DataTable/DataSet 
- Fix - Fixed serializing static fields 
- Fix - Fixed selecting a property after an empty array with a JSON Path query 
- Fix - Fixed error handling when last value in array or object fails 
- Fix - Fixed directly serializing XmlElements 
- Fix - Fixed incorrect NuGet targets on .NET 4.5 portable assembly 
- Fix - Fixed using JTokenEqualityComparer with JProperties that have no value 
- Fix - Fixed MetadataPropertyHandling.ReadAhead bugs
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674495/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674495,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/6.0.4,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/6.0.4,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/6.0.4,6.0.4,False,False
674490,2014-09-06T22:34:07Z,2014-11-03T18:02:04Z,6.0.5,"- New feature - Added support for converting string JValues to enums with JToken.ToObject
- New feature - Added support for creating objects with constructors that have out and ref parameters
- New feature - Improved .NET 4.0 portable assembly performance by using compiled expression reflection
- Fix - Fixed error on Mono versions that don't properly support BigInteger
- Fix - Fixed error in JTokenWriter when disposing after adding a duplicate property
- Fix - Fixed not handling invalid JSON when deserializing with DataTableConverter
- Fix - Fixed error when serializing ObservableCollection<T> in Windows 8 Store apps
- Fix - Fixed not matching some parameters when deserializing via a cosntructor
- Fix - Fixed potential reflection errors by creating making parameterized creators only when needed
- Fix - Fixed deserializing F# unions with out of order properties
- Fix - Fixed camelcase culture bug
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674490/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674490,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/6.0.5,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/6.0.5,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/6.0.5,6.0.5,False,False
674425,2014-10-20T07:18:22Z,2014-11-03T17:44:29Z,6.0.6,"- New feature - Added support for ASP.NET CoreCLR
- New feature - Reduced memory allocations when reading and writing JSON
- New feature - Added support for passing arguments to JsonConverters with JsonConvertAttribute
- New feature - Added JsonConvert.ToString overload that takes a StringEscapeHandling parameter
- Change - Omit fields array for F# discriminated union serialization when there are no fields
- Change - Escape property names in path on readers/writers/tokens when a name contains special characters
- Change - Provide line numbers for end tokens on JTokenReader
- Fix - Fixed parsing in SelectToken when the path has an escaped property followed by an unescaped property
- Fix - Fixed error when deserializing a GUID from certain BSON
- Fix - Fixed null reference error when using a JEnumerable created with its default constructor
- Fix - Fixed line breaks in exception messages to use Environment.NewLine
- Fix - Fixed MetadataTypeAttribute reflection error on ASP.NET CoreCLR
- Fix - Fixed immutable collections reflection error on ASP.NET CoreCLR
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674425/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674425,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/6.0.6,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/6.0.6,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/6.0.6,6.0.6,False,False
674422,2007-09-10T11:01:42Z,2014-11-03T17:38:21Z,,"- Bug fix - Fix for incorrect escaping of single and double quotes in JavaScript strings.
",https://api.github.com/users/JamesNK,303201,JamesNK,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674422/assets,https://api.github.com/repos/JamesNK/Newtonsoft.Json/releases/674422,master,https://api.github.com/repos/JamesNK/Newtonsoft.Json/tarball/1.3.1,https://github.com/JamesNK/Newtonsoft.Json/releases/tag/1.3.1,https://api.github.com/repos/JamesNK/Newtonsoft.Json/zipball/1.3.1,1.3.1,False,False
