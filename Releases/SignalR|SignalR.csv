id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
6284698,2017-05-04T04:03:45Z,2017-05-04T20:53:37Z,2.2.2,"### Bugs Fixed

* WebSocket connections leak ([#3910](https://github.com/SignalR/SignalR/issues/3910))
* Console application using async/await stops receiving after sending ([#3895](https://github.com/SignalR/SignalR/issues/3895))
* The client should reuse HttpClient for negotiate and start requests ([#3829](https://github.com/SignalR/SignalR/issues/3829))
* ForeverFrame not removed correctly when stopping the connection ([#3807](https://github.com/SignalR/SignalR/issues/3807))
* Possible Memory Leak when attempting to Continuously Reconnect ([#3793](https://github.com/SignalR/SignalR/issues/3793))
* Redis script uses textual comparison ([#3767](https://github.com/SignalR/SignalR/issues/3767))
* Race in Redis scaleout when the connection is restored ([#3729](https://github.com/SignalR/SignalR/issues/3729))
* Signalr bower jquery.signalR.min.js missing semicolon in the end ([#3516](https://github.com/SignalR/SignalR/issues/3516))
* Transport connection performance counters are wrong after falling back to long polling ([#3459](https://github.com/SignalR/SignalR/issues/3459))
* With Redis scale-out, once Send() method runs into an error, the stream will never be opened again until Redis is restarted ([#3093](https://github.com/SignalR/SignalR/issues/3093))
* Make scale-out mapping store size configurable ([#3031](https://github.com/SignalR/SignalR/issues/3031))

### Features

* SignalR.exe should discover hubs in .exe files ([#3867](https://github.com/SignalR/SignalR/issues/3867))
* Could not install package 'Microsoft.AspNet.SignalR.Client 2.2.1' to xamarinmac20 ([#3851](https://github.com/SignalR/SignalR/issues/3851))
* Redis Scaleout - Default Db from ConnectionString is ignored ([#3714](https://github.com/SignalR/SignalR/issues/3714))
* Could not load type 'Microsoft.ServiceBus.Messaging.MessageClientEntity' from assembly 'Microsoft.ServiceBus, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. ([#3548](https://github.com/SignalR/SignalR/issues/3548))
",https://api.github.com/users/moozzyk,1438884,moozzyk,https://api.github.com/repos/SignalR/SignalR/releases/6284698/assets,https://api.github.com/repos/SignalR/SignalR/releases/6284698,dev,https://api.github.com/repos/SignalR/SignalR/tarball/2.2.2,https://github.com/SignalR/SignalR/releases/tag/2.2.2,https://api.github.com/repos/SignalR/SignalR/zipball/2.2.2,2.2.2,False,False
3670874,2016-07-13T22:33:37Z,2016-07-18T22:37:08Z,2.2.1,"### Bugs Fixed
- TypeLoadException occurring when using Strongly typed Hub ([#3594](https://github.com/SignalR/SignalR/issues/3594))
- .Net Client in UWP App (Raspberry PI2) throws HttpRequestException ([#3576](https://github.com/SignalR/SignalR/issues/3576))
- UWP client can't connect  ([#3547](https://github.com/SignalR/SignalR/issues/3547))
- SignalR doesn't plays well with .net Native on Windows 10 ([#3529](https://github.com/SignalR/SignalR/issues/3529))
- Fix binary compat issue between 2.1.x and 2.2.0 caused by Hub base class change ([#3489](https://github.com/SignalR/SignalR/issues/3489))
- Redis Backplane failure ([#3436](https://github.com/SignalR/SignalR/issues/3436))
- Cannot install portable NET client package ([#3393](https://github.com/SignalR/SignalR/issues/3393))
- occasional null ref in ServerSentEventsTransport.<OnStart> ([#3376](https://github.com/SignalR/SignalR/issues/3376))
- signalR save promise after disconnection ([#3338](https://github.com/SignalR/SignalR/issues/3338))
- Signalr UnobservedTaskException ([#2960](https://github.com/SignalR/SignalR/issues/2960))
- .Net client throw ArgumentNullException from JToken.FromObject when Invoke hub method with paramater value null ([#1655](https://github.com/SignalR/SignalR/issues/1655))
",https://api.github.com/users/moozzyk,1438884,moozzyk,https://api.github.com/repos/SignalR/SignalR/releases/3670874/assets,https://api.github.com/repos/SignalR/SignalR/releases/3670874,dev,https://api.github.com/repos/SignalR/SignalR/tarball/2.2.1,https://github.com/SignalR/SignalR/releases/tag/2.2.1,https://api.github.com/repos/SignalR/SignalR/zipball/2.2.1,2.2.1,False,False
848884,2014-12-12T03:26:23Z,2015-01-13T20:24:59Z,2.2.0,"### Bugs Fixed
- An unhandled exception in ProcessWebSocketRequestAsync method for request ([#3342](https://github.com/SignalR/SignalR/issues/3342))
- Canceled Tasks returned from Groups.Add and Groups.Remove ([#3337](https://github.com/SignalR/SignalR/issues/3337))
- TypeLoadException when use strongly typed Hub with an inherited interface ([#3311](https://github.com/SignalR/SignalR/issues/3311))
- With Redis scale-out, calling the method Groups.Add(connectionId, groupName).Wait() never completes ([#3240](https://github.com/SignalR/SignalR/issues/3240))
- Stack Overflow Exception version 2.1.1 ([#3228](https://github.com/SignalR/SignalR/issues/3228))
- In .Net client race condition when connection stopped and heartbeat running ([#3212](https://github.com/SignalR/SignalR/issues/3212))
- In .Net client race condition causes ArgumentNullException ([#3211](https://github.com/SignalR/SignalR/issues/3211))
- Remove async/await from code that can run with the sync context ([#3176](https://github.com/SignalR/SignalR/issues/3176))
- Detect blocks/deadlocks in .NET client receive queue and log an error when it occurs ([#3167](https://github.com/SignalR/SignalR/issues/3167))
- Small trace issue in SqlReceiver ([#3147](https://github.com/SignalR/SignalR/issues/3147))
- Nightly Microsoft.AspNet.SignalR.Redis package from dev branch still has old dependency BookSleeve ([#3137](https://github.com/SignalR/SignalR/issues/3137))
- Add a workaround to make sure Redis connection is reconnected in ConnectionRestored event after Redis restart ([#3095](https://github.com/SignalR/SignalR/issues/3095))
- With Redis scale-out, SignalR existing connections will miss some messages after  Redis restart  ([#3091](https://github.com/SignalR/SignalR/issues/3091))
- Issues with large message sizes again (#163) ([#3040](https://github.com/SignalR/SignalR/issues/3040))
- Task for Groups.Add never completes ([#3037](https://github.com/SignalR/SignalR/issues/3037))
- In perfmon instances of SignalR perf counters for full IIS only show like default web site, doesn't show web application instances  ([#3002](https://github.com/SignalR/SignalR/issues/3002))
- Memory leaks in IE/Chrome when use SignalR longPolling ([#2953](https://github.com/SignalR/SignalR/issues/2953))
- .Net client webSockets fallback wait transportConnectTimeout then start next transport  ([#2903](https://github.com/SignalR/SignalR/issues/2903))
- JS client fallback wait transportConnectTimeout then start next transport  ([#2902](https://github.com/SignalR/SignalR/issues/2902))
- Fix references in portable library for Xamarin projects ([#2833](https://github.com/SignalR/SignalR/issues/2833))
- Object Expected Error Line : 1285  onInitialized(); When trying to use signalr(forevrframe) with jQuery UI Dialog ([#2795](https://github.com/SignalR/SignalR/issues/2795))
- signalr.exe ghp doesn't dispay error message about generating hubproxy javascript for server Hub classes ([#2769](https://github.com/SignalR/SignalR/issues/2769))
- MessageBus.Dispose spins on Interlocked.Exchange(ref _gcRunning, 1) == 1 ([#1088](https://github.com/SignalR/SignalR/issues/1088))
- consider updating the log info ""....a connection lost timeout of "" for keepAliveData.timeout ([#1084](https://github.com/SignalR/SignalR/issues/1084))
- update log message for foreverFrame when it is not supported ([#1057](https://github.com/SignalR/SignalR/issues/1057))

### Features
- Change .Catch() to trace to passed in TraceSource ([#3107](https://github.com/SignalR/SignalR/issues/3107))
- Support WebSockets on Windows Phone 8.1/Windows Store 8.1 ([#3027](https://github.com/SignalR/SignalR/issues/3027))
- Update Redis extension to StackExchange.Redis ([#2961](https://github.com/SignalR/SignalR/issues/2961))
",https://api.github.com/users/DamianEdwards,249088,DamianEdwards,https://api.github.com/repos/SignalR/SignalR/releases/848884/assets,https://api.github.com/repos/SignalR/SignalR/releases/848884,dev,https://api.github.com/repos/SignalR/SignalR/tarball/2.2.0,https://github.com/SignalR/SignalR/releases/tag/2.2.0,https://api.github.com/repos/SignalR/SignalR/zipball/2.2.0,2.2.0,False,False
554676,2014-09-09T23:25:05Z,2014-09-12T22:37:13Z,2.1.2,"### Bugs Fixed
- Disable client-side keep alive checking in Long Polling clients by default ([#3259](https://github.com/SignalR/SignalR/issues/3259))
- Hubs are mistakenly identified as plain objects by jQuery 2.x ([#3210](https://github.com/SignalR/SignalR/issues/3210))
- ObservableDbOperation looking for Insert but receiving Update on new events ([#3166](https://github.com/SignalR/SignalR/issues/3166))
- Clients receiving a lot of duplicate messages with SQL scale-out ([#2988](https://github.com/SignalR/SignalR/issues/2988))
",https://api.github.com/users/DamianEdwards,249088,DamianEdwards,https://api.github.com/repos/SignalR/SignalR/releases/554676/assets,https://api.github.com/repos/SignalR/SignalR/releases/554676,dev,https://api.github.com/repos/SignalR/SignalR/tarball/2.1.2,https://github.com/SignalR/SignalR/releases/tag/2.1.2,https://api.github.com/repos/SignalR/SignalR/zipball/2.1.2,2.1.2,False,False
524821,2014-08-19T04:59:21Z,2014-08-29T21:31:48Z,1.2.2,"### Bugs Fixed
- ObservableDbOperation looking for Insert but receiving Update on new events (1.x) ([#3197](https://github.com/SignalR/SignalR/issues/3197))
- Clients receiving a lot of duplicate messages with SQL scale-out (1.x) ([#3196](https://github.com/SignalR/SignalR/issues/3196))
- Port SQL scale-out fix to 1.x ([#2977](https://github.com/SignalR/SignalR/issues/2977))
",https://api.github.com/users/DamianEdwards,249088,DamianEdwards,https://api.github.com/repos/SignalR/SignalR/releases/524821/assets,https://api.github.com/repos/SignalR/SignalR/releases/524821,dev,https://api.github.com/repos/SignalR/SignalR/tarball/1.2.2,https://github.com/SignalR/SignalR/releases/tag/1.2.2,https://api.github.com/repos/SignalR/SignalR/zipball/1.2.2,1.2.2,False,False
449887,2014-07-22T21:49:15Z,2014-07-25T16:18:14Z,2.1.1,"### Bugs Fixed
- /start requests deadlock when the PreSendRequestHeaders event is set ([#3116](https://github.com/SignalR/SignalR/issues/3116))
- ASP.NET Hub.OnDisconnected not called when .NET client disconnects due to Internet connectivity/process killed ([#3115](https://github.com/SignalR/SignalR/issues/3115))
- SignalR 2.1 - JavaScript error: Refused to execute script...because MIME type ('application/json') is not executeable... ([#3110](https://github.com/SignalR/SignalR/issues/3110))
- JS Client - No transport can be initialized if /start takes too long to complete ([#3104](https://github.com/SignalR/SignalR/issues/3104))
- Unexpected lock reentry in HubConnection.ClearInvocationCallback ([#3101](https://github.com/SignalR/SignalR/issues/3101))

### Breaking Changes

#### OnDisconnect parameterless overload removed

In 2.1.0 we added an overload of OnDisconnect on PersistentConnection and Hub that takes a boolean indicating whether the disconnect from the client was due to a timeout or not. In making this change we also changed when the existing overload (without the parameter) was called. These changes together resulted in applications not always being called when a client disconnects in a way they were used to expecting. We're resolving this in 2.1.1 by removing the original overload (the parameterless one). OnDisconnect will now always be called when a client disconnects and the flag passed indicates whether it was due to a timeout or not.
",https://api.github.com/users/DamianEdwards,249088,DamianEdwards,https://api.github.com/repos/SignalR/SignalR/releases/449887/assets,https://api.github.com/repos/SignalR/SignalR/releases/449887,master,https://api.github.com/repos/SignalR/SignalR/tarball/2.1.1,https://github.com/SignalR/SignalR/releases/tag/2.1.1,https://api.github.com/repos/SignalR/SignalR/zipball/2.1.1,2.1.1,False,False
373773,2014-05-21T18:41:06Z,2014-06-13T17:39:14Z,2.1.0,"### Bugs Fixed
- Make HubCallerContext easier to mock for unit testing a Hub ([#3012](https://github.com/SignalR/SignalR/issues/3012))
- SignalR perf counter Connections Reconnected doesn't increase after connection reconnected ([#3004](https://github.com/SignalR/SignalR/issues/3004))
- Change when connection connect events/methods are raised ([#2997](https://github.com/SignalR/SignalR/issues/2997))
- Remove the reconnect message broadcast intended to suppress disconnect events on other servers in scale-out ([#2996](https://github.com/SignalR/SignalR/issues/2996))
- .NET Client Not Compatible With Windows Phone 8.1 ([#2968](https://github.com/SignalR/SignalR/issues/2968))
- JavaScript call to refresh update panel inside the hub client method fails and logs the error ""TypeError: access to strict mode caller function is censored"" in the error console. ([#2964](https://github.com/SignalR/SignalR/issues/2964))
- SqlScaleout: Sql server runs out of worker threads ([#2958](https://github.com/SignalR/SignalR/issues/2958))
- Fix for issue 'Allow for overriding JS json deserializing function' (#1564) does not work in IE9. ([#2945](https://github.com/SignalR/SignalR/issues/2945))
- Server Sent Events: Connection.eventSource is undefined on reconnect ([#2925](https://github.com/SignalR/SignalR/issues/2925))
- Error performance counters get incremented twice for each invocation of a missing method. ([#2859](https://github.com/SignalR/SignalR/issues/2859))
- signalr/hubs should throw an exception with an invalid hub name ([#2705](https://github.com/SignalR/SignalR/issues/2705))
- SignalR v2.0.0-rc1 - get state variable in hub from vb is not working ([#2620](https://github.com/SignalR/SignalR/issues/2620))

### Features
- Add flag to disconnected events/methods on server to indicate if disconnect was client-initiated or due to a timeout ([#2998](https://github.com/SignalR/SignalR/issues/2998))
- Support flowing causation error to disconnect error handler in JS client ([#2757](https://github.com/SignalR/SignalR/issues/2757))
- Add tracing for hub invocations in JS client ([#2754](https://github.com/SignalR/SignalR/issues/2754))
- Support sending same message to multiple users (by username) in a single call ([#2576](https://github.com/SignalR/SignalR/issues/2576))
- Add ability to provide an interface for client methods via Hub<T> ([#2449](https://github.com/SignalR/SignalR/issues/2449))
  - Sample at https://github.com/DamianEdwards/SignalR-2.x-demo/blob/master/SignalR2x/Web/StronglyTypedHubs/StrongHub.cs
- Support reporting progress from hub method invocations ([#2380](https://github.com/SignalR/SignalR/issues/2380))
  - Sample at https://github.com/DamianEdwards/SignalR-2.x-demo/blob/master/SignalR2x/Web/HubProgress/ProgressHub.cs
- Support longPolling transport raise reconnect in JS client and .Net client when network disconnect ([#1781](https://github.com/SignalR/SignalR/issues/1781))

### Breaking Changes

#### OnDisconnect server event semantic change

We've changed what happens when a connection is detected as ""gone"" on the server. In the past, we made efforts to ensure the server-side disconnect events were raised only once, even if a logical connection had actually been alive on more than one server during its life (in the case of a web farm). This involved sending messages between web nodes in the farm which could lead to undue strain on the backplane, especially when the long polling transport was in use (see [#2958](https://github.com/SignalR/SignalR/issues/2958)).

From this version on, the event will always be raised on any server that has seen a connection and then detects it has gone. We've added a new overload ([#2998](https://github.com/SignalR/SignalR/issues/2998)) so that you can handle the cases when the connection stops due to timeout (like if it moves to another server, or loses network connectivity) or due to the stop method being called on the client (aka a graceful close, e.g. when the user closes the browser).

Be sure to factor this change of behavior into your application design.

#### `IHubConnectionContext` changed to `IHubConnectionContext<T>`

To support the new strongly typed client Hubs ([#2449](https://github.com/SignalR/SignalR/issues/2449)) the interfaces `IHubConnectionContext` and `IHubCallerConnectionContext` had to be made generic. To continue using these types with a dynamic client method contract, as in previous versions, just specify the generic type argument as `dynamic`, e.g.

``` C#
IHubConnectionContext<dynamic> context = GlobalHost.ConnectionManager.GetHubContext<MyHub>();
```
",https://api.github.com/users/DamianEdwards,249088,DamianEdwards,https://api.github.com/repos/SignalR/SignalR/releases/373773/assets,https://api.github.com/repos/SignalR/SignalR/releases/373773,release,https://api.github.com/repos/SignalR/SignalR/tarball/2.1.0,https://github.com/SignalR/SignalR/releases/tag/2.1.0,https://api.github.com/repos/SignalR/SignalR/zipball/2.1.0,2.1.0,False,False
244044,2014-03-25T22:15:54Z,2014-03-27T18:00:05Z,2.0.3,"### Bugs Fixed
- SB scale-out still re-try forever for un-recoverable error ConfigurationErrorsException ([#2948](https://github.com/SignalR/SignalR/issues/2948))
- Service Bus scaleout null refs ([#2937](https://github.com/SignalR/SignalR/issues/2937))
- SB scale-out with multiple streams Send failed ""Object reference not set to an instance of an object"" ([#2933](https://github.com/SignalR/SignalR/issues/2933))
- Optimize RedisMessageBus to increase messages throughput ([#2905](https://github.com/SignalR/SignalR/issues/2905))
- Race condition when connection stopped and heartbeat running ([#2897](https://github.com/SignalR/SignalR/issues/2897))
- SignalR 2.0.3 package dependency Microsoft.Owin etc version  ([#2890](https://github.com/SignalR/SignalR/issues/2890))
- JS client foreverFrame doesn't fallback to longPolling but stop when start connection the first time passed 'reconnectWindow' period  ([#2883](https://github.com/SignalR/SignalR/issues/2883))
- .Net Client connection LastActiveAt not re-set when start HeartbeatMonitor ([#2878](https://github.com/SignalR/SignalR/issues/2878))
- JS client script error: ""Unable to get property 'pingInterval' of undefined or null reference"" ([#2865](https://github.com/SignalR/SignalR/issues/2865))
- Potential bug setting HubConnection proxy ([#2856](https://github.com/SignalR/SignalR/issues/2856))
- JS client connection.transportConnectTimeout will increase value every time connection is started ([#2823](https://github.com/SignalR/SignalR/issues/2823))
- SignalR + ServiceBus calls to clients hitting Microsoft.ServiceBus.Messaging.ServerBusyException ([#2803](https://github.com/SignalR/SignalR/issues/2803))
- Connection ""freezes"" when an exception is thrown from delayed expression returned from Hub method ([#2800](https://github.com/SignalR/SignalR/issues/2800))
- Strings containing dates are malformed when sending from .Net client to Hub  ([#2796](https://github.com/SignalR/SignalR/issues/2796))
- WebSocket end of message bit is always on it's own continuation frame ([#2777](https://github.com/SignalR/SignalR/issues/2777))
- SignalR - Large Messages are not being passed from the client to server ([#2774](https://github.com/SignalR/SignalR/issues/2774))
- SignalR SB scale-out, the first connection returns error ""The stream is not open..."" ([#2767](https://github.com/SignalR/SignalR/issues/2767))
- Context.User is Null on [Authorized] SignalRHub Task OnDisconnected  ([#2753](https://github.com/SignalR/SignalR/issues/2753))
",https://api.github.com/users/DamianEdwards,249088,DamianEdwards,https://api.github.com/repos/SignalR/SignalR/releases/244044/assets,https://api.github.com/repos/SignalR/SignalR/releases/244044,release,https://api.github.com/repos/SignalR/SignalR/tarball/2.0.3,https://github.com/SignalR/SignalR/releases/tag/2.0.3,https://api.github.com/repos/SignalR/SignalR/zipball/2.0.3,2.0.3,False,False
189289,2014-02-10T19:29:13Z,2014-02-17T18:24:03Z,1.2.1,"### Bugs Fixed
- on JS client, restarting a connection after disconnected, with longPolling transport it send poll loop without timeout Id ([#2840](https://github.com/SignalR/SignalR/issues/2840))
- Restarting the connection after going offline fails in js client ([#2824](https://github.com/SignalR/SignalR/issues/2824))
",https://api.github.com/users/DamianEdwards,249088,DamianEdwards,https://api.github.com/repos/SignalR/SignalR/releases/189289/assets,https://api.github.com/repos/SignalR/SignalR/releases/189289,release1.x,https://api.github.com/repos/SignalR/SignalR/tarball/1.2.1,https://github.com/SignalR/SignalR/releases/tag/1.2.1,https://api.github.com/repos/SignalR/SignalR/zipball/1.2.1,1.2.1,False,False
160513,2014-01-23T06:49:57Z,2014-01-24T22:43:54Z,2.0.2,"### Bugs Fixed
- Change default Service Bus topic count to 5 ([#2797](https://github.com/SignalR/SignalR/issues/2797))
- Restarting the connection after going offline fails in js client ([#2778](https://github.com/SignalR/SignalR/issues/2778))
- Setting jsonp with cross domain breaks websockets on cors-enabled browsers ([#2768](https://github.com/SignalR/SignalR/issues/2768))
- configurePingInterval does not properly check if there's an active pingIntervalId ([#2739](https://github.com/SignalR/SignalR/issues/2739))
- .NET Client - Connection Bugs - Release 2.0.0 ([#2738](https://github.com/SignalR/SignalR/issues/2738))
- ReflectedHubDescriptorProvider swallows exception ([#2712](https://github.com/SignalR/SignalR/issues/2712))
- signalr.exe crashes if a web application references certain assemblies ([#2711](https://github.com/SignalR/SignalR/issues/2711))
- Connection sometimes either takes many attempts to connect or dies immediately. ([#2704](https://github.com/SignalR/SignalR/issues/2704))
- JS Client - Hub Invocation callbacks are not cleared on failed ajax sends. ([#2693](https://github.com/SignalR/SignalR/issues/2693))
- Fix to protect against potential JArray foreach issue ([#2691](https://github.com/SignalR/SignalR/issues/2691))
- An item with the same key has already been added. ([#2687](https://github.com/SignalR/SignalR/issues/2687))
- Connection.Start in the .NET client re-initializes state variables regardless of the connection status ([#2675](https://github.com/SignalR/SignalR/issues/2675))
- awaiting a HubProxy.Invoke method makes the HubConnection.Dispose take 30 seconds to dispose ([#2653](https://github.com/SignalR/SignalR/issues/2653))
- Safari (IOS and osx) crashes when connected to websockets ([#2650](https://github.com/SignalR/SignalR/issues/2650))
- SB scale-out:  with invalid format SB connection string, request for signalr/hubs pending forever ([#2602](https://github.com/SignalR/SignalR/issues/2602))
- Duplicate call to onReceived when a message is emitted during OnConnected ([#2595](https://github.com/SignalR/SignalR/issues/2595))
- WebSockets can attempt to send when in the ""reconnecting"" state, resulting in an exception. ([#2582](https://github.com/SignalR/SignalR/issues/2582))
- WebSockets transport pings the wrong server URL. ([#2569](https://github.com/SignalR/SignalR/issues/2569))
- Ping requests from JS client should not add connectionData query string value ([#2568](https://github.com/SignalR/SignalR/issues/2568))
- Protocol-relative connection url improperly detected as same-origin ([#2557](https://github.com/SignalR/SignalR/issues/2557))
- In JS client disconnected event connection state is still connected ([#2554](https://github.com/SignalR/SignalR/issues/2554))
- in ServiceBus scale-out, exception for unresolved endpoint is not handled and it will crash the process  ([#2542](https://github.com/SignalR/SignalR/issues/2542))
- When ServiceBus scale-out use invalid connection string, it will crash the process ([#2541](https://github.com/SignalR/SignalR/issues/2541))
- calling connection.Stop() in a callback causes a deadlock on the client side ([#2535](https://github.com/SignalR/SignalR/issues/2535))
- C# Client - Always check for valid reconnect window before making a request in clients ([#2528](https://github.com/SignalR/SignalR/issues/2528))
- JS Client - Always check for valid reconnect window before making a request in clients ([#2484](https://github.com/SignalR/SignalR/issues/2484))
- Microsoft Platform Ready Test Tool complains that the dlls do not have a valid Product Name property ([#2471](https://github.com/SignalR/SignalR/issues/2471))
- Flow network response information to ""parse error"" use cases. ([#2469](https://github.com/SignalR/SignalR/issues/2469))
- Use unique connection groups in .NET 4 client per DefaultHttpClient instance ([#2452](https://github.com/SignalR/SignalR/issues/2452))
- Swallow some exceptions on the server so they don't get logged ([#2450](https://github.com/SignalR/SignalR/issues/2450))
- Scaleout SQL Server should emit error trace when failing to connect ([#2441](https://github.com/SignalR/SignalR/issues/2441))
- Unobserved exception in .NET client ([#2405](https://github.com/SignalR/SignalR/issues/2405))
- JS client attempts to fallback to other transports if WebSockets is exclusively specified even if server doesn't support WebSockets ([#2294](https://github.com/SignalR/SignalR/issues/2294))
- With ServiceBus scale-out, when call UseServiceBus at app_start return error like time out for connection, then all clients signalr/hubs request will return that error ([#2091](https://github.com/SignalR/SignalR/issues/2091))
- SCRIPT70: Permission denied in IE on reconnect ([#1963](https://github.com/SignalR/SignalR/issues/1963))
",https://api.github.com/users/DamianEdwards,249088,DamianEdwards,https://api.github.com/repos/SignalR/SignalR/releases/160513/assets,https://api.github.com/repos/SignalR/SignalR/releases/160513,dev,https://api.github.com/repos/SignalR/SignalR/tarball/2.0.2,https://github.com/SignalR/SignalR/releases/tag/2.0.2,https://api.github.com/repos/SignalR/SignalR/zipball/2.0.2,2.0.2,False,False
127867,2013-12-11T11:06:29Z,2013-12-20T05:40:18Z,1.2.0,"### Features
- Allow for overriding JS json deserializing function ([#2654](https://github.com/SignalR/SignalR/issues/2654))

### Bugs Fixed
- SignalR ServiceBus 1.2 package dependency WindowsAzure.ServiceBus should not >=2.0.1 ([#2761](https://github.com/SignalR/SignalR/issues/2761))
- JS Client - Hub Invocation callbacks are not cleared on failed ajax sends. ([#2694](https://github.com/SignalR/SignalR/issues/2694))
- Dispatch connection message received callbacks to new thread in .NET client ([#2684](https://github.com/SignalR/SignalR/issues/2684))
- Connection.Start in the .NET client re-initializes state variables regardless of the connection status ([#2683](https://github.com/SignalR/SignalR/issues/2683))
- Protocol-relative connection url improperly detected as same-origin ([#2674](https://github.com/SignalR/SignalR/issues/2674))
- Send an init payload in websockets ([#2637](https://github.com/SignalR/SignalR/issues/2637))
- JS client in disconnected event connection state is still connected ([#2634](https://github.com/SignalR/SignalR/issues/2634))
- C# Client - Always check for valid reconnect window before making a request in clients ([#2629](https://github.com/SignalR/SignalR/issues/2629))
- SB scale-out:  with invalid format SB connection string, request for signalr/hubs pending forever ([#2628](https://github.com/SignalR/SignalR/issues/2628))
- start-stop-start long polling results on a stream of poll requests ([#2601](https://github.com/SignalR/SignalR/issues/2601))
- WebSockets transport pings the wrong server URL. ([#2570](https://github.com/SignalR/SignalR/issues/2570))
- When change from using scale-out to not use scale-out, cursors value could change unexpectedly which cause group not working anymore ([#2531](https://github.com/SignalR/SignalR/issues/2531))
- With ServiceBus scale-out, when call UseServiceBus at app_start return error like time out for connection, then all clients signalr/hubs request will return that error ([#2524](https://github.com/SignalR/SignalR/issues/2524))
- Swallow some exceptions on the server so they don't get logged ([#2522](https://github.com/SignalR/SignalR/issues/2522))
- Use unique connection groups in .NET 4 client per DefaultHttpClient instance ([#2521](https://github.com/SignalR/SignalR/issues/2521))
- Microsoft Platform Ready Test Tool complains that the dlls do not have a valid Product Name property ([#2520](https://github.com/SignalR/SignalR/issues/2520))
- JS client immediately start->stop->start connection, the first deferred.done is also triggered  ([#2519](https://github.com/SignalR/SignalR/issues/2519))
- Scaleout - ServiceBus: No tracing with incorrect connection string ([#2518](https://github.com/SignalR/SignalR/issues/2518))
- Closing Firefox/Opera tab does not trigger OnDisconnected event ([#2517](https://github.com/SignalR/SignalR/issues/2517))
- Refactor websocket handler to reduce errors ([#2515](https://github.com/SignalR/SignalR/issues/2515))
- Improve logging to show when no hub subscriptions are made. ([#2514](https://github.com/SignalR/SignalR/issues/2514))
- Always check for valid reconnect window before making a request in clients ([#2513](https://github.com/SignalR/SignalR/issues/2513))
- Set the crossdomain flag for cors ajax request ([#2512](https://github.com/SignalR/SignalR/issues/2512))
- JS client with $.ajaxSetup userDefined setting e.g. { processData: false } which can cause SignalR ajaxSend work unexpectedly ([#2511](https://github.com/SignalR/SignalR/issues/2511))
- Reconnect does not work with Chrome/serverSentEvents transport when server disappears/reappears ([#2509](https://github.com/SignalR/SignalR/issues/2509))
- SCRIPT70: Permission denied in IE on reconnect ([#2508](https://github.com/SignalR/SignalR/issues/2508))
- The user identity cannot change during an active SignalR connection ([#2507](https://github.com/SignalR/SignalR/issues/2507))
- Hub calls should fail if request's response is 3xx redirect ([#2506](https://github.com/SignalR/SignalR/issues/2506))
- Update Header in the .Net client even if connection is connected ([#2504](https://github.com/SignalR/SignalR/issues/2504))
- Failing to connect when IIS enables both Anonymous and Basic ([#2503](https://github.com/SignalR/SignalR/issues/2503))
- Don't capture the execution context when registering cancellation token callbacks. ([#2502](https://github.com/SignalR/SignalR/issues/2502))
- JavaScript Client does not cause OnReconnected event to fire when using longPolling transport ([#2501](https://github.com/SignalR/SignalR/issues/2501))
- in JS client when transport fallback OnConnected event in server could get called 2 times for same connection id ([#2500](https://github.com/SignalR/SignalR/issues/2500))
- Use unique connection groups in .NET 4 client for long running and short running requests ([#2499](https://github.com/SignalR/SignalR/issues/2499))
- when server appdomain restart, client reconnect with previous group token in querystring, sometimes the group is not added in server ([#2498](https://github.com/SignalR/SignalR/issues/2498))
- WebSocket message limit should only apply to server logic ([#2495](https://github.com/SignalR/SignalR/issues/2495))
- JS client foreverFrame run into script error : Unable to get property 'contentWindow' of undefined or null reference  ([#2494](https://github.com/SignalR/SignalR/issues/2494))
- longPolling does not trigger start().fail when authorization fails ([#2493](https://github.com/SignalR/SignalR/issues/2493))
- SignalR intermittently stalls (MessageBroker workers all busy) ([#2492](https://github.com/SignalR/SignalR/issues/2492))
- Latest firefox not firing clean disconnect on browser refresh ([#2489](https://github.com/SignalR/SignalR/issues/2489))
- Have PingInterval stop the connection on 401's and 403's. ([#2488](https://github.com/SignalR/SignalR/issues/2488))
- Improve logging on the JS client ([#2487](https://github.com/SignalR/SignalR/issues/2487))
- JS client fails in IE8 due to use of ""undefined"" keyword ([#2486](https://github.com/SignalR/SignalR/issues/2486))
- Bug: Persistent Connection fails with IIS8 on Android Stock Browser ([#2485](https://github.com/SignalR/SignalR/issues/2485))
- Memory leak in SignalR 1.1 on .NET 4.0 on self host ([#2413](https://github.com/SignalR/SignalR/issues/2413))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/127867/assets,https://api.github.com/repos/SignalR/SignalR/releases/127867,master,https://api.github.com/repos/SignalR/SignalR/tarball/1.2.0,https://github.com/SignalR/SignalR/releases/tag/1.2.0,https://api.github.com/repos/SignalR/SignalR/zipball/1.2.0,1.2.0,False,False
117980,2013-10-22T21:30:54Z,2013-12-10T18:20:00Z,1.1.4,"## Important Security Fix

Fix for [MS13-103](http://technet.microsoft.com/en-us/security/bulletin/ms13-103)

### Bugs Fixed
- Server Sent Events transport throws an exception in JS client when trying to log ([#2538](https://github.com/SignalR/SignalR/issues/2538))
- Add .NET servicing attribute to all assemblies ([#2516](https://github.com/SignalR/SignalR/issues/2516))
- Performance problem using long polling with many clients ([#2505](https://github.com/SignalR/SignalR/issues/2505))

### Commits
- Made some changes to better abstract BufferTextWriter. ([33fa85a6af](https://github.com/SignalR/SignalR/commit/33fa85a6af3e8196f1fcd2811c711ef9fceb5ad2))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/117980/assets,https://api.github.com/repos/SignalR/SignalR/releases/117980,dev,https://api.github.com/repos/SignalR/SignalR/tarball/1.1.4,https://github.com/SignalR/SignalR/releases/tag/1.1.4,https://api.github.com/repos/SignalR/SignalR/zipball/1.1.4,1.1.4,False,False
117973,2013-10-23T02:26:51Z,2013-12-10T18:11:18Z,2.0.1,"## Important Security Fix

Fix for [MS13-103](http://technet.microsoft.com/en-us/security/bulletin/ms13-103)

### Commits
- Made some changes to better abstract BufferTextWriter. ([bc9412bcab](https://github.com/SignalR/SignalR/commit/bc9412bcab0f5ef097c7dc919e3ea1b37fc8718c))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/117973/assets,https://api.github.com/repos/SignalR/SignalR/releases/117973,dev,https://api.github.com/repos/SignalR/SignalR/tarball/2.0.1,https://github.com/SignalR/SignalR/releases/tag/2.0.1,https://api.github.com/repos/SignalR/SignalR/zipball/2.0.1,2.0.1,False,False
39546,2013-08-29T19:33:28Z,2013-09-20T19:05:51Z,2.0.0,"## Overview

### Ability to send to a User

This feature allows users to specify what the userId is based on an IRequest via a new interface IUserIdProvider:

``` C#
public interface IUserIdProvider
{
    string GetUserId(IRequest request);
}
```

By default there will be an implementation that uses the user's IPrincipal.Identity.Name as the user name. 

In hubs, you'll be able to send messages to these users via a new API:

``` C#
public class MyHub : Hub
{
    public void Send(string userId, string message)
    {
        Clients.User(userId).send(message);
    }
}
```

### Better Error handling support

Users can now throw HubException from any hub invocation. The constructor of the HubException can take a string message and an object extra error data. SignalR will auto-serialize the exception and send it to the client where it will be used to reject/fail the hub method invocation.

The show detailed hub exceptions setting has no bearing on HubException being sent back to the client or not; it always is.

Server

``` C#
public class MyHub : Hub
{
    public void Send(string message)
    {
        if(message.Contains(""<script>""))
        {
            throw new HubException(""This message will flow to the client"", new { user = Context.User.Identity.Name, message = message });
        }

        Clients.All.send(message);
    }
}
```

JS Client

``` JavaScript

myHub.server.send(""<script>"")
            .fail(function (e) {
                if (e.source === 'HubException') {
                    console.log(e.message + ' : ' + e.data.user);
                }
            });
```

.NET Client

``` C#
try
{
    await myHub.Invoke(""Send"", ""<script>"");
}
catch(HubException ex)
{
    Conosle.WriteLine(ex.Message);
}
```

### Features
- Add ability to send a message to a ""user"" ([#2401](https://github.com/SignalR/SignalR/issues/2401))
- Add HubException that always flows back to hub clients ([#2376](https://github.com/SignalR/SignalR/issues/2376))
- Allow easy filtering of exception in the Hub Pipeline Module ([#1882](https://github.com/SignalR/SignalR/issues/1882))

### Bugs Fixed
- Add .NET servicing attribute to all assemblies ([#2444](https://github.com/SignalR/SignalR/issues/2444))
- typo in Abort connection log message ([#2404](https://github.com/SignalR/SignalR/issues/2404))
- Closing Firefox/Opera tab does not trigger OnDisconnected event ([#2400](https://github.com/SignalR/SignalR/issues/2400))
- Fix description and dependencies of nuget package SignalR.SelfHost ([#2384](https://github.com/SignalR/SignalR/issues/2384))
- Update README files for WebHost and SelfHost ([#2383](https://github.com/SignalR/SignalR/issues/2383))
- GlobalHost.Configuration.XX should display their default value on Intellisense ([#2370](https://github.com/SignalR/SignalR/issues/2370))
- Self-hosted SignalR client calls fail after start.done() for a short duration ([#2358](https://github.com/SignalR/SignalR/issues/2358))
- DebugTextWriter on Portable causes each character to be written on its own line ([#2321](https://github.com/SignalR/SignalR/issues/2321))
- 2.0.0-beta2 - takes 2 minutes for client to call server ([#2306](https://github.com/SignalR/SignalR/issues/2306))
- Version SignalR 2.0.0-beta2 Could not load type... error! ([#2242](https://github.com/SignalR/SignalR/issues/2242))
- Scaleout - ServiceBus: No tracing with incorrect connection string ([#2211](https://github.com/SignalR/SignalR/issues/2211))
- JS client immediately start->stop->start connection, the first deferred.done is also triggered  ([#2189](https://github.com/SignalR/SignalR/issues/2189))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/39546/assets,https://api.github.com/repos/SignalR/SignalR/releases/39546,master,https://api.github.com/repos/SignalR/SignalR/tarball/2.0.0,https://github.com/SignalR/SignalR/releases/tag/2.0.0,https://api.github.com/repos/SignalR/SignalR/zipball/2.0.0,2.0.0,False,False
28673,2013-08-02T03:16:25Z,2013-08-23T20:00:15Z,2.0.0-rc1,"## Overview

### Renamed OWIN methods

To be more compatible with OWIN standards we've renamed MapHubs and MapConnection to MapSignalR. This gives you a single entry point for configuring SignalR into the OWIN pipeline. We've also introduced RunSignalR for more advanced scenarios (there's an example in the cross domain document).

**Before**

``` C#
using Microsoft.Owin;
using Owin;

namespace MyWebApplication
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // Map all hubs to ""/signalr""
            app.MapHubs();

            // Map the Echo PersistentConnection to ""/echo""
            app.MapConnection<EchoConnection>(""/echo"");
        }
    }
}
```

**After**

``` C#
using Microsoft.Owin;
using Owin;

namespace MyWebApplication
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // Map all hubs to ""/signalr""
            app.MapSignalR();

            // Map the Echo PersistentConnection to ""/echo""
            app.MapSignalR<EchoConnection>(""/echo"");
        }
    }
}
```

### Cross domain support

In SignalR 1.x cross domain requests were controlled by a single EnableCrossDomain flag. This flag controlled both JSONP and [CORS](http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing) requests. For greater fleixibility, we've removed all CORS support from SignalR and have made new OWIN middleware available to support these scenarios. To add support for CORS requests, install [Microsoft.Owin.Cors](http://www.nuget.org/packages/Microsoft.Owin.Cors) and call UseCors before your SignalR middleware:

**Before**

``` C#
using Microsoft.AspNet.SignalR;
using Microsoft.Owin.Cors;
using Owin;

namespace MyWebApplication
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            app.MapHubs(new HubConfiguration { EnableCrossDomain = true });
        }
    }
}
```

**After**

``` C#
using Microsoft.AspNet.SignalR;
using Microsoft.Owin.Cors;
using Owin;

namespace MyWebApplication
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // Branch the pipeline here for requests that start with ""/signalr""
            app.Map(""/signalr"", map =>
            {
                // Setup the cors middleware to run before SignalR.
                // By default this will allow all origins. You can 
                // configure the set of origins and/or http verbs by
                // providing a cors options with a different policy.
                map.UseCors(CorsOptions.AllowAll);

                var hubConfiguration = new HubConfiguration 
                {
                    // You can enable JSONP by uncommenting line below.
                    // JSONP requests are insecure but some older browsers (and some
                    // versions of IE) require JSONP to work cross domain
                    // EnableJSONP = true
                };

                // Run the SignalR pipeline. We're not using MapSignalR
                // since this branch is already runs under the ""/signalr""
                // path.
                map.RunSignalR(hubConfiguration);
            });
        }
    }
}
```

The new CORS middleware also allows you to specify a CorsPolicy which lets you lock down which origins you want to allow requests from.

JSONP is now a separate flag on ConnectionConfiguration and HubConfiguration and can be enabled if there is a need to support older browsers (and some versions of IE). 

### Sending a single message to multiple clients and groups

You can now send to multiple groups or multiple connections easily and efficiently.

**Persistent Connection**

``` C#
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNet.SignalR;

namespace MyApplication
{
    public class ChatConnection : PersistentConnection
    {
        protected override Task OnReceived(IRequest request, string connectionId, string data)
        {
            IList<string> connectionIds = DB.GetConnections(request.User.Identity.Name);

            return Connection.Send(connectionIds, data);
        }
    }
}
```

**Hubs**

``` C#
using System;
using System.Collections.Generic;
using Microsoft.AspNet.SignalR;

namespace MyApplication
{
    public class Chat : Hub
    {
        public void Send(string message)
        {
            IList<string> connectionIds = DB.GetConnections(Context.User.Identity.Name);
            Clients.Clients(connectionIds).send(message);
        }
    }
}
```

### Easier unit testing of Hubs

We've introduced an interface IHubCallerConnectionContext on Hubs that makes it easier to mock client side invocations. Here's an example using xunit and Moq.

``` C#
[Fact]
public void HubsAreMockableViaDynamic()
{
    bool sendCalled = false;
    var hub = new MyHub();
    var mockClients = new Mock<IHubCallerConnectionContext>();

    hub.Clients = mockClients.Object;

    dynamic all = new ExpandoObject();
    all.send = new Action<string>(message =>
    {
        sendCalled = true;
    });

    mockClients.Setup(m => m.All).Returns((ExpandoObject)all);
    hub.Send(""foo"");

    Assert.True(sendCalled);
}

[Fact]
public void HubsAreMockableViaType()
{
    var hub = new MyHub();
    var mockClients = new Mock<IHubCallerConnectionContext>();
    var all = new Mock<IClientContract>();

    hub.Clients = mockClients.Object;
    all.Setup(m => m.send(It.IsAny<string>())).Verifiable();
    mockClients.Setup(m => m.All).Returns(all.Object);
    hub.Send(""foo"");

    all.VerifyAll();
}

public interface IClientContract
{
    void send(string message);
}
```

### JavaScript error handling

All JavaScript error handling callbacks flow JavaScript error objects instead of raw strings. This allows us to flow richer information to your error handlers. You can get the inner exception from the source property of the error. 

``` JavaScript
connection.start().fail(function(e) {
    console.log('The error is: ' + e.message);
});
```

### Features
- Add EnableJSONP flag to ConnectionConfiguration ([#2328](https://github.com/SignalR/SignalR/issues/2328))
- Using the host-provided ""host.TraceOutput"" writer on OWIN hosts ([#2260](https://github.com/SignalR/SignalR/issues/2260))
- Create advanced CORS middleware for specific CORS policy support ([#2072](https://github.com/SignalR/SignalR/issues/2072))
- Make it easier (or possible) to mock Clients.Group, Clients.OthersInGroup, etc ([#1899](https://github.com/SignalR/SignalR/issues/1899))
- Create method Client(string array) in IHubConnectionContext / HubContext ([#1789](https://github.com/SignalR/SignalR/issues/1789))
- Unable to send complex datatype from JS using PersistentConnection ([#327](https://github.com/SignalR/SignalR/issues/327))

### Bugs Fixed
- JS client fails in IE8 due to use of ""undefined"" keyword ([#2377](https://github.com/SignalR/SignalR/issues/2377))
- Improve logging on the JS client ([#2366](https://github.com/SignalR/SignalR/issues/2366))
- Have PingInterval stop the connection on 401's and 403's. ([#2360](https://github.com/SignalR/SignalR/issues/2360))
- Latest firefox not firing clean disconnect on browser refresh ([#2357](https://github.com/SignalR/SignalR/issues/2357))
- JS client longPolling not raise reconnected event for reconnect when server process stop and re-start ([#2353](https://github.com/SignalR/SignalR/issues/2353))
- JS client should pass an error object to connection.error handlers ([#2345](https://github.com/SignalR/SignalR/issues/2345))
- Aborting the connection while negotiating should reject the deferred ([#2340](https://github.com/SignalR/SignalR/issues/2340))
- Consider removing the parameter excludeConnectionIds for API that connection send to specified connecitonId ([#2330](https://github.com/SignalR/SignalR/issues/2330))
- Reconnect fires on .NET client after connection timeout  ([#2323](https://github.com/SignalR/SignalR/issues/2323))
- JS Client OnError should be invoked with non-empty error messages ([#2317](https://github.com/SignalR/SignalR/issues/2317))
- SignalR intermittently stalls (MessageBroker workers all busy) ([#2302](https://github.com/SignalR/SignalR/issues/2302))
- Make our self host depend on owin self host package ([#2291](https://github.com/SignalR/SignalR/issues/2291))
- longPolling does not trigger start().fail when authorization fails ([#2288](https://github.com/SignalR/SignalR/issues/2288))
- Hub invocation callbacks are not cleaned up in C# client if no response is received causing a memory leak ([#2273](https://github.com/SignalR/SignalR/issues/2273))
- Hub invocation callbacks are not cleaned up in JS client if no response is received causing a memory leak ([#2271](https://github.com/SignalR/SignalR/issues/2271))
- JS client foreverFrame run into script error : Unable to get property 'contentWindow' of undefined or null reference  ([#2249](https://github.com/SignalR/SignalR/issues/2249))
- WebSocket message limit should only apply to server logic ([#2247](https://github.com/SignalR/SignalR/issues/2247))
- Expose underlying owin headers, form and query string via new abstractions on IRequest ([#2243](https://github.com/SignalR/SignalR/issues/2243))
- JS Client - Window unload is deprecated as of jQuery 1.8 ([#2240](https://github.com/SignalR/SignalR/issues/2240))
- Have long and short running HttpClients use different connection groups ([#2227](https://github.com/SignalR/SignalR/issues/2227))
- Make HttpClientException.ToString more useful ([#2224](https://github.com/SignalR/SignalR/issues/2224))
- C# Client - WebSockets transport shifts into Connected state when exception thrown in hubs OnConnected ([#2219](https://github.com/SignalR/SignalR/issues/2219))
- When the app domain restarts, and the client reconnects with the previous group token in querystring, sometimes the group is not added on the server ([#2207](https://github.com/SignalR/SignalR/issues/2207))
- Use unique connection groups in .NET 4 client for long running and short running requests ([#2204](https://github.com/SignalR/SignalR/issues/2204))
- Relax conditions under which errors are thrown for invoking callback methods on the client ([#2203](https://github.com/SignalR/SignalR/issues/2203))
- In JS client when transport falls back, OnConnected can be called twice for same connection id ([#2195](https://github.com/SignalR/SignalR/issues/2195))
- .NET client Stop() takes 30 secs to complete ([#2191](https://github.com/SignalR/SignalR/issues/2191))
- JavaScript Client does not cause OnReconnected event to fire when using longPolling transport ([#2188](https://github.com/SignalR/SignalR/issues/2188))
- When scaleout backplane is not up, .Net client webSockets connection becomes connected after start ([#2186](https://github.com/SignalR/SignalR/issues/2186))
- Remove portable .NET http client and use in box version for .NET 4.5 ([#2177](https://github.com/SignalR/SignalR/issues/2177))
- Don't capture the execution context when registering cancellation token callbacks. ([#2167](https://github.com/SignalR/SignalR/issues/2167))
- Failing to connect when IIS enables both Anonymous and Basic ([#2145](https://github.com/SignalR/SignalR/issues/2145))
- Update Header in the .Net client even if connection is connected ([#2142](https://github.com/SignalR/SignalR/issues/2142))
- Performance problem using long polling with many clients ([#2125](https://github.com/SignalR/SignalR/issues/2125))
- Hub calls should fail if request's response is 3xx redirect ([#2106](https://github.com/SignalR/SignalR/issues/2106))
- The user identity cannot change during an active SignalR connection ([#1998](https://github.com/SignalR/SignalR/issues/1998))
- Reconnect does not work with Chrome/serverSentEvents transport when server disappears/reappears ([#1946](https://github.com/SignalR/SignalR/issues/1946))
- Possible confusion in SignalR.Client.Transports.AutoTransport when overriding the default transport order ([#1884](https://github.com/SignalR/SignalR/issues/1884))
- JS client with $.ajaxSetup can cause SignalR ajaxSend work unexpectedly ([#1773](https://github.com/SignalR/SignalR/issues/1773))
- Set the crossdomain flag for cors ajax request ([#1735](https://github.com/SignalR/SignalR/issues/1735))
- Reconnect can be raised after Disconnect for websocket connections ([#1231](https://github.com/SignalR/SignalR/issues/1231))
- Improve logging to show when no hub subscriptions are made. ([#1151](https://github.com/SignalR/SignalR/issues/1151))
- With several connections connected, after server restart and clients reconnected, sometimes the connections can't receive message however still can send message ([#1124](https://github.com/SignalR/SignalR/issues/1124))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/28673/assets,https://api.github.com/repos/SignalR/SignalR/releases/28673,master,https://api.github.com/repos/SignalR/SignalR/tarball/2.0.0rc,https://github.com/SignalR/SignalR/releases/tag/2.0.0rc,https://api.github.com/repos/SignalR/SignalR/zipball/2.0.0rc,2.0.0rc,False,True
21582,2013-01-12T01:58:36Z,2013-08-06T06:47:01Z,1.0rc2,"### Notable Commits
- Removed checks for the GAC and dynamic assemblies. ([2cb4491fc6](https://github.com/SignalR/SignalR/commit/2cb4491fc647c9816896093b394baf4eaa33df67))
- Modified KeepAlive to be an integer instead of a TimeSpan. ([a27f41f327](https://github.com/SignalR/SignalR/commit/a27f41f3271d67ce08fb6e82741d77e637bf7753))
- Added total topics performance counter. ([ece78b804c](https://github.com/SignalR/SignalR/commit/ece78b804cf44a7348560d403282e77832ae9164))
- Changing default message size to 1000. ([88f7134b8e](https://github.com/SignalR/SignalR/commit/88f7134b8e0a80758dc763116b5f25b36d977551))
- Exposed GetHttpContext extension method from SystemWeb assembly. ([6ea4b20e87](https://github.com/SignalR/SignalR/commit/6ea4b20e872d8116113791c15a52dbda68d27b07))
- Remove ServerVariables from IRequest. ([7f4969c6a8](https://github.com/SignalR/SignalR/commit/7f4969c6a8fb32b4c1216efec9d44550c5171f02))
- Fix some issues with SignalR's owin request impl on mono. ([b5c05bc6bf](https://github.com/SignalR/SignalR/commit/b5c05bc6bfee3ed590633a8f71c9a3e8038ab034))

### Features
- Added support for windows phone 8.
- Add websocket support for the .NET client. ([#985](https://github.com/SignalR/SignalR/issues/985))
- Ability to prevent auto generated Javascript proxies. ([#978](https://github.com/SignalR/SignalR/issues/978))
- Remove the Mode parameter from AuthorizeAttribute. ([#956](https://github.com/SignalR/SignalR/issues/956))

### Breaking Changes
- Moved several types into different namespaces. ([524e606e7f](https://github.com/SignalR/SignalR/commit/524e606e7f9f18e8a7b40d62d590c904a94eb30e))
- MapHubs and MapConnection no longer take route parameters. They are just prefixes. ([b7b1371a2a](https://github.com/SignalR/SignalR/commit/b7b1371a2aa0d002ff33138bb0d20115c7f49da6))

### Bugs Fixed
- Validate that connection IDs are in correct format in PersistentConnection on all requests. ([#1298](https://github.com/SignalR/SignalR/issues/1298))
- Remove ""Async"" from all member names. ([#1276](https://github.com/SignalR/SignalR/issues/1276))
- WebSocket transport: Unclean disconnects are being treated as clean disconnects. ([#1254](https://github.com/SignalR/SignalR/issues/1254))
- JS client longPolling can't reconnect when server process restarts except after the first rebuild. ([#1246](https://github.com/SignalR/SignalR/issues/1246))
- Registry exception. ([#1244](https://github.com/SignalR/SignalR/issues/1244))
- JS Client: LongPolling OnConnected message doesn't make it to client. ([#1241](https://github.com/SignalR/SignalR/issues/1241))
- In JS client, Group names are not encoded in the querystring when a transport reconnects. ([#1233](https://github.com/SignalR/SignalR/issues/1233))
- SL5 client is not working. it fails to load json.net. ([#1223](https://github.com/SignalR/SignalR/issues/1223))
- Interval between keep alive missed and notifying transport seems to small. ([#1211](https://github.com/SignalR/SignalR/issues/1211))
- ""+"" sign in a string gets transformed to a space. ([#1194](https://github.com/SignalR/SignalR/issues/1194))
- LP: Clients cannot receive messages on client if message is sent right after start. ([#1185](https://github.com/SignalR/SignalR/issues/1185))
- Fix issues with growing number of dead connections consuming too much memory. ([#1177](https://github.com/SignalR/SignalR/issues/1177))
- JS Client: Base events (reconnecting, connected, received etc.) are not unique to connection objects. ([#1173](https://github.com/SignalR/SignalR/issues/1173))
- PerformanceCounterCategory.Exists hangs. ([#1158](https://github.com/SignalR/SignalR/issues/1158))
- JS client function isCrossDomain returns true for same website /host url. ([#1156](https://github.com/SignalR/SignalR/issues/1156))
- Waiting on multiple commands in OnConnectedAsync causes a TaskCanceledException in ForeverTransports (SSE, FF, WS). ([#1155](https://github.com/SignalR/SignalR/issues/1155))
- JS client can't receive messages after reconnected for network disconnect and re-connected. ([#1144](https://github.com/SignalR/SignalR/issues/1144))
- .NET client fails auto-negotiation fallback. ([#1125](https://github.com/SignalR/SignalR/issues/1125))
- Deadlock in .NET client websocket stop logic. ([#1120](https://github.com/SignalR/SignalR/issues/1120))
- Remove MozWebSocket check in javascript websocket transport. ([#1119](https://github.com/SignalR/SignalR/issues/1119))
- OutOfMemoryException after sending a lot of huge messages. ([#1114](https://github.com/SignalR/SignalR/issues/1114))
- Don't create topics when publishing. ([#1071](https://github.com/SignalR/SignalR/issues/1071))
- Unseal AuthorizeAttribute. ([#1050](https://github.com/SignalR/SignalR/issues/1050))
- Topic objects remain in Active state and never clean up after all clients disconnected. ([#1001](https://github.com/SignalR/SignalR/issues/1001))
- Remove the Mode parameter from AuthorizeAttribute. ([#956](https://github.com/SignalR/SignalR/issues/956))
- on IE10/9 foreverFrame transport connection can't receive message after network disconnect time and network re-connect. ([#820](https://github.com/SignalR/SignalR/issues/820))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/21582/assets,https://api.github.com/repos/SignalR/SignalR/releases/21582,dev,https://api.github.com/repos/SignalR/SignalR/tarball/1.0rc2,https://github.com/SignalR/SignalR/releases/tag/1.0rc2,https://api.github.com/repos/SignalR/SignalR/zipball/1.0rc2,1.0rc2,False,False
21581,2013-02-01T00:47:26Z,2013-08-06T06:46:06Z,1.0.0,"### Breaking Changes
- Disable CORS by default ([#1306](https://github.com/SignalR/SignalR/issues/1306))

``` csharp
var config = new HubConfiguration 
{ 
    EnableCrossDomain = true
} 
RouteTable.Routes.MapHubs(config);
```
- Don't return error text by default for hub errors ([#923](https://github.com/SignalR/SignalR/issues/923))
  - This means that exception messages are turned off by default

``` csharp
var config = new HubConfiguration 
{ 
    EnableDetailedErrors = true
} 

RouteTable.Routes.MapHubs(config); 
```
- **EnableAutoRejoiningGroups** has been removed from HubPipeline. This feature is turned on by default. The groups payload is signed to the client
  cannot spoof groups anymore.

### Bugs Fixed
- Send nosniff header for all SignalR responses ([#1450](https://github.com/SignalR/SignalR/issues/1450))
- Hub state and args are placed into a dictionary directly from user input from the URL ([#1449](https://github.com/SignalR/SignalR/issues/1449))
  - JSON.NET 20 is the limit of recursion
  - 4096 KB is maxium size JSON payload
- HubDispatcher allows duplicate hub names in connectionData ([#1448](https://github.com/SignalR/SignalR/issues/1448))
  - If you have duplicate HubNames in your HubConnection, you will get an exception Duplicate hub names found
- ForeverFrame transport should validate frameId passed through the URL ([#1446](https://github.com/SignalR/SignalR/issues/1446))
- Route matching for the Owin hub dispatcher handler is too agressive ([#1445](https://github.com/SignalR/SignalR/issues/1445))
- JSONP callback method should be validated as valid JS identifier ([#1444](https://github.com/SignalR/SignalR/issues/1444))
- Hub method discovery includes methods it shouldn't ([#1443](https://github.com/SignalR/SignalR/issues/1443))
- Add CSRF protection for SignalR requests ([#1413](https://github.com/SignalR/SignalR/issues/1413))
- AV at Microsoft.Owin.Host.SystemWeb.OwinCallContext.StartOnce ([#1402](https://github.com/SignalR/SignalR/issues/1402))
- WebSocket leak HttpContext even though DefaultWebSocketHandler is closed ([#1387](https://github.com/SignalR/SignalR/issues/1387))
- Bug with same origin check behind reverse proxies/load balancers etc. ([#1363](https://github.com/SignalR/SignalR/issues/1363))
- Add summary in public AuthorizeAttribute class ([#1353](https://github.com/SignalR/SignalR/issues/1353))
- Infer hubs path from the url ([#1346](https://github.com/SignalR/SignalR/issues/1346))
- Sign the groups ([#1328](https://github.com/SignalR/SignalR/issues/1328))
- End the request, not connection as soon as cancellation token trips. ([#1327](https://github.com/SignalR/SignalR/issues/1327))
- Prefix for group from PersistentConnectionContext is not right ([#1326](https://github.com/SignalR/SignalR/issues/1326))
- Throw in ASP.NET 4 if the purpose isn't connection id and groups. ([#1325](https://github.com/SignalR/SignalR/issues/1325))
- Prevent connections from subscribing to a group that's actually a valid connection ID or Hub name ([#1320](https://github.com/SignalR/SignalR/issues/1320))
- Ensure that we don't allow clients to provide duplicate signals in cursors ([#1312](https://github.com/SignalR/SignalR/issues/1312))
- Add Authorize method to PersistentConnection. ([#1308](https://github.com/SignalR/SignalR/issues/1308))
  - Added Authorize and AuthorizeRequest method to PersistentConnection. 
  - This is the place in the pipeline to authorize requests. If a request fails authorization then a 403 is returned.
- Consider signing the connection id ([#1305](https://github.com/SignalR/SignalR/issues/1305))
- Change LongPollingTransport.Send to be non-virtual ([#1292](https://github.com/SignalR/SignalR/issues/1292))
- Change TopicMessageBus use of array to IList<T> ([#1291](https://github.com/SignalR/SignalR/issues/1291))
- Change Subscription.PerformWork to take a IList instead of List ([#1290](https://github.com/SignalR/SignalR/issues/1290))
- Change Linktionary to IndexedDictionary ([#1289](https://github.com/SignalR/SignalR/issues/1289))
- Investigate changing all uses of IEnumerable<T> in the API to IList<T> ([#1288](https://github.com/SignalR/SignalR/issues/1288))
- Change IHubIncomingInvokerContext.Args to IList<object> ([#1287](https://github.com/SignalR/SignalR/issues/1287))
- Change DefaultJavaScriptProxyGenerator.GetDescriptorName to non-vritual ([#1286](https://github.com/SignalR/SignalR/issues/1286))
- Change Subscription.Data to Received in .NET client ([#1285](https://github.com/SignalR/SignalR/issues/1285))
- Change .NET Client uses of arrays to IList ([#1284](https://github.com/SignalR/SignalR/issues/1284))
- Change IConnection.Groups to IList<T> ([#1282](https://github.com/SignalR/SignalR/issues/1282))
- Change ConnectionMessage.ExcludedSignals to IList<string> ([#1278](https://github.com/SignalR/SignalR/issues/1278))
- Add overloads for methods with params array on hot paths ([#1277](https://github.com/SignalR/SignalR/issues/1277))
- Client webSockts and SSE transports, after reconnected, Disconnect Command from server causes the reconnected connection to disconnect ([#1273](https://github.com/SignalR/SignalR/issues/1273))
- Loading Resources in Windows Ph8/Windows Store applications ([#1232](https://github.com/SignalR/SignalR/issues/1232))
- Long Polling leaking requests sometimes ([#1164](https://github.com/SignalR/SignalR/issues/1164))
- Signalr.exe to generate hub proxy only works for webapplication projects
- jquery.signalr.1.0.0.js file has the version specified as 1.0.0.rc1. The version is actually 1.0.0
- **ScaleOut with Redis/Service Bus**
  - Scale Out with SignalR using ServiceBus or Redis
  - Scaleout using Azure Service Bus or Redis is still under development. If you are using 1.0.0-RC2 versions of the ScaleOut packages then please upgrade to 1.0.0-RC3 if you want to use SignalR 1.0.0

### Known Issues
- JS client with jQuery 1.9.1 / 1.9.0 raises connection error for all sends on persistent connection API ([#1437](https://github.com/SignalR/SignalR/issues/1437)
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/21581/assets,https://api.github.com/repos/SignalR/SignalR/releases/21581,dev,https://api.github.com/repos/SignalR/SignalR/tarball/1.0.0,https://github.com/SignalR/SignalR/releases/tag/1.0.0,https://api.github.com/repos/SignalR/SignalR/zipball/1.0.0,1.0.0,False,False
21580,2013-02-28T02:26:01Z,2013-08-06T06:45:08Z,1.0.1,"### Bugs Fixed
- Connection Id not read properly when additional query string parameters are added ([#1556](https://github.com/SignalR/SignalR/issues/1556))
- WebSocket leaks if Close throws an exception ([#1554](https://github.com/SignalR/SignalR/issues/1554))
- CancellationTokenSource has been disposed ([#1549](https://github.com/SignalR/SignalR/issues/1549))
- Regression: State doesn't work when accessed as dictionary without casting ([#1545](https://github.com/SignalR/SignalR/issues/1545))
- Don't catch exceptions thrown from user-defined OnReceived handlers on the JS client ([#1530](https://github.com/SignalR/SignalR/issues/1530))
- Calling connection.stop() with the serverSentEvent transport on Opera raises a TypeError. ([#1519](https://github.com/SignalR/SignalR/issues/1519))
- Doc summary for BuildRejoiningGroups is wrong ([#1505](https://github.com/SignalR/SignalR/issues/1505))
- When converting JRaw to concrete type use default serialization settings that container a max depth ([#1484](https://github.com/SignalR/SignalR/issues/1484))
- AV in ForeverTransport<ProcessMessages> under stress ([#1479](https://github.com/SignalR/SignalR/issues/1479))
- JS client version property is incorrect ([#1476](https://github.com/SignalR/SignalR/issues/1476))
- Throw the ""Not a websocket request"" exception synchronously ([#1440](https://github.com/SignalR/SignalR/issues/1440))
- JS client with jQuery 1.9.0 raises connection error for all sends on persistent connection API ([#1437](https://github.com/SignalR/SignalR/issues/1437))
- Groups.Add.Wait fails, http.sys logs shows ""Connection_Dropped"" with no apparent reason. ([#1435](https://github.com/SignalR/SignalR/issues/1435))
- .NET client OnError is raised when calling connection.Stop and using WebSocket transport ([#1397](https://github.com/SignalR/SignalR/issues/1397))
- Fuzz test the cursor parsing logic. ([#1307](https://github.com/SignalR/SignalR/issues/1307))
- Improve the error message ""Incompatible protocol version"". ([#1176](https://github.com/SignalR/SignalR/issues/1176))
- PerformanceCounterCategory.Exists hangs ([#1158](https://github.com/SignalR/SignalR/issues/1158))
- SignalR .NET Client HubConnection looping between Reconnecting and Connected ([#1121](https://github.com/SignalR/SignalR/issues/1121))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/21580/assets,https://api.github.com/repos/SignalR/SignalR/releases/21580,dev,https://api.github.com/repos/SignalR/SignalR/tarball/1.0.1,https://github.com/SignalR/SignalR/releases/tag/1.0.1,https://api.github.com/repos/SignalR/SignalR/zipball/1.0.1,1.0.1,False,False
21579,2013-04-10T02:06:56Z,2013-08-06T06:44:28Z,1.1.0beta,"### General Changes
- Performance improvements in throughput and memory usage.
- New scaleout provider infrastructure and providers for Redis, SqlServer and Azure Service Bus.

### Known Issues
- When the backplane goes offline (redis, sql, service bus) you may miss messages.

### Features
- Add overload to MapHubs and MapConnection to allow adding OWIN middleware ([#1800](https://github.com/SignalR/SignalR/issues/1800))
- Removed Connection.Disconnect() ([#1798](https://github.com/SignalR/SignalR/issues/1798))
- Force <= IE8 to use LongPolling ([#1764](https://github.com/SignalR/SignalR/issues/1764))
- Support common scale-out message bus semantics in an abstract base class ([#1712](https://github.com/SignalR/SignalR/issues/1712))
- Support SQL Server scale-out message bus ([#1711](https://github.com/SignalR/SignalR/issues/1711))
- Make SQL message bus light up with query notifications only if service broker is available ([#1662](https://github.com/SignalR/SignalR/issues/1662))
- Allow specifiying the JsonSerializer in the .NET Client ([#1373](https://github.com/SignalR/SignalR/issues/1373))
- Allow specifying headers in the .NET client ([#1362](https://github.com/SignalR/SignalR/issues/1362))
- Allow specifying client certificates in the .NET Client ([#1303](https://github.com/SignalR/SignalR/issues/1303))
- Support client side keep alive for the .NET client ([#741](https://github.com/SignalR/SignalR/issues/741))
- Add tracing to the .NET client ([#135](https://github.com/SignalR/SignalR/issues/135))
- Add trace level to the .NET client ([#1746](https://github.com/SignalR/SignalR/issues/1746))

### Bugs Fixed
- ConnectDisconnect test failed due to a leak on w3wp.exe ([#1801](https://github.com/SignalR/SignalR/issues/1801))
- Update error messages based on customer feedback ([#1734](https://github.com/SignalR/SignalR/issues/1734))
- Hub script isn't minified ([#1710](https://github.com/SignalR/SignalR/issues/1710))
- Specifying the hubs url for a connection url should fail ([#1707](https://github.com/SignalR/SignalR/issues/1707))
- JS client webSockets and SSE transports only try request one time to connect during reconnect  ([#1684](https://github.com/SignalR/SignalR/issues/1684))
- PerformanceCounter.RemoveInstance throws on mono ([#1678](https://github.com/SignalR/SignalR/issues/1678))
- in HubContext Clients.Client(null).foo() doesn't throw ([#1660](https://github.com/SignalR/SignalR/issues/1660))
- .NET client: Calling Stop before connecting fails ([#1650](https://github.com/SignalR/SignalR/issues/1650))
- [WebSockets] AbortStopDisconnect scenario failing:  System.InvalidOperationException: Incorrect message type ([#1607](https://github.com/SignalR/SignalR/issues/1607))
- .NET client: OnError can be raised when stopping SSE connection  ([#1600](https://github.com/SignalR/SignalR/issues/1600))
- Get rid of all synchronous reads/writes on the client ([#1536](https://github.com/SignalR/SignalR/issues/1536))
- Group tokens are not verified against the current connection ID on reconnect ([#1506](https://github.com/SignalR/SignalR/issues/1506))
- Unhandled exceptions within service bus backplane ([#1504](https://github.com/SignalR/SignalR/issues/1504))
- Optimize hub method invocation ([#1486](https://github.com/SignalR/SignalR/issues/1486))
- Extending javascript array potentially breaks other code ([#1392](https://github.com/SignalR/SignalR/issues/1392))
- IE9 object serialization on persistant connection received ([#1388](https://github.com/SignalR/SignalR/issues/1388))
- Hub Clients.Client(null).foo() should throw same as PersistentConnection Connection.Send(null, message) ([#1265](https://github.com/SignalR/SignalR/issues/1265))
- Multiple connections don't work on the same page in some cases ([#1243](https://github.com/SignalR/SignalR/issues/1243))
- Client infinitely receive same messages from server when publish message with same Id ([#948](https://github.com/SignalR/SignalR/issues/948))
- jQuery $.ajaxSetup issue ([#947](https://github.com/SignalR/SignalR/issues/947))
- SqlServer - Use real schema instead of deprecated ""dbo"" ([#943](https://github.com/SignalR/SignalR/issues/943))
- SignalR Redis doesn't reconnect to Redis server after stop and re-start Redis server ([#916](https://github.com/SignalR/SignalR/issues/916))
- Scaleout Bus mapping grows infinitely ([#723](https://github.com/SignalR/SignalR/issues/723))
- Several browsers show infinite loading status (IE8) ([#215](https://github.com/SignalR/SignalR/issues/215))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/21579/assets,https://api.github.com/repos/SignalR/SignalR/releases/21579,dev,https://api.github.com/repos/SignalR/SignalR/tarball/1.1.0beta,https://github.com/SignalR/SignalR/releases/tag/1.1.0beta,https://api.github.com/repos/SignalR/SignalR/zipball/1.1.0beta,1.1.0beta,False,False
21578,2013-05-11T07:43:46Z,2013-08-06T06:43:43Z,1.1.0,"### Features
- Add tracing to Service Bus message bus ([#1912](https://github.com/SignalR/SignalR/issues/1912))
- Add more scaleout performance counters ([#1833](https://github.com/SignalR/SignalR/issues/1833))
- Ensure fairness in scale-out message delivery using arrival time stamp for sorting ([#1807](https://github.com/SignalR/SignalR/issues/1807))
- Support generating an install script  ([#1793](https://github.com/SignalR/SignalR/issues/1793))

### Bugs Fixed
- [LP] - ConcurrentCalls causing leak on server side ([#1993](https://github.com/SignalR/SignalR/issues/1993))
- 'r' is undefined ([#1975](https://github.com/SignalR/SignalR/issues/1975))
- Duplicates messages received when using 2 machines ([#1973](https://github.com/SignalR/SignalR/issues/1973))
- Memory leak in connection tracking when using scaleout ([#1953](https://github.com/SignalR/SignalR/issues/1953))
- Missing messages when sending to groups ([#1948](https://github.com/SignalR/SignalR/issues/1948))
- ServiceBusMessageBus should delete subscriptions when the application shuts down ungracefully ([#1939](https://github.com/SignalR/SignalR/issues/1939))
- Only unwrap one level of exceptions when returning hub errors to client ([#1919](https://github.com/SignalR/SignalR/issues/1919))
- in SqlScaleoutConfiguration it should throw when TableCount < 1 ([#1888](https://github.com/SignalR/SignalR/issues/1888))
- Refactor SQL message bus to use events instead of delegate passing ([#1879](https://github.com/SignalR/SignalR/issues/1879))
- LP/SSE hang when using a reasonable value for ServicePoint DefaultConnectionLimit ([#1874](https://github.com/SignalR/SignalR/issues/1874))
- Unobserved ODE after manually stopping a connection on the .NET client ([#1848](https://github.com/SignalR/SignalR/issues/1848))
- Overwhelming the queue can cause issues sending to other clients ([#1847](https://github.com/SignalR/SignalR/issues/1847))
- The WebSocket instance cannot be used for communication because it has been transitioned into an invalid state. ([#1846](https://github.com/SignalR/SignalR/issues/1846))
- Validate ServiceBusScaleoutConfiguration members ([#1806](https://github.com/SignalR/SignalR/issues/1806))
- JS client webSockets /serverSendEvents /foreverFrame don't append /reconnect but append /poll in url when reconnect, however functional still work ([#1794](https://github.com/SignalR/SignalR/issues/1794))
- Update RedisMessageBus to use latest version of Booksleeve ([#1788](https://github.com/SignalR/SignalR/issues/1788))
- LongPollingTransport threw ObjectDisposedException in AbortResetEvent.Set() ([#1691](https://github.com/SignalR/SignalR/issues/1691))
- Redis message bus can result in missed messages due to messages received out of order from backplane ([#1676](https://github.com/SignalR/SignalR/issues/1676))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/21578/assets,https://api.github.com/repos/SignalR/SignalR/releases/21578,dev,https://api.github.com/repos/SignalR/SignalR/tarball/1.1.0,https://github.com/SignalR/SignalR/releases/tag/1.1.0,https://api.github.com/repos/SignalR/SignalR/zipball/1.1.0,1.1.0,False,False
21577,2013-05-17T05:58:15Z,2013-08-06T06:42:52Z,1.1.1,"### Bugs Fixed
- SignalR Groups.Remove doesn't work ([#2040](https://github.com/SignalR/SignalR/issues/2040))
- Changing the number of streams/topics/tables crashes the process when using scaleout ([#2024](https://github.com/SignalR/SignalR/issues/2024))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/21577/assets,https://api.github.com/repos/SignalR/SignalR/releases/21577,dev,https://api.github.com/repos/SignalR/SignalR/tarball/1.1.1,https://github.com/SignalR/SignalR/releases/tag/1.1.1,https://api.github.com/repos/SignalR/SignalR/zipball/1.1.1,1.1.1,False,False
21576,2013-05-18T00:48:27Z,2013-08-06T06:42:21Z,2.0.0beta1,"### Features
- Preliminary work to allow server to support multiple protocol versions ([#2017](https://github.com/SignalR/SignalR/issues/2017))
- Use HttpClient for .NET client HTTP stack ([#1908](https://github.com/SignalR/SignalR/issues/1908))
- Tighter OWIN integration ([#1906](https://github.com/SignalR/SignalR/issues/1906))
- Make Client.Connection Disposable ([#1844](https://github.com/SignalR/SignalR/issues/1844))
- support /signalr/js for returning javascript proxy ([#1822](https://github.com/SignalR/SignalR/issues/1822))
- Take a .NET 4.5 dependency in SignalR core (server side) ([#1723](https://github.com/SignalR/SignalR/issues/1723))
- Add supported client libraries for MonoTouch & MonoDroid ([#1669](https://github.com/SignalR/SignalR/issues/1669))
- Allow for overriding JS json deserializing function ([#1564](https://github.com/SignalR/SignalR/issues/1564))

### Bugs Fixed
- Ensure data protection and build manager dependencies come from IAppBuilder ([#2013](https://github.com/SignalR/SignalR/issues/2013))
- Check for valid json serializer fails if there is no window.json ([#2003](https://github.com/SignalR/SignalR/issues/2003))
- Fix UserAgent for the .NET client ([#1994](https://github.com/SignalR/SignalR/issues/1994))
- Remove the IJsonSerializer abstraction ([#1821](https://github.com/SignalR/SignalR/issues/1821))
- Persistent Connection fails with IIS8 on Android Stock Browser ([#1653](https://github.com/SignalR/SignalR/issues/1653))
- OwinExtensions depends on host.AppName environment which may be null and will result in an exception. ([#1616](https://github.com/SignalR/SignalR/issues/1616))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/21576/assets,https://api.github.com/repos/SignalR/SignalR/releases/21576,dev,https://api.github.com/repos/SignalR/SignalR/tarball/2.0.0beta1,https://github.com/SignalR/SignalR/releases/tag/2.0.0beta1,https://api.github.com/repos/SignalR/SignalR/zipball/2.0.0beta1,2.0.0beta1,False,False
21574,2013-05-24T18:23:41Z,2013-08-06T06:40:37Z,1.1.2,"### Bugs Fixed
- Scaleout Message Bus Memory Leak ([#2070](https://github.com/SignalR/SignalR/issues/2070))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/21574/assets,https://api.github.com/repos/SignalR/SignalR/releases/21574,dev,https://api.github.com/repos/SignalR/SignalR/tarball/1.1.2,https://github.com/SignalR/SignalR/releases/tag/1.1.2,https://api.github.com/repos/SignalR/SignalR/zipball/1.1.2,1.1.2,False,False
21538,2013-07-31T17:34:29Z,2013-08-06T03:44:59Z,1.1.3,"### Bugs Fixed
- Hub invocation callbacks are not cleaned up in C# client if no response is received causing a memory leak ([#2272](https://github.com/SignalR/SignalR/issues/2272))
- Hub invocation callbacks are not cleaned up in JS client if no response is received causing a memory leak ([#2270](https://github.com/SignalR/SignalR/issues/2270))
",https://api.github.com/users/davidfowl,95136,davidfowl,https://api.github.com/repos/SignalR/SignalR/releases/21538/assets,https://api.github.com/repos/SignalR/SignalR/releases/21538,dev,https://api.github.com/repos/SignalR/SignalR/tarball/1.1.3,https://github.com/SignalR/SignalR/releases/tag/1.1.3,https://api.github.com/repos/SignalR/SignalR/zipball/1.1.3,1.1.3,False,False
1157,2013-06-22T21:33:22Z,2013-07-02T23:02:32Z,2.0.0-beta2,"## Overview

### iOS and Android support via MonoTouch and MonoDroid (Xamarin)

Added support for MonoTouch and MonoDroid components. For more information on how to use them see [Using Xamarin Components](https://github.com/SignalR/SignalR/wiki/Building-Mono.Mobile.sln).
These components will ship in the Xamarin Store when SignalR 2.0 is RTW.

### Portable .NET Client Library

Added a portable .NET client that supports the following platforms
- .NET 4.5
- Silverlight 5
- WinRT (.NET for Windows Store Apps)
- Windows Phone 8

### Self hosting package

SignalR now includes a NuGet package ([Microsoft.AspNet.SignalR.SelfHost](http://nuget.org/packages/Microsoft.AspNet.SignalR.SelfHost)) to make self hosting easier to get started.
Installing this package via NuGet will show a readme.txt for getting started. For more information on self hosting your SignalR application see 
http://www.asp.net/signalr/overview/getting-started/tutorial-signalr-self-host.

### Backwards compatible server support

In the past, the SignalR client and server needed to be the exact same version to work. This made it hard to update servers 
for applications with thick/native mobile clients.
SignalR now supports the ability to use older clients with newer servers. This allows applications to update the server side and not have to worry about client breaking. 

**NOTE: SignalR does _NOT_ support newer clients with older servers.**

## Breaking Changes

### .NET 4.5 only (Server Side)

SignalR 2.0 only supports .NET 4.5 on the server now so projects that are tied to .NET 4.0 will have to keep using SignalR 1.1.

## Removal of Packages/Assemblies/APIs

The following assemblies/APIs have been deleted:
- Microsoft.AspNet.SignalR.Owin
- Microsoft.AspNet.SignalR.SystemWeb
  - RouteTable.Routes.MapHubs()
  - RouteTable.Routes.MapConnection()
  - IRequest.GetHttpContext()

The OWIN dependency has been merged into Microsoft.AspNet.SignalR.Core.

See below for replacements for the deleted APIs above.

## Migrating your application from 1.x to 2.0

After updating to SignalR 2.0 beta2 you should see the following compilation errors:

``` csharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Routing;
using System.Web.Security;
using System.Web.SessionState;
using Microsoft.AspNet.SignalR;

namespace MyApplication
{
    public class Global : System.Web.HttpApplication
    {
        protected void Application_Start(object sender, EventArgs e)
        {
            RouteTable.Routes.MapHubs();
            RouteTable.Routes.MapConnection<MyConnection>(""echo"", ""/echo"");
        }
    }
}
```

```
'System.Web.Routing.RouteCollection' does not contain a definition for 'MapHubs' and no extension method 
'MapHubs' accepting a first argument of type 'System.Web.Routing.RouteCollection' could be found 
(are you missing a using directive or an assembly reference?)
```

```
'System.Web.Routing.RouteCollection' does not contain a definition for 'MapConnection' and no extension method 
'MapConnection' accepting a first argument of type 'System.Web.Routing.RouteCollection' could be found 
(are you missing a using directive or an assembly reference?)
```

To migrate an existing SignalR 1.x project to 2.0 do the following:
- Remove calls to RouteTable.Routes.MapHubs() and RouteTable.Routes.MapConnection() in Global.asax.
- Add a Startup.cs file to the root your project with the following content:

``` csharp
using Microsoft.Owin;
using Owin;
using MyWebApplication;

namespace MyWebApplication
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // Any connection or hub wire up and configuration should go here
            app.MapHubs();  
            app.MapConnection<MyConnection>(""/echo"");
        }
    }
}
```

#### Website projects

For Website projects, add the following config section to the root web.config:

``` xml
<appSettings>
  <add key=""owin:AppStartup"" value=""MyWebApplication.Startup, App_Code""/>
</appSettings>
```

If you still see the following errors after the above steps:

```
The call is ambiguous between the following methods or properties:
'Owin.OwinExtensions.MapConnection<T>(Owin.IAppBuilder, string, Microsoft.AspNet.SignalR.ConnectionConfiguration)' and 
'Owin.OwinExtensions.MapConnection<T>(Owin.IAppBuilder, string, Microsoft.AspNet.SignalR.ConnectionConfiguration)'
```

The reason is ""Microsoft.AspNet.SignalR.Owin"" has been deprecated. You must uninstall the NuGet Package from your project.

### IRequest.GetHttpContext() replacement

All dependencies on System.Web were removed. If your existing project was using the GetHttpContext extension method then you will need to restore this functionality by adding a new class to your project with the following content:

``` csharp
using System.Web;
using Microsoft.AspNet.SignalR;

namespace Microsoft.AspNet.SignalR
{
    public static class SystemWebExtensions
    {
        public static HttpContextBase GetHttpContext(this IRequest request)
        {
            object value;
            if (request.Environment.TryGetValue(typeof(HttpContextBase).FullName, out value))
            {
                return (HttpContextBase)value;
            }

            return null;
        }
    }
}
```

### Server sent events has known issues on Silverlight

Messages are delayed when using server sent events on silverlight. To force long polling use the following:

``` csharp
connection.Start(new LongPollingTransport());
```

### .NET client callback fails to fire

If your .NET client callback suddenly stops working, it might be because the callback has
the wrong number of arguments:

Server:

``` csharp
public class Chat : Hub
{
    public void Send(string message)
    {
        Clients.All.addMessage(message);
    }
}

```

Client:

``` csharp
var connection = new HubConneciton(""http://localhost:8080/myapp"");
var proxy = connection.CreateHubProxy(""Chat"");

proxy.On(""addMessage"", () => 
{
    Console.WriteLine(""Called!"");
});
```

The wrong number of arguments are being passed to the method. To see the exception, turn logging on:

``` csharp
connection.TraceWriter = Conosle.Out;
```

To resolve the issue, specify the correct number of arguments on the client side:

``` csharp
proxy.On<string>(""addMessage"", message => 
{
    Console.WriteLine(""Called with {0}"", message);
});

```

### Features
- Update to JSON.NET 5 ([#1932](https://github.com/SignalR/SignalR/issues/1932))
- Make a .NET portable class library client ([#1907](https://github.com/SignalR/SignalR/issues/1907))
- Send init message prior to triggering connect ([#1889](https://github.com/SignalR/SignalR/issues/1889))
- Allow to Send Json Strings without duplicate Serialization ([#1546](https://github.com/SignalR/SignalR/issues/1546))

### Bugs Fixed
- JS client foreverFrame run into script error when immediately start->stop->start connection ([#2190](https://github.com/SignalR/SignalR/issues/2190))
- JS client immediately start->stop->start connection causes Hub event handler added again again  ([#2187](https://github.com/SignalR/SignalR/issues/2187))
- When the SSE transport is aborted on the client, it tries to reconnect ([#2180](https://github.com/SignalR/SignalR/issues/2180))
- start-stop-start long polling results on a stream of poll requests ([#2160](https://github.com/SignalR/SignalR/issues/2160))
- Update to HttpClient PCL RTW ([#2109](https://github.com/SignalR/SignalR/issues/2109))
- Remove dependency on Microsoft.Owin.Security.DataProtection.DpapiDataProtectionProvider ([#2104](https://github.com/SignalR/SignalR/issues/2104))
- Reconnects hang when WebSocket timed out and fallback was used ([#2096](https://github.com/SignalR/SignalR/issues/2096))
- Run all functional tests with fake scaleout message bus. ([#2085](https://github.com/SignalR/SignalR/issues/2085))
- when specify uiCulture in web.config, SignalR doesn't load the resource string for the specified locale ([#2077](https://github.com/SignalR/SignalR/issues/2077))
- When change from using scale-out to not use scale-out, cursors value could change unexpectedly which cause group not working anymore ([#2061](https://github.com/SignalR/SignalR/issues/2061))
- WP8 client fails on SSE and does not fallback to LongPolling ([#2028](https://github.com/SignalR/SignalR/issues/2028))
- Problem with self host Server - Client on Mac (Mono) ([#1999](https://github.com/SignalR/SignalR/issues/1999))
- Skip SSE in Silverlight & WP clients ([#1995](https://github.com/SignalR/SignalR/issues/1995))
- Disable KeepAlive properly for Long Polling for the .NET client ([#1960](https://github.com/SignalR/SignalR/issues/1960))
- System.ArgumentOutOfRangeException on the client side when hub invokes the callback ([#1958](https://github.com/SignalR/SignalR/issues/1958))
- JS SSE transport: if you call connection.stop() before the connection is opened, TypeError ([#1873](https://github.com/SignalR/SignalR/issues/1873))
- consider including connect url for longPolling etc in .Net client trace  ([#1760](https://github.com/SignalR/SignalR/issues/1760))
- IE 10 Web Sockets Security Error when simultaneous connection limit reached ([#1744](https://github.com/SignalR/SignalR/issues/1744))
",https://api.github.com/users/DamianEdwards,249088,DamianEdwards,https://api.github.com/repos/SignalR/SignalR/releases/1157/assets,https://api.github.com/repos/SignalR/SignalR/releases/1157,dev,https://api.github.com/repos/SignalR/SignalR/tarball/2.0.0beta2,https://github.com/SignalR/SignalR/releases/tag/2.0.0beta2,https://api.github.com/repos/SignalR/SignalR/zipball/2.0.0beta2,2.0.0beta2,False,True
