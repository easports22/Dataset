id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
8137087,2017-10-16T16:51:55Z,2017-10-16T16:57:37Z,,"- Fix #870: Error building container when class inherits from same generic interface twice.
- Updated default parameter value handling to account for Core CLR issues:
  - dotnet/corefx#17943
  - dotnet/corefx#12338
  - dotnet/corefx#11797",https://api.github.com/users/tillig,1156571,tillig,https://api.github.com/repos/autofac/Autofac/releases/8137087/assets,https://api.github.com/repos/autofac/Autofac/releases/8137087,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.6.2,https://github.com/autofac/Autofac/releases/tag/v4.6.2,https://api.github.com/repos/autofac/Autofac/zipball/v4.6.2,v4.6.2,False,False
7158978,2017-07-25T12:54:30Z,2017-07-25T12:59:09Z,,"- Fixed #847: ScopeRestrictedRegistry now also applies ComponentRegistrationLifetimeDecorator to registrations from registration sources.
- Fixed #855: Fixed ACTNARS resolve on a closed generic type containing a generic type argument that doesn't match the type predicate passed to the registration source.
- Fixed #746: Registrations added to a nested lifetime scope were not being disposed.
- Fixed #780: Disposal tracking of provided instances is now consistent in root and nested lifetime scopes.",https://api.github.com/users/alexmg,131293,alexmg,https://api.github.com/repos/autofac/Autofac/releases/7158978/assets,https://api.github.com/repos/autofac/Autofac/releases/7158978,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.6.1,https://github.com/autofac/Autofac/releases/tag/v4.6.1,https://api.github.com/repos/autofac/Autofac/zipball/v4.6.1,v4.6.1,False,False
6401045,2017-05-16T12:39:24Z,2017-05-16T12:42:06Z,,"- Fixed #730: Added MatchingLifetimeScopeTags() extension to IComponentRegistration to get scope tags.
- Fixed #849: Store build callbacks in property bag so modules can add to them.",https://api.github.com/users/alexmg,131293,alexmg,https://api.github.com/repos/autofac/Autofac/releases/6401045/assets,https://api.github.com/repos/autofac/Autofac/releases/6401045,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.6.0,https://github.com/autofac/Autofac/releases/tag/v4.6.0,https://api.github.com/repos/autofac/Autofac/zipball/v4.6.0,v4.6.0,False,False
5985073,2017-04-05T13:30:46Z,2017-04-05T13:31:55Z,,- Added RegisterBuildCallback method to ContainerBuilder that is invoked when the container is built and passed the container instance.,https://api.github.com/users/alexmg,131293,alexmg,https://api.github.com/repos/autofac/Autofac/releases/5985073/assets,https://api.github.com/repos/autofac/Autofac/releases/5985073,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.5.0,https://github.com/autofac/Autofac/releases/tag/v4.5.0,https://api.github.com/repos/autofac/Autofac/zipball/v4.5.0,v4.5.0,False,False
5609091,2017-03-01T16:33:36Z,2017-03-01T17:15:34Z,,"Added conditional registration support (#469). This includes `OnlyIf()` and `IfNotRegistered()` registration extensions.
- [Documentation](http://autofac.readthedocs.io/en/latest/register/registration.html#conditional-registration)
- [Unit tests with usage examples](https://github.com/autofac/Autofac/blob/16afd4106ef57102fdb91f6059a5b004fe992e9d/test/Autofac.Test/RegistrationOnlyIfTests.cs)
",https://api.github.com/users/tillig,1156571,tillig,https://api.github.com/repos/autofac/Autofac/releases/5609091/assets,https://api.github.com/repos/autofac/Autofac/releases/5609091,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.4.0,https://github.com/autofac/Autofac/releases/tag/v4.4.0,https://api.github.com/repos/autofac/Autofac/zipball/v4.4.0,v4.4.0,False,False
5180948,2017-01-17T12:11:53Z,2017-01-17T12:24:49Z,,"- Fixed #816: Generics constrained with generic parameters do not resolve.
- Improve #769: Reduced memory usage and resolution time for reflection based activations.
- Added attribute filtering capability from `Autofac.Extras.AttributedMetadata` to core Autofac package making it available in .NET Core.
",https://api.github.com/users/alexmg,131293,alexmg,https://api.github.com/repos/autofac/Autofac/releases/5180948/assets,https://api.github.com/repos/autofac/Autofac/releases/5180948,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.3.0,https://github.com/autofac/Autofac/releases/tag/v4.3.0,https://api.github.com/repos/autofac/Autofac/zipball/v4.3.0,v4.3.0,False,False
4746585,2016-11-23T23:15:22Z,2016-11-23T23:26:06Z,,"- Fixed #807: Improves lifetime scope cleanup for shared instances.
- Marked `ContainerBuilder.Update` obsolete

For people using `ContainerBuilder.Update`, we have [opened a discussion issue](https://github.com/autofac/Autofac/issues/811) to help you try working around use of `Update`, explain why we're looking at making it obsolete, and find out where gaps in functionality might be so we can fill those gaps prior to removal.

**Fear not, it'll still be around for a while.** We just want folks to start looking at fixing things up, or, if it turns out we can't remove `Update`, find out _why_ it's required so we can address those challenges.
",https://api.github.com/users/tillig,1156571,tillig,https://api.github.com/repos/autofac/Autofac/releases/4746585/assets,https://api.github.com/repos/autofac/Autofac/releases/4746585,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.2.1,https://github.com/autofac/Autofac/releases/tag/v4.2.1,https://api.github.com/repos/autofac/Autofac/zipball/v4.2.1,v4.2.1,False,False
4560916,2016-08-09T14:09:21Z,2016-11-03T16:07:02Z,,"- **New target platform set `netstandard1.1`**. This includes support for .NET Core and UWP (Universal Windows Platform). You can read more about the new `netstandard` target framework monikers and the associated compatibility [on the .NET Core documentation](https://docs.microsoft.com/en-us/dotnet/articles/standard/library).
- Implementation of the `Microsoft.Extensions.DependencyInjection` abstraction. This can be found in the [`Autofac.Extensions.DependencyInjection`](https://www.nuget.org/packages/Autofac.Extensions.DependencyInjection) NuGet package.
- The `PreserveExistingDefaults` option now works correctly across lifetime scopes when registrations are added during the creation of a child lifetime scope.
- The ability to provide an `IPropertySelector` to choose which properties should be property injected.
- More type and component registration descriptions to exception messages for easier debugging.
- `AsImplementedInterfaces` now includes the actual interface being registered preventing the need to call `AsSelf` as well.
- Performance improvements in a number of core components.
- A backwards-compatibility polyfill for the `Serializable` attribute so that .NET 4.5.1 consumers can serialize `DependencyResolutionException` across `AppDomain` etc. as was possible prior to migrating to PCL.
- Details are provided on the specific registration that fails when a tagged lifetime scope can't be found.
- A `DependencyResolutionException` is thrown if an `InstancePerLifetimeScope` service attempts to create an instance of itself during its construction.
- Added assembly scanning overloads of `AsClosedTypesOf` that accepts a `serviceKey` or `serviceKeyMapping` for keyed registrations.
",https://api.github.com/users/tillig,1156571,tillig,https://api.github.com/repos/autofac/Autofac/releases/4560916/assets,https://api.github.com/repos/autofac/Autofac/releases/4560916,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.0.0,https://github.com/autofac/Autofac/releases/tag/v4.0.0,https://api.github.com/repos/autofac/Autofac/zipball/v4.0.0,v4.0.0,False,False
4560903,2016-08-24T15:10:24Z,2016-11-03T16:06:01Z,,"- Updated minimum specific .NET framework target to be .NET 4.5.
- Removed specific `uap10.0` framework target since it's covered by `netstandard1.1`.
",https://api.github.com/users/tillig,1156571,tillig,https://api.github.com/repos/autofac/Autofac/releases/4560903/assets,https://api.github.com/repos/autofac/Autofac/releases/4560903,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.0.1,https://github.com/autofac/Autofac/releases/tag/v4.0.1,https://api.github.com/repos/autofac/Autofac/zipball/v4.0.1,v4.0.1,False,False
4560890,2016-08-25T15:27:11Z,2016-11-03T16:05:16Z,,"Fixed [#789](https://github.com/autofac/Autofac/issues/789): Property injection was incorrectly considering parameters during resolution. `InjectProperties` now allows parameters to be passed if that functionality is required.
",https://api.github.com/users/tillig,1156571,tillig,https://api.github.com/repos/autofac/Autofac/releases/4560890/assets,https://api.github.com/repos/autofac/Autofac/releases/4560890,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.1.0,https://github.com/autofac/Autofac/releases/tag/v4.1.0,https://api.github.com/repos/autofac/Autofac/zipball/v4.1.0,v4.1.0,False,False
4560772,2016-11-03T15:51:59Z,2016-11-03T15:58:50Z,,"- Fixed #495: Improved generic handling in ACTNARS so it no longer interferes with implicit relationship types.
- Fixed #782: Removed the `SerializableAttribute` polyfill from the Autofac assembly.
- Added a string/object ""properties"" dictionary on the `ContainerBuilder` to enable sharing of data across component and module registrations.
",https://api.github.com/users/tillig,1156571,tillig,https://api.github.com/repos/autofac/Autofac/releases/4560772/assets,https://api.github.com/repos/autofac/Autofac/releases/4560772,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.2.0,https://github.com/autofac/Autofac/releases/tag/v4.2.0,https://api.github.com/repos/autofac/Autofac/zipball/v4.2.0,v4.2.0,False,False
4420621,2015-02-22T10:26:24Z,2016-10-18T16:41:16Z,v3.5.2,"First release after moving to GitHub.

# 3.5.0
- Resolved [issue 512](https://github.com/autofac/Autofac/issues/512): Added Windows Phone 8.1 (`wpa81`) target to NuGet package and switched to build under Profile328 (`portable-net4+sl5+netcore45+wpa81+wp8+MonoAndroid1+MonoTouch1`)

# 3.3.0

## Bug Fixes
- Resolved issue [issue 269](https://github.com/autofac/Autofac/issues/269): Func<T,U,...> should not be resolvable if any parameter types are duplicated.

# 3.2.0

## Bug Fixes
- Resolved issue [issue 462](https://github.com/autofac/Autofac/issues/462): Switched `ContainerBuilder.Update` optional parameter to two separate method overloads.

## Changes
- Resolved Issue [issue 474](https://github.com/autofac/Autofac/issues/474): Added a new `IModuleRegistrar` interface so module registrations can be chained off of a `ContainerBuilder` in a fluent fashion.

# 3.1.4

## Bug Fixes
- Resolved [issue 464](https://github.com/autofac/Autofac/issues/464): `InjectProperties` now ignores properties that contain a collection of value types (includes `IList`, `ICollection` and `IReadOnlyCollection`).

# 3.1.3

## Bug Fixes
- Resolved issue [issue 454](https://github.com/autofac/Autofac/issues/454): Added support for `AutoActivate/IStartable` on `Update`.

## Changes
- Added support for `IList`, `ICollection`, `IReadOnlyList` and `IReadOnlyCollection` to the `CollectionRegistrationSource`.

# 3.1.0

## Changes
- The package name and version is written into the `AssemblyDescription` attibute. This allows the package information to be seen in Visual Studio avoiding confusion with the assembly version that remains at the major.
- Added ability to configure `AnyConcreteTypeNotAlreadyRegisteredSource` registrations.
  
  builder.RegisterSource(new AnyConcreteTypeNotAlreadyRegisteredSource()
      .WithRegistrationsAs(rb => rb.InstancePerLifetimeScope()));
- Moved `Autofac.Configuration` to a separate NuGet package.
- Added non-generic overload for `ResolveKeyed`.

## Bug Fixes
- [Issue 413](https://github.com/autofac/Autofac/issues/413): Resolving a `SingleInstance` registration locks during subsequent resolves, even if the instance has already been created.

# 3.0.2

## Changes
- Enabled XML documentation for all projects and added missing comments.
- Minor performance improvements in reflection based activation.

## Bug Fixes
- Resolved [Issue 421](https://github.com/autofac/Autofac/issues/421): Generic parameters constrained with complex generic types fail to resolve.

# 3.0.1

## Changes
- Rollback of Issue 397 (Nested lifetime scopes aren't disposed when the parent is disposed) due to memory leak.

# 3.0.0

## Changes
- Added the inner exception message to `DependencyResolutionException` message for easier troubleshooting.

## Bug Fixes
- [Issue 352](https://github.com/autofac/Autofac/issues/352): Security exception in Silverlight 5
- [Issue 394](https://github.com/autofac/Autofac/issues/394): `ContainerBuilder.RegisterAssemblyType` depends on assembly list order
- [Issue 343](https://github.com/autofac/Autofac/issues/343): Include inner exception message in outer exception message when wrapping exceptions from constructors

# 3.0.0 Beta 2

## Changes
- Added `AutoActivate()` registration extension to flag components to be automatically resolved on container build.
- Added a `RegisterTypes` extension equivalent to `RegisterAssemblyTypes` but which allows you to pass in a specific list of types rather than simply scanning assemblies.

## Bug Fixes
- [Issue 305](https://github.com/autofac/Autofac/issues/305): Add `RegisterAssemblyTypes` overload which gets a list of types.
- [Issue 365](https://github.com/autofac/Autofac/issues/365): Configured Nested Containers Lose `LimitType` on Component Registrations - Affects WCF Service Resolution.
- [Issue 361](https://github.com/autofac/Autofac/issues/361): DynamicProxy interception does not work for WCF clients.
- [Issue 397](https://github.com/autofac/Autofac/issues/397): Nested lifetime scopes aren't disposed when the parent is disposed.
- [Issue 388](https://github.com/autofac/Autofac/issues/388): Wrapper around `IStartable` to make a component implicitly activated.

# 3.0.0 Beta

## Changes
- Portable Class Library. You will be able to target the following frameworks with Autofac 3.0:
- .NET Framework 4 and higher
- Silverlight 5
- .NET for Windows Store apps
- Windows Phone 8
- Single Solution (Core and Extras)
- Semantic Versioning
- SymbolSource support
- Class based metadata
- Matching multiple lifetime scopes

## Bug Fixes
- [Issue 376](https://github.com/autofac/Autofac/issues/376): Exception while trying to throw an exception in Metro app
- [Issue 386](https://github.com/autofac/Autofac/issues/386): Support configuration reading from XML file that is not app.config
- [Issue 378](https://github.com/autofac/Autofac/issues/378): Make `Container.Empty` immutable
- [Issue 358](https://github.com/autofac/Autofac/issues/358): Portable build warnings in a Metro style app
- [Issue 352](https://github.com/autofac/Autofac/issues/352): Provide Silverlight 5 Support

# 2.6.3.862

## Bug Fixes
- [Issue 373](https://github.com/autofac/Autofac/issues/373): The `ConstructorParameterBinding` now uses a `ConcurrentDictionary` for caching `ConstructorInvoker` instances to support multiple containers being present in the same `AppDomain`.

# 2.6.2.859

## Changes
- Module Scanning feature.
- Performance Improvements.

# 2.6.1

## Changes
- Autofac can now be used with .NET Portable Class Libraries (download only on the project site. (The Windows Phone 7 build now uses this configuration too.)
- Autofac.dll is now clear of any issues found by SecAnnotate.exe.

# 2.5

## Changes
- `Module.ThisAssembly` simplifies implementation of modules that scan their own assembly.
- Windows Phone 7 and 7.1 support.
- `ILifetimeScope` without affecting the parent scope.
- Introduced `ContainerBuildOptions` to control invocation of `IStartable.Start()` under unit tests.
- `Container.Empty` is now a property rather than a field (protection from inadvertent updates.
- Removed broken/obsolete examples from source tree (better examples are available elsewhere online).
- `ComponentRegistry.Register()` is now safe for use under multiple threads
- Tightened up behavior when correct constructor to use under reflection activator is ambiguous (now throws rather than choosing nondeterministically).
- Improved exception messages.

## Bug Fixes
- [Issue 329](https://github.com/autofac/Autofac/issues/329): types are filtered by compatibilty before invoking key mapping functions when scanning assemblies.
- [Issue 333](https://github.com/autofac/Autofac/issues/333): enable `RegisterAssemblyTypes(...).PreserveExistingDefaults()`.
- [Issue 312](https://github.com/autofac/Autofac/issues/312): allow `ContainerBuilder.Update()` on the `ComponentRegistry` of any.
- [Issue 327](https://github.com/autofac/Autofac/issues/327): allow autowiring of enum properties.
- [Issue 319](https://github.com/autofac/Autofac/issues/319): support list and dictionary literals in XML configuration.
- [Issue 330](https://github.com/autofac/Autofac/issues/330): corrections to generic type constraint checking where the constraint type is an interface.
- [Issue 227](https://github.com/autofac/Autofac/issues/227): breaking change additional options (and enum rather than boolean parameter) for `PropertiesAutowired()`.
- [Issue 311](https://github.com/autofac/Autofac/issues/311): fixed potential lifetime issues when injecting into MVC filter attributes.
- [Issue 309](https://github.com/autofac/Autofac/issues/309): fixed some issues in `TypeExtensions.IsClosedTypeOf()`.

# 2.4.5

## Changes
- Several bug fixes and improved exception messages.
- The awkward but very useful `IContainerAwareComponent` introduced in 2.4 has been deprecated and morphed into a much friendlier and more useful Startable implementation.
- Autofac now consistently throws `DependencyResolutionException` (or a subclass) whenever fatal errors occur during composition.

# 2.4

## Changes
- Complete NuGet Packages for Autofac and its sub-features.
- Improved Decorator Support.
- Removed Older Silverlight Versions from Supported Builds.
- Events and Interfaces to Support Tracing.
- `.AsImplementedInterfaces()` is now supported on non-scanning registrations.
- `IDisposable` is no longer considered a service by `.AsImplementedInterfaces()`.
- Additional eager checks for generic type/service compatibility at registration time.
- An additional `.WithParameter()` overload has been added, accepting predicate and value accessor like `ResolvedParameter`.
- Extension methods for common predicates on `System.Type` are now public for use with scanning, e.g. `Except(t => t.IsClosedTypeOf(x))`.

## Bug Fixes
- Fixed bug [issue 288](https://github.com/autofac/Autofac/issues/288) – resolve all failing in customised lifetime scopes when one component supports multiple interfaces.
",https://api.github.com/users/tillig,1156571,tillig,https://api.github.com/repos/autofac/Autofac/releases/4420621/assets,https://api.github.com/repos/autofac/Autofac/releases/4420621,develop,https://api.github.com/repos/autofac/Autofac/tarball/v3.5.2,https://github.com/autofac/Autofac/releases/tag/v3.5.2,https://api.github.com/repos/autofac/Autofac/zipball/v3.5.2,v3.5.2,False,False
4420594,2016-09-22T16:53:18Z,2016-10-18T16:33:37Z,v4.1.1,"- Fixed #728: AnyConcreteTypeNotAlreadyRegisteredSource now ignores string parameters.
- Fixed #790: ContravariantRegistrationSource now correctly ignores value types.
- Fixed #794: Incorrect handling of generic parameter constraints.
- Fixed #799: Inject unset properties now handles exceptions thrown during property get operations.
",https://api.github.com/users/tillig,1156571,tillig,https://api.github.com/repos/autofac/Autofac/releases/4420594/assets,https://api.github.com/repos/autofac/Autofac/releases/4420594,develop,https://api.github.com/repos/autofac/Autofac/tarball/v4.1.1,https://github.com/autofac/Autofac/releases/tag/v4.1.1,https://api.github.com/repos/autofac/Autofac/zipball/v4.1.1,v4.1.1,False,False
