id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
8164896,2017-10-18T12:53:45Z,2017-10-18T13:39:27Z,Version 0.4.18,"This release adds further backwards-incompatible security measures enabled via ``pragma experimental ""v0.5.0"";`` and contains another important feature: You can now select to compile only certain contracts using the ``outputSelection`` field of the [standard-json-io](https://solidity.readthedocs.io/en/develop/using-the-compiler.html#input-description) compiler interface, which should speed up tools like truffle tremendously.

There are also two important bug fixes: One was an oversight in the way `bytes` variables are allocated in memory and can reduce the memory requirements 32-fold. The second is a security fix: In extremely specific circumstances, it can happen that a regular function is called instead of the fallback function for an Ether transfer without data. These circumstances are: The function has to have a zero signature (one out of 4294967296), it has to be payable, the contract cannot have more than five (external) functions and it cannot have a fallback function.

**Features:**
 * Code Generator: Always use all available gas for calls as experimental 0.5.0 feature
   (previously, some amount was retained in order to work in pre-Tangerine-Whistle
   EVM versions)
 * Parser: Better error message for unexpected trailing comma in parameter lists.
 * Standard JSON: Support the ``outputSelection`` field for selective compilation of supplied sources.
 * Syntax Checker: Unary ``+`` is now a syntax error as experimental 0.5.0 feature.
 * Type Checker: Disallow non-pure constant state variables as experimental 0.5.0 feature.
 * Type Checker: Do not add members of ``address`` to contracts as experimental 0.5.0 feature.
 * Type Checker: Force interface functions to be external as experimental 0.5.0 feature.
 * Type Checker: Require ``storage`` or ``memory`` keyword for local variables as experimental 0.5.0 feature.

**Bugfixes:**
 * Code Generator: Allocate one byte per memory byte array element instead of 32.
 * Code Generator: Do not accept data with less than four bytes (truncated function
   signature) for regular function calls - fallback function is invoked instead.
 * Optimizer: Remove unused stack computation results.
 * Parser: Fix source location of VariableDeclarationStatement.
 * Type Checker: Allow ``gas`` in view functions.
 * Type Checker: Do not mark event parameters as shadowing state variables.
 * Type Checker: Prevent duplicate event declarations.
 * Type Checker: Properly check array length and don't rely on an assertion in code generation.
 * Type Checker: Properly support overwriting members inherited from ``address`` in a contract
   (such as ``balance``, ``transfer``, etc.)
 * Type Checker: Validate each number literal in tuple expressions even if they are not assigned from.

We especially thank all our open source community contributors:

benjaminion, bernard peh, Boris Kostenko, Dave Hoover, David Au, Federico Bond, Gianfranco Cecconi, Giovanni Casinelli, Ilya Drabenia, Martín Triay, Rhett Aultman, Sergiusz Bazanski, wadeAlexC, Walter Weinmann and Zetherz.

If you want to perform a source build, please only use solidity_0.4.18.tar.gz and not the zip provided by github directly.",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/8164896/assets,https://api.github.com/repos/ethereum/solidity/releases/8164896,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.18,https://github.com/ethereum/solidity/releases/tag/v0.4.18,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.18,v0.4.18,False,False
7841316,2017-09-21T14:56:16Z,2017-09-21T15:40:43Z,Version 0.4.17,"As we are getting closer to the next breaking release, we want to give everyone a heads up by introducing `pragma experimental ""v0.5.0""` which already enables some of the new safety features of the 0.5.0 release.

Furthermore, this release finally checks the modifiers ``view`` (used to be named ``constant``) and ``pure`` on functions. As a rule of thumb, use ``view`` if your function does not modify storage and ``pure`` if it does not even read any state information - but the compiler will also suggest the tightest restriction itself.

We also worked further on the new ABI encoder: Functions can now return structs. Switch it on using `pragma experimental ABIEncoderV2`. It should already work, but still generates more expensive code.

Finally, many new warnings were introduced and error messages improved.

**Features:**
 * Assembly Parser: Support multiple assignment (``x, y := f()``).
 * Code Generator: Keep a single copy of encoding functions when using the experimental ""ABIEncoderV2"".
 * Code Generator: Partial support for passing ``structs`` as arguments and return parameters (requires ``pragma experimental ABIEncoderV2;`` for now).
 * General: Support ``pragma experimental ""v0.5.0"";`` to activate upcoming breaking changes.
 * General: Added ``.selector`` member on external function types to retrieve their signature.
 * Optimizer: Add new optimization step to remove unused ``JUMPDEST``s.
 * Static Analyzer: Warn when using deprecated builtins ``sha3`` and ``suicide``
   (replaced by ``keccak256`` and ``selfdestruct``, introduced in 0.4.2 and 0.2.0, respectively).
 * Syntax Checker: Warn if no visibility is specified on contract functions.
 * Type Checker: Display helpful warning for unused function arguments/return parameters.
 * Type Checker: Do not show the same error multiple times for events.
 * Type Checker: Greatly reduce the number of duplicate errors shown for duplicate constructors and functions.
 * Type Checker: Warn on using literals as tight packing parameters in ``keccak256``, ``sha3``, ``sha256`` and ``ripemd160``.
 * Type Checker: Enforce ``view`` and ``pure``.
 * Type Checker: Enforce ``view`` / ``constant`` with error as experimental 0.5.0 feature.
 * Type Checker: Enforce fallback functions to be ``external`` as experimental 0.5.0 feature.

**Bugfixes:**
 * ABI JSON: Include all overloaded events.
 * Parser: Crash fix related to parseTypeName.
 * Type Checker: Allow constant byte arrays.


We especially thank all our open source community contributors:

Ali92hm, Aaron Colaço, Lefteris Karapetsas, Matthieu Caneill, Robert Edström and Suman

If you want to perform a source build, please only use solidity_0.4.17.tar.gz and not the zip provided by github directly.",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/7841316/assets,https://api.github.com/repos/ethereum/solidity/releases/7841316,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.17,https://github.com/ethereum/solidity/releases/tag/v0.4.17,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.17,v0.4.17,False,False
7512285,2017-08-24T18:50:37Z,2017-08-24T20:31:12Z,Version 0.4.16,"This release introduces several new features, some of which have to be
explicitly activated using `pragma experimental <feature name>;`.

We split the ``constant`` keyword for functions into ``pure`` (neither reads from nor writes to the state)
and ``view`` (does not modify the state). They are not enforced yet, but will most likely make use
of the the new STATIC_CALL feature after Metropolis.

Furthermore, the ABI encoder was re-implemented in a much cleaner way using our new intermediate language. It can encode arbitrarily nested arrays and will also be able to encode structs starting from the next release. Please try it out using `pragma experimental ABIEncoderV2;` and check if you have any issues with the encoder. It currently generates larger code than the old encoder, but we hope to fix that soon.

Finally, solc now include experimental support for automated overflow and assertion checking at compile-time using the SMT solver Z3. It is active if you use `pragma experimental SMTChecker;` and if solc was compiled with Z3 support. The latter is currently only the case for the PPA builds (or if you build from source and have libz3-dev in your system), but we also have a solution in the pipeline that will make it work for solc-js (and thus remix).

**Features:**
 * ABI JSON: Include new field ``stateMutability`` with values ``pure``, ``view``, ``nonpayable`` and ``payable``.
 * Analyzer: Experimental partial support for Z3 SMT checker (""SMTChecker"").
 * Build System: Shared libraries (``libdevcore``, ``libevmasm``, ``libsolidity`` and ``liblll``) are no longer produced during the build process.
 * Code generator: Experimental new implementation of ABI encoder that can encode arbitrarily nested arrays (""ABIEncoderV2"")
 * Metadata: Store experimental flag in metadata CBOR.
 * Parser: Display previous visibility specifier in error if multiple are found.
 * Parser: Introduce ``pure`` and ``view`` keyword for functions, ``constant`` remains an alias for ``view`` and pureness is not enforced yet, so use with care.
 * Static Analyzer: Warn about large storage structures.
 * Syntax Checker: Support ``pragma experimental <feature>;`` to turn on experimental features.
 * Type Checker: More detailed error message for invalid overrides.
 * Type Checker: Warn about shifting a literal.

**Bugfixes:**
 * Assembly Parser: Be more strict about number literals.
 * Assembly Parser: Limit maximum recursion depth.
 * Parser: Enforce commas between array and tuple elements.
 * Parser: Limit maximum recursion depth.
 * Type Checker: Crash fix related to ``using``.
 * Type Checker: Disallow constructors in libraries.
 * Type Checker: Reject the creation of interface contracts using the ``new`` statement.


We especially thank all our open source community contributors:

Chim Kan, Federico Bond, feliam, gubatron, Isaac Ibiapina, James Ray, Joshua Hannan, Lea Arias, Nick Savers, Stu West, Vladislav Ankudinov and Zhen Zhang

If you want to perform a source build, please only use solidity_0.4.16.tar.gz and not the zip provided by github directly.",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/7512285/assets,https://api.github.com/repos/ethereum/solidity/releases/7512285,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.16,https://github.com/ethereum/solidity/releases/tag/v0.4.16,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.16,v0.4.16,False,False
7321721,2017-08-08T14:41:39Z,2017-08-08T17:02:57Z,Version 0.4.15,"This is mainly a bugfix release that corrects a problem with the return value of the low-level ``delegatecall`` function and removes some invalid warning messages.

Features:
 * Type Checker: Show unimplemented function if trying to instantiate an abstract class.

Bugfixes:
 * Code Generator: ``.delegatecall()`` should always return execution outcome.
 * Code Generator: Provide ""new account gas"" for low-level ``callcode`` and ``delegatecall``.
 * Type Checker: Constructors must be implemented if declared.
 * Type Checker: Disallow the ``.gas()`` modifier on ``ecrecover``, ``sha256`` and ``ripemd160``.
 * Type Checker: Do not mark overloaded functions as shadowing other functions.
 * Type Checker: Internal library functions must be implemented if declared.

We especially thank all our open source community contributors:

Leo Arias, Adrián Calvo and SaadSurya

If you want to perform a source build, please only use solidity_0.4.15.tar.gz and not the zip provided by github directly.",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/7321721/assets,https://api.github.com/repos/ethereum/solidity/releases/7321721,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.15,https://github.com/ethereum/solidity/releases/tag/v0.4.15,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.15,v0.4.15,False,False
7229404,2017-07-31T14:14:46Z,2017-07-31T14:55:14Z,Version 0.4.14,"This release contains several new features and bugfixes and also an important security fix: The ``ecrecover`` function can be forced to return invalid data, which can be used to bypass authentication in very special circumstances.

Features:
 * C API (``jsonCompiler``): Export the ``license`` method.
 * Code Generator: Optimise the fallback function, by removing a useless jump.
 * Inline Assembly: Show useful error message if trying to access calldata variables.
 * Inline Assembly: Support variable declaration without initial value (defaults to 0).
 * Metadata: Only include files which were used to compile the given contract.
 * Type Checker: Disallow value transfers to contracts without a payable fallback function.
 * Type Checker: Include types in explicit conversion error message.
 * Type Checker: Raise proper error for arrays too large for ABI encoding.
 * Type checker: Warn if using ``this`` in a constructor.
 * Type checker: Warn when existing symbols, including builtins, are overwritten.

Bugfixes:
 * Code Generator: Properly clear return memory area for ecrecover.
 * Type Checker: Fix crash for some assignment to non-lvalue.
 * Type Checker: Fix invalid ""specify storage keyword"" warning for reference members of structs.
 * Type Checker: Mark modifiers as internal.
 * Type Checker: Re-allow multiple mentions of the same modifier per function.

We especially thank all our open source community contributors:

Antonio Tenerio-Fornés, benjaminion, Federico Bond, Harry Wright, hh3755, James Ray, Juaj Bednar, Luke Schoen, Loa Arias, maurelian, Nathan Hernandez, NIC619, Rhett Aultman, Skiral Inc and VoR0220.

If you want to perform a source build, please only use solidity_0.4.14.tar.gz and not the zip provided by github directly.",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/7229404/assets,https://api.github.com/repos/ethereum/solidity/releases/7229404,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.14,https://github.com/ethereum/solidity/releases/tag/v0.4.14,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.14,v0.4.14,False,False
6949532,2017-07-06T10:45:11Z,2017-07-06T11:13:25Z,Version 0.4.13,"This is a small bugfix release that fixes several trivial but very annoying bugs that were introduced with 0.4.12. We also deprecate some old features in preparation of the breaking release 0.5.0.

Features:
 * Syntax Checker: Deprecated ``throw`` in favour of ``require()``, ``assert()`` and ``revert()``.
 * Type Checker: Warn if a local storage reference variable does not explicitly use the keyword ``storage``.

Bugfixes:
 * Code Generator: Correctly unregister modifier variables.
 * Compiler Interface: Only output AST if analysis was successful.
 * Error Output: Do not omit the error type.

We especially thank all our open source community contributors:

Leo Arias and Patrick Walters.

If you want to perform a source build, please only use solidity_0.4.13.tar.gz and not the zip provided by github directly.",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/6949532/assets,https://api.github.com/repos/ethereum/solidity/releases/6949532,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.13,https://github.com/ethereum/solidity/releases/tag/v0.4.13,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.13,v0.4.13,False,False
6911249,2017-07-03T16:45:11Z,2017-07-03T16:47:17Z,Version 0.4.12,"This release introduces the AST export, solidifies inline assembly, introduces some more warnings and fixes several bugs.

Manual jumps in assembly are deprecated in favour of the structured constructs `switch`, `for` and function calls also to provide better portability in the future.

Features:
 * Assembly: Add ``CREATE2`` (EIP86), ``STATICCALL`` (EIP214), ``RETURNDATASIZE`` and ``RETURNDATACOPY`` (EIP211) instructions.
 * Assembly: Display auxiliary data in the assembly output.
 * Assembly: Renamed ``SHA3`` to ``KECCAK256``.
 * AST: export all attributes to JSON format.
 * C API (``jsonCompiler``): Use the Standard JSON I/O internally.
 * Code Generator: Added the Whiskers template system.
 * Inline Assembly: ``for`` and ``switch`` statements.
 * Inline Assembly: Function definitions and function calls.
 * Inline Assembly: Introduce ``keccak256`` as an opcode. ``sha3`` is still a valid alias.
 * Inline Assembly: Present proper error message when not supplying enough arguments to a functional
   instruction.
 * Inline Assembly: Warn when instructions shadow Solidity variables.
 * Inline Assembly: Warn when using ``jump``s.
 * Remove obsolete Why3 output.
 * Type Checker: Enforce strict UTF-8 validation.
 * Type Checker: Warn about copies in storage that might overwrite unexpectedly.
 * Type Checker: Warn about type inference from literal numbers.
 * Static Analyzer: Warn about deprecation of ``callcode``.

Bugfixes:
 * Assembly: mark ``MLOAD`` to have side effects in the optimiser.
 * Code Generator: Fix ABI encoding of empty literal string.
 * Code Generator: Fix negative stack size checks.
 * Code generator: Use ``REVERT`` instead of ``INVALID`` for generated input validation routines.
 * Inline Assembly: Enforce function arguments when parsing functional instructions.
 * Optimizer: Disallow optimizations involving ``MLOAD`` because it changes ``MSIZE``.
 * Static Analyzer: Unused variable warnings no longer issued for variables used inside inline assembly.
 * Type Checker: Fix address literals not being treated as compile-time constants.
 * Type Checker: Fixed crash concerning non-callable types.
 * Type Checker: Fixed segfault with constant function parameters
 * Type Checker: Disallow comparisons between mapping and non-internal function types.
 * Type Checker: Disallow invoking the same modifier multiple times.
 * Type Checker: Do not treat strings that look like addresses as addresses.
 * Type Checker: Support valid, but incorrectly rejected UTF-8 sequences.

We especially thank all our open source community contributors:

Alexey Alexeyeff, Andre Miras, Ben Che, benjaminion, Dillon Arevalo, Edward Ruchevits, Erik Quenon Steggall, ethers, Federico Bond, gregg dourgarian, James Ray, Jonathan Brown, Julius Faber, Lefteris Karapetsas, Marius Kjærstad, Micah Zoltu, Paul Stadig, RJ Catalano, Rhett Aultman, Ron Gross, seusher and Travis Jacobs.

If you want to perform a source build, please only use solidity_0.4.12.tar.gz and not the zip provided by github directly.",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/6911249/assets,https://api.github.com/repos/ethereum/solidity/releases/6911249,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.12,https://github.com/ethereum/solidity/releases/tag/v0.4.12,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.12,v0.4.12,False,False
6263295,2017-05-03T12:36:32Z,2017-05-03T12:59:37Z,Version 0.4.11,"This release fixes a bug in the optimizer (more about this on the [blog](https://blog.ethereum.org/2017/05/03/solidity-optimizer-bug/)), introduces the standard JSON interface, adds ``interface`` contracts and implements some additional safety checks.

The standard [JSON interface](https://solidity.readthedocs.io/en/develop/using-the-compiler.html#compiler-input-and-output-json-description) provides a unified way to invoke the Solidity compiler in order to ease cross-platform adoption and compilation verification.

**Features:**
 * Implement the Standard JSON Input / Output API
 * Support ``interface`` contracts.
 * C API (``jsonCompiler``): Add the ``compileStandard()`` method to process a Standard JSON I/O.
 * Commandline interface: Add the ``--standard-json`` parameter to process a Standard JSON I/O.
 * Commandline interface: Support ``--allow-paths`` to define trusted import paths. Note: the
   path(s) of the supplied source file(s) is always trusted.
 * Inline Assembly: Storage variable access using ``_slot`` and ``_offset`` suffixes.
 * Inline Assembly: Disallow blocks with unbalanced stack.
 * Static analyzer: Warn about statements without effects.
 * Static analyzer: Warn about unused local variables, parameters, and return parameters.
 * Syntax checker: issue deprecation warning for unary '+'

**Bugfixes:**
 * Assembly output: Implement missing AssemblyItem types.
 * Compiler interface: Fix a bug where source indexes could be inconsistent between Solidity compiled
   with different compilers (clang vs. gcc) or compiler settings. The bug was visible in AST
   and source mappings.
 * Gas Estimator: Reflect the most recent fee schedule.
 * Type system: Contract inheriting from base with unimplemented constructor should be abstract.
 * Optimizer: Number representation bug in the constant optimizer fixed.


We especially thank all our open source community contributors:

Abraham Sangha, AdrianClv, Andy Milenius, Chandan Kumar, Federico Bond, FedericoCapello, JohnAllen, Matt Searle, Matt Wisniewski, Morgan, Omkara and Rhett Aultman


If you want to perform a source build, please only use solidity_0.4.11.tar.gz and not the zip provided by github directly.

**Update**: the original release on 3rd of May contained the wrong version numbers (it included the pre-release tag). This has been rectified today, the 4th of May, and all the linked binaries have been updated.

The files should have the following SHA-256 hashes:
- `solc-static-linux`: `0a8d138ee245039e6f8312edc024ba3c4739cc3c013b47dc7fc9196a2e327fea`
- `solidity-windows.zip`: `4387ef9733643ed387e5975d2241e423bd8d79c54db90d07a70c62c8c3e1be77`
- `solidity_0.4.11.tar.gz`: `5a96a3ba4d0d6457ad8101d6219152610e46b384bfbd48244e3474573f7a6d47`
- `soljson.js`: `49fa27e6e70e08ddc7ba3790325e07c07902d9e855362d03fb908757ac14b4e5`",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/6263295/assets,https://api.github.com/repos/ethereum/solidity/releases/6263295,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.11,https://github.com/ethereum/solidity/releases/tag/v0.4.11,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.11,v0.4.11,False,False
5755876,2017-03-15T17:07:52Z,2017-03-15T17:22:12Z,Version 0.4.10,"This release is focused on stability and also introduces some new smart contract safety features: ``require``, ``assert`` and ``transfer``. Note that the new ``revert`` function will only be gas-efficient starting from homestead.

**Features:**
 * Add ``assert(condition)``, which throws if condition is false (meant for internal errors).
 * Add ``require(condition)``, which throws if condition is false (meant for invalid input).
 * Commandline interface: Do not overwrite files unless forced.
 * Introduce ``.transfer(value)`` for sending Ether.
 * Code generator: Support ``revert()`` to abort with rolling back, but not consuming all gas.
 * Inline assembly: Support ``revert`` (EIP140) as an opcode.
 * Parser: Support scientific notation in numbers (e.g. ``2e8`` and ``200e-2``).
 * Type system: Support explicit conversion of external function to address.
 * Type system: Warn if base of exponentiation is literal (result type might be unexpected).
 * Type system: Warn if constant state variables are not compile-time constants.

**Bugfixes:**
 * Commandline interface: Always escape filenames (replace ``/``, ``:`` and ``.`` with ``_``).
 * Commandline interface: Do not try creating paths ``.`` and ``..``.
 * Commandline interface: Allow long library names.
 * Parser: Disallow octal literals.
 * Type system: Fix a crash caused by continuing on fatal errors in the code.
 * Type system: Disallow compound assignment for tuples.
 * Type system: Detect cyclic dependencies between constants.
 * Type system: Disallow arrays with negative length.
 * Type system: Fix a crash related to invalid binary operators.
 * Type system: Disallow ``var`` declaration with empty tuple type.
 * Type system: Correctly convert function argument types to pointers for member functions.
 * Type system: Move privateness of constructor into AST itself.
 * Inline assembly: Charge one stack slot for non-value types during analysis.
 * Assembly output: Print source location before the operation it refers to instead of after.
 * Optimizer: Stop trying to optimize tricky constants after a while.

If you want to perform a source build, please only use solidity_0.4.10.tar.gz and not the zip provided by github directly.",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/5755876/assets,https://api.github.com/repos/ethereum/solidity/releases/5755876,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.10,https://github.com/ethereum/solidity/releases/tag/v0.4.10,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.10,v0.4.10,False,False
5318178,2017-01-31T17:29:51Z,2017-01-31T18:33:43Z,Version 0.4.9,"This release fixes quite some bugs and also adds several new features.

Things to look out for:
- To disambiguate contracts and libraries of the same name in different files, everything is now prefixed by ""filename:"". This applies to the compiler output, the linker input and other things.
- Internal exceptions are now thrown by using an invalid opcode (0xfe), manual exceptions still use an invalid jump.

Features:
- Compiler interface: Contracts and libraries can be referenced with a `file:` prefix to make them unique.
- Compiler interface: Report source location for ""stack too deep"" errors.
- AST: Use deterministic node identifiers.
- Inline assembly: introduce `invalid` (EIP141) as an opcode.
- Type system: Introduce type identifier strings.
- Type checker: Warn about invalid checksum for addresses and deduce type from valid ones.
- Metadata: Do not include platform in the version number.
- Metadata: Add option to store sources as literal content.
- Code generator: Extract array utils into low-level functions.
- Code generator: Internal errors (array out of bounds, etc.) now cause a reversion by using an invalid
  instruction (0xfe - EIP141) instead of an invalid jump. Invalid jump is still kept for explicit throws.

Bugfixes:
- Code generator: Allow recursive structs.
- Inline assembly: Disallow variables named like opcodes.
- Type checker: Allow multiple events of the same name (but with different arities or argument types)
- Natspec parser: Fix error with `@param` parsing and whitespace.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/5318178/assets,https://api.github.com/repos/ethereum/solidity/releases/5318178,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.9,https://github.com/ethereum/solidity/releases/tag/v0.4.9,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.9,v0.4.9,False,False
5151856,2017-01-13T12:05:02Z,2017-01-13T12:40:58Z,Version 0.4.8,"Features:
- Optimiser: Performance improvements.
- Output: Print assembly in new standardized Solidity assembly format.

Bugfixes:
- Remappings: Prefer longer context over longer prefix.
- Type checker, code generator: enable access to events of base contracts' names.
- Imports: `import "".dir/a""` is not a relative path.  Relative paths begin with directory `.` or `..`.
- Type checker: disallow inheritances of different kinds (e.g. a function and a modifier) of members of the same name

If you want to perform a source build, please only use solidity_0.4.8.tar.gz and not the zip provided by github directly.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/5151856/assets,https://api.github.com/repos/ethereum/solidity/releases/5151856,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.8,https://github.com/ethereum/solidity/releases/tag/v0.4.8,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.8,v0.4.8,False,False
4929368,2016-12-15T11:16:56Z,2016-12-15T13:00:34Z,Version 0.4.7,"Features:
- Bitshift operators.
- Type checker: Warn when `msg.value` is used in non-payable function.
- Code generator: Inject the Swarm hash of a metadata file into the bytecode.
- Code generator: Replace expensive memcpy precompile by simple assembly loop.
- Optimizer: Some dead code elimination.

Bugfixes:
- Code generator: throw if calling the identity precompile failed during memory (array) copying.
- Type checker: string literals that are not valid UTF-8 cannot be converted to string type
- Code generator: any non-zero value given as a boolean argument is now converted into 1.
- AST Json Converter: replace `VariableDefinitionStatement` nodes with `VariableDeclarationStatement`
- AST Json Converter: fix the camel case in `ElementaryTypeNameExpression`
- AST Json Converter: replace `public` field with `visibility` in the function definition nodes

Swarm hash of javascript binary: bzzr://de00cf8d235867a00d831e0055b376420789977d276c02e6ff0d1d5b00f5d84d
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/4929368/assets,https://api.github.com/repos/ethereum/solidity/releases/4929368,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.7,https://github.com/ethereum/solidity/releases/tag/v0.4.7,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.7,v0.4.7,False,False
4730247,2016-11-22T14:34:17Z,2016-11-22T14:35:16Z,Version 0.4.6,"Bugfixes:
- Optimizer: Knowledge about state was not correctly cleared for JUMPDESTs

Swarm hash of js compiler: bzzr:/b873fa122233c91b1531527c390f6ca49df4d2a2c5f75706f4b612a0c813cb6a
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/4730247/assets,https://api.github.com/repos/ethereum/solidity/releases/4730247,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.6,https://github.com/ethereum/solidity/releases/tag/v0.4.6,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.6,v0.4.6,False,False
4715730,2016-11-21T10:42:38Z,2016-11-21T11:26:06Z,Version 0.4.5,"This Solidity release adds [function types](https://solidity.readthedocs.io/en/develop/types.html#function-types). Use-cases include supplying callbacks for asynchronous or off-chain operations or generic library features (for example map-reduce-style programming). This release also improves the safety of enums and sending Ether to a contract constructor.

Features:
- Function types
- Do-while loops: support for a `do <block> while (<expr>);` control structure
- Inline assembly: support `invalidJumpLabel` as a jump label.
- Type checker: now more eagerly searches for a common type of an inline array with mixed types
- Code generator: generates a runtime error when an out-of-range value is converted into an enum type.

Bugfixes:
- Inline assembly: calculate stack height warning correctly even when local variables are used.
- Code generator: check for value transfer in non-payable constructors.
- Parser: disallow empty enum definitions.
- Type checker: disallow conversion between different enum types.
- Interface JSON: do not include trailing new line.

Swarm hash of js compiler: bzzr://de94c41f727124a5b02bd1db087e6bcba19a682c5d89bf3cdaa650e9fdd08403
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/4715730/assets,https://api.github.com/repos/ethereum/solidity/releases/4715730,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.5,https://github.com/ethereum/solidity/releases/tag/v0.4.5,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.5,v0.4.5,False,False
4534700,2016-10-31T18:21:04Z,2016-11-01T08:53:28Z,Version 0.4.4,"This is a bugfix release that fixes a storage corruption that appears when multiple variables are stored in the same slot ([details](https://blog.ethereum.org/2016/11/01/security-alert-solidity-variables-can-overwritten-storage/)).

Bugfixes:
- Type checker: forbid signed exponential that led to an incorrect use of EXP opcode.
- Code generator: properly clean higher order bytes before storing in storage.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/4534700/assets,https://api.github.com/repos/ethereum/solidity/releases/4534700,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.4,https://github.com/ethereum/solidity/releases/tag/v0.4.4,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.4,v0.4.4,False,False
4478216,2016-10-25T13:32:37Z,2016-10-25T13:53:29Z,Version 0.4.3,"This is a real bugfix release as you can see from the changelog below. The most important fix concerns the optimizer which generated invalid code connected to the `SHA3` opcode in certain situations.

Features:
- Inline assembly: support both `suicide` and `selfdestruct` opcodes
  (note: `suicide` is deprecated).
- Inline assembly: issue warning if stack is not balanced after block.
- Include `keccak256()` as an alias to `sha3()`.
- Support shifting constant numbers.

Bugfixes:
- Commandline interface: Disallow unknown options in `solc`.
- Name resolver: Allow inheritance of `enum` definitions.
- Type checker: Proper type checking for bound functions.
- Type checker: fixed crash related to invalid fixed point constants
- Type checker: fixed crash related to invalid literal numbers.
- Type checker: `super.x` does not look up `x` in the current contract.
- Code generator: expect zero stack increase after `super` as an expression.
- Code generator: fix an internal compiler error for `L.Foo` for `enum Foo` defined in library `L`.
- Code generator: allow inheritance of `enum` definitions.
- Inline assembly: support the `address` opcode.
- Inline assembly: fix parsing of assignment after a label.
- Inline assembly: external variables of unsupported type (such as `this`, `super`, etc.)
  are properly detected as unusable.
- Inline assembly: support variables within modifiers.
- Optimizer: fix related to stale knowledge about SHA3 operations
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/4478216/assets,https://api.github.com/repos/ethereum/solidity/releases/4478216,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.3,https://github.com/ethereum/solidity/releases/tag/v0.4.3,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.3,v0.4.3,False,False
4159082,2016-09-17T13:25:54Z,2016-09-17T13:36:22Z,Version 0.4.2,"Bugfixes:
- Code Generator: Fix library functions being called from payable functions.
- Type Checker: Fixed a crash about invalid array types.
- Code Generator: Fixed a call gas bug that became visible after
  version 0.4.0 for calls where the output is larger than the input.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/4159082/assets,https://api.github.com/repos/ethereum/solidity/releases/4159082,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.2,https://github.com/ethereum/solidity/releases/tag/v0.4.2,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.2,v0.4.2,False,False
4088906,2016-09-09T10:23:50Z,2016-09-09T10:38:32Z,Version 0.4.1,"This is a bugfix release that fixes an error when compiling libraries with the latest version 0.4.0.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/4088906/assets,https://api.github.com/repos/ethereum/solidity/releases/4088906,4fc6fc2ca59579fae2472df319c2d8d31fe5bde5,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.1,https://github.com/ethereum/solidity/releases/tag/v0.4.1,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.1,v0.4.1,False,False
4081126,2016-09-08T12:38:10Z,2016-09-08T14:22:32Z,Version 0.4.0,"**Note:** Version 0.4.0 is unable to compile libraries. Please upgrade to 0.4.1.

This release deliberately breaks backwards compatibility mostly to enforce some safety features. The most important change is that you have to explicitly specify if functions can receive ether via the `payable` modifier. Furthermore, more situations cause exceptions to be thrown.

Minimal changes to be made for upgrade:
- Add `payable` to all functions that want to receive Ether (including the constructor and the fallback function).
- Change `_` to `_;` in modifiers.
- Add version pragma to each file: `pragma solidity ^0.4.0;`

Breaking Changes:
- Source files have to specify the compiler version they are compatible with using e.g. `pragma solidity ^0.4.0;` or
  `pragma solidity >=0.4.0 <0.4.8;`
- Functions that want to receive Ether have to specify the
  new `payable` modifier (otherwise they throw).
- Contracts that want to receive Ether with a plain ""send""
  have to implement a fallback function with the `payable`
  modifier. Contracts now throw if no payable fallback
  function is defined and no function matches the signature.
- Failing contract creation through ""new"" throws.
- Division / modulus by zero throws.
- Function call throws if target contract does not have code
- Modifiers are required to contain `_` (use `if (false) _` as a workaround if needed).
- Modifiers: return does not skip part in modifier after `_`.
- Placeholder statement `_` in modifier now requires explicit `;`.
- `ecrecover` now returns zero if the input is malformed (it previously returned garbage).
- The `constant` keyword cannot be used for constructors or the fallback function.
- Removed `--interface` (Solidity interface) output option
- JSON AST: General cleanup, renamed many nodes to match their C++ names.
- JSON output: `srcmap-runtime` renamed to `srcmapRuntime`.
- Moved (and reworked) standard library contracts from inside the compiler to github.com/ethereum/solidity/std
  (`import ""std"";` or `import owned;` do not work anymore).
- Confusing and undocumented keyword `after` was removed.
- New reserved words: `abstract`, `hex`, `interface`, `payable`, `pure`, `static`, `view`.

Features:
- Hexadecimal string literals: `hex""ab1248fe""`
- Internal: Inline assembly usable by the code generator.
- Commandline interface: Using `-` as filename allows reading from stdin.
- Interface JSON: Fallback function is now part of the ABI.
- Interface: Version string now _semver_ compatible.
- Code generator: Do not provide ""new account gas"" if we know the called account exists.

Bugfixes:
- JSON AST: Nodes were added at wrong parent
- Why3 translator: Crash fix for exponentiation
- Commandline Interface: linking libraries with underscores in their name.
- Type Checker: Fallback function cannot return data anymore.
- Code Generator: Fix crash when `sha3()` was used on unsupported types.
- Code Generator: Manually set gas stipend for `.send(0)`.

Lots of changes to the documentation mainly by voluntary external contributors.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/4081126/assets,https://api.github.com/repos/ethereum/solidity/releases/4081126,release,https://api.github.com/repos/ethereum/solidity/tarball/v0.4.0,https://github.com/ethereum/solidity/releases/tag/v0.4.0,https://api.github.com/repos/ethereum/solidity/zipball/v0.4.0,v0.4.0,False,False
3859219,2016-08-10T19:07:15Z,2016-08-10T19:09:12Z,Version 0.3.6,"This is the first release from the new ""solidity-standalone"" repository. It does not have dependencies to cpp-ethereum anymore and can be built just from the solidity github repository.

Note that the optimizer was disabled in some situations which could lead to larger (but correcter) code.

Features:
- Formal verification: Take external effects on a contract into account.
- Type Checker: Warning about unused return value of low-level calls and send.
- Output: Source location and node id as part of AST output
- Output: Source location mappings for bytecode
- Output: Formal verification as part of json compiler output.

Bugfixes:
- Commandline Interface: Do not crash if input is taken from stdin.
- Scanner: Correctly support unicode escape codes in strings.
- JSON output: Fix error about relative / absolute source file names.
- JSON output: Fix error about invalid utf8 strings.
- Code Generator: Dynamic allocation of empty array caused infinite loop.
- Code Generator: Correctly calculate gas requirements for memcpy precompile.
- Optimizer: Clear known state if two code paths are joined.

Note regarding the PPA: This version of the solc package conflicts with the cpp-ethereum package (because that still contains solidity). Please uninstall cpp-ethereum before installing solc until we also have a new cpp-ethereum release.

The source below cannot be used without the dependent repositories.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/3859219/assets,https://api.github.com/repos/ethereum/solidity/releases/3859219,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.3.6,https://github.com/ethereum/solidity/releases/tag/v0.3.6,https://api.github.com/repos/ethereum/solidity/zipball/v0.3.6,v0.3.6,False,False
3419225,2016-06-10T16:00:49Z,2016-06-10T16:02:13Z,Version 0.3.5,"**Features:**
- Context-dependent path remappings (different modules can use the same library in different versions)

**Bugfixes:**
- Type Checking: Dynamic return types were removed when fetching data from external calls, now they are replaced by an ""unusable"" type.
- Type Checking: Overrides by constructors were considered making a function non-abstract.

note: The source below cannot be used without the dependent repositories.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/3419225/assets,https://api.github.com/repos/ethereum/solidity/releases/3419225,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.3.5,https://github.com/ethereum/solidity/releases/tag/v0.3.5,https://api.github.com/repos/ethereum/solidity/zipball/v0.3.5,v0.3.5,False,False
3344217,2016-05-31T18:01:48Z,2016-05-31T21:23:23Z,Version 0.3.4,"This release contains no changes outside of the documentation.

note: The source below cannot be used without the dependent repositories.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/3344217/assets,https://api.github.com/repos/ethereum/solidity/releases/3344217,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.3.4,https://github.com/ethereum/solidity/releases/tag/v0.3.4,https://api.github.com/repos/ethereum/solidity/zipball/v0.3.4,v0.3.4,False,False
3322684,2016-05-27T15:38:36Z,2016-05-27T17:02:12Z,Version 0.3.3,"This release mainly makes libraries more flexible in that it allows internal functions to be called.

**Features**
- Allow internal library functions to be called (by ""inlining"")
- Fractional/rational constants (only usable with fixed point types, which are still in progress)
- Inline assembly has access to internal functions (as jump labels)
- Running `solc` without arguments on a terminal will print help.

**Fixes**
- Code Generation: Remove some non-determinism in code generation.
- Code Generation: Corrected usage of not / bnot / iszero in inline assembly
- Code Generation: Correctly clean bytesNN types before comparison

note: The source below cannot be used without the dependent repositories.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/3322684/assets,https://api.github.com/repos/ethereum/solidity/releases/3322684,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.3.3,https://github.com/ethereum/solidity/releases/tag/v0.3.3,https://api.github.com/repos/ethereum/solidity/zipball/v0.3.3,v0.3.3,False,False
3044028,2016-04-18T15:33:11Z,2016-04-18T17:34:41Z,Version 0.3.2,"This is mainly a bugfix release. Under the hood, we are in the process of separating the Solidity source code from the rest of the cpp-ethereum source code so that it can soon be built (and released) in isolation.

**Fixes:**
- Code generation: Dynamic arrays of structs were not deleted correctly.
- Code generation: Static arrays in constructor parameter list were not decoded correctly.
- Parser: Inline assembly parser: `byte` opcode was unusable
- Error reporting: tokens for variably-sized types were not converted to string properly

note: The source below cannot be used without the dependent repositories.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/3044028/assets,https://api.github.com/repos/ethereum/solidity/releases/3044028,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.3.2,https://github.com/ethereum/solidity/releases/tag/v0.3.2,https://api.github.com/repos/ethereum/solidity/zipball/v0.3.2,v0.3.2,False,False
2923412,2016-03-31T16:47:56Z,2016-03-31T16:49:39Z,Version 0.3.1,"This release mainly introduces inline assembly ([documentation](https://solidity.readthedocs.org/en/latest/control-structures.html#inline-assembly)). Inline assembly provides a way to write low-level but still well readable code. Together with the coming features of inline library functions and templates, it allows to move much of the development that had to be done in the compiler itself into libraries written in Solidity. In the future, it will be possible to introduce new versatile types that still look like builtins.

**Features:**
- inline assembly

**Fixes:**
- Code generation: array access with narrow types did not clean higher order bits
- Error reporting: error reporting with unknown source location caused a crash

note: The source below cannot be used without the dependent repositories.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/2923412/assets,https://api.github.com/repos/ethereum/solidity/releases/2923412,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.3.1,https://github.com/ethereum/solidity/releases/tag/v0.3.1,https://api.github.com/repos/ethereum/solidity/zipball/v0.3.1,v0.3.1,False,False
2785039,2016-03-11T16:53:33Z,2016-03-11T16:58:49Z,Version 0.3.0 (includes breaking changes),"This version is synchronized to the Homestead changes on the main Ethereum network and introduces various breaking changes.

BREAKING CHANGES:
- You should not rely on division for literals resulting in a (truncated) integer. This is still the case but will change once we implement fixed point types, i.e. in the future `1/2 == 0.5` will be true, currently we have `1/2 == 0`. Note that this only applies to literals (`(2 + 7) / 2`) and not variables (`x / 2`).
- Library calls now default to use DELEGATECALL (e.g. called library functions see the same value as the calling function for `msg.value` and `msg.sender`).
- Added new keywords `assembly`, `fixed`, `ufixed`, `fixedNxM`, `ufixedNxM` (for various values of M and N), `inline` in preparation for future features.

Features:
- `<address>.delegatecall` is provided as a low-level calling interface for DELEGATECALL

Bugfixes:
- Fixed a bug in the optimizer that resulted in comparisons being wrong.

note: The source below cannot be used without the dependent repositories.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/2785039/assets,https://api.github.com/repos/ethereum/solidity/releases/2785039,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.3.0,https://github.com/ethereum/solidity/releases/tag/v0.3.0,https://api.github.com/repos/ethereum/solidity/zipball/v0.3.0,v0.3.0,False,False
2634344,2016-02-17T16:33:20Z,2016-02-17T18:27:35Z,Version 0.2.2,"Features:
- Index access for types `bytes1`, ..., `bytes32` (only read access for now).

Bugfixes:
- Type checker crash for wrong number of base constructor parameters.

note: The source below cannot be used without the dependent repositories.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/2634344/assets,https://api.github.com/repos/ethereum/solidity/releases/2634344,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.2.2,https://github.com/ethereum/solidity/releases/tag/v0.2.2,https://api.github.com/repos/ethereum/solidity/zipball/v0.2.2,v0.2.2,False,False
2522547,2016-01-30T15:40:13Z,2016-01-30T15:40:59Z,Version 0.2.1,"This release includes three major features and one very important bugfix in the optimizer.

In some situations, the optimizer generated incorrect code. Please always test your code before you use it, unfortunately, we can never guarantee 100% correctness.

We are especially grateful about the many voluntary community contributions this release received.
Two fearless individuals dived deep into the solidity code and delivered two major features: Thanks a lot to @VoR0220 for the inline arrays and to @guanqun for the ternary operator!
Furthermore, @bobsummerwill spent a lot of free time handling build issues on MacOS and other platforms.
Other contributions came from @axic, @chfast, @ethers, @janx, @pipermerriam and @u2.

Features:
- **Inline arrays**, i.e. `var y = [1,x,f()];` if there is a common type for `1`, `x` and `f()`. Note that the result is always a fixed-length memory array and conversion to dynamic-length memory arrays is not yet possible.
- **Import** similar to ECMAScript6 import (`import ""abc.sol"" as d` and `import {x, y} from ""abc.sol""`). [Documentation](https://solidity.readthedocs.org/en/latest/layout-of-source-files.html#importing-other-source-files) 
- Commandline compiler solc automatically resolves missing imports and allows for ""include directories"". [Documentation](https://solidity.readthedocs.org/en/latest/layout-of-source-files.html#use-in-actual-compilers)
- **Conditional** / ternary operator: `x ? y : z`

Fixed bugs:
- Several bugs where the optimizer generated invalid code.
- Enums and structs were not accessible to other contracts.
- Fixed segfault connected to function paramater types, appeared during gas estimation.
- Type checker crash for wrong number of base constructor parameters.
- Allow function overloads with different array types.
- Allow assignments of type `(x) = 7`.
- Type `uint176` was not available.
- Fixed crash during type checking concerning constructor calls.
- Fixed crash during code generation concerning invalid accessors for struct types.
- Fixed crash during code generating concerning computing a hash of a struct type.

note: The source below cannot be used without the dependent repositories.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/2522547/assets,https://api.github.com/repos/ethereum/solidity/releases/2522547,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.2.1,https://github.com/ethereum/solidity/releases/tag/v0.2.1,https://api.github.com/repos/ethereum/solidity/zipball/v0.2.1,v0.2.1,False,False
2213759,2015-12-01T15:20:49Z,2015-12-01T15:21:29Z,Version 0.2.0 (breaking change),"Features:
- Allocation of memory arrays using `new`.
- Binding library functions to types via `using x for y`
- **Breaking Change**: `new ContractName.value(10)()` has to be written as `(new ContractName).value(10)()`
- Added `selfdestruct` as an alias for `suicide`.

Bugfixes:
- Constructor arguments of fixed array type were not read correctly.
- Memory allocation of structs containing arrays or strings.
- Data location for explicit memory parameters in libraries was set to storage.

The two main features of this release is the ability to create memory arrays (of dynamic length) and to
[attach library functions to types](https://ethereum.github.io/solidity//docs/using-for/). The latter provides a way to make elegant use of complex data types in the way we are used to from other languages and paves the way to creating an extensive and easy to use standard library. The next step into that direction is the introduction of a clean module system.

_note_: The source below cannot be used without the dependent repositories.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/2213759/assets,https://api.github.com/repos/ethereum/solidity/releases/2213759,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.2.0,https://github.com/ethereum/solidity/releases/tag/v0.2.0,https://api.github.com/repos/ethereum/solidity/zipball/v0.2.0,v0.2.0,False,False
2139821,2015-11-17T15:09:29Z,2015-11-17T15:12:49Z,Version 0.1.7,"Features:
- Improved error messages for unexpected tokens.
- Proof-of-concept transcompilation to why3 for formal verification of contracts.

Bugfixes:
- Writing to elements of `bytes` or `string` overwrite others.
- Arrays (also strings) as indexed parameters of events.
- ""Successor block not found"" on Windows.
- Using string literals in tuples.
- Cope with invalid commit hash in version for libraries.
- Some test framework fixes on windows.

Note: The source code download automatically generated by github below is not usable due to the way the repositories are laid out.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/2139821/assets,https://api.github.com/repos/ethereum/solidity/releases/2139821,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.1.7,https://github.com/ethereum/solidity/releases/tag/v0.1.7,https://api.github.com/repos/ethereum/solidity/zipball/v0.1.7,v0.1.7,False,False
1972627,2015-10-16T15:00:38Z,2015-10-16T15:02:04Z,Version 0.1.6,"Features:
- `.push()` for dynamic storage arrays.
- Tuple expressions (`(1,2,3)` or `return (1,2,3);`)
- Declaration and assignment of multiple variables (`var (x,y,) = (1,2,3,4,5);` or `var (x,y) = f();`)
- Destructuring assignment (`(x,y,) = (1,2,3)`)
- Handling of multiple source files in the json compiler.

Bugfixes:
- Internal error about usage of library function with invalid types.
- Correctly parse `Library.structType a` at statement level.
- Correctly report source locations of parenthesized expressions (as part of ""tuple"" story).
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/1972627/assets,https://api.github.com/repos/ethereum/solidity/releases/1972627,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.1.6,https://github.com/ethereum/solidity/releases/tag/v0.1.6,https://api.github.com/repos/ethereum/solidity/zipball/v0.1.6,v0.1.6,False,False
1925316,2015-10-07T16:43:52Z,2015-10-07T16:45:17Z,Version 0.1.5,"Changes:
- Breaking change in storage encoding: Encode short byte arrays and strings together with their length in storage.
- Report warnings.
- Allow storage reference types for public library functions.
- Access to types declared in other contracts and libraries via `.`.
- Version stamp at beginning of runtime bytecode of libraries.
- Bugfix: Problem with initialized string state variables and dynamic data in constructor.
- Bugfix: Resolve dependencies concerning `new` automatically.
- Bugfix: Allow four indexed arguments for anonymous events.
- Bugfix: Detect too large integer constants in functions that accept arbitrary parameters.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/1925316/assets,https://api.github.com/repos/ethereum/solidity/releases/1925316,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.1.5,https://github.com/ethereum/solidity/releases/tag/v0.1.5,https://api.github.com/repos/ethereum/solidity/zipball/v0.1.5,v0.1.5,False,False
1890710,2015-09-30T15:03:00Z,2015-09-30T15:05:20Z,Version 0.1.4,"Changes:
- Bugfix: combined-json output of solc incorrectly returned the runtime binary instead of the binary.
- Bugfix: Accessing fixed-size array return values.
- Bugfix: Disallow assignment from literal strings to storage pointers.
- Refactoring: Move type checking into its own module.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/1890710/assets,https://api.github.com/repos/ethereum/solidity/releases/1890710,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.1.4,https://github.com/ethereum/solidity/releases/tag/v0.1.4,https://api.github.com/repos/ethereum/solidity/zipball/v0.1.4,v0.1.4,False,False
1852674,2015-09-22T22:34:37Z,2015-09-22T23:25:01Z,Version 0.1.3,"Changes:
- `throw` statement.
- Libraries that contain functions which are called via CALLCODE.
- Linker stage for compiler to insert other contract's addresses (used for libraries).
- Compiler option to output runtime part of contracts.
- Compile-time out of bounds check for access to fixed-size arrays by integer constants.
- Version string includes libevmasm/libethereum's version (contains the optimizer).
- Bugfix: Accessors for constant public state variables.
- Bugfix: Propagate exceptions in clone contracts.
- Bugfix: Empty single-line comments are now treated properly.
- Bugfix: Properly check the number of indexed arguments for events.
- Bugfix: Strings in struct constructors.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/1852674/assets,https://api.github.com/repos/ethereum/solidity/releases/1852674,develop,https://api.github.com/repos/ethereum/solidity/tarball/v0.1.3,https://github.com/ethereum/solidity/releases/tag/v0.1.3,https://api.github.com/repos/ethereum/solidity/zipball/v0.1.3,v0.1.3,False,False
1704295,2015-08-20T00:12:37Z,2015-08-21T11:03:14Z,Version 0.1.2,"Changes:
- Improved commandline interface (breaking change).
- Explicit conversion between bytes and string.
- Bugfix: Value transfer used in clone contracts.
- Bugfix: Problem with strings as mapping keys.
- Bugfix: Prevent usage of some operators.
",https://api.github.com/users/chriseth,9073706,chriseth,https://api.github.com/repos/ethereum/solidity/releases/1704295/assets,https://api.github.com/repos/ethereum/solidity/releases/1704295,0906042ce05f01c4d371aa98d0fd9dddfb93a196,https://api.github.com/repos/ethereum/solidity/tarball/v0.1.2,https://github.com/ethereum/solidity/releases/tag/v0.1.2,https://api.github.com/repos/ethereum/solidity/zipball/v0.1.2,v0.1.2,False,False
