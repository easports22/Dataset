id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
7928836,2017-09-28T15:43:41Z,2017-09-28T15:56:04Z,RocksDB 5.8,"## 5.8 (09/28/2017)
### Public API Change
* Users of Statistics::getHistogramString() will see fewer histogram buckets and different bucket endpoints.
* Slice::compare and BytewiseComparator Compare no longer accept Slices containing nullptr.
* Transaction::Get and Transaction::GetForUpdate variants with PinnableSlice added.
### New Features
* Add Iterator::Refresh(), which allows users to update the iterator state so that they can avoid some initialization costs of recreating iterators.
* Replace dynamic_cast<> (except unit test) so people can choose to build with RTTI off. With make, release mode is by default built with -fno-rtti and debug mode is built without it. Users can override it by setting USE_RTTI=0 or 1.
* Universal compactions including the bottom level can be executed in a dedicated thread pool. This alleviates head-of-line blocking in the compaction queue, which cause write stalling, particularly in multi-instance use cases. Users can enable this feature via Env::SetBackgroundThreads(N, Env::Priority::BOTTOM), where N > 0.
* Allow merge operator to be called even with a single merge operand during compactions, by appropriately overriding MergeOperator::AllowSingleOperand.
* Add DB::VerifyChecksum(), which verifies the checksums in all SST files in a running DB.
Block-based table support for disabling checksums by setting BlockBasedTableOptions::checksum = kNoChecksum.
### Bug Fixes
* Fix wrong latencies in rocksdb.db.get.micros, rocksdb.db.write.micros, and rocksdb.sst.read.micros.
* Fix incorrect dropping of deletions during intra-L0 compaction.
* Fix transient reappearance of keys covered by range deletions when memtable prefix bloom filter is enabled.
* Fix potentially wrong file smallest key when range deletions separated by snapshot are written together.",https://api.github.com/users/maysamyabandeh,1167741,maysamyabandeh,https://api.github.com/repos/facebook/rocksdb/releases/7928836/assets,https://api.github.com/repos/facebook/rocksdb/releases/7928836,master,https://api.github.com/repos/facebook/rocksdb/tarball/v5.8,https://github.com/facebook/rocksdb/releases/tag/v5.8,https://api.github.com/repos/facebook/rocksdb/zipball/v5.8,v5.8,False,False
7567950,2017-08-30T06:08:32Z,2017-08-30T06:12:19Z,v5.7.3,"## 5.7.3 (08/29/2017)
### Bug Fixes
* Fix transient reappearance of keys covered by range deletions when memtable prefix bloom filter is enabled.
* Fix potentially wrong file smallest key when range deletions separated by snapshot are written together.",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/7567950/assets,https://api.github.com/repos/facebook/rocksdb/releases/7567950,5.7.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.7.3,https://github.com/facebook/rocksdb/releases/tag/v5.7.3,https://api.github.com/repos/facebook/rocksdb/zipball/v5.7.3,v5.7.3,False,False
7567938,2017-08-30T06:08:32Z,2017-08-30T06:11:30Z,RocksDB 5.7.3,"## 5.7.3 (08/29/2017)
### Bug Fixes
* Fix transient reappearance of keys covered by range deletions when memtable prefix bloom filter is enabled.
* Fix potentially wrong file smallest key when range deletions separated by snapshot are written together.
",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/7567938/assets,https://api.github.com/repos/facebook/rocksdb/releases/7567938,5.7.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.7.3,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.7.3,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.7.3,rocksdb-5.7.3,False,False
7403355,2017-08-15T21:19:55Z,2017-08-15T21:23:22Z,RocksDB 5.7.2,"### Bug Fixes
* Fix incorrect dropping of deletions issue with FIFO compaction.
* Fix LITE build compiler error with missing abort().",https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/7403355/assets,https://api.github.com/repos/facebook/rocksdb/releases/7403355,5.7.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.7.2,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.7.2,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.7.2,rocksdb-5.7.2,False,False
7403339,2017-08-15T21:19:55Z,2017-08-15T21:22:29Z,v5.7.2,"### Bug Fixes
* Fix incorrect dropping of deletions issue with FIFO compaction.
* Fix LITE build compiler error with missing abort().",https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/7403339/assets,https://api.github.com/repos/facebook/rocksdb/releases/7403339,5.7.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.7.2,https://github.com/facebook/rocksdb/releases/tag/v5.7.2,https://api.github.com/repos/facebook/rocksdb/zipball/v5.7.2,v5.7.2,False,False
7371946,2017-08-12T23:15:29Z,2017-08-12T23:23:24Z,v5.4.10,"## 5.4.10 (08/12/2017)
### Bug Fixes
* Fix incorrect dropping of deletions during intra-L0 compaction.",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/7371946/assets,https://api.github.com/repos/facebook/rocksdb/releases/7371946,5.4.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.4.10,https://github.com/facebook/rocksdb/releases/tag/v5.4.10,https://api.github.com/repos/facebook/rocksdb/zipball/v5.4.10,v5.4.10,False,False
7371945,2017-08-12T23:15:29Z,2017-08-12T23:22:33Z,RocksDB 5.4.10,"## 5.4.10 (08/12/2017)
### Bug Fixes
* Fix incorrect dropping of deletions during intra-L0 compaction.
",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/7371945/assets,https://api.github.com/repos/facebook/rocksdb/releases/7371945,5.4.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.4.10,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.4.10,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.4.10,rocksdb-5.4.10,False,False
7371936,2017-08-12T21:42:21Z,2017-08-12T23:20:45Z,v5.5.6,"## 5.5.6 (08/12/2017)
### Bug Fixes
* Fix incorrect dropping of deletions during intra-L0 compaction.",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/7371936/assets,https://api.github.com/repos/facebook/rocksdb/releases/7371936,5.5.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.5.6,https://github.com/facebook/rocksdb/releases/tag/v5.5.6,https://api.github.com/repos/facebook/rocksdb/zipball/v5.5.6,v5.5.6,False,False
7371933,2017-08-12T21:42:21Z,2017-08-12T23:20:17Z,RocksDB 5.5.6,"## 5.5.6 (08/12/2017)
### Bug Fixes
* Fix incorrect dropping of deletions during intra-L0 compaction.",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/7371933/assets,https://api.github.com/repos/facebook/rocksdb/releases/7371933,5.5.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.5.6,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.5.6,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.5.6,rocksdb-5.5.6,False,False
7371927,2017-08-12T21:35:35Z,2017-08-12T23:18:34Z,v5.6.2,"## 5.6.2 (08/12/2017)
### Bug Fixes
* Fix incorrect dropping of deletions during intra-L0 compaction.",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/7371927/assets,https://api.github.com/repos/facebook/rocksdb/releases/7371927,5.6.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.6.2,https://github.com/facebook/rocksdb/releases/tag/v5.6.2,https://api.github.com/repos/facebook/rocksdb/zipball/v5.6.2,v5.6.2,False,False
7371926,2017-08-12T21:35:35Z,2017-08-12T23:17:54Z,RocksDB 5.6.2,"## 5.6.2 (08/12/2017)
### Bug Fixes
* Fix incorrect dropping of deletions during intra-L0 compaction.
",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/7371926/assets,https://api.github.com/repos/facebook/rocksdb/releases/7371926,5.6.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.6.2,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.6.2,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.6.2,rocksdb-5.6.2,False,False
7368599,2017-08-12T01:12:38Z,2017-08-12T02:12:47Z,v5.7.1,"## 5.7.1 (08/12/2017)
### Bug Fixes
* Fix incorrect dropping of deletions during intra-L0 compaction.",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/7368599/assets,https://api.github.com/repos/facebook/rocksdb/releases/7368599,master,https://api.github.com/repos/facebook/rocksdb/tarball/v5.7.1,https://github.com/facebook/rocksdb/releases/tag/v5.7.1,https://api.github.com/repos/facebook/rocksdb/zipball/v5.7.1,v5.7.1,False,False
7368597,2017-08-12T02:09:12Z,2017-08-12T02:11:58Z,RocksDB 5.7.1,"## 5.7.1 (08/12/2017)
### Bug Fixes
* Fix incorrect dropping of deletions during intra-L0 compaction.",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/7368597/assets,https://api.github.com/repos/facebook/rocksdb/releases/7368597,5.7.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.7.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.7.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.7.1,rocksdb-5.7.1,False,False
7162933,2017-07-25T17:11:29Z,2017-07-25T17:15:35Z,RocksDB 5.6.1,"## 5.6.1 (07/25/2017)
### Bug Fixes
* Fix lite build.

## 5.6.0 (06/06/2017)
### Public API Change
* Scheduling flushes and compactions in the same thread pool is no longer supported by setting `max_background_flushes=0`. Instead, users can achieve this by configuring their high-pri thread pool to have zero threads.
* Replace `Options::max_background_flushes`, `Options::max_background_compactions`, and `Options::base_background_compactions` all with `Options::max_background_jobs`, which automatically decides how many threads to allocate towards flush/compaction.
* options.delayed_write_rate by default take the value of options.rate_limiter rate.
* Replace global variable `IOStatsContext iostats_context` with `IOStatsContext* get_iostats_context()`; replace global variable `PerfContext perf_context` with `PerfContext* get_perf_context()`.

### New Features
* Change ticker/histogram statistics implementations to use core-local storage. This improves aggregation speed compared to our previous thread-local approach, particularly for applications with many threads.
* Users can pass a cache object to write buffer manager, so that they can cap memory usage for memtable and block cache using one single limit.
* Flush will be triggered when 7/8 of the limit introduced by write_buffer_manager or db_write_buffer_size is triggered, so that the hard threshold is hard to hit.
* Introduce WriteOptions.low_pri. If it is true, low priority writes will be throttled if the compaction is behind.
* `DB::IngestExternalFile()` now supports ingesting files into a database containing range deletions.

### Bug Fixes
* Shouldn't ignore return value of fsync() in flush.",https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/7162933/assets,https://api.github.com/repos/facebook/rocksdb/releases/7162933,5.6.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.6.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.6.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.6.1,rocksdb-5.6.1,False,False
7162913,2017-07-25T17:11:29Z,2017-07-25T17:14:22Z,v5.6.1,5.6.1 release.,https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/7162913/assets,https://api.github.com/repos/facebook/rocksdb/releases/7162913,5.6.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.6.1,https://github.com/facebook/rocksdb/releases/tag/v5.6.1,https://api.github.com/repos/facebook/rocksdb/zipball/v5.6.1,v5.6.1,False,False
7085161,2017-07-18T19:54:12Z,2017-07-18T20:53:01Z,RocksDB 5.5.5,"* Change license section of java/rocksjni.pom
* Clear up some files still mentioning PATENTS file
",https://api.github.com/users/siying,5334567,siying,https://api.github.com/repos/facebook/rocksdb/releases/7085161/assets,https://api.github.com/repos/facebook/rocksdb/releases/7085161,5.5.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.5.5,https://github.com/facebook/rocksdb/releases/tag/v5.5.5,https://api.github.com/repos/facebook/rocksdb/zipball/v5.5.5,v5.5.5,False,False
7083558,2017-07-18T18:41:17Z,2017-07-18T18:49:59Z,RocksDB 5.5.4,"## 5.5.4 (07/18/2017)
* Change License to Apache + GPLv2
",https://api.github.com/users/siying,5334567,siying,https://api.github.com/repos/facebook/rocksdb/releases/7083558/assets,https://api.github.com/repos/facebook/rocksdb/releases/7083558,5.5.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.5.4,https://github.com/facebook/rocksdb/releases/tag/v5.5.4,https://api.github.com/repos/facebook/rocksdb/zipball/v5.5.4,v5.5.4,False,False
7070182,2017-07-17T21:31:15Z,2017-07-17T21:33:08Z,v5.5.3,5.5.3 release.,https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/7070182/assets,https://api.github.com/repos/facebook/rocksdb/releases/7070182,5.5.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.5.3,https://github.com/facebook/rocksdb/releases/tag/v5.5.3,https://api.github.com/repos/facebook/rocksdb/zipball/v5.5.3,v5.5.3,False,False
7070179,2017-07-17T21:31:15Z,2017-07-17T21:32:38Z,RocksDB 5.5.3,"### Bug Fixes
* Fix LITE build error.",https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/7070179/assets,https://api.github.com/repos/facebook/rocksdb/releases/7070179,5.5.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.5.3,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.5.3,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.5.3,rocksdb-5.5.3,False,False
7033812,2017-07-13T18:46:47Z,2017-07-13T19:13:35Z,v5.5.2,5.5.2 release.,https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/7033812/assets,https://api.github.com/repos/facebook/rocksdb/releases/7033812,master,https://api.github.com/repos/facebook/rocksdb/tarball/v5.5.2,https://github.com/facebook/rocksdb/releases/tag/v5.5.2,https://api.github.com/repos/facebook/rocksdb/zipball/v5.5.2,v5.5.2,False,False
7033770,2017-07-13T18:46:47Z,2017-07-13T19:10:54Z,RocksDB 5.5.2,Re-tagging 5.5.1 release. No changes from 5.5.1.,https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/7033770/assets,https://api.github.com/repos/facebook/rocksdb/releases/7033770,5.5.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.5.2,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.5.2,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.5.2,rocksdb-5.5.2,False,False
6886368,2017-07-03T17:19:41Z,2017-07-03T17:20:52Z,RocksDB 5.5.1,"### New Features
* FIFO compaction to support Intra L0 compaction too with CompactionOptionsFIFO.allow_compaction=true.
* DB::ResetStats() to reset internal stats.
* Statistics::Reset() to reset user stats.
* ldb add option --try_load_options, which will open DB with its own option file.
* Introduce WriteBatch::PopSavePoint to pop the most recent save point explicitly.
* Support dynamically change `max_open_files` option via SetDBOptions()
* Added DB::CreateColumnFamilie() and DB::DropColumnFamilies() to bulk create/drop column families.
* Add debugging function `GetAllKeyVersions` to see internal versions of a range of keys.
* Support file ingestion with universal compaction style
* Support file ingestion behind with option `allow_ingest_behind`
* New option enable_pipelined_write which may improve write throughput in case writing from multiple threads and WAL enabled.

### Bug Fixes
* Fix the bug that Direct I/O uses direct reads for non-SST file
",https://api.github.com/users/lightmark,1549573,lightmark,https://api.github.com/repos/facebook/rocksdb/releases/6886368/assets,https://api.github.com/repos/facebook/rocksdb/releases/6886368,master,https://api.github.com/repos/facebook/rocksdb/tarball/v5.5.1,https://github.com/facebook/rocksdb/releases/tag/v5.5.1,https://api.github.com/repos/facebook/rocksdb/zipball/v5.5.1,v5.5.1,False,False
6886338,2017-07-03T17:14:14Z,2017-07-03T17:17:34Z,v5.4.7,5.4.7 release.,https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/6886338/assets,https://api.github.com/repos/facebook/rocksdb/releases/6886338,master,https://api.github.com/repos/facebook/rocksdb/tarball/v5.4.7,https://github.com/facebook/rocksdb/releases/tag/v5.4.7,https://api.github.com/repos/facebook/rocksdb/zipball/v5.4.7,v5.4.7,False,False
6886316,2017-07-03T17:16:56Z,2017-07-03T17:17:57Z,RocksDB 5.4.7,"### Bug Fixes
* Shouldn't ignore return value of fsync() in flush.

",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/6886316/assets,https://api.github.com/repos/facebook/rocksdb/releases/6886316,master,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.4.7,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.4.7,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.4.7,rocksdb-5.4.7,False,False
6551693,2017-05-30T21:31:07Z,2017-05-30T23:50:29Z,v5.4.6,5.4.6 release.,https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/6551693/assets,https://api.github.com/repos/facebook/rocksdb/releases/6551693,5.4.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.4.6,https://github.com/facebook/rocksdb/releases/tag/v5.4.6,https://api.github.com/repos/facebook/rocksdb/zipball/v5.4.6,v5.4.6,False,False
6551670,2017-05-30T21:31:07Z,2017-05-30T23:47:16Z,RocksDB 5.4.6,"### Bug Fixes
* Fix db_bench with lite build.",https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/6551670/assets,https://api.github.com/repos/facebook/rocksdb/releases/6551670,5.4.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.4.6,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.4.6,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.4.6,rocksdb-5.4.6,False,False
6519893,2017-05-23T19:27:53Z,2017-05-26T20:44:27Z,RocksDB 5.4.5,"### Public API Change
* Support dynamically changing `stats_dump_period_sec` option via SetDBOptions().
* Added ReadOptions::max_skippable_internal_keys to set a threshold to fail a request as incomplete when too many keys are being skipped while using iterators.
* DB::Get in place of std::string accepts PinnableSlice, which avoids the extra memcpy of value to std::string in most of cases.
    * PinnableSlice releases the pinned resources that contain the value when it is destructed or when ::Reset() is called on it.
    * The old API that accepts std::string, although discouraged, is still supported.
* Replace Options::use_direct_writes with Options::use_direct_io_for_flush_and_compaction. See Direct IO wiki for details.

### New Features
* Memtable flush can be avoided during checkpoint creation if total log file size is smaller than a threshold specified by the user.
* Introduce level-based L0->L0 compactions to reduce file count, so write delays are incurred less often.
* (Experimental) Partitioning filters which creates an index on the partitions. The feature can be enabled by setting partition_filters when using kFullFilter. Currently the feature also requires two-level indexing to be enabled. Number of partitions is the same as the number of partitions for indexes, which is controlled by metadata_block_size.
* DB::ResetStats() to reset internal stats.
* Added CompactionEventListener and EventListener::OnFlushBegin interfaces.
* Added DB::CreateColumnFamilie() and DB::DropColumnFamilies() to bulk create/drop column families.
* Facility for cross-building RocksJava using Docker.

### Bug Fixes
* Fix WriteBatchWithIndex address use after scope error.
* Fix WritableFile buffer size in direct IO.
* Add prefetch to PosixRandomAccessFile in buffered io.
* Fix PinnableSlice access invalid address when row cache is enabled.
* Fix huge fallocate calls fail and make XFS unhappy.
* Fix memory alignment with logical sector size.
* Fix alignment in ReadaheadRandomAccessFile.
* Fix bias with read amplification stats (READ_AMP_ESTIMATE_USEFUL_BYTES and READ_AMP_TOTAL_READ_BYTES).
* Fix a manual / auto compaction data race.
* Fix CentOS 5 cross-building of RocksJava.
* Build and link with ZStd when creating the static RocksJava build.
* Fix snprintf's usage to be cross-platform.
* Fix build errors with blob DB.
* Fix readamp test type inconsistency.",https://api.github.com/users/sagar0,1087535,sagar0,https://api.github.com/repos/facebook/rocksdb/releases/6519893/assets,https://api.github.com/repos/facebook/rocksdb/releases/6519893,5.4.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.4.5,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.4.5,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.4.5,rocksdb-5.4.5,False,False
6519811,2017-05-23T19:27:53Z,2017-05-26T20:35:32Z,v5.4.5,5.4.5 release.,https://api.github.com/users/sagar0,1087535,sagar0,https://api.github.com/repos/facebook/rocksdb/releases/6519811/assets,https://api.github.com/repos/facebook/rocksdb/releases/6519811,5.4.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.4.5,https://github.com/facebook/rocksdb/releases/tag/v5.4.5,https://api.github.com/repos/facebook/rocksdb/zipball/v5.4.5,v5.4.5,False,False
6446656,2017-05-19T18:15:12Z,2017-05-19T18:51:38Z,RocksDB 5.3.6,"- Fix RocksJava static build issue.
- Fix RocksJava build for IBM/PPC.",https://api.github.com/users/sagar0,1087535,sagar0,https://api.github.com/repos/facebook/rocksdb/releases/6446656/assets,https://api.github.com/repos/facebook/rocksdb/releases/6446656,5.3.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.3.6,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.3.6,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.3.6,rocksdb-5.3.6,False,False
6446645,2017-05-19T18:15:12Z,2017-05-19T18:50:21Z,v5.3.6,"- Fix RocksJava static build issue.
- Fix RocksJava build for IBM/PPC.",https://api.github.com/users/sagar0,1087535,sagar0,https://api.github.com/repos/facebook/rocksdb/releases/6446645/assets,https://api.github.com/repos/facebook/rocksdb/releases/6446645,5.3.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.3.6,https://github.com/facebook/rocksdb/releases/tag/v5.3.6,https://api.github.com/repos/facebook/rocksdb/zipball/v5.3.6,v5.3.6,False,False
6433014,2017-05-17T17:47:09Z,2017-05-18T17:37:01Z,RocksDB 5.3.5,"- Fix Centos5 cross-building of RocksJava
- Build and link ZStd statically in RocksJava
- Facility for cross-building RocksJava using Docker.",https://api.github.com/users/sagar0,1087535,sagar0,https://api.github.com/repos/facebook/rocksdb/releases/6433014/assets,https://api.github.com/repos/facebook/rocksdb/releases/6433014,5.3.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.3.5,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.3.5,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.3.5,rocksdb-5.3.5,False,False
6433003,2017-05-17T17:47:09Z,2017-05-18T17:35:20Z,v5.3.5,"- Fix Centos5 cross-building of RocksJava
- Build and link ZStd statically in RocksJava
- Facility for cross-building RocksJava using Docker.",https://api.github.com/users/sagar0,1087535,sagar0,https://api.github.com/repos/facebook/rocksdb/releases/6433003/assets,https://api.github.com/repos/facebook/rocksdb/releases/6433003,5.3.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.3.5,https://github.com/facebook/rocksdb/releases/tag/v5.3.5,https://api.github.com/repos/facebook/rocksdb/zipball/v5.3.5,v5.3.5,False,False
6259523,2017-05-02T23:31:54Z,2017-05-03T00:23:09Z,,,https://api.github.com/users/sagar0,1087535,sagar0,https://api.github.com/repos/facebook/rocksdb/releases/6259523/assets,https://api.github.com/repos/facebook/rocksdb/releases/6259523,5.3.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.3.4,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.3.4,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.3.4,rocksdb-5.3.4,False,False
6259507,2017-05-02T23:31:54Z,2017-05-03T00:20:39Z,,,https://api.github.com/users/sagar0,1087535,sagar0,https://api.github.com/repos/facebook/rocksdb/releases/6259507/assets,https://api.github.com/repos/facebook/rocksdb/releases/6259507,5.3.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.3.4,https://github.com/facebook/rocksdb/releases/tag/v5.3.4,https://api.github.com/repos/facebook/rocksdb/zipball/v5.3.4,v5.3.4,False,False
6245860,2017-04-12T18:36:12Z,2017-05-02T00:14:47Z,RocksDB 5.3.3,"### Public API Change
* Remove disableDataSync option.
* Remove timeout_hint_us option from WriteOptions. The option has been deprecated and has no effect since 3.13.0.
* Remove option min_partial_merge_operands. Partial merge operands will always be merged in flush or compaction if there are more than one.
* Remove option verify_checksums_in_compaction. Compaction will always verify checksum.

### New Features
* Memtable flush can be avoided during checkpoint creation if total log file size is smaller than a threshold specified by the user.

### Bug Fixes
* Fix the bug that iterator may skip keys",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/6245860/assets,https://api.github.com/repos/facebook/rocksdb/releases/6245860,5.3.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.3.3,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.3.3,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.3.3,rocksdb-5.3.3,False,False
6245836,2017-04-12T18:36:12Z,2017-05-02T00:10:04Z,,,https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/6245836/assets,https://api.github.com/repos/facebook/rocksdb/releases/6245836,5.3.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.3.3,https://github.com/facebook/rocksdb/releases/tag/v5.3.3,https://api.github.com/repos/facebook/rocksdb/zipball/v5.3.3,v5.3.3,False,False
5883667,2017-03-15T21:30:21Z,2017-03-27T17:29:18Z,,,https://api.github.com/users/siying,5334567,siying,https://api.github.com/repos/facebook/rocksdb/releases/5883667/assets,https://api.github.com/repos/facebook/rocksdb/releases/5883667,5.2.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v5.2.1,https://github.com/facebook/rocksdb/releases/tag/v5.2.1,https://api.github.com/repos/facebook/rocksdb/zipball/v5.2.1,v5.2.1,False,False
5837418,2017-03-15T21:30:21Z,2017-03-22T21:15:26Z,RocksDB 5.2.1,"### Public API Change
* NewLRUCache() will determine number of shard bits automatically based on capacity, if the user doesn't pass one. This also impacts the default block cache when the user doesn't explict provide one.
* Change the default of delayed slowdown value to 16MB/s and further increase the L0 stop condition to 36 files.
* (Experimental) Two-level indexing that partition the index and creates a 2nd level index on the partitions. The feature can be enabled by setting kTwoLevelIndexSearch as IndexType and configuring index_per_partition.

### New Features
* Added new overloaded function GetApproximateSizes that allows to specify if memtable stats should be computed only without computing SST files' stats approximations.
* Added new function GetApproximateMemTableStats that approximates both number of records and size of memtables.

### Bug Fixes
* RangeSync() should work if ROCKSDB_FALLOCATE_PRESENT is not set
* Fix wrong results in a data race case in Get()
* Some fixes related to 2PC.
* Fix several bugs in Direct I/O supports.
* Fix a regression bug which can cause Seek() to miss some keys if the return key has been updated many times after the snapshot which is used by the iterator.",https://api.github.com/users/siying,5334567,siying,https://api.github.com/repos/facebook/rocksdb/releases/5837418/assets,https://api.github.com/repos/facebook/rocksdb/releases/5837418,5.2.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-5.2.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-5.2.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-5.2.1,rocksdb-5.2.1,False,False
5569279,2017-02-25T00:25:43Z,2017-02-25T00:33:03Z,RocksDB 5.1.4,"### Bug fixes
- Fixed the bug of IO Error when `compaction_readahead_size > 0` in direct I/O
- Fixed the bug of file size mismatch between MANIFEST and real size in direct I/O
- Fix OSX build break after the fallocate change
",https://api.github.com/users/lightmark,1549573,lightmark,https://api.github.com/repos/facebook/rocksdb/releases/5569279/assets,https://api.github.com/repos/facebook/rocksdb/releases/5569279,master,https://api.github.com/repos/facebook/rocksdb/tarball/v5.1.4,https://github.com/facebook/rocksdb/releases/tag/v5.1.4,https://api.github.com/repos/facebook/rocksdb/zipball/v5.1.4,v5.1.4,False,False
5388477,2017-02-07T21:32:48Z,2017-02-07T22:03:16Z,RocksDB 5.1.2,"### Public API Change
- Support dynamically change `delete_obsolete_files_period_micros` option via SetDBOptions().
- Added EventListener::OnExternalFileIngested which will be called when IngestExternalFile() add a file successfully.
- BackupEngine::Open and BackupEngineReadOnly::Open now always return error statuses matching those of the backup Env.

### Bug Fixes
- Fix the bug that if 2PC is enabled, checkpoints may loss some recent transactions.
- When file copying is needed when creating checkpoints or bulk loading files, fsync the file after the file copying.
",https://api.github.com/users/maysamyabandeh,1167741,maysamyabandeh,https://api.github.com/repos/facebook/rocksdb/releases/5388477/assets,https://api.github.com/repos/facebook/rocksdb/releases/5388477,master,https://api.github.com/repos/facebook/rocksdb/tarball/v5.1.2,https://github.com/facebook/rocksdb/releases/tag/v5.1.2,https://api.github.com/repos/facebook/rocksdb/zipball/v5.1.2,v5.1.2,False,False
5199639,2017-01-18T21:25:32Z,2017-01-18T22:23:10Z,RocksDB 5.0.2,"### Bug fixes
- Fixed DeleteRange corruption issue in certain compaction cases
",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/5199639/assets,https://api.github.com/repos/facebook/rocksdb/releases/5199639,master,https://api.github.com/repos/facebook/rocksdb/tarball/v5.0.2,https://github.com/facebook/rocksdb/releases/tag/v5.0.2,https://api.github.com/repos/facebook/rocksdb/zipball/v5.0.2,v5.0.2,False,False
5090834,2017-01-06T18:43:45Z,2017-01-06T19:04:34Z,RocksDB 5.0.1,"### Public API Change
- Options::max_bytes_for_level_multiplier is now a double along with all getters and setters.
- Support dynamically change `delayed_write_rate` and `max_total_wal_size` options via SetDBOptions().
- Introduce DB::DeleteRange for optimized deletion of large ranges of contiguous keys.
- Support dynamically change `delayed_write_rate` option via SetDBOptions().
- Options::allow_concurrent_memtable_write and Options::enable_write_thread_adaptive_yield are now true by default.
- Remove Tickers::SEQUENCE_NUMBER to avoid confusion if statistics object is shared among RocksDB instance. Alternatively DB::GetLatestSequenceNumber() can be used to get the same value.
- Options.level0_stop_writes_trigger default value changes from 24 to 32.
- New compaction filter API: CompactionFilter::FilterV2(). Allows to drop ranges of keys.
- Removed flashcache support.
- DB::AddFile() is deprecated and is replaced with DB::IngestExternalFile(). DB::IngestExternalFile() remove all the restrictions that existed for DB::AddFile.

### New Features
- Add avoid_flush_during_shutdown option, which speeds up DB shutdown by not flushing unpersisted data (i.e. with disableWAL = true). Unpersisted data will be lost. The options is dynamically changeable via SetDBOptions().
- Add memtable_insert_with_hint_prefix_extractor option. The option is mean to reduce CPU usage for inserting keys into memtable, if keys can be group by prefix and insert for each prefix are sequential or almost sequential. See include/rocksdb/options.h for more details.
- Add LuaCompactionFilter in utilities.  This allows developers to write compaction filters in Lua.  To use this feature, LUA_PATH needs to be set to the root directory of Lua.
- No longer populate ""LATEST_BACKUP"" file in backup directory, which formerly contained the number of the latest backup. The latest backup can be determined by finding the highest numbered file in the ""meta/"" subdirectory.
",https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/5090834/assets,https://api.github.com/repos/facebook/rocksdb/releases/5090834,master,https://api.github.com/repos/facebook/rocksdb/tarball/v5.0.1,https://github.com/facebook/rocksdb/releases/tag/v5.0.1,https://api.github.com/repos/facebook/rocksdb/zipball/v5.0.1,v5.0.1,False,False
4899350,2016-12-20T08:41:31Z,2016-12-12T21:21:45Z,RocksDB 4.13.5,"We have skipped releasing 4.12.x and went directly to 4.13.5

## 4.13.5

### Public API Change
- Fix a regression in compaction performance.
- Disallow calling IngestExternalFile() on a dropped column family.
- Add EventListener::OnExternalFileIngested() event that will be called for files that are successfully ingested.

## 4.13.4

### Public API Change
- Removed flashcache support.

## 4.13.0 (10/18/2016)

### Public API Change
- DB::GetOptions() reflect dynamic changed options (i.e. through DB::SetOptions()) and return copy of options instead of reference.
- Added Statistics::getAndResetTickerCount().

### New Features
- Add DB::SetDBOptions() to dynamic change base_background_compactions and max_background_compactions.
- Added Iterator::SeekForPrev(). This new API will seek to the last key that is less than or equal to the target key.

## 4.12.0 (9/12/2016)

### Public API Change
- CancelAllBackgroundWork() flushes all memtables for databases containing writes that have bypassed the WAL (writes issued with WriteOptions::disableWAL=true) before shutting down background threads.
- Merge options source_compaction_factor, max_grandparent_overlap_bytes and expanded_compaction_factor into max_compaction_bytes.
- Remove ImmutableCFOptions.
- Add a compression type ZSTD, which can work with ZSTD 0.8.0 or up. Still keep ZSTDNotFinal for compatibility reasons.

### New Features
- Introduce NewClockCache, which is based on CLOCK algorithm with better concurrent performance in some cases. It can be used to replace the default LRU-based block cache and table cache. To use it, RocksDB need to be linked with TBB lib.
- Change ticker/histogram statistics implementations to accumulate data in thread-local storage, which improves CPU performance by reducing cache coherency costs. Callers of CreateDBStatistics do not need to change anything to use this feature.
- Block cache mid-point insertion, where index and filter block are inserted into LRU block cache with higher priority. The feature can be enabled by setting BlockBasedTableOptions::cache_index_and_filter_blocks_with_high_priority to true and high_pri_pool_ratio > 0 when creating NewLRUCache.
",https://api.github.com/users/IslamAbdelRahman,1676006,IslamAbdelRahman,https://api.github.com/repos/facebook/rocksdb/releases/4899350/assets,https://api.github.com/repos/facebook/rocksdb/releases/4899350,4.13.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v4.13.5,https://github.com/facebook/rocksdb/releases/tag/v4.13.5,https://api.github.com/repos/facebook/rocksdb/zipball/v4.13.5,v4.13.5,False,False
4255517,2016-09-28T02:42:17Z,2016-09-28T17:10:06Z,RocksDB 4.11.2,"We abandoned release candidates 4.10.x and directly go to 4.11.2 from 4.9, to make sure the latest release is stable. In 4.11.2, we fixed several data corruption related bugs in 4.9.0.

## 4.11.2 (9/15/2016)

### Bug fixes
- Segfault when failing to open an SST file for read-ahead iterators.
- WAL without data for all CFs is not deleted after recovery.

## 4.11.1 (8/30/2016)

### Bug Fixes
- Mitigate the regression bug of deadlock condition during recovery when options.max_successive_merges hits.
- Fix data race condition related to hash index in block based table when putting indexes in the block cache.

## 4.11.0 (8/1/2016)

### Public API Change
- options.memtable_prefix_bloom_huge_page_tlb_size => memtable_huge_page_size. When it is set, RocksDB will try to allocate memory from huge page for memtable too, rather than just memtable bloom filter.

### New Features
- A tool to migrate DB after options change. See include/rocksdb/utilities/option_change_migration.h.
- Add ReadOptions.background_purge_on_iterator_cleanup. If true, we avoid file deletion when destorying iterators.

## 4.10.0 (7/5/2016)

### Public API Change
- options.memtable_prefix_bloom_bits changes to options.memtable_prefix_bloom_bits_ratio and deprecate options.memtable_prefix_bloom_probes
- enum type CompressionType and PerfLevel changes from char to unsigned char. Value of all PerfLevel shift by one.
- Deprecate options.filter_deletes.

### New Features
- Add avoid_flush_during_recovery option.
- Add a read option background_purge_on_iterator_cleanup to avoid deleting files in foreground when destroying iterators. Instead, a job is scheduled in high priority queue and would be executed in a separate background thread.
- RepairDB support for column families. RepairDB now associates data with non-default column families using information embedded in the SST/WAL files (4.7 or later). For data written by 4.6 or earlier, RepairDB associates it with the default column family.
- Add options.write_buffer_manager which allows users to control total memtable sizes across multiple DB instances.
",https://api.github.com/users/siying,5334567,siying,https://api.github.com/repos/facebook/rocksdb/releases/4255517/assets,https://api.github.com/repos/facebook/rocksdb/releases/4255517,master,https://api.github.com/repos/facebook/rocksdb/tarball/v4.11.2,https://github.com/facebook/rocksdb/releases/tag/v4.11.2,https://api.github.com/repos/facebook/rocksdb/zipball/v4.11.2,v4.11.2,False,False
3909509,2016-07-26T18:13:22Z,2016-08-17T17:58:29Z,RocksDB 4.9,"### Public API changes
- Add bottommost_compression option, This option can be used to set a specific compression algorithm for the bottommost level (Last level containing files in the DB).
- Introduce CompactionJobInfo::compression, This field state the compression algorithm used to generate the output files of the compaction.
- Deprecate BlockBaseTableOptions.hash_index_allow_collision=false
- Deprecate options builder (GetOptions()).

### New Features
- Introduce NewSimCache() in rocksdb/utilities/sim_cache.h. This function creates a block cache that is able to give simulation results (mainly hit rate) of simulating block behavior with a configurable cache size.
",https://api.github.com/users/lightmark,1549573,lightmark,https://api.github.com/repos/facebook/rocksdb/releases/3909509/assets,https://api.github.com/repos/facebook/rocksdb/releases/3909509,4.9.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v4.9,https://github.com/facebook/rocksdb/releases/tag/v4.9,https://api.github.com/repos/facebook/rocksdb/zipball/v4.9,v4.9,False,False
3745298,2016-07-06T21:35:32Z,2016-07-26T21:36:24Z,,"### Public API Change
- Allow preset compression dictionary for improved compression of block-based tables. This is supported for zlib, zstd, and lz4. The compression dictionary's size is configurable via CompressionOptions::max_dict_bytes.
- Delete deprecated classes for creating backups (BackupableDB) and restoring from backups (RestoreBackupableDB). Now, BackupEngine should be used for creating backups, and BackupEngineReadOnly should be used for restorations. For more details, see https://github.com/facebook/rocksdb/wiki/How-to-backup-RocksDB%3F
- Expose estimate of per-level compression ratio via DB property: ""rocksdb.compression-ratio-at-levelN"".
  Added EventListener::OnTableFileCreationStarted. EventListener::OnTableFileCreated will be called on failure case. User can check creation status via TableFileCreationInfo::status.

### New Features
- Add ReadOptions::readahead_size. If non-zero, NewIterator will create a new table reader which performs reads of the given size.
",https://api.github.com/users/yiwu-arbug,2606959,yiwu-arbug,https://api.github.com/repos/facebook/rocksdb/releases/3745298/assets,https://api.github.com/repos/facebook/rocksdb/releases/3745298,master,https://api.github.com/repos/facebook/rocksdb/tarball/v4.8,https://github.com/facebook/rocksdb/releases/tag/v4.8,https://api.github.com/repos/facebook/rocksdb/zipball/v4.8,v4.8,False,False
3343169,2016-05-26T23:05:04Z,2016-05-31T19:16:36Z,RocksDB 4.6.1,"### Public API Changes
- Change default of BlockBasedTableOptions.format_version to 2. It means default DB created by 4.6 or up cannot be opened by RocksDB version 3.9 or earlier.
- Added strict_capacity_limit option to NewLRUCache. If the flag is set to true, insert to cache will fail if no enough capacity can be free. Signature of Cache::Insert() is updated accordingly.
- Tickers [NUMBER_DB_NEXT, NUMBER_DB_PREV, NUMBER_DB_NEXT_FOUND, NUMBER_DB_PREV_FOUND, ITER_BYTES_READ] are not updated immediately. The are updated when the Iterator is deleted.
- Add monotonically increasing counter (DB property ""rocksdb.current-super-version-number"") that increments upon any change to the LSM tree.

### New Features
- Add CompactionPri::kMinOverlappingRatio, a compaction picking mode friendly to write amplification.
- Deprecate Iterator::IsKeyPinned() and replace it with Iterator::GetProperty() with prop_name=""rocksdb.iterator.is.key.pinned""
",https://api.github.com/users/ajkr,4780362,ajkr,https://api.github.com/repos/facebook/rocksdb/releases/3343169/assets,https://api.github.com/repos/facebook/rocksdb/releases/3343169,master,https://api.github.com/repos/facebook/rocksdb/tarball/v4.6.1,https://github.com/facebook/rocksdb/releases/tag/v4.6.1,https://api.github.com/repos/facebook/rocksdb/zipball/v4.6.1,v4.6.1,False,False
3101881,2016-04-25T23:05:08Z,2016-04-26T17:04:47Z,RocksDB 4.5.1,"### Public API Changes
- Add a new perf context level between kEnableCount and kEnableTime. Level 2 now does not include timers for mutexes.
- Statistics of mutex operation durations will not be measured by default. If you want to have them enabled, you need to set Statistics::stats_level_ to kAll.
- DBOptions::delete_scheduler and NewDeleteScheduler() are removed, please use DBOptions::sst_file_manager and NewSstFileManager() instead

### New Features
- ldb tool now supports operations to non-default column families.
- Add kPersistedTier to ReadTier.  This option allows Get and MultiGet to read only the persited data and skip mem-tables if writes were done with disableWAL = true.
- Add DBOptions::sst_file_manager. Use NewSstFileManager() in include/rocksdb/sst_file_manager.h to create a SstFileManager that can be used to track the total size of SST files and control the SST files deletion rate.
",https://api.github.com/users/siying,5334567,siying,https://api.github.com/repos/facebook/rocksdb/releases/3101881/assets,https://api.github.com/repos/facebook/rocksdb/releases/3101881,master,https://api.github.com/repos/facebook/rocksdb/tarball/v4.5.1,https://github.com/facebook/rocksdb/releases/tag/v4.5.1,https://api.github.com/repos/facebook/rocksdb/zipball/v4.5.1,v4.5.1,False,False
3006636,2016-04-08T00:43:47Z,2016-04-12T23:15:20Z,RocksDB 4.4.1,"### New Features
- Dynamic slow-down on writes.  When slow down on writes is triggered, RocksDB will dynamically optimize the slow-down per write based on the estimated pending compaction bytes.  If the number of pending compaction bytes keeps increasing, then RocksDB will slow down on writes more to make compaction able to catch up to avoid write stall.
- Introduce CompactionJobInfo::compaction_reason, this field include the reason to trigger the compaction.
- Added a new parameter --path to ldb tool. --path accepts the name of either MANIFEST, SST or a WAL file. Either --db or --path can be used when calling ldb.

### Public API Changes
- Deprecate options.soft_rate_limit and add options.soft_pending_compaction_bytes_limit.
- If options.max_write_buffer_number > 3, writes will be slowed down when writing to the last write buffer to delay a full stop.
- Increase default options.delayed_write_rate to 2MB/s.
- Change names in CompactionPri and add a new one.
",https://api.github.com/users/yhchiang,6447975,yhchiang,https://api.github.com/repos/facebook/rocksdb/releases/3006636/assets,https://api.github.com/repos/facebook/rocksdb/releases/3006636,master,https://api.github.com/repos/facebook/rocksdb/tarball/v4.4.1,https://github.com/facebook/rocksdb/releases/tag/v4.4.1,https://api.github.com/repos/facebook/rocksdb/zipball/v4.4.1,v4.4.1,False,False
2818389,2016-03-15T20:35:22Z,2016-03-15T20:41:53Z,RocksDB 4.3.1,"### New Features
- CompactionFilter has new member function called IgnoreSnapshots which allows CompactionFilter to be called even if there are snapshots later than the key.
- RocksDB will now persist options under the same directory as the RocksDB database on successful DB::Open, CreateColumnFamily, DropColumnFamily, and SetOptions.
- Introduce LoadLatestOptions() in rocksdb/utilities/options_util.h. This function can construct the latest DBOptions / ColumnFamilyOptions used by the specified RocksDB intance.
- Introduce CheckOptionsCompatibility() in rocksdb/utilities/options_util.h. This function checks whether the input set of options is able to open the specified DB successfully.

### Public API Changes
- When options.db_write_buffer_size triggers, only the column family with the largest column family size will be flushed, not all the column families.
",https://api.github.com/users/kradhakrishnan,2488945,kradhakrishnan,https://api.github.com/repos/facebook/rocksdb/releases/2818389/assets,https://api.github.com/repos/facebook/rocksdb/releases/2818389,master,https://api.github.com/repos/facebook/rocksdb/tarball/v4.3.1,https://github.com/facebook/rocksdb/releases/tag/v4.3.1,https://api.github.com/repos/facebook/rocksdb/zipball/v4.3.1,v4.3.1,False,False
2675718,2016-01-29T20:49:13Z,2016-02-24T01:32:19Z,RocksDB 4.2,"### New Features
- Introduce CreateLoggerFromOptions(), this function create a Logger for provided DBOptions. 
- Add GetAggregatedIntProperty(), which returns the sum of the GetIntProperty of all the column families. 
- Add MemoryUtil in rocksdb/utilities/memory.h.  It currently offers a way to get the memory usage by type from a list rocksdb instances.

### Public API Changes
- CompactionFilter::Context includes information of Column Family ID
- The need-compaction hint given by TablePropertiesCollector::NeedCompact() will be persistent and recoverable after DB recovery. This introduces a breaking format change. If you use this experimental feature, including NewCompactOnDeletionCollectorFactory() in the new version, you may not be able to directly downgrade the DB back to version 4.0 or lower.
- TablePropertiesCollectorFactory::CreateTablePropertiesCollector() now takes an option Context, containing the information of column family ID for the file being written.
- Remove DefaultCompactionFilterFactory.
",https://api.github.com/users/siying,5334567,siying,https://api.github.com/repos/facebook/rocksdb/releases/2675718/assets,https://api.github.com/repos/facebook/rocksdb/releases/2675718,master,https://api.github.com/repos/facebook/rocksdb/tarball/v4.2,https://github.com/facebook/rocksdb/releases/tag/v4.2,https://api.github.com/repos/facebook/rocksdb/zipball/v4.2,v4.2,False,False
2142923,2015-11-17T21:52:04Z,2015-11-17T23:27:31Z,RocksDB 4.1,"### New Features
- Added single delete operation as a more efficient way to delete keys that have not been overwritten.
- Added experimental AddFile() to DB interface that allow users to add files created by SstFileWriter into an empty Database, see include/rocksdb/sst_file_writer.h and DB::AddFile() for more info.
- Added support for opening SST files with .ldb suffix which enables opening LevelDB databases.
- CompactionFilter now supports filtering of merge operands and merge results.

### Public API Changes
- Added SingleDelete() to the DB interface.
- Added AddFile() to DB interface.
- Added SstFileWriter class.
- CompactionFilter has a new method FilterMergeOperand() that RocksDB applies to every merge operand during compaction to decide whether to filter the operand.
- We removed CompactionFilterV2 interfaces from include/rocksdb/compaction_filter.h. The functionality was deprecated already in version 3.13.
",https://api.github.com/users/yhchiang,6447975,yhchiang,https://api.github.com/repos/facebook/rocksdb/releases/2142923/assets,https://api.github.com/repos/facebook/rocksdb/releases/2142923,4.1.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v4.1,https://github.com/facebook/rocksdb/releases/tag/v4.1,https://api.github.com/repos/facebook/rocksdb/zipball/v4.1,v4.1,False,False
2141350,2015-10-08T18:15:18Z,2015-11-17T19:06:42Z,RocksDB 4.1,"### New Features
- Added single delete operation as a more efficient way to delete keys that have not been overwritten.
- Added experimental AddFile() to DB interface that allow users to add files created by SstFileWriter into an empty Database, see include/rocksdb/sst_file_writer.h and DB::AddFile() for more info.
- Added support for opening SST files with .ldb suffix which enables opening LevelDB databases.
- CompactionFilter now supports filtering of merge operands and merge results.

### Public API Changes
- Added SingleDelete() to the DB interface.
- Added AddFile() to DB interface.
- Added SstFileWriter class.
- CompactionFilter has a new method FilterMergeOperand() that RocksDB applies to every merge operand during compaction to decide whether to filter the operand.
- We removed CompactionFilterV2 interfaces from include/rocksdb/compaction_filter.h. The functionality was deprecated already in version 3.13.
",https://api.github.com/users/yhchiang,6447975,yhchiang,https://api.github.com/repos/facebook/rocksdb/releases/2141350/assets,https://api.github.com/repos/facebook/rocksdb/releases/2141350,4.1.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-4.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-4.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-4.1,rocksdb-4.1,False,False
1993461,2015-10-15T22:05:20Z,2015-10-21T04:13:10Z,RocksDB 4.0,"### New Features
- Added support for transactions.  See include/rocksdb/utilities/transaction.h for more info.
- DB::GetProperty() now accepts ""rocksdb.aggregated-table-properties"" and ""rocksdb.aggregated-table-properties-at-levelN"", in which case it returns aggregated table properties of the target column family, or the aggregated table properties of the specified level N if the ""at-level"" version is used.
- Add compression option kZSTDNotFinalCompression for people to experiment ZSTD although its format is not finalized.
- We removed the need for LATEST_BACKUP file in BackupEngine. We still keep writing it when we create new backups (because of backward compatibility), but we don't read it anymore.

### Public API Changes
- Removed class Env::RandomRWFile and Env::NewRandomRWFile().
- Renamed DBOptions.num_subcompactions to DBOptions.max_subcompactions to make the name better match the actual functionality of the option.
- Added Equal() method to the Comparator interface that can optionally be overwritten in cases where equality comparisons can be done more efficiently than three-way comparisons.
- Previous 'experimental' OptimisticTransaction class has been replaced by Transaction class.
",https://api.github.com/users/IslamAbdelRahman,1676006,IslamAbdelRahman,https://api.github.com/repos/facebook/rocksdb/releases/1993461/assets,https://api.github.com/repos/facebook/rocksdb/releases/1993461,4.0.fb,https://api.github.com/repos/facebook/rocksdb/tarball/v4.0,https://github.com/facebook/rocksdb/releases/tag/v4.0,https://api.github.com/repos/facebook/rocksdb/zipball/v4.0,v4.0,False,False
1752014,2015-09-01T01:05:28Z,2015-09-01T16:49:59Z,RocksDB 3.13.1,"### New Features
- RollbackToSavePoint() in WriteBatch/WriteBatchWithIndex
- Add NewCompactOnDeletionCollectorFactory() in utilities/table_properties_collectors, which allows rocksdb to mark a SST file as need-compaction when it observes at least D deletion entries in any N consecutive entries in that SST file.  Note that this feature depends on an experimental NeedCompact() API --- the result of this API will not persist after DB restart.
- Add DBOptions::delete_scheduler. Use NewDeleteScheduler() in include/rocksdb/delete_scheduler.h to create a DeleteScheduler that can be shared among multiple RocksDB instances to control the file deletion rate of SST files that exist in the first db_path.

### Public API Changes
- Deprecated WriteOptions::timeout_hint_us. We no longer support write timeout. If you really need this option, talk to us and we might consider returning it.
- Deprecated purge_redundant_kvs_while_flush option.
- Removed BackupEngine::NewBackupEngine() and NewReadOnlyBackupEngine() that were deprecated in RocksDB 3.8. Please use BackupEngine::Open() instead.
- Deprecated Compaction Filter V2. We are not aware of any existing use-cases. If you use this filter, your compile will break with RocksDB 3.13. Please let us know if you use it and we'll put it back in RocksDB 3.14.
- Env::FileExists now returns a Status instead of a boolean
- Add statistics::getHistogramString() to print detailed distribution of a histogram metric.
- Add DBOptions::skip_stats_update_on_db_open.  When it is on, DB::Open() will run faster as it skips the random reads required for loading necessary stats from SST files to optimize compaction.
",https://api.github.com/users/siying,5334567,siying,https://api.github.com/repos/facebook/rocksdb/releases/1752014/assets,https://api.github.com/repos/facebook/rocksdb/releases/1752014,master,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.13.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.13.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.13.1,rocksdb-3.13.1,False,False
1634089,2015-08-04T00:49:53Z,2015-08-05T22:22:17Z,RocksDB 3.12.1,"### New Features
- Added experimental support for optimistic transactions.  See include/rocksdb/utilities/optimistic_transaction.h for more info.
- Added a new way to report QPS from db_bench (check out --report_file and --report_interval_seconds)
- Added a cache for individual rows. See DBOptions::row_cache for more info.
- Several new features on EventListener (see include/rocksdb/listener.h):
  - OnCompationCompleted() now returns per-compaciton job statistics, defined in include/rocksdb/compaction_job_stats.h.
  - Added OnTableFileCreated() and OnTableFileDeleted().
- Add compaction_options_universal.enable_trivial_move to true, to allow trivial move while performing universal compaction. Trivial move will happen only when all the input files are non overlapping.

### Public API Changes
- EventListener::OnFlushCompleted() now passes FlushJobInfo instead of a list of parameters.
- DB::GetDbIdentity() is now a const function.  If this function is overridden in your application, be sure to also make GetDbIdentity() const to avoid compile error.
- Move listeners from ColumnFamilyOptions to DBOptions.
- Add max_write_buffer_number_to_maintain option
- DB::CompactRange()'s parameter reduce_level is changed to change_level, to allow users to move levels to lower levels if allowed. It can be used to migrate a DB from options.level_compaction_dynamic_level_bytes=false to options.level_compaction_dynamic_level_bytes.true.
- Change default value for options.compaction_filter_factory and options.compaction_filter_factory_v2 to nullptr instead of DefaultCompactionFilterFactory and DefaultCompactionFilterFactoryV2.
- If CancelAllBackgroundWork is called without doing a flush after doing loads with WAL disabled, the changes which haven't been flushed before the call to CancelAllBackgroundWork will be lost.
- WBWIIterator::Entry() now returns WriteEntry instead of `const WriteEntry&`
- options.hard_rate_limit is deprecated.
- When options.soft_rate_limit or options.level0_slowdown_writes_trigger is triggered, the way to slow down writes is changed to: write rate to DB is limited to to options.delayed_write_rate.
- DB::GetApproximateSizes() adds a parameter to allow the estimation to include data in mem table, with default to be not to include. It is now only supported in skip list mem table.
- DB::CompactRange() now accept CompactRangeOptions instead of multiple paramters. CompactRangeOptions is defined in include/rocksdb/options.h.
- CompactRange() will now skip bottommost level compaction for level based compaction if there is no compaction filter, bottommost_level_compaction is introduced in CompactRangeOptions to control when it's possbile to skip bottommost level compaction. This mean that if you want the compaction to produce a single file you need to set bottommost_level_compaction to BottommostLevelCompaction::kForce.
- Add Cache.GetPinnedUsage() to get the size of memory occupied by entries that are in use by the system.
- DB:Open() will fail if the compression specified in Options is not linked with the binary. If you see this failure, recompile RocksDB with compression libraries present on your system. Also, previously our default compression was snappy. This behavior is now changed. Now, the default compression is snappy only if it's available on the system. If it isn't we change the default to kNoCompression.
- We changed how we account for memory used in block cache. Previously, we only counted the sum of block sizes currently present in block cache. Now, we count the actual memory usage of the blocks. For example, a block of size 4.5KB will use 8KB memory with jemalloc. This might decrease your memory usage and possibly decrease performance. Increase block cache size if you see this happening after an upgrade.
- Add BackupEngineImpl.options_.max_background_operations to specify the maximum number of operations that may be performed in parallel. Add support for parallelized backup and restore.
",https://api.github.com/users/agiardullo,10343516,agiardullo,https://api.github.com/repos/facebook/rocksdb/releases/1634089/assets,https://api.github.com/repos/facebook/rocksdb/releases/1634089,master,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.12.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.12.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.12.1,rocksdb-3.12.1,False,False
1406632,2015-06-11T22:49:11Z,2015-06-11T22:54:52Z,RocksDB 3.11.2,"### Fixes
- Adjust the way we compensate for tombstones when choosing compactions. Previous heuristics led to pathological behavior in some cases.
- Don't let two L0->L1 compactions run in parallel (only affected through experimental feature SuggestCompactRange)
",https://api.github.com/users/igorcanadi,1091023,igorcanadi,https://api.github.com/repos/facebook/rocksdb/releases/1406632/assets,https://api.github.com/repos/facebook/rocksdb/releases/1406632,3.11.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.11.2,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.11.2,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.11.2,rocksdb-3.11.2,False,False
1372897,2015-06-03T17:21:52Z,2015-06-03T17:32:00Z,RocksDB 3.11.1,"Just a single change to fix the Java linking (github issue #606)
",https://api.github.com/users/igorcanadi,1091023,igorcanadi,https://api.github.com/repos/facebook/rocksdb/releases/1372897/assets,https://api.github.com/repos/facebook/rocksdb/releases/1372897,3.11.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.11.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.11.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.11.1,rocksdb-3.11.1,False,False
1323863,2015-05-20T01:42:17Z,2015-05-21T17:58:36Z,RocksDB 3.11,"### New Features
- Added a new API Cache::SetCapacity(size_t capacity) to dynamically change the maximum configured capacity of the cache. If the new capacity is less than the existing cache usage, the implementation will try to lower the usage by evicting the necessary number of elements following a strict LRU policy.
- Added an experimental API for handling flashcache devices (blacklists background threads from caching their reads) -- NewFlashcacheAwareEnv
- If universal compaction is used and options.num_levels > 1, files are compacted in upper levels with smaller files based on options.target_file_size_base. The limitation of file size when using universal compaction is greatly mitigated by using more levels. You can set num_levels = 1 to make universal compaction behave as before. If you set num_levels > 1 and want to roll back to a previous version, you need to compact all files to a big file in level 0 (by setting target_file_size_base to be large and CompactRange(<cf_handle>, nullptr, nullptr, true, 0) and reopen the DB with the same version to rewrite the manifest, and then you can open it using previous releases.
- More information about rocksdb background threads are available in Env::GetThreadList(), including the number of bytes read / written by a compaction job, mem-table size and current number of bytes written by a flush job and many more.  Check include/rocksdb/thread_status.h for more detail.

### Public API changes
- TablePropertiesCollector::AddUserKey() is added to replace TablePropertiesCollector::Add(). AddUserKey() exposes key type, sequence number and file size up to now to users.
- DBOptions::bytes_per_sync used to apply to both WAL and table files. As of 3.11 it applies only to table files. If you want to use this option to sync WAL in the background, please use wal_bytes_per_sync
",https://api.github.com/users/kradhakrishnan,2488945,kradhakrishnan,https://api.github.com/repos/facebook/rocksdb/releases/1323863/assets,https://api.github.com/repos/facebook/rocksdb/releases/1323863,3.11.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.11,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.11,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.11,rocksdb-3.11,False,False
1255481,2015-05-01T23:45:34Z,2015-05-04T21:23:34Z,RocksDB 3.10.2,"## Bug fixes since 3.10.1:
- Make sure RocksDB is compiled with fallocate support
- Fix possible hang in DB::Write()
- Fix a possibility of SIGSEGV in CompactRange()
",https://api.github.com/users/igorcanadi,1091023,igorcanadi,https://api.github.com/repos/facebook/rocksdb/releases/1255481/assets,https://api.github.com/repos/facebook/rocksdb/releases/1255481,3.10.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.10.2,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.10.2,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.10.2,rocksdb-3.10.2,False,False
1113006,2015-03-27T01:48:59Z,2015-04-03T17:28:24Z,RocksDB 3.10,"## 3.10.0 (4/3/2015)

### New Features
- GetThreadStatus() is now able to report detailed thread status, including:
  - Thread Operation including flush and compaction.
  - The stage of the current thread operation.
  - The elapsed time in micros since the current thread operation started.
    More information can be found in include/rocksdb/thread_status.h.  In addition, when running db_bench with --thread_status_per_interval, db_bench will also report thread status periodically.
- Changed the LRU caching algorithm so that referenced blocks (by iterators) are never evicted. This change made parameter removeScanCountLimit obsolete. Because of that NewLRUCache doesn't take three arguments anymore. table_cache_remove_scan_limit option is also removed
- By default we now optimize the compilation for the compilation platform (using -march=native). If you want to build portable binary, use 'PORTABLE=1' before the make command.
- We now allow level-compaction to place files in different paths by
  specifying them in db_paths along with the target_size.
  Lower numbered levels will be placed earlier in the db_paths and higher
  numbered levels will be placed later in the db_paths vector.
- Potentially big performance improvements if you're using RocksDB with lots of column families (100-1000)
- Added BlockBasedTableOptions.format_version option, which allows user to specify which version of block based table he wants. As a general guidline, newer versions have more features, but might not be readable by older versions of RocksDB.
- Added new block based table format (version 2), which you can enable by setting BlockBasedTableOptions.format_version = 2. This format changes how we encode size information in compressed blocks and should help with memory allocations if you're using Zlib or BZip2 compressions.
- MemEnv (env that stores data in memory) is now available in default library build. You can create it by calling NewMemEnv().
- Add SliceTransform.SameResultWhenAppended() to help users determine it is safe to apply prefix bloom/hash.
- Block based table now makes use of prefix bloom filter if it is a full fulter.
- Block based table remembers whether a whole key or prefix based bloom filter is supported in SST files. Do a sanity check when reading the file with users' configuration.
- Fixed a bug in ReadOnlyBackupEngine that deleted corrupted backups in some cases, even though the engine was ReadOnly
- options.level_compaction_dynamic_level_bytes, an experimental feature to allow RocksDB to pick dynamic base of bytes for levels. With this feature turned on, we will automatically adjust max bytes for each level. The goal of this feature is to have lower bound on size amplification. For more details, see comments in options.h. 
- Added an abstract base class WriteBatchBase for write batches
- Fixed a bug where we start deleting files of a dropped column families even if there are still live references to it

### Public API changes
- Deprecated skip_log_error_on_recovery and table_cache_remove_scan_count_limit options.
- Logger method logv with log level parameter is now virtual

### RocksJava
- Added compression per level API.
- MemEnv is now available in RocksJava via RocksMemEnv class.
- lz4 compression is now included in rocksjava static library when running `make rocksdbjavastatic`.
- Overflowing a size_t when setting rocksdb options now throws an IllegalArgumentException, which removes the necessity for a developer to catch these Exceptions explicitly.
",https://api.github.com/users/rven1,8718743,rven1,https://api.github.com/repos/facebook/rocksdb/releases/1113006/assets,https://api.github.com/repos/facebook/rocksdb/releases/1113006,master,https://api.github.com/repos/facebook/rocksdb/tarball/v3.10,https://github.com/facebook/rocksdb/releases/tag/v3.10,https://api.github.com/repos/facebook/rocksdb/zipball/v3.10,v3.10,False,False
766006,2015-02-09T21:49:22Z,2014-12-11T18:34:41Z,RocksDB 3.9.1,"### Public API changes
- New API to create a checkpoint added. Given a directory name, creates a new
  database which is an image of the existing database.
  *New API LinkFile added to Env. If you implement your own Env class, an
  implementation of the API LinkFile will have to be provided.
- MemTableRep takes MemTableAllocator instead of Arena

### Improvements
- RocksDBLite library now becomes smaller and will be compiled with -fno-exceptions flag.
",https://api.github.com/users/yhchiang,6447975,yhchiang,https://api.github.com/repos/facebook/rocksdb/releases/766006/assets,https://api.github.com/repos/facebook/rocksdb/releases/766006,3.9.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.9.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.9.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.9.1,rocksdb-3.9.1,False,False
722023,2014-11-14T19:23:00Z,2014-11-21T00:08:26Z,RocksDB 3.8,"# Public API changes
- BackupEngine::NewBackupEngine() was deprecated; please use BackupEngine::Open() from now on.
- BackupableDB/RestoreBackupableDB have new GarbageCollect() methods, which will clean up files from corrupt and obsolete backups.
- BackupableDB/RestoreBackupableDB have new GetCorruptedBackups() methods which list corrupt backups.

# Cleanup
- Bunch of code cleanup, some extra warnings turned on (-Wshadow, -Wshorten-64-to-32, -Wnon-virtual-dtor)

# New features
- CompactFiles and EventListener, although they are still in experimental state
- Full ColumnFamily support in RocksJava.
",https://api.github.com/users/igorcanadi,1091023,igorcanadi,https://api.github.com/repos/facebook/rocksdb/releases/722023/assets,https://api.github.com/repos/facebook/rocksdb/releases/722023,3.8.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.8,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.8,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.8,rocksdb-3.8,False,False
696143,2014-11-07T01:07:52Z,2014-11-11T20:21:57Z,RocksDB 3.7,"- Introduce SetOptions() API to allow adjusting a subset of options dynamically online
- Introduce 4 new convenient functions for converting Options from string: GetColumnFamilyOptionsFromMap(), GetColumnFamilyOptionsFromString(), GetDBOptionsFromMap(), GetDBOptionsFromString()
- Remove WriteBatchWithIndex.Delete() overloads using SliceParts
- When opening a DB, if options.max_background_compactions is larger than the existing low pri pool of options.env, it will enlarge it. Similarly, options.max_background_flushes is larger than the existing high pri pool of options.env, it will enlarge it.
",https://api.github.com/users/igorcanadi,1091023,igorcanadi,https://api.github.com/repos/facebook/rocksdb/releases/696143/assets,https://api.github.com/repos/facebook/rocksdb/releases/696143,3.7.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.7,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.7,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.7,rocksdb-3.7,False,False
664608,2014-10-30T06:45:16Z,2014-10-30T07:06:28Z,RocksDB 3.6.2,"### Bug Fixes
- Fix a corner case that causes MANIFEST corruption when RocksDB cannot open new files during the compaction but before the compaction completes RocksDB becomes able to open new files once again.

### New Features
- Allow dynamic disable / enable RocksDB auto-compaction.

### Internal Improvements
- Use fallocate(FALLOC_FL_PUNCH_HOLE) to release unused blocks at the end of file.
",https://api.github.com/users/yhchiang,6447975,yhchiang,https://api.github.com/repos/facebook/rocksdb/releases/664608/assets,https://api.github.com/repos/facebook/rocksdb/releases/664608,3.6.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.6.2,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.6.2,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.6.2,rocksdb-3.6.2,False,False
640792,2014-10-15T17:57:43Z,2014-10-20T22:26:33Z,RocksDB 3.6.1,"### New features
- Support more column families without performance bottlenecks
- Provide new way of passing options to RocksDB
- Make some options dynamically changeable
- Bunch of new Java bindings APIs

### Disk format changes
- If you're using RocksDB on ARM platforms and you're using default bloom filter, there is a disk format change you need to be aware of. There are three steps you need to do when you convert to new release: 1. turn off filter policy, 2. compact the whole database, 3. turn on filter policy

### Behavior changes
- We have refactored our system of stalling writes.  Any stall-related statistics' meanings are changed. Instead of per-write stall counts, we now count stalls per-epoch, where epochs are periods between flushes and compactions. You'll find more information in our Tuning Perf Guide.
- When disableDataSync=true, we no longer sync the MANIFEST file.
- Add identity_as_first_hash property to CuckooTable. SST file needs to be rebuilt to be opened by reader properly.

### Public API changes
- Change target_file_size_base type to uint64_t from int.
- Remove allow_thread_local. This feature was proved to be stable, so we are turning it always-on.
",https://api.github.com/users/igorcanadi,1091023,igorcanadi,https://api.github.com/repos/facebook/rocksdb/releases/640792/assets,https://api.github.com/repos/facebook/rocksdb/releases/640792,3.6.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.6.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.6.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.6.1,rocksdb-3.6.1,False,False
612597,2014-10-08T17:21:10Z,2014-10-08T17:24:25Z,RocksDB 3.5.1,"RocksDB 3.5 including one bug fix that affected deployments that are triggering manual flushes.
",https://api.github.com/users/igorcanadi,1091023,igorcanadi,https://api.github.com/repos/facebook/rocksdb/releases/612597/assets,https://api.github.com/repos/facebook/rocksdb/releases/612597,3.5.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.5.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.5.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.5.1,rocksdb-3.5.1,False,False
553957,2014-09-03T18:32:42Z,2014-09-12T16:59:38Z,RocksDB 3.5 Release,"### New Features
- Add include/utilities/write_batch_with_index.h, providing a utility class to query data out of WriteBatch when building it.
- new ReadOptions.total_order_seek to force total order seek when block-based table is built with hash index.

### Public API changes
- The Prefix Extractor used with V2 compaction filters is now passed user key to SliceTransform::Transform instead of unparsed RocksDB key.
- Move BlockBasedTable related options to BlockBasedTableOptions from Options. Change corresponding JNI interface. Options affected include: no_block_cache, block_cache, block_cache_compressed, block_size, block_size_deviation, block_restart_interval, filter_policy, whole_key_filtering. filter_policy is changed to shared_ptr from a raw pointer.
- Remove deprecated options: disable_seek_compaction and db_stats_log_interval
- OptimizeForPointLookup() takes one parameter for block cache size. It now builds hash index, bloom filter, and block cache.
",https://api.github.com/users/ljinfb,6463139,ljinfb,https://api.github.com/repos/facebook/rocksdb/releases/553957/assets,https://api.github.com/repos/facebook/rocksdb/releases/553957,3.5.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.5,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.5,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.5,rocksdb-3.5,False,False
521436,2014-08-18T23:42:05Z,2014-08-28T15:32:46Z,RocksDB 3.4 Release,"### New Features
- Support Multiple DB paths in universal style compactions
- Add feature of storing plain table index and bloom filter in SST file.
- CompactRange() will never output compacted files to level 0. This used to be the case when all the compaction input files were at level 0.

### Public API changes
- DBOptions.db_paths now is a vector of a DBPath structure which indicates both of path and target size
- NewPlainTableFactory instead of bunch of parameters now accepts PlainTableOptions, which is defined in include/rocksdb/table.h
- Moved include/utilities/_.h to include/rocksdb/utilities/_.h
- Statistics APIs now take uint32_t as type instead of Tickers. Also make two access functions getTickerCount and histogramData const
- Add DB property rocksdb.estimate-num-keys, estimated number of live keys in DB.
- Add DB::GetIntProperty(), which returns DB properties that are integer as uint64_t.

### Other notes
- Fixed a data race bug that might cause segment fault
- Fixed a bug of manual compaction.
",https://api.github.com/users/siying,5334567,siying,https://api.github.com/repos/facebook/rocksdb/releases/521436/assets,https://api.github.com/repos/facebook/rocksdb/releases/521436,3.4.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.4,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.4,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.4,rocksdb-3.4,False,False
458404,2014-07-29T00:14:25Z,2014-07-29T18:15:33Z,RocksDB 3.3,"### New Features
- <b>JSON API prototype</b>.
- <b>Performance improvement on HashLinkList</b>:  We addressed performance outlier of HashLinkList caused by skewed bucket by switching data in the bucket from linked list to skip list. Add parameter threshold_use_skiplist in NewHashLinkListRepFactory().
- <b>More effective on storage space reclaim</b>:  RocksDB is now able to reclaim storage space more effectively during the compaction process.  This is done by compensating the size of each deletion entry by the 2X average value size, which makes compaction to be triggerred by deletion entries more easily.
- <b>TimeOut API to write</b>:  Now WriteOptions have a variable called timeout_hint_us.  With timeout_hint_us set to non-zero, any write associated with this timeout_hint_us may be aborted when it runs longer than the specified timeout_hint_us, and it is guaranteed that any write completes earlier than the specified time-out will not be aborted due to the time-out condition.
- <b>rate_limiter option</b>: We added an option that controls total throughput of flush and compaction. The throughput is specified in bytes/sec. Flush always has precedence over compaction when available bandwidth is constrained.

### Public API changes
- Removed NewTotalOrderPlainTableFactory because it is not used and implemented semantically incorrect.
",https://api.github.com/users/yhchiang,6447975,yhchiang,https://api.github.com/repos/facebook/rocksdb/releases/458404/assets,https://api.github.com/repos/facebook/rocksdb/releases/458404,master,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.3,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.3,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.3,rocksdb-3.3,False,False
399407,2014-06-19T23:40:32Z,2014-06-27T19:13:14Z,RocksDB 3.2 release,"New Features in RocksDB 3.2:
- PlainTable now supports a new key encoding: for keys of the same prefix, the prefix is only written once. It can be enabled through encoding_type paramter of NewPlainTableFactory()
- Add AdaptiveTableFactory, which is used to convert from a DB of PlainTable to BlockBasedTabe, or vise versa. It can be created using NewAdaptiveTableFactory()

Public API changes
- We removed seek compaction as a concept from RocksDB because:
- Add two paramters to NewHashLinkListRepFactory() for logging on too many entries in a hash bucket when flushing.
- Added new option BlockBasedTableOptions::hash_index_allow_collision. When enabled, prefix hash index for block-based table will not store prefix and allow hash collision, reducing memory consumption.

All the commits: https://github.com/facebook/rocksdb/compare/3.1.fb...3.2.fb
",https://api.github.com/users/ljinfb,6463139,ljinfb,https://api.github.com/repos/facebook/rocksdb/releases/399407/assets,https://api.github.com/repos/facebook/rocksdb/releases/399407,3.2.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.2,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.2,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.2,rocksdb-3.2,False,False
335089,2014-05-21T22:25:05Z,2014-05-22T17:26:17Z,RocksDB 3.1,"New features in RocksDB 3.1:
- Materialize hash index
- FIFO Compaction

Change LOG: https://github.com/facebook/rocksdb/blob/3.1.fb/HISTORY.md
All the commits: https://github.com/facebook/rocksdb/compare/3.0.fb...3.1.fb
",https://api.github.com/users/igorcanadi,1091023,igorcanadi,https://api.github.com/repos/facebook/rocksdb/releases/335089/assets,https://api.github.com/repos/facebook/rocksdb/releases/335089,3.1.fb,https://api.github.com/repos/facebook/rocksdb/tarball/rocksdb-3.1,https://github.com/facebook/rocksdb/releases/tag/rocksdb-3.1,https://api.github.com/repos/facebook/rocksdb/zipball/rocksdb-3.1,rocksdb-3.1,False,False
329178,2014-05-08T00:49:23Z,2014-05-19T21:24:44Z,RocksDB 3.0,"New features in RocksDB 3.0:
- Column Family support (https://github.com/facebook/rocksdb/wiki/Column-Families)
- Ability to use different checksum function in block based table. You can choose between crc32 and xxHash.
- ReadOptions::prefix_seek and ReadOptions::prefix are deprecated
- Full change log: https://github.com/facebook/rocksdb/blob/3.0.fb/HISTORY.md
  .
",https://api.github.com/users/igorcanadi,1091023,igorcanadi,https://api.github.com/repos/facebook/rocksdb/releases/329178/assets,https://api.github.com/repos/facebook/rocksdb/releases/329178,3.0.fb,https://api.github.com/repos/facebook/rocksdb/tarball/3.0.fb,https://github.com/facebook/rocksdb/releases/tag/3.0.fb,https://api.github.com/repos/facebook/rocksdb/zipball/3.0.fb,3.0.fb,False,False
260701,2014-04-05T00:00:25Z,2014-05-21T22:32:06Z,RocksDB 2.8,"RocksDB 2.8 release is mostly focused on improving performance for in-memory use cases
",https://api.github.com/users/igorcanadi,1091023,igorcanadi,https://api.github.com/repos/facebook/rocksdb/releases/260701/assets,https://api.github.com/repos/facebook/rocksdb/releases/260701,2.8.fb,https://api.github.com/repos/facebook/rocksdb/tarball/2.8.fb,https://github.com/facebook/rocksdb/releases/tag/2.8.fb,https://api.github.com/repos/facebook/rocksdb/zipball/2.8.fb,2.8.fb,False,False
