id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
8174138,2017-10-18T23:00:03Z,2017-10-18T23:17:21Z,AutoValue Release 1.5.2,"This releases fixes two problems with 1.5.1:

* Many `javax.annotation.*` classes were inadvertently included in `autovalue-1.5.1.jar`. They have been removed.

* `@AutoAnnotation` did not work well if the class `javax.annotation.Generated` did not exist, which is typically the case with Java 9.",https://api.github.com/users/eamonnmcmanus,5246810,eamonnmcmanus,https://api.github.com/repos/google/auto/releases/8174138/assets,https://api.github.com/repos/google/auto/releases/8174138,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.5.2,https://github.com/google/auto/releases/tag/auto-value-1.5.2,https://api.github.com/repos/google/auto/zipball/auto-value-1.5.2,auto-value-1.5.2,False,False
7833072,2017-09-21T01:04:41Z,2017-09-21T01:17:53Z,AutoValue Release 1.5.1,"This release is essentially the same as 1.5, except that it fixes https://github.com/google/auto/issues/503. If you are using Java 9 and have seen a message like this:
```
warning: An exception occurred while looking for AutoValue extensions. No extensions will function.
This may be due to a corrupt jar file in the compiler's classpath.
Exception: java.util.ServiceConfigurationError: com.google.auto.value.extension.AutoValueExtension:
Provider com.google.auto.value.extension.memoized.MemoizeExtension could not be instantiated
```
then this release should fix it.",https://api.github.com/users/eamonnmcmanus,5246810,eamonnmcmanus,https://api.github.com/repos/google/auto/releases/7833072/assets,https://api.github.com/repos/google/auto/releases/7833072,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.5.1,https://github.com/google/auto/releases/tag/auto-value-1.5.1,https://api.github.com/repos/google/auto/zipball/auto-value-1.5.1,auto-value-1.5.1,False,False
7399931,2017-08-15T16:16:19Z,2017-08-15T16:43:53Z,AutoValue Release 1.5,"### Functional changes since 1.4.1

* This release requires the compiler to be Java 8 or later. It can still generate Java 7 code using `-source 7 -target 7`, but the compiler itself must be a Java 8 compiler.

* The [retention](https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Retention.html) of the `@AutoValue` annotation has changed from `SOURCE` to `CLASS`. This means that it is possible for code-analysis tools to tell whether a class is an `@AutoValue`. AutoValue itself uses this to enforce the check that one `@AutoValue` class cannot extend another, even if the classes are compiled separately.

* It is now an error if `@Memoized` is applied to a method not inside an `@AutoValue` class.

* Type annotations are now handled more consistently. If `@Nullable` is a type annotation, a property of type `@Nullable Integer` will have that type used everywhere in the generated code. Associated bugs with nested type annotations, like `Outer.@Inner`, have been fixed.

### Bugs fixed since 1.4.1

* `@Memoized` methods can now throw checked exceptions. Previously this failed because the exceptions were not copied into the `throws` clause of the generated override, so the call to `super.foo()` did not compile.

* The generated `hashCode()` method uses `h = (int) (h ^ longProperty)` rather than `h ^= longProperty` to avoid warnings about loss of precision.

* Annotations are not copied from an abstract method to its implementation if they are not visible from the latter. This can happen if the `@AutoValue` inherits the abstract method from a class or interface in a different package.",https://api.github.com/users/eamonnmcmanus,5246810,eamonnmcmanus,https://api.github.com/repos/google/auto/releases/7399931/assets,https://api.github.com/repos/google/auto/releases/7399931,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.5,https://github.com/google/auto/releases/tag/auto-value-1.5,https://api.github.com/repos/google/auto/zipball/auto-value-1.5,auto-value-1.5,False,False
6014008,2017-04-07T01:26:42Z,2017-04-07T15:26:45Z,AutoValue Release 1.4.1,"This release is essentially the same as 1.4.1. The only significant difference is that a workaround for an old Eclipse bug has been removed. [That bug](https://bugs.eclipse.org/bugs/show_bug.cgi?id=300408) was fixed in Eclipse 4.5, which was released in June 2015. There was a [concern](https://github.com/google/auto/issues/383) that the workaround might have been interfering with correct behaviour.

If you need to use AutoValue with an older version of Eclipse, you will have to stay on AutoValue 1.4.",https://api.github.com/users/eamonnmcmanus,5246810,eamonnmcmanus,https://api.github.com/repos/google/auto/releases/6014008/assets,https://api.github.com/repos/google/auto/releases/6014008,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.4.1,https://github.com/google/auto/releases/tag/auto-value-1.4.1,https://api.github.com/repos/google/auto/zipball/auto-value-1.4.1,auto-value-1.4.1,False,False
5775770,2017-03-17T00:34:17Z,2017-03-17T00:48:24Z,AutoValue Release 1.4,The contents of this release are identical to 1.4 RC3.,https://api.github.com/users/eamonnmcmanus,5246810,eamonnmcmanus,https://api.github.com/repos/google/auto/releases/5775770/assets,https://api.github.com/repos/google/auto/releases/5775770,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.4,https://github.com/google/auto/releases/tag/auto-value-1.4,https://api.github.com/repos/google/auto/zipball/auto-value-1.4,auto-value-1.4,False,False
5666219,2017-03-07T15:38:15Z,2017-03-07T16:39:46Z,AutoValue Release 1.4 RC3,"### Functional changes since 1.4 RC2

* Builder setters now reject a null parameter immediately unless the corresponding property is `@Nullable`. Previously this check happened at `build()` time, and in some cases didn't happen at all.

* If a property `foo()` or `getFoo()` has a builder method `fooBuilder()` then the property can not now be `@Nullable`. An `ImmutableList`, for example, started off empty, not null, in this case, so `@Nullable` was misleading.

* Relatedly, the case where `foo()` is a nested `@AutoValue` class is now more similar to the case where it is an immutable collection. If you never add anything to `fooBuilder()` then you get an ""empty"" `foo()` at `build()` time, meaning whatever `fooBuilder().build()` returns.

* Access modifiers like `protected` are copied from builder methods to their implementations, instead of the implementations always being public. Change by @torquestomp.

* AutoAnnotation now precomputes parts of the `hashCode` that are constant because they come from defaulted members. This avoids warnings about integer overflow from tools that check that.

### Extension API changes since 1.4 RC2

* Extensions can now return null rather than generated code. In that case the extension does not generate a class in the AutoValue hierarchy, but it can still do other things like error checking or generating side files.

### Bugs fixed since 1.4 RC2

* GWT serialization tests are now run in prod mode. Change by @tbroyer.

* If `@AutoValue Foo` has a builder, we always generated two constructors, `Builder()` and `Builder(Foo)`, but we only used the second one if `Foo` had a `toBuilder()` method. Now we only generate that constructor if it is needed. That avoids warnings about unused code.

* `@AutoAnnotation` now works when the annotation and the factory method are in the default (unnamed) package.

* In the hack to work around spurious exceptions when reading resource files, we now handle NullPointerException in addition to IOException.

* If a property has a name that is a Java keyword, for example `getPackage()` which defines a property called `package`, the Memoize extension will no longer generate code that doesn't compile.",https://api.github.com/users/eamonnmcmanus,5246810,eamonnmcmanus,https://api.github.com/repos/google/auto/releases/5666219/assets,https://api.github.com/repos/google/auto/releases/5666219,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.4-rc3,https://github.com/google/auto/releases/tag/auto-value-1.4-rc3,https://api.github.com/repos/google/auto/zipball/auto-value-1.4-rc3,auto-value-1.4-rc3,False,True
5522063,2017-02-21T14:50:10Z,2017-02-21T14:56:23Z,@AutoFactory release 1.0-beta4,"This version of AutoFactory adds support for `@Nullable` and varargs parameters on `@AutoFactory` constructors as well as `Provider<>` parameters to a `create()` method.
",https://api.github.com/users/ronshapiro,792797,ronshapiro,https://api.github.com/repos/google/auto/releases/5522063/assets,https://api.github.com/repos/google/auto/releases/5522063,master,https://api.github.com/repos/google/auto/tarball/auto-factory-1.0-beta4,https://github.com/google/auto/releases/tag/auto-factory-1.0-beta4,https://api.github.com/repos/google/auto/zipball/auto-factory-1.0-beta4,auto-factory-1.0-beta4,False,False
4995470,2016-12-22T01:10:38Z,2016-12-22T22:16:54Z,AutoValue Release 1.4 RC2,"### Functional changes since 1.4 RC1
- Generalized support for property builders. Now, in addition to being able to say `immutableListBuilder()` for a property of type `ImmutableList<T>`, you can say `fooBuilder()` for a property of an arbitrary type that has a builder following certain conventions. In particular, you can do this if the type of `foo()` is itself an `@AutoValue` class with a builder. (c8c00a9, 9949290)
- When an `@AutoValue` class `Foo` has a builder, the generated `AutoValue_Foo.Builder` has a constructor `AutoValue_Foo.Builder(Foo)`. That constructor was never documented and is now private. If you want to make a `Foo.Builder` from a `Foo`, `Foo` should have an abstract method `Builder toBuilder()`.
  
  This change was necessary so that generalized property-builder support could know whether or not the built class needs to be convertible back into its builder. (f6ee7ab)

### Extension API changes since 1.4 RC1
- The Extension API is now a committed API, meaning we no longer warn that it is likely to change incompatibly. (8cbe76e)
- Beginning of [guide](https://github.com/google/auto/blob/master/value/userguide/extensions.md) to writing extensions (52e2335).

### Bugs fixed since 1.4 RC1
- Support generic classes with `@Memoized` (9fa442d).
- Prepared for Java 9, where public classes are not necessarily accessible, and javax.annotation.Generated is not necessarily present. (44e9235)
- Functional tests for AutoAnnotation were accidentally excluded from the github sources. They have been restored. (3a8aeef)
- Added `-implicit:class` to several test methods in ExtensionTest to work around a compiler warning that causes test failures. (651aa3a)
- If a property is called `oAuth()`, allow its setter to be called `setOAuth(x)`. Previously it had to be called `setoAuth(x)`, which is still allowed. (ba55ca4)
- AutoValue now works correctly even if the version of AutoValue in the `-classpath` is older than the one in the `-processorpath`. (e1b3233)
- Builders now behave correctly when there is a non-optional property called `missing`. Previously a variable-hiding problem meant that we didn't detect when it wasn't set. (87085a0)

### Miscellaneous
- Tests have been migrated from JUnit 3 to JUnit 4. (b541775)
",https://api.github.com/users/eamonnmcmanus,5246810,eamonnmcmanus,https://api.github.com/repos/google/auto/releases/4995470/assets,https://api.github.com/repos/google/auto/releases/4995470,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.4-rc2,https://github.com/google/auto/releases/tag/auto-value-1.4-rc2,https://api.github.com/repos/google/auto/zipball/auto-value-1.4-rc2,auto-value-1.4-rc2,False,True
4410508,2016-10-17T16:42:58Z,2016-10-17T18:25:21Z,AutoValue Release 1.4 RC1,"### Functional changes since 1.3
- [`@Memoized`](https://github.com/google/auto/blob/master/value/src/main/java/com/google/auto/value/extension/memoized/Memoized.java) added, allowing non-property methods to be run-once and have the results cached.
  - `@Memoized` methods are guarded double-checked locking (a756ee6)
  - Very tentatively support using `@LazyInit` from github.com/google/error-prone as a just-in-time alternative
    to `@Memoized`)
    
    > Note: This is internally tested, but is experimental, and doesn't have any serious testing in open-source.
- Ignore concrete methods in abstract-class builders when scanning to discover auto-value properties. (07d6fdd)
- Stop ""pessimizing"" arrays by pre-sizing them (nearly all VMs perform better without this) (82041d0)
- AutoValue now imports top-level types, and references nested types in a qualified way. (e.g. `Foo.Bar`)

### Extension API changes since 1.3
- Introduce null-checks into generated classes' constructors, to guard against poorly crafted extensions. (660ea56)
- Guard against corrupt extension jar loading (4a052a8)

### Bugs fixed since 1.3
- Fix `@AutoAnnotation` issue when passing in generic-array-parameter values using a collection. (82041d0)
- Some fixes inherited from an updated auto-common related to eclipse and ecj
- Guard against IOExceptions from reading resources from jars. Fixes #365
- Improved support for dealing with Java8 bytecode on the classpath (using ASM5)

### Random stuff
- Source import statements re-ordered according to Google's new (simplified) standard format.
- Example code for builders uses ""setFoo(Foo foo)"" naming for clarity (not required in production code.)
- Faster jar creation on ubuntu during builds.
",https://api.github.com/users/cgruber,331234,cgruber,https://api.github.com/repos/google/auto/releases/4410508/assets,https://api.github.com/repos/google/auto/releases/4410508,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.4-rc1,https://github.com/google/auto/releases/tag/auto-value-1.4-rc1,https://api.github.com/repos/google/auto/zipball/auto-value-1.4-rc1,auto-value-1.4-rc1,False,True
4404155,2016-10-17T05:50:09Z,2016-10-17T06:03:14Z,Auto Common Libraries v 0.8,"### Fixes
- Fix various incompatibilities between javac and ecj (89dcbae, 3d9fa63)

### Notes
- Various javadoc improvements
",https://api.github.com/users/cgruber,331234,cgruber,https://api.github.com/repos/google/auto/releases/4404155/assets,https://api.github.com/repos/google/auto/releases/4404155,master,https://api.github.com/repos/google/auto/tarball/auto-common-0.8,https://github.com/google/auto/releases/tag/auto-common-0.8,https://api.github.com/repos/google/auto/zipball/auto-common-0.8,auto-common-0.8,False,False
4077879,2016-09-08T07:20:56Z,2016-09-08T07:49:53Z,Auto Common Libraries v 0.7,"### Features/Changes
- Add a `postRound(RoundEnvironment)` method to BasicAnnotationProcessor, to ease
   post-processing (such as validation
- Switch some anonymous classes to named inner classes to make stack traces more obvious

### Fixes
- Typo in exception message

### Notes
- Javadoc improvements and other documentation fixes
- Code now conforms to Google's new import order format (static imports at the top, regular imports 
   below, separated by one space, all lexically ordered within the two groups.
- Faster builds on ubuntu by using maven-jar-plugin 2.6 (2.5+ fixes the ubuntu bug) 
",https://api.github.com/users/cgruber,331234,cgruber,https://api.github.com/repos/google/auto/releases/4077879/assets,https://api.github.com/repos/google/auto/releases/4077879,master,https://api.github.com/repos/google/auto/tarball/auto-common-0.7,https://github.com/google/auto/releases/tag/auto-common-0.7,https://api.github.com/repos/google/auto/zipball/auto-common-0.7,auto-common-0.7,False,False
4003274,2016-08-29T22:45:35Z,2016-08-29T23:41:49Z,AutoValue Release 1.3,"> Note: identical to 1.3-rc2.

### Functional changes since 1.2
- Support for TYPE_USE `@Nullable`.
  This is https://github.com/google/auto/pull/293 by @brychcy.
- Restructured the code in AutoValueProcessor for handling extensions, to get
  rid of warnings about abstract methods when those methods are going to be
  implemented by an extension, and to fix a bug where extensions would not work
  right if there was a toBuilder() method. Some of the code in this change is
  based on https://github.com/google/auto/pull/299 by @rharter.
- Added support for ""optional getters"", where a getter in an AutoValue Builder
  can have type `Optional<T>` and it will return `Optional.of(x)` where `x` is
  the value that has been set in the Builder, or `Optional.empty()` if no value
  has been set.
- In AutoValue builders, added support for setting a property of type
  `Optional<T>` via a setter with an argument of type `T`.
- Added logic to AutoValue to detect the confusing case where you think you
  are using JavaBeans conventions (like getFoo()) but you aren't because at
  least one method isn't.
- Added a README.md describing EscapeVelocity.

### Bugs fixed since 1.2
- Allow an `@AutoValue.Builder` to extend a parent builder using the `<B extends
  Builder<B>>` idiom.
- AutoAnnotation now factors in package names when detecting
  overloads. Previously it treated all annotations with the same SimpleName as
  being overload attempts.
- Removed an inaccurate javadoc reference, which referred to an
  artifact from an earlier draft version of the Extensions API. This is
  https://github.com/google/auto/pull/322 by @lucastsa.
- The constructor of an @AutoValue class that has a builder needs to have null checks if there are extensions, because in that case the constructor is package-private rather than private. Fixes #345.
- When scanning a Builder for referenced types, don't include non-abstract methods. The referenced types are used to determine the imports that will be needed by the implementing class, and that class never references non-abstract methods.
",https://api.github.com/users/eamonnmcmanus,5246810,eamonnmcmanus,https://api.github.com/repos/google/auto/releases/4003274/assets,https://api.github.com/repos/google/auto/releases/4003274,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.3,https://github.com/google/auto/releases/tag/auto-value-1.3,https://api.github.com/repos/google/auto/zipball/auto-value-1.3,auto-value-1.3,False,False
3454902,2016-06-16T00:23:13Z,2016-06-16T00:35:36Z,AutoValue Release 1.3-rc2,"## Bugs fixed
- The constructor of an @AutoValue class that has a builder needs to have null checks if there are extensions, because in that case the constructor is package-private rather than private. Fixes #345.
- When scanning a Builder for referenced types, don't include non-abstract methods. The referenced types are used to determine the imports that will be needed by the implementing class, and that class never references non-abstract methods.
",https://api.github.com/users/eamonnmcmanus,5246810,eamonnmcmanus,https://api.github.com/repos/google/auto/releases/3454902/assets,https://api.github.com/repos/google/auto/releases/3454902,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.3-rc2,https://github.com/google/auto/releases/tag/auto-value-1.3-rc2,https://api.github.com/repos/google/auto/zipball/auto-value-1.3-rc2,auto-value-1.3-rc2,False,True
3422247,2016-06-10T23:31:20Z,2016-06-10T23:52:44Z,AutoValue Release 1.3-rc1,"### Functional changes
- Support for TYPE_USE `@Nullable`.
  This is https://github.com/google/auto/pull/293 by @brychcy.
- Restructured the code in AutoValueProcessor for handling extensions, to get
  rid of warnings about abstract methods when those methods are going to be
  implemented by an extension, and to fix a bug where extensions would not work
  right if there was a toBuilder() method. Some of the code in this change is
  based on https://github.com/google/auto/pull/299 by @rharter.
- Added support for ""optional getters"", where a getter in an AutoValue Builder
  can have type `Optional<T>` and it will return `Optional.of(x)` where `x` is
  the value that has been set in the Builder, or `Optional.empty()` if no value
  has been set.
- In AutoValue builders, added support for setting a property of type
  `Optional<T>` via a setter with an argument of type `T`.
- Added logic to AutoValue to detect the confusing case where you think you
  are using JavaBeans conventions (like getFoo()) but you aren't because at
  least one method isn't.
- Added a README.md describing EscapeVelocity.

### Bugs fixed
- Allow an `@AutoValue.Builder` to extend a parent builder using the `<B extends
  Builder<B>>` idiom.
- AutoAnnotation now factors in package names when detecting
  overloads. Previously it treated all annotations with the same SimpleName as
  being overload attempts.
- Removed an inaccurate javadoc reference, which referred to an
  artifact from an earlier draft version of the Extensions API. This is
  https://github.com/google/auto/pull/322 by @lucastsa.
",https://api.github.com/users/cgruber,331234,cgruber,https://api.github.com/repos/google/auto/releases/3422247/assets,https://api.github.com/repos/google/auto/releases/3422247,master,https://api.github.com/repos/google/auto/tarball/auto-value-1.3-rc1,https://github.com/google/auto/releases/tag/auto-value-1.3-rc1,https://api.github.com/repos/google/auto/zipball/auto-value-1.3-rc1,auto-value-1.3-rc1,False,True
