id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
8275005,2017-10-25T19:56:50Z,2017-10-26T16:35:23Z,4.3 RC4,"## Gradle 4.3 RC4 is now available for testing

This release candidate contains fixes for the following issue reported against [4.3 RC3](https://github.com/gradle/gradle/releases/tag/v4.3.0-RC3):

Gradle Kotlin DSL included in this release has been updated to 0.12.3 to fix a breaking change to Kotlin build scripts using the `Property` API. See https://github.com/gradle/kotlin-dsl/issues/574 for more details.

Check the [release notes](https://docs.gradle.org/4.3-rc-4/release-notes) for more information.  If no regressions are reported, a final release will follow on Monday, October 30th.

## Upgrade Instructions

Switch your build to use Gradle 4.3 RC4 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.3-rc-4`

Standalone downloads are available at https://gradle.org/release-candidate/. 

## Reporting Problems

If you find a problem with Gradle 4.3 RC4, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/8275005/assets,https://api.github.com/repos/gradle/gradle/releases/8275005,release,https://api.github.com/repos/gradle/gradle/tarball/v4.3.0-RC4,https://github.com/gradle/gradle/releases/tag/v4.3.0-RC4,https://api.github.com/repos/gradle/gradle/zipball/v4.3.0-RC4,v4.3.0-RC4,False,True
8237157,2017-10-24T15:01:34Z,2017-10-24T15:11:36Z,4.3 RC3,"## Gradle 4.3 RC3 is now available for testing

This release candidate contains fixes for the following issues reported against [4.3 RC2](https://github.com/gradle/gradle/releases/tag/v4.3.0-RC2).

- #3262: The use of `Project.property(Class)` or `ProviderFactory.property(Class)` should not render a deprecation warning
- #3250: Auto-applied build scan plugin not found when used in Kotlin DSL

Check the [release notes](https://docs.gradle.org/4.3-rc-3/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 4.3 RC3 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.3-rc-3`

Standalone downloads are available at https://gradle.org/release-candidate/. 

## Reporting Problems

If you find a problem with Gradle 4.3 RC3, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/bmuschko,440872,bmuschko,https://api.github.com/repos/gradle/gradle/releases/8237157/assets,https://api.github.com/repos/gradle/gradle/releases/8237157,master,https://api.github.com/repos/gradle/gradle/tarball/v4.3.0-RC3,https://github.com/gradle/gradle/releases/tag/v4.3.0-RC3,https://api.github.com/repos/gradle/gradle/zipball/v4.3.0-RC3,v4.3.0-RC3,False,True
8160970,2017-10-18T07:38:03Z,2017-10-18T07:50:10Z,4.3 RC2,"## Gradle 4.3 RC2 is now available for testing

This release candidate contains fixes for the following issue reported against [4.3 RC1](https://github.com/gradle/gradle/releases/tag/v4.3.0-RC1).

- #3193: TaskInputs validation is too strict

Check the [release notes](https://docs.gradle.org/4.3-rc-2/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 4.3 RC2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.3-rc-2`

Standalone downloads are available at https://gradle.org/release-candidate/. 

## Reporting Problems

If you find a problem with Gradle 4.3 RC2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/lptr,495366,lptr,https://api.github.com/repos/gradle/gradle/releases/8160970/assets,https://api.github.com/repos/gradle/gradle/releases/8160970,release,https://api.github.com/repos/gradle/gradle/tarball/v4.3.0-RC2,https://github.com/gradle/gradle/releases/tag/v4.3.0-RC2,https://api.github.com/repos/gradle/gradle/zipball/v4.3.0-RC2,v4.3.0-RC2,False,True
8055075,2017-10-12T16:31:24Z,2017-10-12T16:32:06Z,4.3 RC1,"The Gradle team is pleased to announce Gradle 4.3.

First and foremost, this release of Gradle features [experimental build cache support for C and C++ compilation](https://docs.gradle.org/4.3-rc-1/release-notes.html#experimental-task-output-caching-for-c/c++-compilation). This further improves performance of native application builds as it [does for the JVM ecosystem](https://blog.gradle.org/introducing-gradle-build-cache). Your feedback will be very helpful to make this feature stable.

![cpp-build-cache-scan](https://user-images.githubusercontent.com/51534/31461434-5f1d0cfc-ae7e-11e7-8b43-b71d29d22565.png)

JVM developers who use annotation processors and the build cache should consider using a [new `compileJava.options.annotationProcessorGeneratedSourcesDirectory` property](https://docs.gradle.org/4.3-rc-1/release-notes.html#specify-output-directory-for-source-files-generated-by-annotation-processor) to make caching more effective.

The Gradle Kotlin DSL moves forward with a [v0.12 release](https://github.com/gradle/kotlin-dsl/releases/tag/v0.12.0) (included in Gradle 4.3). It brings Java 9 support, Kotlin 1.1.51, better support for Kotlin dependencies, improved documentation and samples, and more. **Heads up Kotlin users**: will want to ensure they declare the version of the Kotlin plugin; it no longer defaults to the embedded version.

![kotlin-dsl-0 12](https://user-images.githubusercontent.com/51534/31461421-55d5f370-ae7e-11e7-9f36-0cd27726d32f.png)

You can now use the [build scan plugin](https://scans.gradle.com/get-started) without configuring it in your build. Using the `--scan` command line flag will automatically apply the latest compatible version of the plugin if it's not already applied.

Several improvements have been made to improve user experience, increase robustness in the face of network problems, and solidify existing APIs.

 * Gradle now [defines connection and socket timeouts for all HTTP(S) requests](https://docs.gradle.org/4.3-rc-1/release-notes.html#timeouts-for-http/https-requests). This prevents certain types of network problems from hanging builds, and is especially helpful for build cache users. Furthermore, Gradle will [blacklist remote repositories](https://docs.gradle.org/4.3-rc-1/release-notes.html#blacklist-repository-in-case-of-repository-failures) for the duration of a build where requests time out.
 * The [`plugins {}` DSL can now be used in more cases](https://docs.gradle.org/4.3-rc-1/release-notes.html#more-use-cases-supported-using-the-plugins-{}-block). Subprojects can now apply plugins declared in `buildSrc` and non-core plugins already declared in parent projects.
 * The runtime task inputs API (what you'd typically see in a Gradle script instead of a binary plugin) is now [more consistent with the statically-compiled API](https://docs.gradle.org/4.3-rc-1/release-notes.html#task-input/output-annotations-and-runtime-api). Specifically, Gradle now creates directories for output properties, validates inputs and outputs, and allows classpath property declaration similar to when using annotations. 
 * A [new console `verbose` mode](https://docs.gradle.org/4.3-rc-1/release-notes.html#new-command-line-options) will print outcomes of all tasks (like `UP-TO-DATE`) like Gradle 3.5 and earlier did. You can set this via `--console=verbose` or by a new Gradle property `org.gradle.console=(plain rich verbose)`. Furthermore, all boolean flags like `--parallel` now have inverses like `--no-parallel` to make for a more consistent CLI.
 * Last but not least, [new task output `DirectoryProperty` and `RegularFileProperty`](https://docs.gradle.org/4.3-rc-1/release-notes.html#improvements-for-plugin-authors) types carry generating task information that allow Gradle to infer task dependencies. Use these types in your custom tasks instead of `File`s.

We hope you will build happiness with Gradle 4.3, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or on [GitHub](https://github.com/gradle).

## Upgrade Instructions

Switch your build to use Gradle 4.3 RC1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.3-rc-1`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 4.3 RC1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/8055075/assets,https://api.github.com/repos/gradle/gradle/releases/8055075,master,https://api.github.com/repos/gradle/gradle/tarball/v4.3.0-RC1,https://github.com/gradle/gradle/releases/tag/v4.3.0-RC1,https://api.github.com/repos/gradle/gradle/zipball/v4.3.0-RC1,v4.3.0-RC1,False,True
7960179,2017-10-02T15:55:11Z,2017-10-02T16:17:22Z,4.2.1,"This bug-fix release addresses a regression in 4.2, which caused Android instrumented tests to fail. It also improves Java 9 compatibility and clarifies a few deprecation warnings. We recommend that all Gradle 4.2 users upgrade to 4.2.1

For the full list of fixed issues, see the [GitHub milestone](https://github.com/gradle/gradle/milestone/42?closed=1).

## Upgrade Instructions

Switch your build to use Gradle 4.2.1 by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.2.1`

Standalone downloads are available at https://gradle.org/install. 

## Reporting Problems

If you find a problem with Gradle 4.2.1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/oehme,1191797,oehme,https://api.github.com/repos/gradle/gradle/releases/7960179/assets,https://api.github.com/repos/gradle/gradle/releases/7960179,release,https://api.github.com/repos/gradle/gradle/tarball/v4.2.1,https://github.com/gradle/gradle/releases/tag/v4.2.1,https://api.github.com/repos/gradle/gradle/zipball/v4.2.1,v4.2.1,False,False
7810416,2017-09-13T12:51:12Z,2017-09-22T10:24:53Z,4.2,"The Gradle team is pleased to announce Gradle 4.2.

First and foremost, progress has been made to improve Gradle's support for building native applications. The first outcome is [parallel task execution for native compilation and linking tasks](https://docs.gradle.org/4.2/release-notes.html#parallel-native-compilation-and-linking) _by default_. This has reduced build times for native performance scenarios by as much as half.

Native apps aren't the only ones that will benefit from upgrading to Gradle 4.2. We've been working hard to ensure the build cache introduces very little overhead; builds that resolve all task outputs from the local build cache are up to 20% faster due to improvements in unpacking. Another significant performance improvement comes from `zipTree` and `tarTree` now avoiding redundant tree visitation. 

![gradle-4 2-perf](https://user-images.githubusercontent.com/51534/30601532-143344f4-9d17-11e7-82ba-c47398f4448a.png)

---

Next up, first-class support for [Google Cloud Storage](https://cloud.google.com/storage/) backed repositories! You can publish and consume using the `ivy-publish` and `maven-publish` plugins. This works similarly to our Amazon S3 support, check out the [samples in the user manual](https://docs.gradle.org/4.2/userguide/dependency_management.html#mavenIvyGCSRepositoriesAuthDefault).

Play framework support is upgraded in Gradle 4.2: Play v2.6, built-in Twirl template types and user-defined Twirl formats are now supported. This version of Gradle introduces new [on-demand rebuild and reload for `PlayRun`](https://docs.gradle.org/4.2/release-notes.html#better-play-support). This is different from `--continuous` build and gives a more pleasant development experience for some workflows.

Gradle [Kotlin DSL v0.11.1](https://github.com/gradle/kotlin-dsl/releases/) (included in this release) brings the latest and greatest Kotlin (**1.1.4-3**) and takes big steps toward general usability with utilities for Groovy-heavy DSLs such as Maven POM customization, Ant usage and those provided by Groovy-based community plugins. Other improvements include better Gradle API null-safety, new samples, and improvements to the `kotlin-dsl` plugin.

![kotlin-dsl-0 11 1](https://user-images.githubusercontent.com/51534/29980427-b8e93502-8efe-11e7-833b-962a45d52043.png)

Last but not least, if your custom plugin is using the `Instantiator` (most-used internal API according to BigQuery public GitHub data), please migrate to the [`ObjectFactory` API for nested DSLs](https://docs.gradle.org/4.2/userguide/custom_plugins.html#sec:nested_dsl_elements), new in Gradle 4.2. 

More information is available in the [full release notes](https://docs.gradle.org/4.2/release-notes.html). We hope you will build happiness with Gradle 4.2, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle).

### Important deprecation notices

We are deprecating Gradle's [RuleSource](https://docs.gradle.org/4.2/userguide/software_model.html#sec:rule_sources) and implementing native support in the current model. Information and roadmap in our post ""[State and future of the Gradle Software Model](https://blog.gradle.org/state-and-future-of-the-gradle-software-model)"".

Support for running Gradle on Java 7 is deprecated and will be removed in Gradle 5.0; [Java 7 reached end-of-life in April 2015](https://www.java.com/en/download/faq/java_7.xml). However, you will still be able to compile, test, generate Javadoc and execute applications for Java 6 and Java 7 using [cross-compilation](https://docs.gradle.org/4.2/userguide/java_plugin.html#sec:java_cross_compilation)

## Upgrade Instructions

Switch your build to use Gradle 4.2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.2`

Standalone downloads are available at https://gradle.org/install. 

## Reporting Problems

If you find a problem with Gradle 4.2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/7810416/assets,https://api.github.com/repos/gradle/gradle/releases/7810416,release_4.2,https://api.github.com/repos/gradle/gradle/tarball/v4.2.0,https://github.com/gradle/gradle/releases/tag/v4.2.0,https://api.github.com/repos/gradle/gradle/zipball/v4.2.0,v4.2.0,False,False
7737654,2017-09-13T12:39:09Z,2017-09-13T12:44:05Z,4.2 RC2,"## Gradle 4.2 RC2 is now available for testing

This release candidate contains fixes for the following issues reported against [4.2 RC1](https://github.com/gradle/gradle/releases/tag/v4.2.0-RC1).

- #2915: Can't enter password to system command in 4.2-RC1
- #2891: Users can apply script hosted on HTTP server using query parameters

Check the [release notes](https://docs.gradle.org/4.2-rc-2/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 4.2 RC2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.2-rc-2`

Standalone downloads are available at https://gradle.org/release-candidate/. 

## Reporting Problems

If you find a problem with Gradle 4.2 RC2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/oehme,1191797,oehme,https://api.github.com/repos/gradle/gradle/releases/7737654/assets,https://api.github.com/repos/gradle/gradle/releases/7737654,master,https://api.github.com/repos/gradle/gradle/tarball/v4.2.0-RC2,https://github.com/gradle/gradle/releases/tag/v4.2.0-RC2,https://api.github.com/repos/gradle/gradle/zipball/v4.2.0-RC2,v4.2.0-RC2,False,True
7598910,2017-09-07T14:23:24Z,2017-09-07T14:13:15Z,4.2 RC1,"The Gradle team is pleased to announce Gradle 4.2.

First and foremost, progress has been made to improve Gradle's support for building native applications. The first outcome is [parallel task execution for native compilation and linking tasks](https://docs.gradle.org/4.2-rc-1/release-notes.html#parallel-native-compilation-and-linking) _by default_. This has reduced build times for native performance scenarios by as much as half.

Native apps aren't the only ones that will benefit from upgrading to Gradle 4.2. We've been working hard to ensure the build cache introduces very little overhead; builds that resolve all task outputs from the local build cache are up to 20% faster due to improvements in unpacking. Another significant performance improvement comes from `zipTree` and `tarTree` now avoiding redundant tree visitation. 

![gradle-4 2-perf](https://user-images.githubusercontent.com/51534/30079453-0ff56a80-9235-11e7-8a27-452a6c6f601b.png)

---

Next up, first-class support for [Google Cloud Storage](https://cloud.google.com/storage/) backed repositories! You can publish and consume using the `ivy-publish` and `maven-publish` plugins. This works similarly to our Amazon S3 support, check out the [samples in the user manual](https://docs.gradle.org/4.2-rc-1/userguide/dependency_management.html#mavenIvyGCSRepositoriesAuthDefault).

Play framework support is upgraded in Gradle 4.2: Play v2.6, built-in Twirl template types and user-defined Twirl formats are now supported. This version of Gradle introduces new [on-demand rebuild and reload for `PlayRun`](https://docs.gradle.org/4.2-rc-1/release-notes.html#better-play-support). This is different from `--continuous` build and gives a more pleasant development experience for some workflows.

Gradle [Kotlin DSL v0.11.1](https://github.com/gradle/kotlin-dsl/releases/) (included in this release) brings the latest and greatest Kotlin (**1.1.4-3**) and takes big steps toward general usability with utilities for Groovy-heavy DSLs such as Maven POM customization, Ant usage and those provided by Groovy-based community plugins. Other improvements include better Gradle API null-safety, new samples, and improvements to the `kotlin-dsl` plugin.

![kotlin-dsl-0 11 1](https://user-images.githubusercontent.com/51534/29980427-b8e93502-8efe-11e7-833b-962a45d52043.png)

Last but not least, if your custom plugin is using the `Instantiator` (most-used internal API according to BigQuery public GitHub data), please migrate to the [`ObjectFactory` API for nested DSLs](https://docs.gradle.org/4.2-rc-1/userguide/custom_plugins.html#sec:nested_dsl_elements), new in Gradle 4.2. 

More information is available in the [full release notes](https://docs.gradle.org/4.2-rc-1/release-notes.html). We hope you will build happiness with Gradle 4.2, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle).

### Important deprecation notices

We are deprecating Gradle's [RuleSource](https://docs.gradle.org/4.2-rc-1/userguide/software_model.html#sec:rule_sources) and implementing native support in the current model. Information and roadmap in our post ""[State and future of the Gradle Software Model](https://blog.gradle.org/state-and-future-of-the-gradle-software-model)"".

Support for running Gradle on Java 7 is deprecated and will be removed in Gradle 5.0; [Java 7 reached end-of-life in April 2015](https://www.java.com/en/download/faq/java_7.xml). However, you will still be able to compile, test, generate Javadoc and execute applications for Java 6 and Java 7 using [cross-compilation](https://docs.gradle.org/4.2-rc-1/userguide/java_plugin.html#sec:java_cross_compilation)

## Upgrade Instructions

Switch your build to use Gradle 4.2 RC1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.2-rc-1`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 4.2 RC1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/7598910/assets,https://api.github.com/repos/gradle/gradle/releases/7598910,release,https://api.github.com/repos/gradle/gradle/tarball/v4.2.0-RC1,https://github.com/gradle/gradle/releases/tag/v4.2.0-RC1,https://api.github.com/repos/gradle/gradle/zipball/v4.2.0-RC1,v4.2.0-RC1,False,True
7278460,2017-07-31T10:21:30Z,2017-08-07T17:10:23Z,4.1,"The Gradle team is pleased to announce Gradle 4.1.

First and foremost, we are excited to announce the new [Worker API](https://docs.gradle.org/4.1/userguide/custom_tasks.html#worker_api) for Gradle plugins, which facilitates **safe parallel execution**. We encourage plugin authors to [read the new user guide section](https://docs.gradle.org/4.1/userguide/custom_tasks.html#worker_api) and implement tasks using this API because it provides parallel execution by default. Core plugins will adopt this API in future releases. Furthermore, the [Gradle plugin for Android 3.0 alpha](https://developer.android.com/studio/preview/features/new-android-plugin.html) has already adopted this API, so plugin developers will be in good company. More details are given in the [full release notes](https://docs.gradle.org/4.1/release-notes.html#worker-api-for-safe,-concurrent-work-execution).

This release supports **running Gradle on the most recent JDK 9 release** (b170+). Read our [guide to building Java 9 modules](https://guides.gradle.org/building-java-9-modules) to learn how to produce and consume Java 9 modules with Gradle. 

Steady progress has been made to make the [build cache](https://blog.gradle.org/introducing-gradle-build-cache) more user-friendly. Remote build cache results are mirrored locally and build cache resolution failures no longer fail the build.

Included in this release, Gradle [Kotlin DSL v0.10.3](https://github.com/gradle/kotlin-dsl/releases/tag/v0.10.3) comes with the latest Kotlin release (1.1.3), a new `kotlin-dsl` plugin for Gradle Plugins written in Kotlin, plus many improvements to usability, stability, and performance.

We've also spent some time making composite builds work more like multi-project builds. **Included builds are now executed in parallel by default** and Gradle avoids executing included build tasks multiple times when possible. Finally, you can now use `--continuous` build and composite builds together.

Scala enthusiasts rejoice! **Scala compile and Scaladoc tasks now support Gradle's build cache**. Zinc has been also upgraded to v0.3.15, which has preliminary support for compiling Scala using Java 9. 

Finally, the CLI now shows more detail about tests in-progress, showing which tests are running in parallel.

![gradle-4 1-test-exec](https://user-images.githubusercontent.com/51534/28283605-0882ca64-6ae3-11e7-8ea5-c0faf7322722.gif)

------------

<!-- Performance continues to improve in this release, the most noticeable improvements to build startup. -->

More information is available in the [full release notes](https://docs.gradle.org/4.1/release-notes.html). We hope you will build happiness with Gradle 4.1, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle).

## Upgrade Instructions

Switch your build to use Gradle 4.1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.1`

Standalone downloads are available at https://gradle.org/install. 

## Reporting Problems

If you find a problem with Gradle 4.1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/7278460/assets,https://api.github.com/repos/gradle/gradle/releases/7278460,release,https://api.github.com/repos/gradle/gradle/tarball/v4.1.0,https://github.com/gradle/gradle/releases/tag/v4.1.0,https://api.github.com/repos/gradle/gradle/zipball/v4.1.0,v4.1.0,False,False
7229033,2017-07-31T10:21:30Z,2017-07-31T14:42:45Z,4.1 RC2,"## Gradle 4.1 RC2 is now available for testing

This release candidate contains fixes for the following issues reported against [4.1 RC1](https://github.com/gradle/gradle/releases/tag/v4.1.0-RC1).

- #2077: StringIndexOutOfBoundsException on test failure
- #2343: Gradle 4.0 does not run Play Tests when Play and Java plugins are combined
- #2573: 4.1-rc-1 resolves compileClasspath configuration twice when generating IDEA module
- #2553: Gradle Javadoc documentation missing methods
- #2616: Build cache operation logging in 4.1 is misleading

Check the [release notes](https://docs.gradle.org/4.1-rc-2/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 4.1 RC2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.1-rc-2`

Standalone downloads are available at https://gradle.org/release-candidate/. 

## Reporting Problems

If you find a problem with Gradle 4.1 RC2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/7229033/assets,https://api.github.com/repos/gradle/gradle/releases/7229033,release,https://api.github.com/repos/gradle/gradle/tarball/v4.1.0-RC2,https://github.com/gradle/gradle/releases/tag/v4.1.0-RC2,https://api.github.com/repos/gradle/gradle/zipball/v4.1.0-RC2,v4.1.0-RC2,False,True
7143777,2017-07-24T20:15:46Z,2017-07-26T16:26:30Z,4.0.2,"This bug-fix release addresses two regressions in 4.0/4.0.1 that may lead to hanging build executions and one that can cause issues with dependency excludes. If your project uses Gradle 4.0 or 4.0.1, please update to 4.0.2.

Fixed issues:
- [gradle/gradle#2415](https://github.com/gradle/gradle/issues/2415): Resolving metadata from parent POM can hang the build
- [gradle/gradle#2407](https://github.com/gradle/gradle/issues/2407): Exceptions in `@OutputFiles` method can hang the build w/o reporting exceptions
- [gradle/gradle#2480](https://github.com/gradle/gradle/issues/2480): Dependency excludes defined in a `beforeResolve` hook should be respected


## Upgrade Instructions

Switch your build to use Gradle 4.0.2 by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.0.2`

Standalone downloads are available at https://gradle.org/install. 

## Reporting Problems

If you find a problem with Gradle 4.0.2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/jjohannes,1963746,jjohannes,https://api.github.com/repos/gradle/gradle/releases/7143777/assets,https://api.github.com/repos/gradle/gradle/releases/7143777,release_4.0.2,https://api.github.com/repos/gradle/gradle/tarball/v4.0.2,https://github.com/gradle/gradle/releases/tag/v4.0.2,https://api.github.com/repos/gradle/gradle/zipball/v4.0.2,v4.0.2,False,False
7066509,2017-07-20T16:02:12Z,2017-07-20T16:04:27Z,4.1 RC1,"The Gradle team is pleased to announce the first release candidate for Gradle 4.1.

First and foremost, we are excited to announce the new [Worker API](https://docs.gradle.org/4.1-rc-1/userguide/custom_tasks.html#worker_api) for Gradle plugins, which facilitates **safe parallel execution**. We encourage plugin authors to [read the new user guide section](https://docs.gradle.org/4.1-rc-1/userguide/custom_tasks.html#worker_api) and implement tasks using this API because it provides parallel execution by default. Core plugins will adopt this API in future releases. Furthermore, the [Gradle plugin for Android 3.0 alpha](https://developer.android.com/studio/preview/features/new-android-plugin.html) has already adopted this API, so plugin developers will be in good company. More details are given in the [full release notes](https://docs.gradle.org/4.1-rc-1/release-notes.html#worker-api-for-safe,-concurrent-work-execution).

This release supports **running Gradle on the most recent JDK 9 release** (b170+). Read our [guide to building Java 9 modules](https://guides.gradle.org/building-java-9-modules) to learn how to produce and consume Java 9 modules with Gradle. 

Steady progress has been made to make the [build cache](https://blog.gradle.org/introducing-gradle-build-cache) more user-friendly. Remote build cache results are mirrored locally and build cache resolution failures no longer fail the build.

Included in this release, Gradle [Kotlin DSL v0.10.3](https://github.com/gradle/kotlin-dsl/releases/tag/v0.10.3) comes with the latest Kotlin release (1.1.3), a new `kotlin-dsl` plugin for Gradle Plugins written in Kotlin, plus many improvements to usability, stability, and performance.

We've also spent some time making composite builds work more like multi-project builds. **Included builds are now executed in parallel by default** and Gradle avoids executing included build tasks multiple times when possible. Finally, you can now use `--continuous` build and composite builds together.

Scala enthusiasts rejoice! **Scala compile and Scaladoc tasks now support Gradle's build cache**. Zinc has been also upgraded to v0.3.15, which has preliminary support for compiling Scala using Java 9. 

Finally, the CLI now shows more detail about tests in-progress, showing which tests are running in parallel.

![gradle-4 1-test-exec](https://user-images.githubusercontent.com/51534/28283605-0882ca64-6ae3-11e7-8ea5-c0faf7322722.gif)

------------

<!-- Performance continues to improve in this release, the most noticeable improvements to build startup. -->

More information is available in the [full release notes](https://docs.gradle.org/4.1-rc-1/release-notes.html). We hope you will build happiness with Gradle 4.1, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle).

## Upgrade Instructions

Switch your build to use Gradle 4.1 RC1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.1-rc-1`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 4.1 RC1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/7066509/assets,https://api.github.com/repos/gradle/gradle/releases/7066509,release,https://api.github.com/repos/gradle/gradle/tarball/v4.1.0-RC1,https://github.com/gradle/gradle/releases/tag/v4.1.0-RC1,https://api.github.com/repos/gradle/gradle/zipball/v4.1.0-RC1,v4.1.0-RC1,False,True
6953124,2017-07-06T14:48:41Z,2017-07-07T14:30:26Z,4.0.1,"**Update: Please update to [4.0.2](https://github.com/gradle/gradle/releases/tag/v4.0.2) instead**

This bug-fix release addresses four uncaught regressions in [4.0](https://github.com/gradle/gradle/releases/tag/v4.0.0). If your project uses Gradle 4.0, please update to 4.0.1.

Fixed issues:
- [gradle/gradle#2321](https://github.com/gradle/gradle/issues/2321): Deadlock in parallel test execution
- [gradle/gradle#2239](https://github.com/gradle/gradle/issues/2239): Sporadic IllegalStateException while initializing build
- [gradle/gradle#2385](https://github.com/gradle/gradle/issues/2385): Wrong setter selected in presence of a typed and untyped setter
- [gradle/gradle#2360](https://github.com/gradle/gradle/issues/2360): Mark SourceDirectorySet.outputDir as Incubating


## Upgrade Instructions

Switch your build to use Gradle 4.0.1 by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.0.1`

Standalone downloads are available at https://gradle.org/install. 

## Reporting Problems

If you find a problem with Gradle 4.0.1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/jjohannes,1963746,jjohannes,https://api.github.com/repos/gradle/gradle/releases/6953124/assets,https://api.github.com/repos/gradle/gradle/releases/6953124,release_4.0.1,https://api.github.com/repos/gradle/gradle/tarball/v4.0.1,https://github.com/gradle/gradle/releases/tag/v4.0.1,https://api.github.com/repos/gradle/gradle/zipball/v4.0.1,v4.0.1,False,False
6773865,2017-06-20T15:20:07Z,2017-06-20T17:31:29Z,4.1 M1,"The Gradle team is pleased to announce a first milestone release of Gradle 4.1.

This release now supports running Gradle on the most recent JDK 9 release (b170+). It also optimizes startup speed, positively affecting the execution time of every build.

Check the [release notes](https://docs.gradle.org/4.1-milestone-1/release-notes) for more information.

## Upgrade Instructions

Switch your build to use Gradle M1 by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.1-milestone-1`

Standalone downloads are available at https://services.gradle.org/distributions. 

## Reporting Problems

If you find a problem with Gradle 4.1 M1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/jjohannes,1963746,jjohannes,https://api.github.com/repos/gradle/gradle/releases/6773865/assets,https://api.github.com/repos/gradle/gradle/releases/6773865,release,https://api.github.com/repos/gradle/gradle/tarball/v4.1.0-milestone-1,https://github.com/gradle/gradle/releases/tag/v4.1.0-milestone-1,https://api.github.com/repos/gradle/gradle/zipball/v4.1.0-milestone-1,v4.1.0-milestone-1,False,True
6739318,2017-06-16T07:27:57Z,2017-06-16T14:51:38Z,3.5.1,"This bug-fix release addresses an uncaught regression in [v3.5.0](https://github.com/gradle/gradle/releases/tag/v3.5.0). Consider upgrading to [v4.0](https://github.com/gradle/gradle/releases/tag/v4.0.0), which also contains the fix.

Fixed issue:
- [gradle/gradle#1811](https://github.com/gradle/gradle/issues/1811): mavenLocal broken when \<localRepository/> found in Maven settings.xml 

## Upgrade Instructions

Switch your build to use Gradle 3.5.1 by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.5.1`

Standalone downloads are available at https://gradle.org/install. 

## Reporting Problems

If you find a problem with Gradle 3.5.1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/jjohannes,1963746,jjohannes,https://api.github.com/repos/gradle/gradle/releases/6739318/assets,https://api.github.com/repos/gradle/gradle/releases/6739318,release_3.5.1,https://api.github.com/repos/gradle/gradle/tarball/v3.5.1,https://github.com/gradle/gradle/releases/tag/v3.5.1,https://api.github.com/repos/gradle/gradle/zipball/v3.5.1,v3.5.1,False,False
6698039,2017-06-14T15:29:12Z,2017-06-14T15:29:54Z,4.0,"The Gradle team is pleased to announce Gradle 4.0.

We are excited to share some great new features and improvements with you in this release:

First and foremost, Gradle's [Build Cache](https://blog.gradle.org/introducing-gradle-build-cache) is now **production-ready for Java and Groovy** compilation and Java test tasks! This provides remarkable performance, making Gradle builds [up to 100x faster than Maven](https://gradle.org/gradle-vs-maven-performance) in common scenarios. This is further improved by overlapping outputs detection, configurable classpath normalization that avoids unnecessary task execution, and more listed in the [full release notes](https://docs.gradle.org/4.0/release-notes.html#build-cache-improvements). The cacheability of other tasks, including other languages, will be completed in future releases. We invite you to check out our new guide for [maximizing effectiveness of the Gradle Build Cache](https://guides.gradle.org/using-build-cache/).

Now on to user experience: this release has a number of enhancements in logging and terminal display. Log output is now **grouped by project and task** when attached to a terminal — output from tasks run in parallel will no longer be interleaved. However, logging behaves the same as previous Gradle versions in non-interactive environments, and with `--console=plain`, to allow automated tools like CI systems to parse the logs they expect. 

![4 0-console-2](https://cloud.githubusercontent.com/assets/51534/26138674/ba0f3b44-3a7f-11e7-9c15-ae921ff6b637.png)

------------

The console output now shows more detail about what exactly is in-progress, and parallel work in-progress is now displayed by default. You can learn more about logging and console output in the [user guide](https://docs.gradle.org/4.0/userguide/console.html). 

![4 0-console-take5](https://cloud.githubusercontent.com/assets/51534/26138676/bf6c2eee-3a7f-11e7-8161-62e217ef0789.gif)

------------

Speaking of parallel work-in-progress, **artifacts and metadata from remote repositories are now downloaded in parallel**! Gradle also avoids downloading the same dependency twice even if parallel tasks request the same one simultaneously.
 
[Gradle Script Kotlin v0.9.0](https://github.com/gradle/gradle-script-kotlin/releases/tag/v0.9.0) (included in this release) brings very welcome improvements: auto-detection of Kotlin build scripts, default imports for the whole Gradle API, improved samples and docs with an [API reference](https://gradle.github.io/gradle-script-kotlin-docs/api/), better IntelliJ experience and more!

Finally, this release introduces a public type that represents lazily-evaluated properties (aka `ConventionMapping`). This is one of the most-requested features by plugin authors. You can learn more about `PropertyState`s [here](https://docs.gradle.org/4.0/release-notes.html#public-type-for-representing-lazily-evaluated-properties). A good example of their usage can be found in the [gradle-site-plugin](https://github.com/gradle-guides/gradle-site-plugin).

We hope you will build happiness with Gradle 4.0, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle).

## Upgrade Instructions

Switch your build to use Gradle 4.0 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.0`

Standalone downloads are available at https://gradle.org/install. 

## Reporting Problems

If you find a problem with Gradle 4.0, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/6698039/assets,https://api.github.com/repos/gradle/gradle/releases/6698039,master,https://api.github.com/repos/gradle/gradle/tarball/v4.0.0,https://github.com/gradle/gradle/releases/tag/v4.0.0,https://api.github.com/repos/gradle/gradle/zipball/v4.0.0,v4.0.0,False,False
6682566,2017-06-12T13:09:38Z,2017-06-12T15:37:00Z,4.0 RC3,"In addition to the fixes provided in [4.0 RC2](https://github.com/gradle/gradle/releases/tag/v4.0.0-RC2), this release candidate contains internal API changes and documentation updates.

Check the [release notes](https://docs.gradle.org/4.0-rc-3/release-notes) for more information.  If no regressions are reported, a final release will follow later this week.

## Upgrade Instructions

Switch your build to use Gradle 4.0 RC3 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.0-rc-3`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 4.0 RC3, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/jjohannes,1963746,jjohannes,https://api.github.com/repos/gradle/gradle/releases/6682566/assets,https://api.github.com/repos/gradle/gradle/releases/6682566,release,https://api.github.com/repos/gradle/gradle/tarball/v4.0.0-RC3,https://github.com/gradle/gradle/releases/tag/v4.0.0-RC3,https://api.github.com/repos/gradle/gradle/zipball/v4.0.0-RC3,v4.0.0-RC3,False,True
6633855,2017-06-07T15:31:55Z,2017-06-07T15:46:30Z,4.0 RC2,"## Gradle 4.0 RC2 is now available for testing

This release candidate contains fixes for the following issues reported against [4.0 RC1](https://github.com/gradle/gradle/releases/tag/v4.0.0-RC1).
- [#2205](https://github.com/gradle/gradle/issues/2205): Update 4.0 release notes for gradle-script-kotlin to version 0.9.1
- [#2208](https://github.com/gradle/gradle/issues/2208): 4.0-rc-1 takes longer for resolving configurations than 3.5
- [#2210](https://github.com/gradle/gradle/issues/2210): Progress bar and work-in-progress info is sometimes rendered in build output
- [#2216](https://github.com/gradle/gradle/issues/2216): Common idiom for configuring test tasks causes unexpected behavior in 4.0-rc-1
- [#2222](https://github.com/gradle/gradle/issues/2222): 4.0 rc1 hang with jarjar plugin
- [#2235](https://github.com/gradle/gradle/issues/2235): Linking external Javadocs fails with Gradle 4.0

Check the [release notes](https://docs.gradle.org/4.0-rc-2/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 4.0 RC2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.0-rc-2`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 4.0 RC2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/bmuschko,440872,bmuschko,https://api.github.com/repos/gradle/gradle/releases/6633855/assets,https://api.github.com/repos/gradle/gradle/releases/6633855,master,https://api.github.com/repos/gradle/gradle/tarball/v4.0.0-RC2,https://github.com/gradle/gradle/releases/tag/v4.0.0-RC2,https://api.github.com/repos/gradle/gradle/zipball/v4.0.0-RC2,v4.0.0-RC2,False,True
6545342,2017-05-30T16:29:37Z,2017-05-30T16:53:09Z,4.0 RC1,"The Gradle team is pleased to announce Gradle 4.0.

We are excited to share some great new features and improvements with you in this release:

First and foremost, Gradle's [Build Cache](https://blog.gradle.org/introducing-gradle-build-cache) is now **production-ready for Java and Groovy** compilation and Java test tasks! This is further improved by overlapping outputs detection, configurable classpath normalization that avoids unnecessary task execution, and more listed in the [full release notes](https://docs.gradle.org/4.0-rc-1/release-notes.html#build-cache-improvements). The cacheability of other tasks, including other languages, will be completed in future releases.

Now on to user experience: this release has a number of enhancements in logging and terminal display. Log output is now **grouped by project and task** when attached to a terminal — output from tasks run in parallel will no longer be interleaved. However, logging behaves the same as previous Gradle versions in non-interactive environments, and with `--console=plain`, to allow automated tools like CI systems to parse the logs they expect. 

![4 0-console-2](https://cloud.githubusercontent.com/assets/51534/26138674/ba0f3b44-3a7f-11e7-9c15-ae921ff6b637.png)

------------

The console output now shows more detail about what exactly is in-progress, and parallel work in-progress is now displayed by default. You can learn more about logging and console output in the [user guide](https://docs.gradle.org/4.0-rc-1/userguide/console.html). 

![4 0-console-take5](https://cloud.githubusercontent.com/assets/51534/26138676/bf6c2eee-3a7f-11e7-8161-62e217ef0789.gif)

------------

Speaking of parallel work-in-progress, **artifacts and metadata from remote repositories are now downloaded in parallel**! Gradle also avoids downloading the same dependency twice even if parallel tasks request the same one simultaneously.
 
[Gradle Script Kotlin v0.9.0](https://github.com/gradle/gradle-script-kotlin/releases/tag/v0.9.0) (included in this release) brings very welcome improvements: auto-detection of Kotlin build scripts, default imports for the whole Gradle API, improved samples and docs with an [API reference](https://gradle.github.io/gradle-script-kotlin-docs/api/), better IntelliJ experience and more!

Finally, this release introduces a public type that represents lazily-evaluated properties (aka `ConventionMapping`). This is one of the most-requested features by plugin authors. You can learn more about `PropertyState`s [here](https://docs.gradle.org/4.0-rc-1/release-notes.html#public-type-for-representing-lazily-evaluated-properties). A good example of their usage can be found in the [gradle-site-plugin](https://github.com/gradle-guides/gradle-site-plugin).

We hope you will build happiness with Gradle 4.0, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle).

## Upgrade Instructions

Switch your build to use Gradle 4.0 RC1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.0-rc-1`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 4.0 RC1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/6545342/assets,https://api.github.com/repos/gradle/gradle/releases/6545342,master,https://api.github.com/repos/gradle/gradle/tarball/v4.0.0-RC1,https://github.com/gradle/gradle/releases/tag/v4.0.0-RC1,https://api.github.com/repos/gradle/gradle/zipball/v4.0.0-RC1,v4.0.0-RC1,False,True
6372254,2017-05-17T14:53:51Z,2017-05-17T14:54:47Z,4.0 M2,"The Gradle team is pleased to announce Gradle 4.0.

We are excited to share some great new features and improvements with you in this release.

First and foremost, Gradle's [Build Cache](https://blog.gradle.org/introducing-gradle-build-cache) is now **production-ready for Java and Groovy** compilation and test tasks! This is further improved by overlapping outputs detection, customizable classpath analysis that avoids unnecessary task execution, and more [listed in the full release notes](https://docs.gradle.org/4.0-milestone-2/release-notes.html#build-cache-improvements). The cacheability of other tasks, including other languages, will be completed in future releases.

Now on to user experience: this release has a number of enhancements in logging and terminal display. Log output is now **grouped by project and task** when attached to a terminal — output from tasks run in parallel will no longer be interleaved. However, logging behaves the same as previous Gradle versions in non-interactive environments, and with `--console=plain`, to allow automated tools like CI systems to parse the logs they expect. Logs from forked processes like Java compilation and tests are not grouped in this milestone, but will be in the 4.0 RC.

![4 0-console-2](https://cloud.githubusercontent.com/assets/51534/26138674/ba0f3b44-3a7f-11e7-9c15-ae921ff6b637.png)

------------

The console output now shows more detail about what exactly is in-progress, and parallel work in-progress is now displayed by default. You can learn more about logging and console output in the [user guide](https://docs.gradle.org/4.0-milestone-2/userguide/logging.html).

![4 0-console-take5](https://cloud.githubusercontent.com/assets/51534/26138676/bf6c2eee-3a7f-11e7-8161-62e217ef0789.gif)

------------
Speaking of parallel work-in-progress, **artifacts and metadata from remote repositories are now downloaded in parallel**! Gradle also avoids downloading the same dependency twice even if parallel tasks request the same one simultaneously.

This release includes **new Worker APIs** that allow plugins to provide **stable parallel task execution**. You can now leverage these APIs to improve build performance. Future versions of Gradle will leverage these APIs to enable core tasks to be parallelized.

Finally, this release introduces a public type that represents lazily-evaluated properties (aka `ConventionMapping`). This is one of the most-requested features by plugin authors. You can learn more about `PropertyState`s [in the full release notes](https://docs.gradle.org/4.0-milestone-2/release-notes.html#public-type-for-representing-lazily-evaluated-properties). A good example of their usage can be found in the [gradle-site-plugin](https://github.com/gradle-guides/gradle-site-plugin).

We hope you will build happiness with Gradle 4.0, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle).

## Upgrade Instructions

Switch your build to use Gradle 4.0 M2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=4.0-milestone-2`

Standalone downloads are available at https://services.gradle.org/distributions/. 

## Reporting Problems

If you find a problem with Gradle 4.0 M2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/6372254/assets,https://api.github.com/repos/gradle/gradle/releases/6372254,master,https://api.github.com/repos/gradle/gradle/tarball/v4.0.0-M2,https://github.com/gradle/gradle/releases/tag/v4.0.0-M2,https://api.github.com/repos/gradle/gradle/zipball/v4.0.0-M2,v4.0.0-M2,False,True
6017990,2017-04-10T13:40:45Z,2017-04-10T14:25:32Z,3.5.0,"## Gradle 3.5 is now available

The Gradle team is pleased to announce Gradle 3.5.

First and foremost, we're excited to announce the new [Build Cache](https://blog.gradle.org/introducing-gradle-build-cache)! Beyond [incremental builds](https://blog.gradle.org/introducing-incremental-build-support), Gradle can save time by reusing outputs from previous executions of a task, resolving them _locally_ or _remotely_. We’ve worked hard to ensure many built-in tasks are cacheable and safe to try; however, this feature should not be used in production without fully understanding [its current limitations](https://docs.gradle.org/3.5/userguide/build_cache.html#sec:task_output_caching_known_issues), so it is not enabled by default.

We have been testing this feature at scale for quite some time on the Gradle build itself and with enterprise partners, and the feedback has been very positive. While this feature is incubating, we are improving the user experience, documentation, and debuggability so that everyone can enable the Build Cache eventually.

We would like your feedback. Please read the [Build Cache user manual](https://docs.gradle.org/3.5/userguide/build_cache.html), try it in non-critical environments, and submit GitHub issues with [build scans](https://gradle.com/scans/get-started) if you encounter problems.

Next, we lamented that sometimes Gradle console output did not show all work-in-progress during a build (especially with `--parallel`), so we’ve developed brand new console output!

![console-3 5](https://cloud.githubusercontent.com/assets/51534/24205091/a1de6870-0ed7-11e7-88d0-4999c13fbedc.gif)

[Gradle Script Kotlin v0.8.0](https://docs.gradle.org/3.5/release-notes.html#kotlin-build-scripts) (included in the distribution) is a major step forward in
usability. It brings a more consistent DSL, convenient and type-safe access to contributed project extensions and conventions, much better error reporting, bug fixes and, of course, the latest and greatest Kotlin release.

Finally, [plugin resolution rules](https://docs.gradle.org/3.5/userguide/plugins.html#sec:plugin_management) give you tighter control over how plugins are resolved through the new `pluginManagement {}` block. 

We hope you will build happiness with Gradle 3.5, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle).

Check the full [3.5 release notes](https://docs.gradle.org/3.5/release-notes) for more information.

## Upgrade Instructions

Switch your build to use Gradle 3.5 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.5`

Standalone downloads are available at https://gradle.org/releases. 

## Reporting Problems

If you find a problem with Gradle 3.5, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).",https://api.github.com/users/w25r,2294198,w25r,https://api.github.com/repos/gradle/gradle/releases/6017990/assets,https://api.github.com/repos/gradle/gradle/releases/6017990,master,https://api.github.com/repos/gradle/gradle/tarball/v3.5.0,https://github.com/gradle/gradle/releases/tag/v3.5.0,https://api.github.com/repos/gradle/gradle/zipball/v3.5.0,v3.5.0,False,False
5971946,2017-04-04T15:05:08Z,2017-04-04T15:16:39Z,3.5 RC3,"## Gradle 3.5 RC3 is now available for testing

This release candidate contains one bug fix reported against [3.5 RC2](https://github.com/gradle/gradle/releases/tag/v3.5.0-RC2).
- [#1752](https://github.com/gradle/gradle/issues/1752): Up-to-date check incorrect when file in input JAR is renamed

Check the [release notes](https://docs.gradle.org/3.5-rc-3/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.5 RC3 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.5-rc-3`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 3.5 RC3, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/5971946/assets,https://api.github.com/repos/gradle/gradle/releases/5971946,master,https://api.github.com/repos/gradle/gradle/tarball/v3.5.0-RC3,https://github.com/gradle/gradle/releases/tag/v3.5.0-RC3,https://api.github.com/repos/gradle/gradle/zipball/v3.5.0-RC3,v3.5.0-RC3,False,True
5863185,2017-03-27T15:58:15Z,2017-03-27T16:11:04Z,3.5 RC2,"## Gradle 3.5 RC2 is now available for testing

This release candidate contains a few bug fixes reported against [3.5 RC1](https://github.com/gradle/gradle/releases/tag/v3.5.0-RC1).
- [#1517](https://github.com/gradle/gradle/pull/1517): Document lack of signing capability in maven-publish plugin
- [#1641](https://github.com/gradle/gradle/issues/1641): Publishing via maven-publish plugin fails in Gradle 3.5 RC1
- [#1645](https://github.com/gradle/gradle/pull/1645): Gradle 3.5 RC1 breaks the error prone plugin
- [#1646](https://github.com/gradle/gradle/pull/1646): Noisy Findbugs plugin with quiet log level with Gradle 3.5 RC1

Check the [release notes](https://docs.gradle.org/3.5-rc-2/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.5 RC2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.5-rc-2`

Standalone downloads are available at https://services.gradle.org/distributions/. 

## Reporting Problems

If you find a problem with Gradle 3.5 RC2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/lacasseio,22181740,lacasseio,https://api.github.com/repos/gradle/gradle/releases/5863185/assets,https://api.github.com/repos/gradle/gradle/releases/5863185,master,https://api.github.com/repos/gradle/gradle/tarball/v3.5.0-RC2,https://github.com/gradle/gradle/releases/tag/v3.5.0-RC2,https://api.github.com/repos/gradle/gradle/zipball/v3.5.0-RC2,v3.5.0-RC2,False,True
5832390,2017-03-22T15:46:13Z,2017-03-22T15:50:01Z,3.5 RC1,"## Gradle 3.5 RC1 is now available

The Gradle team is pleased to announce Gradle 3.5.

First and foremost, we're excited to announce the new [Build Cache](https://docs.gradle.org/3.5-rc-1/userguide/build_cache.html)! Beyond [incremental builds](https://blog.gradle.org/introducing-incremental-build-support), Gradle can save time by reusing outputs from previous executions of a task, resolving them _locally_ or _remotely_. We’ve worked hard to ensure many built-in tasks are cacheable and safe to try; however, this feature should not be used in production without fully understanding [its current limitations](https://docs.gradle.org/3.5-rc-1/userguide/build_cache.html#sec:task_output_caching_known_issues), so it is not enabled by default.

We have been testing this feature at scale for quite some time on the Gradle build itself and with enterprise partners, and the feedback has been very positive. While this feature is incubating, we are improving the user experience, documentation, and debuggability so that everyone can enable the Build Cache eventually.

We would like your feedback. Please read the [Build Cache user manual](https://docs.gradle.org/3.5-rc-1/userguide/build_cache.html), try it in non-critical environments, and submit GitHub issues with [build scans](https://gradle.com/scans/get-started) if you encounter problems.

Next, we lamented that sometimes Gradle console output did not show all work-in-progress during a build (especially with `--parallel`), so we’ve developed brand new console output!

![console-3 5](https://cloud.githubusercontent.com/assets/51534/24205091/a1de6870-0ed7-11e7-88d0-4999c13fbedc.gif)

[Gradle Script Kotlin v0.8.0](https://docs.gradle.org/3.5-rc-1/release-notes.html#kotlin-build-scripts) (included in the distribution) is a major step forward in
usability. It brings a more consistent DSL, convenient and type-safe access to contributed project extensions and conventions, much better error reporting, bug fixes and, of course, the latest and greatest Kotlin release.

Finally, [plugin resolution rules](https://docs.gradle.org/3.5-rc-1/userguide/plugins.html#sec:plugin_management) give you tighter control over how plugins are resolved through the new `pluginManagement {}` block. 

We hope you will build happiness with Gradle 3.5, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle).

## Upgrade Instructions

Switch your build to use Gradle 3.5 RC1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.5-rc-1`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 3.5 RC1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).",https://api.github.com/users/bmuschko,440872,bmuschko,https://api.github.com/repos/gradle/gradle/releases/5832390/assets,https://api.github.com/repos/gradle/gradle/releases/5832390,master,https://api.github.com/repos/gradle/gradle/tarball/v3.5.0-RC1,https://github.com/gradle/gradle/releases/tag/v3.5.0-RC1,https://api.github.com/repos/gradle/gradle/zipball/v3.5.0-RC1,v3.5.0-RC1,False,True
5634269,2017-03-03T19:45:52Z,2017-03-03T20:01:54Z,3.4.1,"## Gradle 3.4.1 is now available

This bug-fix release addresses uncaught regressions in [v3.4.0](https://github.com/gradle/gradle/releases/tag/v3.4.0) in the Java incremental compilation. 

Fixed issues:
- [gradle/gradle#1474](https://github.com/gradle/gradle/issues/1474): Incremental compilation with literals in 3.4
- [gradle/gradle#1476](https://github.com/gradle/gradle/issues/1476): Compile avoidance should respect public constant changes

## Upgrade Instructions

Switch your build to use Gradle 3.4.1 by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.4.1`

Standalone downloads are available at https://gradle.org/gradle-download. 

## Reporting Problems

If you find a problem with Gradle 3.4.1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/lacasseio,22181740,lacasseio,https://api.github.com/repos/gradle/gradle/releases/5634269/assets,https://api.github.com/repos/gradle/gradle/releases/5634269,master,https://api.github.com/repos/gradle/gradle/tarball/v3.4.1,https://github.com/gradle/gradle/releases/tag/v3.4.1,https://api.github.com/repos/gradle/gradle/zipball/v3.4.1,v3.4.1,False,False
5493001,2017-02-20T15:27:51Z,2017-02-20T15:30:10Z,3.4,"## Gradle 3.4 is now available

We're excited to bring you 3 incredible performance features in this release.

First up: **Compile Avoidance**. We've introduced a new mechanism for up-to-date checking of Java compilation that is sensitive to public API changes only. This means that if you change a comment or even a private API in a downstream project, Java compilation for upstream projects will be `UP-TO-DATE`.

Next: A **stable incremental Java compiler**. We've smartened the handling of constants, backed it with in-memory caches, and fixed many bugs. It is now production-ready for your build and has been promoted out of `@Incubating`. 

Finally: A brand **new Java Library Plugin**. Use this when building a component intended to be used as a dependency from another project. It provides a strong separation between public (exported) and private code which not only gives great performance benefits (because consumers' compile classpaths are smaller), but also an architectural tool for library authors.   

Put these together on our [perf-enterprise-large benchmark Java project](https://github.com/gradle/perf-enterprise-large), and compilation time after a method body change is reduced from [2.5 minutes](https://scans.gradle.com/s/tojo2cxznjuko) to [9 seconds](https://scans.gradle.com/s/g7i3vjskudfps)! Let's put that in perspective: 
![screen shot 2017-01-25 at 1 59 07 pm](https://cloud.githubusercontent.com/assets/51534/22308971/7a6da79e-e306-11e6-94a2-555ce9c14920.png)

It is not just large projects that reap the benefits, for example the same use case for [Apache Polygene](https://github.com/apache/polygene-java) was reduced from [14 seconds](https://scans.gradle.com/s/pxeuv4ujnvxgi) to [7 seconds](https://scans.gradle.com/s/akggvs5dajuyi). Huge kudos to our performance team for delivering such massive performance improvements with this release. 

You can learn more in this [blog post about incremental compilation, compile avoidance and other performance features of Gradle 3.4](https://blog.gradle.org/incremental-compiler-avoidance).

Now, with your help and guidance we've been able to made a couple of highly-requested code-quality plugins improvements:
- The JaCoCo plugin now allows you to [enforce code coverage metrics](https://github.com/gradle/gradle/issues/824) and fail the build if they're not met.
- The default version of JaCoCo used by the JaCoCo plugin has been raised and the plugin is now [Java 9-ready](https://github.com/gradle/gradle/issues/1006).
- The Checkstyle plugin now allows a maximum number of warnings or errors to be configured.

A special thank you to those who voted and contributed to these issues.

The community's voice clearly indicated the need for [verifying JaCoCo code coverage metrics](https://github.com/gradle/gradle/issues/824). The JaCoCo plugin in Gradle 3.4 verifies code coverage metrics and will fail the build if code coverage falls below a configurable threshold. The plugin is also [fully prepared to run on Java 9](https://github.com/gradle/gradle/issues/1006).

Last but not least, we've made it more convenient to let Gradle know when you want a [build scan](https://gradle.com) — just use `--scan` (or `--no-scan` if not). No need for the ""magic"" system property `-Dscan`.

We hope you're able to build happiness with Gradle 3.4, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle/gradle) and sharing other amazing features in 2017. Happy new year from the Gradle team!

Check the full [3.4 release notes](https://docs.gradle.org/3.4/release-notes) for more information.

## Upgrade Instructions

Switch your build to use Gradle 3.4 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.4`

Standalone downloads are available at https://gradle.org/releases. 

## Reporting Problems

If you find a problem with Gradle 3.4, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/bmuschko,440872,bmuschko,https://api.github.com/repos/gradle/gradle/releases/5493001/assets,https://api.github.com/repos/gradle/gradle/releases/5493001,master,https://api.github.com/repos/gradle/gradle/tarball/v3.4.0,https://github.com/gradle/gradle/releases/tag/v3.4.0,https://api.github.com/repos/gradle/gradle/zipball/v3.4.0,v3.4.0,False,False
5424426,2017-02-13T14:35:58Z,2017-02-13T15:22:46Z,3.4 RC3,"## Gradle 3.4 RC3 is now available for testing

This release candidate contains a few bug fixes reported against [3.4 RC2](https://github.com/gradle/gradle/releases/tag/v3.4.0-RC2).
- [#1347](https://github.com/gradle/gradle/issues/1347): Compile classpath snapshotting and annotation processor detection should handle irrelevant files
- [#1351](https://github.com/gradle/gradle/pull/1351): Add ""unresolvable configurations"" to the breaking changes section of the release notes of 3.4
- [#1358](https://github.com/gradle/gradle/issues/1358): Compile classpath snapshotting should be lenient with broken jars/class files
- [#1359](https://github.com/gradle/gradle/pull/1359): Lenient compile classpath snapshotting
- [#1371](https://github.com/gradle/gradle/issues/1371): Gradle 3.4-rc-1+ handling of transative dependencies is non-passive

Check the [release notes](https://docs.gradle.org/3.4-rc-3/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.4 RC3 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.4-rc-3`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 3.4 RC3, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/bmuschko,440872,bmuschko,https://api.github.com/repos/gradle/gradle/releases/5424426/assets,https://api.github.com/repos/gradle/gradle/releases/5424426,master,https://api.github.com/repos/gradle/gradle/tarball/v3.4.0-RC3,https://github.com/gradle/gradle/releases/tag/v3.4.0-RC3,https://api.github.com/repos/gradle/gradle/zipball/v3.4.0-RC3,v3.4.0-RC3,False,True
5375467,2017-02-06T21:38:54Z,2017-02-06T22:12:30Z,3.4 RC2,"## Gradle 3.4 RC2 is now available for testing

This release candidate contains a few bug fixes reported against [3.4 RC1](https://github.com/gradle/gradle/releases/tag/v3.4.0-RC1).
- [#1312](https://github.com/gradle/gradle/pull/1312): Deprecate DependOptions
- [#1300](https://github.com/gradle/gradle/pull/1300): Promote CompileOptions.incremental out of incubating status
- [#1299](https://github.com/gradle/gradle/pull/1299): Deprecate CompileOptions.dependOptions
- [#1274](https://github.com/gradle/gradle/issues/1274): Classloading regression when using ClosureTaskActions

Check the [release notes](https://docs.gradle.org/3.4-rc-2/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.4 RC2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.4-rc-2`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 3.4 RC2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/bmuschko,440872,bmuschko,https://api.github.com/repos/gradle/gradle/releases/5375467/assets,https://api.github.com/repos/gradle/gradle/releases/5375467,master,https://api.github.com/repos/gradle/gradle/tarball/v3.4.0-RC2,https://github.com/gradle/gradle/releases/tag/v3.4.0-RC2,https://api.github.com/repos/gradle/gradle/zipball/v3.4.0-RC2,v3.4.0-RC2,False,True
5264932,2017-01-26T16:48:45Z,2017-01-26T16:50:20Z,3.4 RC1,"## Gradle 3.4 RC1 is now available

We're excited to bring you 3 incredible performance features in this release.

First up: **Compile Avoidance**. We've introduced a new mechanism for up-to-date checking of Java compilation that is sensitive to public API changes only. This means that if you change a comment or even a private API in a downstream project, Java compilation for upstream projects will be `UP-TO-DATE`.

Next: A **stable incremental Java compiler**. We've smartened the handling of constants, backed it with in-memory caches, and fixed many bugs. It is now production-ready for your build and has been promoted out of `@Incubating`. 

Finally: A brand **new Java Library Plugin**. Use this when building a component intended to be used as a dependency from another project. It provides a strong separation between public (exported) and private code which not only gives great performance benefits (because consumers' compile classpaths are smaller), but also an architectural tool for library authors.   

Put these together on our [perf-enterprise-large benchmark Java project](https://github.com/gradle/perf-enterprise-large), and compilation time after a method body change is reduced from [2.5 minutes](https://scans.gradle.com/s/tojo2cxznjuko) to [9 seconds](https://scans.gradle.com/s/g7i3vjskudfps)! Let's put that in perspective: 
![screen shot 2017-01-25 at 1 59 07 pm](https://cloud.githubusercontent.com/assets/51534/22308971/7a6da79e-e306-11e6-94a2-555ce9c14920.png)

It is not just large projects that reap the benefits, for example the same use case for [Apache Polygene](https://github.com/apache/polygene-java) was reduced from [14 seconds](https://scans.gradle.com/s/pxeuv4ujnvxgi) to [7 seconds](https://scans.gradle.com/s/akggvs5dajuyi). Huge kudos to our performance team for delivering such massive performance improvements with this release. 

Now, with your help and guidance we've been able to made a couple of highly-requested code-quality plugins improvements:
- The JaCoCo plugin now allows you to [enforce code coverage metrics](https://github.com/gradle/gradle/issues/824) and fail the build if they're not met.
- The default version of JaCoCo used by the JaCoCo plugin has been raised and the plugin is now [Java 9-ready](https://github.com/gradle/gradle/issues/1006).
- The Checkstyle plugin now allows a maximum number of warnings or errors to be configured.

A special thank you to those who voted and contributed to these issues.

The community's voice clearly indicated the need for [verifying JaCoCo code coverage metrics](https://github.com/gradle/gradle/issues/824). The JaCoCo plugin in Gradle 3.4 verifies code coverage metrics and will fail the build if code coverage falls below a configurable threshold. The plugin is also [fully prepared to run on Java 9](https://github.com/gradle/gradle/issues/1006).

Last but not least, we've made it more convenient to let Gradle know when you want a [build scan](https://gradle.com) — just use `--scan` (or `--no-scan` if not). No need for the ""magic"" system property `-Dscan`.

We hope you're able to build happiness with Gradle 3.4, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or [on GitHub](https://github.com/gradle/gradle) and sharing other amazing features in 2017. Happy new year from the Gradle team!

Check the full [3.4 RC1 release notes](https://docs.gradle.org/3.4-rc-1/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.4 RC1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.4-rc-1`

Standalone downloads are available at https://gradle.org/gradle-download. 

## Reporting Problems

If you find a problem with Gradle 3.4 RC1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/bmuschko,440872,bmuschko,https://api.github.com/repos/gradle/gradle/releases/5264932/assets,https://api.github.com/repos/gradle/gradle/releases/5264932,master,https://api.github.com/repos/gradle/gradle/tarball/v3.4.0-RC1,https://github.com/gradle/gradle/releases/tag/v3.4.0-RC1,https://api.github.com/repos/gradle/gradle/zipball/v3.4.0-RC1,v3.4.0-RC1,False,True
5056166,2017-01-03T15:32:04Z,2017-01-03T15:55:10Z,3.3,"## Gradle 3.3 is now available

This release of Gradle makes the **`gradle tasks` report much faster** for medium-to-large projects. By default, `gradle tasks` will now only display tasks which have been assigned a task group.
For example, execution time was reduced from [554 seconds](https://scans.gradle.com/s/djfdqmgfspm5u) to [3 seconds](https://scans.gradle.com/s/2e32tytb37vas) on our [perf-enterprise-large benchmark project](https://github.com/gradle/perf-enterprise-large/) — **over 100x faster**! 
See the technical details on how and why this change was made [in the full release notes](https://docs.gradle.org/3.3/release-notes#improved-performance-of-tasks-report).

It is now possible to **compile native applications using Visual Studio 2015**. Gradle will locate the [Universal C Runtime](https://msdn.microsoft.com/en-us/library/abx4dbyh.aspx) required by the Visual C++ toolchain.

**Kotlin build script** support has further improved with significantly **faster startup performance**, increased API parity with Groovy-based build scripts, and better interoperability with Groovy plugins. See the [gradle-script-kotlin v0.5.0 release notes](https://github.com/gradle/gradle-script-kotlin/releases/tag/v0.5.0) for details.

Scala compilation startup time in large multi-project builds has been improved through [enhancements](https://github.com/gradle/gradle/pull/707) to Gradle's integration with the Zinc Scala compiler. In earlier versions of Gradle, builds with many Scala projects could timeout and fail when building in parallel. 

Tooling API generates more progress events. This means that IDEs will show a much clearer picture of what Gradle is doing during the configuration phase, resolving dependencies, and using composite builds. Details and pictures [in the full release notes](https://docs.gradle.org/3.3/release-notes#tooling-api-generates-more-progress-events).

The [Gradle GUI](https://docs.gradle.org/3.3/userguide/tutorial_gradle_gui.html) **has been deprecated** and will be removed in Gradle 4.0. An IDE which provides a UI for Gradle — IntelliJ IDEA, Eclipse, or NetBeans, for example, is recommended.

Check the full [3.3 release notes](https://docs.gradle.org/3.3/release-notes) for more information.

## Upgrade Instructions

Switch your build to use Gradle 3.3 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.3`

Standalone downloads are available at https://gradle.org/gradle-download. 

> **Heads up**: In addition, if you previously generated the wrapper with Gradle 3.2, _re-run_ `./gradlew wrapper` to avoid a misconfigured wrapper script.

## Reporting Problems

If you find a problem with Gradle 3.3, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/lacasseio,22181740,lacasseio,https://api.github.com/repos/gradle/gradle/releases/5056166/assets,https://api.github.com/repos/gradle/gradle/releases/5056166,master,https://api.github.com/repos/gradle/gradle/tarball/v3.3.0,https://github.com/gradle/gradle/releases/tag/v3.3.0,https://api.github.com/repos/gradle/gradle/zipball/v3.3.0,v3.3.0,False,False
4882975,2016-12-19T16:08:42Z,2016-12-19T16:36:34Z,3.3 RC1,"## Gradle 3.3 RC1 is now available

This release of Gradle makes the **`gradle tasks` report much faster** for medium-to-large projects. By default, `gradle tasks` will now only display tasks which have been assigned a task group.
For example, execution time was reduced from [554 seconds](https://scans.gradle.com/s/djfdqmgfspm5u) to [3 seconds](https://scans.gradle.com/s/2e32tytb37vas) on our [perf-enterprise-large benchmark project](https://github.com/gradle/perf-enterprise-large/) — **over 100x faster**! 
See the technical details on how and why this change was made [in the full release notes](https://docs.gradle.org/3.3-rc-1/release-notes#improved-performance-of-tasks-report).

It is now possible to **compile native applications using Visual Studio 2015**. Gradle will locate the [Universal C Runtime](https://msdn.microsoft.com/en-us/library/abx4dbyh.aspx) required by the Visual C++ toolchain.

**Kotlin build script** support has further improved with significantly **faster startup performance**, increased API parity with Groovy-based build scripts, and better interoperability with Groovy plugins. See the [gradle-script-kotlin v0.5.0 release notes](https://github.com/gradle/gradle-script-kotlin/releases/tag/v0.5.0) for details.

Scala compilation startup time in large multi-project builds has been improved through [enhancements](https://github.com/gradle/gradle/pull/707) to Gradle's integration with the Zinc Scala compiler. In earlier versions of Gradle, builds with many Scala projects could timeout and fail when building in parallel. 

Tooling API generates more progress events. This means that IDEs will show a much clearer picture of what Gradle is doing during the configuration phase, resolving dependencies, and using composite builds. Details and pictures [in the full release notes](https://docs.gradle.org/3.3-rc-1/release-notes#tooling-api-generates-more-progress-events).

The [Gradle GUI](https://docs.gradle.org/3.3-rc-1/userguide/tutorial_gradle_gui.html) **has been deprecated** and will be removed in Gradle 4.0. An IDE which provides a UI for Gradle — IntelliJ IDEA, Eclipse, or NetBeans, for example, is recommended.

Check the full [3.3 RC1 release notes](https://docs.gradle.org/3.3-rc-1/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.3 RC1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.3-rc-1`

Standalone downloads are available at https://gradle.org/gradle-download. 

> **Heads up**: In addition, if you previously generated the wrapper with Gradle 3.2, _re-run_ `./gradlew wrapper` to avoid a misconfigured wrapper script.

## Reporting Problems

If you find a problem with Gradle 3.3 RC1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/4882975/assets,https://api.github.com/repos/gradle/gradle/releases/4882975,master,https://api.github.com/repos/gradle/gradle/tarball/v3.3.0-RC1,https://github.com/gradle/gradle/releases/tag/v3.3.0-RC1,https://api.github.com/repos/gradle/gradle/zipball/v3.3.0-RC1,v3.3.0-RC1,False,True
4700816,2016-11-22T15:25:58Z,2016-11-22T20:22:42Z,3.2.1,"## Gradle 3.2.1 is now available

This bug-fix release addresses uncaught regressions in [v3.2.0](https://github.com/gradle/gradle/releases/tag/v3.2.0) in the Gradle wrapper. 

Fixed issues:
- [GRADLE-3582](https://issues.gradle.org/browse/GRADLE-3582): Gradle wrapper fails to escape arguments with nested quotes
- [GRADLE-3583](https://issues.gradle.org/browse/GRADLE-3583): Newlines in environment variables used by the wrapper breaks application plugin shell script

## Upgrade Instructions

Switch your build to use Gradle 3.2.1 by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.2.1`

Standalone downloads are available at https://gradle.org/gradle-download. 

> **Heads up**: In addition, if you generated this wrapper with Gradle 3.2, _re-run_ `./gradlew wrapper` to avoid a misconfigured wrapper script.

## Reporting Problems

If you find a problem with Gradle 3.2.1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/4700816/assets,https://api.github.com/repos/gradle/gradle/releases/4700816,master,https://api.github.com/repos/gradle/gradle/tarball/v3.2.1,https://github.com/gradle/gradle/releases/tag/v3.2.1,https://api.github.com/repos/gradle/gradle/zipball/v3.2.1,v3.2.1,False,False
4636074,2016-11-14T15:01:10Z,2016-11-14T12:57:25Z,3.2,"## Gradle 3.2 is now available

It's a relatively quiet release this time around, but there are still plenty of reasons to upgrade.

Perhaps the most significant improvements are in the **incremental build support**, which now has **better up-to-date checking** for Java compilation, copying, and archiving. You can also have Gradle treat any task input as a classpath with the new `@Classpath` annotation.

Users of Gradle's **native build support** gain an important tool in this release. Many of you will be familiar with the `buildDependents` task for classic multi-project builds. This is now available in native builds as well via new `assembleDependents` and `buildDependents` tasks. These are incredibly useful for determining whether your changes have adversely impacted anything that depends on them.

If you use an IDE and have a lot of dependencies in your build—particular dynamic ones—you may have experienced long import times. The underlying issue has been fixed in this release, resulting in significantly improved import times. One example enterprise build showed [**a 100-fold improvement**](https://github.com/gradle/perf-enterprise-large/)!

Our users trialing the **Kotlin build script support** will be glad to hear that progress continues apace with support for **multi-project builds**. And it's easier to try this feature on Windows now that a bug in compiling scripts on that platform has been fixed.

The last change we want to bring to your attention has been a long time coming and will affect a large number of builds: the shortcut syntax for declaring tasks (via `<<`) has **now been deprecated**. The eagle-eyed among you will notice that the user guide examples have been updated to use `doLast()` and we strongly recommend that you follow suit. This feature will be removed in Gradle 5.0! See the [deprecations section of the release notes](https://docs.gradle.org/3.2/release-notes#deprecations) for more details.

Check the full [3.2 release notes](https://docs.gradle.org/3.2/release-notes) for more information.

## Upgrade Instructions

Switch your build to use Gradle 3.2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.2`

Standalone downloads are available at https://gradle.org/gradle-download. 

## Reporting Problems

If you find a problem with Gradle 3.2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/lacasseio,22181740,lacasseio,https://api.github.com/repos/gradle/gradle/releases/4636074/assets,https://api.github.com/repos/gradle/gradle/releases/4636074,master,https://api.github.com/repos/gradle/gradle/tarball/v3.2.0,https://github.com/gradle/gradle/releases/tag/v3.2.0,https://api.github.com/repos/gradle/gradle/zipball/v3.2.0,v3.2.0,False,False
4591187,2016-11-07T15:28:59Z,2016-11-07T16:09:20Z,3.2 RC3,"## Gradle 3.2 RC3 is now available for testing

This release candidate contains a few bug fixes reported against [3.2 RC2](https://github.com/gradle/gradle/releases/tag/v3.2.0-RC2).
- [GRADLE-3579](https://issues.gradle.org/browse/GRADLE-3579): Generated scripts in Gradle 3.2 spawn child processes
- [GRADLE-3580](https://issues.gradle.org/browse/GRADLE-3580): IntelliJ Gradle import does not resolve sources for dependencies
- [GRADLE-3581](https://issues.gradle.org/browse/GRADLE-3581): Build fails for Kotlin project with multi-level project dependencies

Check the [release notes](https://docs.gradle.org/3.2-rc-3/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.2 RC3 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.2-rc-3`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 3.2 RC3, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).

## Known Issues
- [Usage of Jansi library embedded with Java annotation processor](https://docs.gradle.org/release-candidate/release-notes#known-issues)
",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/4591187/assets,https://api.github.com/repos/gradle/gradle/releases/4591187,master,https://api.github.com/repos/gradle/gradle/tarball/v3.2.0-RC3,https://github.com/gradle/gradle/releases/tag/v3.2.0-RC3,https://api.github.com/repos/gradle/gradle/zipball/v3.2.0-RC3,v3.2.0-RC3,False,True
4526105,2016-10-31T17:32:45Z,2016-10-31T17:34:59Z,3.2 RC2,"## Gradle 3.2 RC2 is now available for testing

This release candidate contains a few bug fixes reported against [3.2 RC1](https://github.com/gradle/gradle/releases/tag/v3.2.0-RC1).
- [GRADLE-3575](https://issues.gradle.org/browse/GRADLE-3575): IndexOutOfBoundsException is thrown when building task execution graph
- [GRADLE-3577](https://issues.gradle.org/browse/GRADLE-3577): REPLACED file change type breaks compatibility with existing plugin
- [GRADLE-3576](https://issues.gradle.org/browse/GRADLE-3576): Child specs in Copy tasks cannot be modified when the Copy task is already running
- [GRADLE-3573](https://issues.gradle.org/browse/GRADLE-3573): Improvements to JANSI can't initialize if java.io.tmpdir is mounted with noexec 

Check the [release notes](https://docs.gradle.org/3.2-rc-2/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.2 RC2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.2-rc-2`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 3.2 RC2, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/bmuschko,440872,bmuschko,https://api.github.com/repos/gradle/gradle/releases/4526105/assets,https://api.github.com/repos/gradle/gradle/releases/4526105,master,https://api.github.com/repos/gradle/gradle/tarball/v3.2.0-RC2,https://github.com/gradle/gradle/releases/tag/v3.2.0-RC2,https://api.github.com/repos/gradle/gradle/zipball/v3.2.0-RC2,v3.2.0-RC2,False,True
4469860,2016-10-24T20:28:59Z,2016-10-24T20:33:58Z,3.2 RC1,"## Gradle 3.2 RC1 is now available for testing

It's a relatively quiet release this time around, but there are still plenty of reasons to upgrade.

Perhaps the most significant improvements are in the **incremental build support**, which now has **better up-to-date checking** for Java compilation, copying, and archiving. You can also have Gradle treat any task input as a classpath with the new `@Classpath` annotation.

Users of Gradle's **native build support** gain an important tool in this release. Many of you will be familiar with the `buildDependents` task for classic multi-project builds. This is now available in native builds as well via new `assembleDependents` and `buildDependents` tasks. These are incredibly useful for determining whether your changes have adversely impacted anything that depends on them.

If you use an IDE and have a lot of dependencies in your build—particular dynamic ones—you may have experienced long import times. The underlying issue has been fixed in this release, resulting in significantly improved import times. One example enterprise build showed **a 100-fold improvement**!

Our users trialling the **Kotlin build script support** will be glad to hear that progress continues apace with support for **multi-project builds**. And it's easier to try this feature on Windows now that a bug in compiling scripts on that platform has been fixed.

The last change we want to bring to your attention has been a long time coming and will affect a large number of builds: the shortcut syntax for declaring tasks (via `<<`) has **now been deprecated**. The eagle-eyed among you will notice that the user guide examples have been updated to use `doLast()` and we strongly recommend that you follow suit. This feature will be removed in Gradle 5.0! See the [deprecations section of the release notes](https://docs.gradle.org/3.2-rc-1/release-notes#deprecations) for more details.

Check the [3.2 RC1 release notes](https://docs.gradle.org/3.2-rc-1/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.2 RC1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.2-rc-1`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 3.2 RC1, please file a bug on [GitHub Issues](https://github.com/gradle/gradle/issues) adhering to our issue guidelines. If you're not sure you're encountering a bug, please use the [forum](https://discuss.gradle.org/c/help-discuss).
",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/4469860/assets,https://api.github.com/repos/gradle/gradle/releases/4469860,master,https://api.github.com/repos/gradle/gradle/tarball/v3.2.0-RC1,https://github.com/gradle/gradle/releases/tag/v3.2.0-RC1,https://api.github.com/repos/gradle/gradle/zipball/v3.2.0-RC1,v3.2.0-RC1,False,True
4152566,2016-09-19T11:23:17Z,2016-09-19T11:28:01Z,3.1,"## Gradle 3.1 is now available

Multi-project builds are a powerful feature with one significant constraint: the projects have to be in the same directory hierarchy. This doesn't help if you want to work on code across multiple repositories, for example if you're trying to fix a bug in a third-party open-source library that one of your projects depends on.

Gradle 3.1 now supports this scenario with the introduction of **Composite Builds** for all users. It's hard to understate just how important this feature is as it provides a whole new way of organizing your projects and builds. There is more work to be done in this area and the feature is currently incubating, but we encourage you to try it out and give us your feedback!

**Incremental Build** is a similar feature in terms of impact and this release improves the control you have over its up-to-date checks. You can read about the details in the [release notes](https://docs.gradle.org/3.1/release-notes#incremental-build-improvements).

As with many previous Gradle releases, you will also benefit from some performance improvements, this time in the form of [**faster dependency resolution**](https://docs.gradle.org/3.1/release-notes#faster-dependency-resolution). From testing, Android users specifically could see **up to a 50% reduction** in configuration and Android Studio sync time (v2.2+ only).

Build cancellation has improved when using the Daemon. Cancelling a build with Ctrl-C after the first build [no longer terminates the Gradle Daemon](https://docs.gradle.org/3.1/release-notes#more-resilient-daemon). 

Our Play Framework and Kotlin build script users will also be happy as 3.1 now has (limited) support for **Play 2.5.x** and the Kotlin build script support gets a more fully-featured syntax for declaring dependencies and faster code completion.

Finally, be sure to check out the [potential breaking changes](https://docs.gradle.org/3.1/release-notes#potential-breaking-changes) in case they affect you.

Check the [3.1 release notes](https://docs.gradle.org/3.1/release-notes) for more information.

## Upgrade Instructions

Switch your build to use Gradle 3.1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.1`

Standalone downloads are available at https://gradle.org/gradle-download. 

## Reporting Problems

If you find a problem with Gradle 3.1, please create a new topic in the [Bugs category](https://discuss.gradle.org/c/bugs) of the Gradle Forum.  Be sure to include which operating system you are using, the version of Gradle you upgraded from and any steps you have found that reproduces your problem.
",https://api.github.com/users/jjohannes,1963746,jjohannes,https://api.github.com/repos/gradle/gradle/releases/4152566/assets,https://api.github.com/repos/gradle/gradle/releases/4152566,release,https://api.github.com/repos/gradle/gradle/tarball/v3.1.0,https://github.com/gradle/gradle/releases/tag/v3.1.0,https://api.github.com/repos/gradle/gradle/zipball/v3.1.0,v3.1.0,False,False
4057912,2016-09-12T12:39:11Z,2016-09-12T12:58:14Z,3.1 RC1,"## Gradle 3.1 RC1 is now available for testing

Multi-project builds are a powerful feature with one significant constraint: the projects have to be in the same directory hierarchy. This doesn't help if you want to work on code across multiple repositories, for example if you're trying to fix a bug in a third-party open-source library that one of your projects depends on.

Gradle 3.1 now supports this scenario with the introduction of **Composite Builds** for all users. It's hard to understate just how important this feature is as it provides a whole new way of organizing your projects and builds. There is more work to be done in this area and the feature is currently incubating, but we encourage you to try it out and give us your feedback!

**Incremental Build** is a similar feature in terms of impact and this release improves the control you have over its up-to-date checks. You can read about the details in the [release notes](https://docs.gradle.org/3.1-rc-1/release-notes#incremental-build-improvements).

As with many previous Gradle releases, you will also benefit from some performance improvements, this time in the form of [**faster dependency resolution**](https://docs.gradle.org/3.1-rc-1/release-notes#faster-dependency-resolution). From testing, Android users specifically could see **up to a 50% reduction** in configuration and Android Studio sync time.

Our Play Framework and Kotlin build script users will also be happy as 3.1 now has (limited) support for **Play 2.5.x** and the Kotlin build script support gets a more fully-featured syntax for declaring dependencies and faster code completion.

Finally, be sure to check out the [potential breaking changes](https://docs.gradle.org/3.1-rc-1/release-notes#potential-breaking-changes) in case they affect you.

Check the [3.1 RC1 release notes](https://docs.gradle.org/3.1-rc-1/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.1 RC1 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.1-rc-1`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 3.1 RC1, please post a reply to this topic or create a new topic in the [Bugs category](https://discuss.gradle.org/c/bugs) of the Gradle Forum.  Be sure to include which operating system you are using, the version of Gradle you upgraded from and any steps you have found that reproduces your problem.
",https://api.github.com/users/jjohannes,1963746,jjohannes,https://api.github.com/repos/gradle/gradle/releases/4057912/assets,https://api.github.com/repos/gradle/gradle/releases/4057912,master,https://api.github.com/repos/gradle/gradle/tarball/v3.1.0-RC1,https://github.com/gradle/gradle/releases/tag/v3.1.0-RC1,https://api.github.com/repos/gradle/gradle/zipball/v3.1.0-RC1,v3.1.0-RC1,False,True
3889323,2016-08-15T15:09:19Z,2016-09-19T11:33:07Z,3.0,"# Gradle 3.0 Release Notes

### Version 3.0

The Gradle team is pleased to announce Gradle 3.0.

Performance continues to be a focus for the Gradle team and the third major release reflects this. The [Gradle Daemon](https://docs.gradle.org/3.0/userguide/gradle_daemon.html) is a key performance enhancer, making builds **up to 75% faster**, but it needed to be explicitly enabled in previous versions of Gradle. This is no longer necessary as the Daemon is now **enabled by default** in 3.0. We've put a lot of effort into fixing the most significant issues with the Gradle Daemon, especially on Windows platforms. We have also been working hard to make the Gradle Daemon aware of its health and impact to the system it's running on and use this information for self-healing actions as well as better daemon status reporting. The Gradle Daemon is the foundation for a great Gradle experience.

Ever wished for better IDE support when writing Gradle build scripts? This release provides the first support for [Gradle Script Kotlin](https://github.com/gradle/gradle-script-kotlin), which is a Kotlin-based build language for Gradle scripts. Its deep integration with both IDEA and Eclipse provides many of the things you would expect from an IDE such as auto-completion, refactoring, navigation to source, and more. Groovy is still the primary build language for Gradle scripts and will always be supported, but we are working intensely to make Gradle Script Kotlin fully production ready by the end of the year in order to provide the best possible development experience to Gradle users. See [Chris Beams's blog post](https://gradle.org/blog/kotlin-meets-gradle/) for more information about this exciting new feature.

Additionally, Gradle 3.0 provides support for running on the latest Java 9 EAP builds. Users can also build and run tests using these early versions of JDK 9, but there are some limitations. Check out the section on [Java 9 support](#initial-java-9-support) below for more details.

With the release of Gradle 3.0, it's a good time to reflect on the progress we've made over the last 2 years. Check out some of [the improvements](#improvements-since-gradle-2-0) since Gradle 2.0. Lots of reasons to upgrade!

We're also pleased to make available a draft of our [new Performance Guide](https://gradle.github.io/performance-guide). This is intended to be a short guide that shows you how to dramatically improve your build performance in the time it takes to eat lunch. Check it out and please provide any feedback via the guide's [GitHub Issues](https://github.com/gradle/performance-guide/issues).

## New and noteworthy

Here are the new features introduced in this Gradle release.

### Improved Gradle Daemon, now enabled by default

As mentioned above, the Gradle Daemon is now more robust, efficient and self-aware. It has now been **enabled by default** to make your builds [faster than ever](http://gradle.org/blog/gradle-3-0-m1-unleash-the-daemon/). If for some reason you encounter problems, it can always [be disabled](https://docs.gradle.org/3.0/userguide/gradle_daemon.html#daemon_faq) if necessary.

### View the status of Gradle Daemons

Before Gradle 3.0, there was no easy way to determine the status of a running Gradle Daemon or why a Daemon might have stopped. With this release, you can now check the status of running and recently stopped daemons using the `--status` command and get better insight into the state your Gradle environment.

```
$> gradle --status
   PID STATUS   INFO
 43536 BUSY     3.0
 43542 IDLE     3.0
 43418 STOPPED  (stop command received)
 43366 STOPPED  (stop command received)
```

Note that the status command currently does not list Gradle Daemons with version < 3.0. More details are available in the [User Guide](https://docs.gradle.org/3.0/userguide/gradle_daemon.html#status).

### View Daemon information in Gradle Cloud Services

Information about the Gradle Daemon is now being captured in your Build Scans and can be viewed in [Gradle Cloud Services](https://gradle.com/). You can see information such as the number of builds that have been run in the Daemon, the number of Daemons that were running on the system when the build occurred, as well as reasons for why a Daemon may have been stopped. Along with all of the other great information in a Build Scan, this captures the state of the Daemon at the time a build executes and gives you insight into factors that might have affected that build's performance. If you haven't created a [Build Scan](https://scans.gradle.com/s/pqmetew4bnofi) yet, [give it a try](https://scans.gradle.com/setup/step-1)!

### Better IDE support for writing build scripts

The Gradle team and JetBrains have been collaborating to provide the best possible IDE support for writing Gradle build scripts. Gradle 3.0 supports version 0.3.0 of  
[Gradle Script Kotlin](https://github.com/gradle/gradle-script-kotlin), a statically typed build language based on [Kotlin](http://kotlinlang.org/).

So what does a Gradle Script Kotlin build look like? Here's an example:

```
import org.gradle.api.tasks.*

apply<ApplicationPlugin>()

configure<ApplicationPluginConvention> {
    mainClassName = ""org.gradle.samples.HelloWorld""
}

repositories {
    jcenter()
}

dependencies {
    compile(""commons-lang:commons-lang:2.4"")
    testCompile(""junit:junit:4.12"")
}

task<Copy>(""copyConfig"") {
    from(""src/main/conf"")
    into(""build/conf"")
    exclude(""**/*.old"")
    includeEmptyDirs = false
}
```

This looks very similar to a Groovy build script, but when you load it in either IDEA or Eclipse, suddenly development is a much better experience. You now have code auto-completion, refactoring, and other features you would expect from an IDE in your `build.gradle.kts`. You can still use all of your plugins written in Java or Groovy but also take advantage of the power of first-class development support. Take a look and [give it a try](https://github.com/gradle/gradle-script-kotlin/tree/master/samples)!

We'll continue to enhance this support in future versions of Gradle, so if you discover any issues, please let us know via the project's [GitHub Issues](https://github.com/gradle/gradle-script-kotlin/issues).

### Parallel task execution improvements

Gradle 3.0 makes it easier to manage the resources that Gradle uses. The `Test` task type now honors the `max-workers` setting for the test processes that are started. This means that Gradle will now run at most `max-workers` tasks and test processes at the same time.

If you need to return to the old behavior, you can limit the number of forked processes:

```
tasks.withType(Test) {
     maxParallelForks = 1
}
```

### <a name=""initial-java-9-support"">Initial Java 9 support</a>

Gradle 3.0 contains initial support for running Gradle on Java 9 as well as compiling, testing and running Java 9 applications from Gradle.

Preliminary support for the JDK 9 `-release` compiler flag has been added as well. It can be specified via [compilerArgs](https://docs.gradle.org/3.0/dsl/org.gradle.api.tasks.compile.CompileOptions.html#org.gradle.api.tasks.compile.CompileOptions:compilerArgs), e.g.

```
compileJava.options.compilerArgs.addAll(['-release', '7'])
```

The following plugins have known issues with Java 9:

When using [continuous build](https://docs.gradle.org/3.0/userguide/continuous_build.html) on Java 9, the following constraints apply due to class access restrictions related to Jigsaw:
- On Mac OS X, Gradle will poll for file changes every 10 seconds instead of every 2 seconds.
- On Windows, continuous build may be slow to detect changes on very large projects.

Additionally, when publishing to S3 backed Maven and Ivy repositories, `-addmods java.xml.bind` will have to be added to the JVM parameters when using Java 9.

```
GRADLE_OPTS=""-addmods java.xml.bind '-Dorg.gradle.jvmargs=-addmods java.xml.bind'""
```

Please report any issues you may experience running or building with Java 9 on the [Gradle Forums](https://discuss.gradle.org/).

### Improved `plugins` DSL

There are times when it might be useful to resolve a plugin without actually applying it to the current project, for example:
- When you only want to reuse a task class from the plugin
- When you only want to apply the plugin to subprojects of the current project

Previously, this could only be done with the `buildscript` DSL syntax, but this is now possible via the `plugins` DSL, too:

```
plugins {
    id 'my.special.plugin' version '1.0' apply false
}

subprojects {
    if (someCondition) {
        apply plugin 'my.special.plugin'
    }
}
```

Note the `apply false` at the end of the plugin declaration. This instructs Gradle to resolve the plugin and make it available on the classpath, but not to apply it.

### Incremental build improvements

#### Tracking changes in the task's code

A task is up-to-date as long as its inputs and outputs remain unchanged. Previous versions of Gradle did not consider _the code_ of the task as part of the inputs. This could lead to incorrect behavior where the implementation of a task could change but the task might still be marked as `UP-TO-DATE` even though it would actually create different outputs. Gradle now recognizes when a task, its actions, or its dependencies change between executions and properly marks the task as out-of-date.

#### New task property annotations

Since 3.0, every task property should specify its role via one of the task property annotations:
- an input or output of the task (`@Input`, `@Nested`, `@InputDirectory`, `@OutputFile` etc.)
- an injected service (`@Inject`)
- a property that influences only the console output of the task (the new `@Console` annotation)
- an internal property that should not be considered for up-to-date checks (the new `@Internal` annotation)

When using the [`java-gradle-plugin`](https://docs.gradle.org/current/userguide/javaGradle_plugin.html), a warning is printed during validation for any task property that is not annotated.

#### Tracking properties for input and output files

From now on Gradle tracks which property each input and output file belongs to. With this improvement it can now recognize when files are moved between properties. Registering the property name works automatically for task input and output properties annotated with `@InputFiles`, `@OutputFile` etc.

Input and output files registered via `TaskInputs.files()`, `TaskOutputs.dir()` and similar methods have a new mechanism to register the property name:

```
task example {
    inputs.file ""input.txt"" withPropertyName ""inputFile""
}
```

### Faster Dependency Resolution

In Gradle 3.0, resolving already-downloaded external dependencies is 5-10% faster than previous versions. Much of the time savings can be attributed to switching from caching the metadata about dependencies as XML to a binary format which is much quicker to serialize and deserialize.

### Improvements to the `eclipse-wtp` plugin

Before Gradle 3.0, the `eclipse-wtp` plugin defined external dependencies for a Java project in the WTP component descriptor. This lead to the issues detailed in [GRADLE-2123](https://issues.gradle.org/browse/GRADLE-2123). This has been fixed so that dependencies are now generated in the proper metadata locations according to the type of project being configured.

Additionally, the `eclipse-wtp` plugin now fully leverages Gradle's dependency resolution engine. As a result, dependency customisations such as substitution rules and forced versions work with WTP projects.

Lastly, if a project applies the `war` or `ear` plugins, applying the `eclipse` plugin now also applies `eclipse-wtp`. This makes configuration simpler, especially when using [Eclipse Buildship](https://projects.eclipse.org/projects/tools.buildship).

### New features in the `EclipseProject` model.

The `EclipseProject` model has been enhanced with many new features:

This allows Tooling API clients (such as [Eclipse Buildship](https://projects.eclipse.org/projects/tools.buildship)) to provide more robust and complete IDE integration.

### Plugin library upgrades

Several libraries that are used by Gradle plugins have been upgraded:
- The OSGi plugin has been upgraded to use version 3.2.0 of the BND library.
- The Jacoco plugin has been upgraded to use Jacoco version 0.7.7.201606060606 by default.
- The PMD plugin has been upgraded to use PMD version 5.5.1 by default.
- The CodeNarc plugin has been upgraded to use CodeNarc version 0.25.2 by default.
- The Groovy version has been updated to 2.4.7.

### <a name=""improvements-since-gradle-2-0"">Improvements since Gradle 2.0</a>

A lot has changed since Gradle 2.0 was released in July of 2014. First of all, performance has been improved dramatically in all phases of the build, including configuration time, build script compilation, incremental builds and native compilation, as well as test execution and report generation to name a few. We've improved the Daemon significantly, adding performance monitoring and resource awareness, fixing known issues, and ultimately enabling it by default so that all builds experience the performance gains it brings to the table. Gradle 3.0 represents a significantly faster and more efficient Gradle than it was two years ago.

We've also made good strides in improving the experience of plugin development. The [Gradle TestKit](https://docs.gradle.org/3.0/userguide/test_kit.html) is an out-of-the-box toolkit for functionally testing your Gradle plugins. The [Plugin Development Plugin](https://docs.gradle.org/3.0/userguide/javaGradle_plugin.html) helps you set up your plugin project by adding common dependencies to the classpath and providing validation of the plugin metadata when building the archive. Finally, the [Plugin Publishing Plugin](https://plugins.gradle.org/docs/publish-plugin) helps you to publish your plugins to the [Gradle Plugin Portal](https://plugins.gradle.org/) and share them with the rest of the community.

Dependency Management has gotten some love, too. We've added [component selection rules](https://docs.gradle.org/3.0/userguide/dependency_management.html#component_selection_rules), [module replacement rules](https://docs.gradle.org/3.0/userguide/dependency_management.html#sec:module_replacement), and [dependency substitution rules](https://docs.gradle.org/3.0/userguide/dependency_management.html#dependency_substitution_rules). We've provided support for S3 repositories as well as configurable HTTP authentication, including preemptive authentication. We've even added support for compile-only dependencies. Publishing dependencies is also more powerful and you can now publish to S3 and SFTP repositories, implement Maven or Ivy dependency exclusions, as well as publish Ivy extra attributes in the artifact metadata. You can even publish your plugins to a private repository and then [resolve them using the plugins DSL](https://docs.gradle.org/3.0/userguide/plugins.html#sec:custom_plugin_repositories).

On the developer experience side of the house, you can now run [continuous builds](https://docs.gradle.org/3.0/userguide/continuous_build.html), where Gradle actively detects changes to the inputs of your tasks and proactively re-executes the build when changes occur. Our Tooling API is now considerably better with support for build cancellation, build progress events, and the ability to run specific test classes or methods. These improvements have all contributed to the release of [Eclipse Buildship](https://projects.eclipse.org/projects/tools.buildship) which provides first-class support for building, testing and running Gradle projects in Eclipse.

There's been substantial work on the plugins delivered with the Gradle distribution, too. We've added the ability to build, test and run applications using the [Play Framework](https://docs.gradle.org/3.0/userguide/play_plugin.html). Support for [Native builds](https://docs.gradle.org/3.0/userguide/native_software.html) continues to improve with support for parallel compilation, cross compilation and pre-compiled headers. We've also introduced a DSL for declaring test suites and added support for testing native components with Google Test. We've also continued to evolve [the Software Model](https://docs.gradle.org/3.0/userguide/software_model_concepts.html) and [rule based model configuration](https://docs.gradle.org/3.0/userguide/software_model.html) that these plugins are built on. It is now possible to configure the model through DSL and view component and model reports as well as create new types of rules such as validation and defaults rules.

Gradle 3.0 represents a significant improvement over Gradle 2.0 in terms of functionality, performance and experience. Looking forward, we'll continue to work on making Gradle the best build system on the planet, but for now, we hope you enjoy using 3.0 as much as we've enjoyed working on it!

Promoted features are features that were incubating in previous versions of Gradle but are now supported and subject to backwards compatibility. See the User guide section on the ""[Feature Lifecycle](https://docs.gradle.org/3.0/userguide/feature_lifecycle.html)"" for more information.

The following are the features that have been promoted in this Gradle release.

## Fixed issues

## Deprecations

Features that have become superseded or irrelevant due to the natural evolution of Gradle become _deprecated_, and scheduled to be removed in the next major Gradle version (Gradle 4.0). See the User guide section on the ""[Feature Lifecycle](https://docs.gradle.org/3.0/userguide/feature_lifecycle.html)"" for more information.

The following are the newly deprecated items in this Gradle release. If you have concerns about a deprecation, please raise it via the [Gradle Forums](http://discuss.gradle.org).

### Chaining `TaskInputs` and `TaskOutputs` methods

Chaining the following method calls is now deprecated:
- `TaskInputs.dir()`
- `TaskInputs.file()`
- `TaskInputs.files()`
- `TaskOutputs.dir()`
- `TaskOutputs.file()`
- `TaskOutputs.files()`

With Gradle 3.0, the following now produces a deprecation warning:

```
task myTask {
    inputs.file(""input1.txt"").file(""input2.txt"")
}
```

&gt; The chaining of the `file(Object)` method has been deprecated and is scheduled to be removed in Gradle 4.0. Please use the `file(Object)` method on `TaskInputs` directly instead.

### Jetty Plugin

The [Jetty plugin](https://docs.gradle.org/3.0/userguide/jetty_plugin.html) has been deprecated and will be removed in Gradle 4.0. Consider using the more feature-rich [Gretty plugin](https://github.com/akhikhl/gretty) instead.

## Potentially breaking changes

### Running Gradle on Java 6 is no longer supported

Gradle itself now requires Java 7 or better to run, but compiling project sources and running tests with Java 6 is still supported. See [Compiling and testing for Java 6](https://docs.gradle.org/3.0/userguide/java_plugin.html#sec:java_cross_compilation) in the Gradle Userguide. There are also instructions on how to compile and test [Groovy](https://docs.gradle.org/3.0/userguide/groovy_plugin.html#sec:groovy_cross_compilation) and [Scala](https://docs.gradle.org/3.0/userguide/scala_plugin.html#sec:scala_cross_compilation) for Java 6.

### Compiling and testing with Java 5 is no longer supported

Support for compiling and testing on Java 5 has been removed.

### Sonar plugin has been removed

The legacy Sonar plugin has been removed from the Gradle distribution. It is superseded by [the official plugin from SonarQube](http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Gradle).

### The eclipse-cdt plugin has been removed

The `eclipse-cdt` plugin is no longer supported and has been removed.

### Unique default test result and report directories for `Test` tasks

The default location of reports produced by tasks of type [Test](https://docs.gradle.org/3.0/dsl/org.gradle.api.tasks.testing.Test.html) have changed to incorporate the task name when used with the `Java Plugin`. This allows multiple tasks of type `Test` to produce non-conflicting default report and result directories without additional configuration.

When the Java, Groovy or Scala plugin is applied, the report directory for a task of type `Test` with the name **integrationTest** is now `$buildDir/reports/tests/integrationTest` and the test results directory is `$buildDir/test-results/integrationTest`.

This means the built-in `test` task reports are in a different location. To revert to the previous behaviour, the reports output directory of `Test` tasks can be configured explicitly:

```
test.reports.html.destination = testReportDir 
test.reports.xml.destination = testResultDir 
```

### Ant-Based Scala Compiler has been removed

The deprecated Ant-Based Scala Compiler has been removed from Gradle 3.0 and the Zinc Scala Compiler is now used exclusively. The following properties related to the Ant-Based compiler have been removed from the `ScalaCompile` task:
- `daemonServer`
- `fork`
- `useAnt`
- `useCompileDaemon`

### Support for TestNG JavaDoc annotations has been removed

The support for declaring TestNG tests via JavaDoc annotations has been removed. As such, the `Test.testSrcDirs` and the methods on `TestNGOptions` have also been removed.

### Task property annotations (e.g., @Input) on interfaces

In previous versions, annotations on task properties such as `@InputFile` and `@OutputDirectory` were only taken into account when they were declared on the task class itself (or one of its super-classes). With Gradle 3.0, annotations declared on implemented interfaces are also taken into account.

### `eclipse-wtp` handling of external dependencies changed

For Java projects, the `eclipse-wtp` plugin adds external dependencies to the classpath instead of the WTP component file. Any customizations related to external dependencies that were made in the `eclipse.wtp.component.file` hooks now need to be moved to the `eclipse.classpath.file` hooks instead.

### `eclipse-wtp` is automatically applied to `war` or `ear` projects with `eclipse`

Projects that have the `war` or `ear` plugins applied in conjunction with the `eclipse` plugin will now have the `eclipse-wtp` plugin applied automatically. If desired, this support can be removed using the following configuration:

```
eclipse.project {
    natures.removeAll { it.startsWith('org.eclipse.wst') }
    buildCommands.removeAll {
        it.name.startsWith('org.eclipse.wst')
    }
}
```

### Eclipse model contains classpath attributes for project and external dependencies

The `EclipseProjectDependency` and `EclipseExternalDependency` models now contain `ClasspathAttribute` objects. By default, the JavaDoc location attribute and WTP deployment attributes are also populated.

Any customizations made via `eclipse.classpath.file.beforeMerged` and `eclipse.classpath.file.whenMerged` are also reflected.

### NamedDomainObjectContainers no longer create objects when using explicit parameter syntax

In previous versions of Gradle, the following would create a new `SourceSet` named `foo`:

```
sourceSets {
    it.foo {}
}
```

This behavior was unintended and has been removed. The above code will now cause an exception if `foo` has not already been defined.

Creation must now use the implicit syntax:

```
sourceSets {
    foo {}
}
```

### Changes to previously deprecated APIs
- The `AbstractTask` methods `setName()` and `setProject()` are removed.
- The `plus(Iterable<FileCollection>)` and `#minus(Iterable<FileCollection>)` methods have been removed from `FileCollection`.
- Changing configurations after they have been resolved now throws an error.
- Changing configurations after task dependencies have been resolved now throws an error.
- Declaring custom `check`, `clean`, `build` or `assemble` tasks is not allowed anymore when using the lifecycle plugin.
- Configuring the Eclipse project name during `beforeMerged` or `whenMerged` is not allowed anymore.
- Removed `--no-color` command-line option (use `--console=plain` instead).
- Removed `--parallel-threads` command-line option (use `--parallel` + `--max-workers` instead).
- Removed `Zip.encoding` (use `Zip.metadataCharset` instead).
- Removed `DistributionPlugin.addZipTask()` and `addTarTask()`.
- The `installApp` task is no longer created by the `application` plugin (use `installDist` instead).
- Removed `Groovydoc.overview` (use `overviewText` instead).
- Removed `LoggingManager.setLevel()`. It is now not possible to change the log level during the execution of a task. If you were using this method to expose Ant logging messages, please use `AntBuilder.setLifecycleLogLevel()` instead.
- Removed `AntScalaCompiler` in favor of `ZincScalaCompiler`.
- Removed `EclipseClasspath.noExportConfigurations` property.
- Removed `ProjectDependency.declaredConfigurationName` property.
- Removed `AbstractLibrary.declaredConfigurationName` property.
- Removed `BuildExceptionReporter`.
- Removed `BuildLogger`.
- Removed `BuildResultLogger`.
- Removed `TaskExecutionLogger`.
- Removed `ConflictResolution`.
- Removed `Module`.
- Removed `DeleteAction`.
- Removed `EclipseDomainModel`.
- Removed `AntGroovydoc`.
- Removed `AntScalaDoc`.
- Removed `BinaryType`.
- Removed `LanguageType`.
- Removed `ConventionValue`.
- Removed `org.gradle.platform.base.test.TestSuiteBinarySpec` replaced by `org.gradle.testing.base.TestSuiteBinarySpec`
- Removed `org.gradle.platform.base.test.TestSuiteContainer` replaced by `org.gradle.testing.base.TestSuiteContainer`
- Removed `org.gradle.platform.base.test.TestSuiteSpec` replaced by `org.gradle.testing.base.TestSuiteSpec`
- TestKit supports Gradle versions 1.2 or later.
- Build comparison plugin supports Gradle versions 1.2 or later.
- Removed `Specs.and()`, `Specs.or()` and `Specs.not()`
- Removed `StartParameter.getParallelThreadCount()` and `StartParameter.setParallelThreadCount()`
- Removed `PrefixHeaderFileGenerateTask.getHeaders()`
- Removed `org.gradle.tooling.model.Task.getProject()`
- Removed `Logging.ANT_IVY_2_SLF4J_LEVEL_MAPPER`
- Removed old wrapper properties `urlRoot`, `distributionName`, `distributionVersion` and `distributionClassifier`
- Removed deprecated `has()`, `get()` and `set()` dynamic methods exposed by `ExtraPropertiesDynamicObjectAdapter`

### Groovy to Java conversions

For performance reasons, all classes in Gradle's public API have been converted from Groovy to Java.

As a consequence, these classes no longer extend `GroovyObject`. In order to retain binary compatibility, public API classes that have been converted are decorated with `GroovyObject` at runtime. This means plugins written for Gradle 2.x should continue working with Gradle 3.x.

We are planning to drop the runtime `GroovyObject` decoration with Gradle 4.0. This means that plugins compiled against Gradle 2.x will no longer work with Gradle 4.0. Plugins that are compiled with Gradle 3.0 will not have references to `GroovyObject` and will remain compatible with Gradle 4.0. Plugins compiled with Gradle 3.0 will also work with Gradle 2.x as long as they confine themselves to the Gradle 2.x API.

When recompiling your plugin with Gradle 3.0, you may need to make some changes to make it compile.

One instance of this is when you use `+=` in a statically compiled Groovy class. See [GROOVY-7888](https://issues.apache.org/jira/browse/GROOVY-7888).

## External contributions

We would like to thank the following community members for making contributions to this release of Gradle.
- [Martin Mosegaard Amdisen](https://github.com/martinmosegaard) - Correct some typos in depMngmt.xml and README.md
- [Vladislav Bauer](https://github.com/vbauer) - ShadeJar: Use ClassRemapper instead of deprecated RemappingClassAdapter
- [Emmanuel Bourg](https://github.com/ebourg) - Use the JCIP ThreadSafe annotation instead of the one from httpcomponents
- [Andreas Dangel](https://github.com/adangel) - Add sourceSet.output to PMD classpath (GRADLE-3488)
- [Tatsiana Drabovich](https://github.com/blestka) - Fixed TestNG Listener adapters equality (GRADLE-3189)
- [Ryan Ernst](https://github.com/rjernst) - Upgrade to Groovy 2.4.7
- [Ethan Hall](https://github.com/ethankhall) - Fixing documentation from candidate.name to candidate.module
- [Matias Hernandez](https://github.com/matiash) - Removed 4NT-specific code in bat files (GRADLE-3476)
- [Gregorios Leach](https://github.com/simtel12) - Include directories when using a S3Client to list objects in a prefix. (GRADLE-3453)
- [Mahmoud  Khater](https://github.com/mahmoud-k) - Fix a problem with determining the version of Findbugs on the classpath (GRADLE-3457)
- [Michael Ottati](https://github.com/mottati) - Allow Jetty daemon instances to be shut down. (GRADLE-2263)
- [Sebastian Schuberth](https://github.com/sschuberth) - Minor style fixes
- [Alexander Shorin](https://github.com/kxepal) - Allow local connections for daemon and messaging services from all network devices (GRADLE-3121)
- [Rob Upcraft](https://github.com/upcrob) - Fix spelling in documentation
- [James Ward](https://github.com/jamesward) - Fixed launching Gradle from Finder on Mac OS
- [Ramon Wirsch](https://github.com/ramonwirsch) - Fix NullPointerException when processing annotations in the new Java software model

We love getting contributions from the Gradle community. For information on contributing, please see [gradle.org/contribute](http://gradle.org/contribute).

## Known issues

Known issues are problems that were discovered post release that are directly related to changes made in this release.

1 issues are known to affect Gradle 3.0.
- [[GRADLE-3520](https://issues.gradle.org/browse/GRADLE-3520)] - Incremental Java compile does not rebuild when upstream classes are deleted
",https://api.github.com/users/eljobe,679924,eljobe,https://api.github.com/repos/gradle/gradle/releases/3889323/assets,https://api.github.com/repos/gradle/gradle/releases/3889323,master,https://api.github.com/repos/gradle/gradle/tarball/v3.0.0,https://github.com/gradle/gradle/releases/tag/v3.0.0,https://api.github.com/repos/gradle/gradle/zipball/v3.0.0,v3.0.0,False,False
3836639,2016-08-08T13:43:26Z,2016-08-08T17:44:31Z,3.0 RC2,"## Gradle 3.0-rc-2 is now available for testing

This release fixes a few issues reported against [3.0-rc-1](https://discuss.gradle.org/t/gradle-3-0-rc-1-is-now-available-for-testing/18776).
- Some deprecations were reverted related to methods accepting closures
- Fix to incremental Java compilation
- Allow access to `Settings` DSL from `buildscript` block to ensure backwards compatibility

Check the [3.0-rc-2 release notes](https://docs.gradle.org/3.0-rc-2/release-notes) for more information.  If no regressions are reported, a final release will typically follow in the next week.

## Upgrade Instructions

Switch your build to use Gradle 3.0-rc-2 quickly by updating your wrapper properties:

`./gradlew wrapper --gradle-version=3.0-rc-2`

Standalone downloads are available at https://gradle.org/release-candidate. 

## Reporting Problems

If you find a problem with Gradle 3.0-rc-2, please post a reply to this topic or create a new topic in [Bugs](https://discuss.gradle.org/c/bugs).  Be sure to include which operating system you are using, the version of Gradle you upgraded from and any steps you have found that reproduces your problem.
",https://api.github.com/users/lhotari,66864,lhotari,https://api.github.com/repos/gradle/gradle/releases/3836639/assets,https://api.github.com/repos/gradle/gradle/releases/3836639,master,https://api.github.com/repos/gradle/gradle/tarball/v3.0.0-RC2,https://github.com/gradle/gradle/releases/tag/v3.0.0-RC2,https://api.github.com/repos/gradle/gradle/zipball/v3.0.0-RC2,v3.0.0-RC2,False,True
3753129,2016-08-02T06:25:17Z,2016-08-02T06:49:43Z,3.0 RC1,"## General Notes

Gradle 3.0 is just around the corner! We have [lots of new features](#new-features) to share with you since 2.14 and we'd love for you to give it a shot and submit feedback. See [Getting Started](#getting-started) and [Providing Feedback](#providing-feedback) sections below for details.

**But wait, there's more!** We couldn't list all of the ""little"" things we've improved in Gradle 3.0 here, you'll want to check the [detailed release notes](https://docs.gradle.org/3.0-rc-1/release-notes.html) for the full list.

<a name=""new-features""></a>

## New Features and Improvements
- **The Gradle Daemon is now enabled by default.** According to our testing, we can achieve a _15-75% speed improvement_ in subsequent builds in most projects, just by enabling the [Gradle Daemon](https://docs.gradle.org/3.0-rc-1/userguide/gradle_daemon.html). We have worked hard to make it robust and resource-aware so that _everyone_ can use it. 
- **Initial Java 9 Support.** Gradle now runs properly when run on the latest JDK 9 EAP builds, and users can build and run tests for their own projects against JDK 9 as well. Note, however, that Gradle does not yet support deep integration with Jigsaw modules or `-modulepath`. 
- **Gradle build scripts can now be written in Kotlin.** [Kotlin](https://kotlinlang.org) is a statically-typed programming language for the JVM with rich IDE support. Gradle 3.0 includes [Gradle Script Kotlin](https://github.com/gradle/gradle-script-kotlin) v0.3.0. Many capabilities of Groovy build scripts are now available, see the [Gradle Script Kotlin v0.3.0 release notes](https://github.com/gradle/gradle-script-kotlin/releases/tag/v0.3.0) for details.
- **New Performance Guide.** We're pleased to make available a draft of our [new Performance Guide](https://gradle.github.io/performance-guide). This is a 13-page guide that allows you to dramatically improve your build performance over the course of an afternoon. Take a look and suggest improvements through [GitHub Issues](https://github.com/gradle/performance-guide/issues).
- **Lots more** An improved `plugins {}` DSL, more robust incremental and `--parallel` builds, enhancements to the `codenarc`, `eclipse-wtp`, `jacoco`, `osgi`, `pmd` plugins and more are described in the [full release notes](https://docs.gradle.org/3.0-rc-1/release-notes.html).

## Deprecations and Removals

To keep technology moving forward, we are removing support for the following:
- **Running Gradle on Java 6 is no longer supported.** Gradle itself now requires Java 7 or better to run, but compiling project sources and running tests with Java 6 remains supported. See the [cross-compilation for Java 6](https://docs.gradle.org/3.0-rc-1/userguide/java_plugin.html#sec:java_cross_compilation) section of the user guide for details.
- **Compiling and testing with Java 5 is no longer supported.**
- **Many features deprecated in the Gradle 2.x line have been removed.** See the [detailed release notes](https://docs.gradle.org/3.0-rc-1/release-notes.html).

<a name=""getting-started""></a>

## Getting Started

Set your [Gradle wrapper](https://docs.gradle.org/3.0-rc-1/userguide/gradle_wrapper.html) version to `3.0-rc-1` as follows:

```
$ cd $YOUR_GRADLE_PROJECT
$ gradle wrapper --gradle-version 3.0-rc-1
```

Then run the wrapper to trigger download and installation:

```
$ ./gradlew --version
Downloading https://services.gradle.org/distributions/gradle-3.0-rc-1-bin.zip
....................................................................................
....................................................................................
------------------------------------------------------------
Gradle 3.0-rc-1
------------------------------------------------------------
[...]
```

Now continue to operate the build via the `./gradlew` wrapper as you normally would and experiment with the new features as you go.

<a name=""providing-feedback""></a>

## Providing Feedback

If you believe you've found an issue with Gradle 3.0 RC1 or simply have a question about it, please:
- Post a topic in the [Bugs category](https://discuss.gradle.org/c/bugs/) of the Gradle Forums
- Provide a [Build Scan](https://scans.gradle.com), if possible, or paste the output of `./gradlew --version` so we can see relevant OS and JDK information
- Bugs submitted with a small example that reproduces the problematic behavior are more likely to be fixed quickly
",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/3753129/assets,https://api.github.com/repos/gradle/gradle/releases/3753129,release,https://api.github.com/repos/gradle/gradle/tarball/v3.0.0-RC1,https://github.com/gradle/gradle/releases/tag/v3.0.0-RC1,https://api.github.com/repos/gradle/gradle/zipball/v3.0.0-RC1,v3.0.0-RC1,False,True
3485913,2016-06-21T21:41:50Z,2016-06-21T23:31:33Z,3.0 M2,"## General Notes

This second milestone leading up to Gradle 3.0 builds on [3.0 M1](https://github.com/gradle/gradle/releases/tag/v3.0.0-M1) with several key improvements listed below.

**Give 3.0 M2 a try for yourself.** See the [Getting Started](#getting-started) and [Providing Feedback](#providing-feedback) sections below for details.

For more information, see the [announcement blog post](http://gradle.org/blog/gradle-3-0-m2-java-9-support/) and [detailed release notes](https://docs.gradle.org/3.0-milestone-2/release-notes.html).

## A Note About Compatibility and Support

This release is intended as a _preview_ for new features we'll be releasing soon in Gradle 3.0. As such, it is not intended to be used in a production environment and features may change significantly before they are released in Gradle 3.0.

## New Features and Improvements since 3.0 M1
- **Initial Java 9 Support.** Gradle now runs properly when run on the latest JDK 9 EAP builds, and users can build and run tests for their own projects against JDK 9 as well. Note, however, that Gradle does not yet support Jigsaw modules or JDK 9-specific compile options such as `-release` and `-modulepath`. 
- **Performance Improvements and new Performance Guide.** A number of performance improvements have acculmulated over the last several Gradle releases, and it's a good time to try them out for yourself in 3.0 M2. For details on many of these improvements, see [Cédric's blog post](http://gradle.org/blog/gradle-3-0-m2-java-9-support/). We're also pleased to make available a draft of our [new Performance Guide](https://gradle.github.io/performance-guide). This is intended to be a short (13-page) guide that allows you to dramatically improve your build performance over the course of an afternoon. Check it out and please provide any feedback via the guide's [GitHub Issues](https://github.com/gradle/performance-guide/issues).
- **Improved Kotlin build scripting.** Gradle 3.0 M2 includes the newly-released Gradle Script Kotlin 0.2.0. Users can now modify the build script classpath and apply plugins in Kotlin-based build scripts, and project import into IDEA is now seamless. See the Gradle Script Kotlin [0.2.0 release notes](https://github.com/gradle/gradle-script-kotlin/releases/tag/v0.2.0) for details, samples and getting started instructions.

<a name=""getting-started""></a>

## Getting Started

Set your [Gradle wrapper](https://docs.gradle.org/3.0-milestone-2/userguide/gradle_wrapper.html) version to `3.0-milestone-2` as follows:

```
$ cd $YOUR_GRADLE_PROJECT
$ gradle wrapper --gradle-version 3.0-milestone-2
```

Then run the wrapper to trigger download and installation:

```
$ ./gradlew --version
Downloading https://services.gradle.org/distributions/gradle-3.0-milestone-2-bin.zip
....................................................................................
....................................................................................
------------------------------------------------------------
Gradle 3.0-milestone-2
------------------------------------------------------------
[...]
```

Now continue to operate the build via the `./gradlew` wrapper as you normally would and experiment with the new features as you go.

<a name=""providing-feedback""></a>

## Providing Feedback

If you believe you've found an issue with Gradle 3.0 M2 or simply have a question about it, please:
- Post a topic in the [3.0 M2 feedback category](https://discuss.gradle.org/c/3-0-m2) of the Gradle Forums
- Paste the output of `./gradlew --version` so we can see relevant OS and JDK information
- Provide, if possible, a small example that reproduces the problematic behavior
",https://api.github.com/users/eriwen,51534,eriwen,https://api.github.com/repos/gradle/gradle/releases/3485913/assets,https://api.github.com/repos/gradle/gradle/releases/3485913,master,https://api.github.com/repos/gradle/gradle/tarball/v3.0.0-M2,https://github.com/gradle/gradle/releases/tag/v3.0.0-M2,https://api.github.com/repos/gradle/gradle/zipball/v3.0.0-M2,v3.0.0-M2,False,True
3387595,2016-06-09T17:57:28Z,2016-06-09T18:00:31Z,3.0 M1,"## General Notes

This release is the first in a short series of milestones leading up to Gradle 3.0 GA. Its purpose is to gather feedback on each of the major changes listed below.

**We encourage all Gradle users to give 3.0 M1 a try and let us know how it goes.** See the [Getting Started](#getting-started) and [Providing Feedback](#providing-feedback) sections below for details.

For more information, please see the [announcement blog post](http://gradle.org/blog/gradle-3-0-m1-unleash-the-daemon/) and [detailed release notes](https://docs.gradle.org/3.0-milestone-1/release-notes.html).

## New Features and Improvements
- **The Gradle Daemon is now enabled by default.** The [Gradle Daemon](https://docs.gradle.org/3.0-milestone-1/userguide/gradle_daemon.html) is a long-running background process that dramatically improves Gradle command line responsiveness and overall build times. Prior to this release, the daemon had been an _opt-in_ feature, requiring users to enable it explicitly. Now the daemon is enabled by default, meaning it is no longer necessary to provide the `--daemon` option or to set the `org.gradle.daemon` property to `true`.
- **Gradle build scripts can now be written in Kotlin.** [Kotlin](https://kotlinlang.org) is a statically-typed programming language for the JVM with rich IDE support. This release introduces initial support for writing Gradle build scripts in Kotlin, enabling the use of autocompletion, quick documentation, refactoring and other key IDE features. See the [announcement blog post](http://gradle.org/blog/kotlin-meets-gradle/) and Gradle Script Kotlin [1.0 M1 release notes](https://github.com/gradle/gradle-script-kotlin/releases/tag/v1.0.0-M1) for complete details, samples and getting started instructions.

## Caveats and Limitations
- **Features deprecated in the Gradle 2.x line have been removed.** See the latest (Gradle 2.13) [deprecation list](https://docs.gradle.org/2.13/javadoc/deprecated-list.html) for details.
- **Running Gradle on Java 6 is no longer supported.** Gradle itself now requires Java 7 or better to run, but compiling project sources and running tests with Java 6 remains supported. See the [cross-compilation for Java 6](https://docs.gradle.org/nightly/userguide/java_plugin.html#sec:java_cross_compilation) section of the user guide for details.

<a name=""getting-started""></a>

## Getting Started

The best way to try out 3.0 M1 is against a real-world project whose build you are already familiar with.

Set your [Gradle wrapper](https://docs.gradle.org/3.0-milestone-1/userguide/gradle_wrapper.html) version to `3.0-milestone-1` as follows:

```
$ cd $YOUR_GRADLE_PROJECT
$ gradle wrapper --gradle-version 3.0-milestone-1
```

Then run the wrapper to trigger download and installation:

```
$ ./gradlew --version
Downloading https://services.gradle.org/distributions/gradle-3.0-milestone-1-bin.zip
....................................................................................
....................................................................................
------------------------------------------------------------
Gradle 3.0-milestone-1
------------------------------------------------------------
[...]
```

Now continue to operate the build via the `./gradlew` wrapper as you normally would and experiment with the new features as you go.

<a name=""providing-feedback""></a>

## Providing Feedback

If you believe you've found an issue with Gradle 3.0 M1 or simply have a question about it, please:
- Post a topic in the [3.0 M1 feedback category](https://discuss.gradle.org/c/3-0-m1) of the Gradle Forums
- Paste the output of `./gradlew --version` so we can see relevant OS and JDK information
- Provide, if possible, a small example that reproduces the problematic behavior
",https://api.github.com/users/cbeams,301810,cbeams,https://api.github.com/repos/gradle/gradle/releases/3387595/assets,https://api.github.com/repos/gradle/gradle/releases/3387595,master,https://api.github.com/repos/gradle/gradle/tarball/v3.0.0-M1,https://github.com/gradle/gradle/releases/tag/v3.0.0-M1,https://api.github.com/repos/gradle/gradle/zipball/v3.0.0-M1,v3.0.0-M1,False,True
