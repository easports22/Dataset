id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
5350011,2017-01-31T15:04:18Z,2017-02-03T10:00:56Z,pandoc 1.19.2.1,"-   Require skylighting &gt;= 0.1.1.4.
-   Adjust test output for skylighting version.
-   Relax upper bounds on blaze-html and blaze-markup.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/5350011/assets,https://api.github.com/repos/jgm/pandoc/releases/5350011,master,https://api.github.com/repos/jgm/pandoc/tarball/1.19.2.1,https://github.com/jgm/pandoc/releases/tag/1.19.2.1,https://api.github.com/repos/jgm/pandoc/zipball/1.19.2.1,1.19.2.1,False,False
5298182,2017-01-29T20:19:16Z,2017-01-29T21:01:31Z,pandoc 1.19.2,"-   Use skylighting library instead of highlighting-kate for syntax highlighting. Skylighting is faster and more accurate (#3363). Later we'll be able to add features like warning messages, dynamic loading of xml syntax definitions, and dynamic loading of themes.
-   Added a new highlight style, `breezeDark`.
-   Text.Pandoc.Highlighting: Update list of `listings` languages (#3374). This allows more languages to be used when using the `--listings` option.
-   OpenDocument writer:
  -   Small refactoring. Removed separate 'parent' parameter in paraStyle.
  -   Don't profilerate text styles unnecessarily (#3371). This change makes the writer create only as many temporary text styles as are absolutely necessary. It also consolidates adjacent nodes with the same style.
-   Org reader (Albert Krewinkel):
  -   Allow short hand for single-line raw blocks (Albert Krewinkel, #3366). Single-line raw blocks can be given via `#+FORMAT: raw line`, where `FORMAT` must be one of `latex`, `beamer`, `html`, or `texinfo`.
  -   Accept org-ref citations followed by commas (Albert Krewinkel). Bugfix for an issue which, whenever the citation was immediately followed by a comma, prevented correct parsing of org-ref citations.
  -   Ensure emphasis markup can be nested. Nested emphasis markup (e.g. `/*strong and emphasized*/`) was interpreted incorrectly in that the inner markup was not recognized.
  -   Remove pipe char irking the haddock coverage tool (Albert Krewinkel).
-   Docx reader: Empty header should be list of lists (Jesse Rosenthal). In the past, the docx reader wrote an empty header as an empty list. It should have the same width as a row (and be filled with empty cells).
-   MediaWiki reader:
  -   Improved handling of display math (#3362). Sometimes display math is indented with more than one colon. Previously we handled these cases badly, generating definition lists and missing the math.
  -   Fix quotation mark parsing (#3336, tgkokk). Change MediaWiki reader's behavior when the smart option is parsed to match other readers' behavior.
-   Markdown reader:
  -   Fixed `-f markdown_github-hard_line_breaks+escaped_line_breaks` (#3341). Previously this did not properly enable escaped line breaks.
  -   Disallow space between inline code and attributes (#3326, #3323, Mauro Bieg).
-   DocBook5 writer: make id attribute xml:id, fixes #3329 (#3330, Mauro Bieg).
-   Added some test cases for ODT reader (#3306, #3308, Hubert Plociniczak).
-   LaTeX writer: allow tables with empty cells to count as ""plain."" This addresses a problem of too-wide tables when empty cells are used. Thanks to Joost Kremers for reporting the issue.
-   Org writer: prefix footnote numbers with `fn:` (Albert Krewinkel). Unprefixed numbers where used by older org-mode versions, but are no longer supported.
-   HTML writer: don't process pars with empty RawInline, (#1040, #3327, Mauro Bieg).
-   Markdown writer: Fix display math with `--webtex` (#3298).
-   Fix sample.lua so it properly handles raw blocks/inlines (#3358, bumper314).
-   Templates:
  -   default.latex: Moved geometry after hyperref (Václav Haisman). Otherwise PDF sizes can be wrong in some circumstances.
  -   Copied a few changes from default.latex to default.beamer (Wandmalfarbe).
  -   default.latex, default.beamer: Changed position of `\VerbatimNotes` and `fancyvrb`. This fixes hyperlinks on footnotes in documents that contain verbatim in notes (#3361). (Note: the beamer template was updated to match the LaTeX template, but at this point verbatim in notes seems not to work in beamer.)
  -   default.latex: Allow passing `microtypeoptions` to microtype (Václav Haisman).
  -   default.latex: Add hyphen option to url package.
  -   default.docbook5: Fix namespace declarations (Mauro Bieg).
-   Moved `make_osx_package.sh` to `osx/` directory.
-   Travis continuous integration:
  -   Fix false positives with dist build.
  -   Speed improvements (Kolen Cheung, #3304, #3357).
-   MANUAL.txt:
  -   Clarify that blank space is needed around footnotes (#3352).
  -   Fixed typo (#3351, Alexey Rogechev).
  -   Note that `--wrap=auto` does not work in HTML output.
  -   Default `--columns` width is 72, not 80.
  -   Fixed broken links (#3316, Kolen Cheung).
  -   Document usage of `@*` in nocite section (#3333, John Muccigrosso).
-   INSTALL.md:
  -   Indent code so it's properly formatted (#3335, Bheesham Persaud).
  -   Added instructions for extracting binary from OSX, Windows packages.
-   CONTRIBUTING.md: Describe labels currently used in issue tracker (Albert Krewinkel). The labels have changed over time, the list of labels is updated to reflect the current set of labels used in the issue tracker.
-   Rearrange and extend badges in README (Albert Krewinkel, #3354)
-   Bumped version bounds for dependencies.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/5298182/assets,https://api.github.com/repos/jgm/pandoc/releases/5298182,master,https://api.github.com/repos/jgm/pandoc/tarball/1.19.2,https://github.com/jgm/pandoc/releases/tag/1.19.2,https://api.github.com/repos/jgm/pandoc/zipball/1.19.2,1.19.2,False,False
4884827,2016-12-10T10:29:58Z,2016-12-10T14:17:18Z,pandoc 1.19.1,"-   Set `PANDOC_VERSION` environment variable for filters (#2640). This allows filters to check the pandoc version that produced the JSON they are receiving.
-   Docx reader: Ensure one-row tables don't have header (#3285, Jesse Rosenthal). Tables in MS Word are set by default to have special first-row formatting, which pandoc uses to determine whether or not they have a header. This means that one-row tables will, by default, have only a header -- which we imagine is not what people want. This change ensures that a one-row table is not understood to be a header only. Note that this means that it is impossible to produce a header-only table from docx, even though it is legal pandoc. But we believe that in nearly all cases, it will be an accidental (and unwelcome) result
-   HTML reader:
  -   Fixed some bad regressions in HTML table parser (#3280). This regression leads to the introduction of empty rows in some circumstances.
  -   Understand `style=width:` as well as `width` in `col` (#3286).
-   RST reader:
  -   Print warnings when keys, substitition, notes not found. Previously the parsers failed and we got raw text. Now we get a link with an empty URL, or empty inlines in the case of a note or substitution.
  -   Fix hyperlink aliases (#3283).
-   Man writer: Ensure that periods are escaped at beginning of line (#3270).
-   LaTeX writer: Fix unnumbered headers when used with `--top-level` (#3272, Albert Krewinkel). Fix interaction of top-level divisions `part` or `chapter` with unnumbered headers when emitting LaTeX. Headers are ensured to be written using stared commands (like `\subsection*{}`).
-   LaTeX template: use comma not semicolon to separate keywords for `pdfkeywords`. Thanks to Wandmalfarbe.
-   Markdown writer: Fixed incorrect word wrapping (#3277). Previously pandoc would sometimes wrap lines too early due to this bug.
-   Text.Pandoc.Pretty: Added `afterBreak` [API change]. This makes it possible to insert escape codes for content that needs escaping at the beginning of a line.
-   Removed old MathMLInHTML.js from 2004, which should no longer be needed for MathML with modern browsers.
-   Fixed tests with dynamic linking (#2709).
-   Makefile: Use stack instead of cabal for targets. This is just a convenience for developers.
-   Fixed bash completion of filenames with space (#2749).
-   MANUAL: improved documentation on how to create a custom `reference.docx`.
-   Fix minor spelling typos in the manual (#3273, Anthony Geoghegan)
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/4884827/assets,https://api.github.com/repos/jgm/pandoc/releases/4884827,master,https://api.github.com/repos/jgm/pandoc/tarball/1.19.1,https://github.com/jgm/pandoc/releases/tag/1.19.1,https://api.github.com/repos/jgm/pandoc/zipball/1.19.1,1.19.1,False,False
4800777,2016-11-30T20:03:17Z,2016-11-30T23:44:42Z,pandoc 1.19,"-   Changed resolution of filter paths.
  -   We now first treat the argument of `--filter` as a full (absolute or relative) path, looking for a program there. If it's found, we run it.
  -   If not, and if it is a simple program name or a relative path, we try resolving it relative to `$DATADIR/filters`.
  -   If this fails, then we treat it as a program name and look in the user's PATH.
  -   Removed a hardcoded '/' that may have caused problems with Windows paths.
  
  Previously if you did `--filter foo` and you had `foo` in your path and also an executable `foo` in your working directory, the one in the path would be used. Now the one in the working directory is used.
  
  In addition, when you do `--filter foo/bar.hs`, pandoc will now find a filter `$DATADIR/filters/foo/bar.hs` -- assuming there isn't a `foo/bar.hs` relative to the working directory.
-   Allow `file://` URIs as arguments (#3196). Also improved default reader format detection. Previously with a URI ending in .md or .markdown, pandoc would assume HTML input. Now it treats these as markdown.
-   Allow to overwrite top-level division type heuristics (#3258, Albert Krewinkel). Pandoc uses heuristics to determine the most reasonable top-level division type when emitting LaTeX or Docbook markup. It is now possible to overwrite this implicitly set top-level division via the `top-level-division` command line parameter.
-   Text.Pandoc.Options [API changes]:
  -   Removed `writerStandalone` field in `WriterOptions`, made `writerTemplate` a `Maybe` value. Previously setting `writerStandalone = True` did nothing unless a template was provided in writerTemplate. Now a fragment will be generated if `writerTemplate` is `Nothing`; otherwise, the specified template will be used and standalone output generated.
  -   `Division` has been renamed `TopLevelDivision` (#3197). The `Section`, `Chapter`, and `Part` constructors were renamed to `TopLevelSection`, `TopLevelChapter`, and `TopLevelPart`, respectively. An additional `TopLevelDefault` constructor was added, which is now also the new default value of the `writerTopLevelDivision` field in `WriterOptions`.
-   Improved error if they give wrong arg to `--top-level-division`.
-   Use new module from texmath to lookup MS font codepoints in Docx reader. Removed unexported module Text.Pandoc.Readers.Docx.Fonts. Its code now lives in texmath (0.9).
-   DocBook reader: Fixed xref lookup (#3243). It previously only worked when the qnames lacked the docbook namespace URI.
-   HTML reader:
  -   Improved table parsing (#3027). We now check explicitly for non-1 rowspan or colspan attributes, and fail when we encounter them. Previously we checked that each row had the same number of cells, but that could be true even with rowspans/colspans. And there are cases where it isn't true in tables that we can handle fine -- e.g. when a tr element is empty. So now we just pad rows with empty cells when needed.
  -   Treat `<math>` as MathML by default unless something else is explicitly specified in xmlns. Provided it parses as MathML, of course. Also fixed default which should be to inline math if no display attribute is used.
  -   Only treat ""a"" element as link if it has href (#3226). Otherwise treat as span.
-   Docx reader (Jesse Rosenthal):
  -   Add a placeholder value for CHART. We wrap `[CHART]` in a `<span class=""chart"">`. Note that it maps to inlines because, in docx, anything in a drawing tag can be part of a larger paragraph.
  -   Be more specific in parsing images We not only want `w:drawing`, because that could also include charts. Now we specify `w:drawing/pic:pic`. This shouldn't change behavior at all, but it's a first step toward allowing other sorts of drawing data as well.
  -   Abstract out function to avoid code repetition.
  -   Update tests for img title and alt (#3204).
  -   Handle Alt text and titles in images. We use the ""description"" field as alt text and the ""title"" field as title. These can be accessed through the ""Format Picture"" dialog in Word.
  -   Docx reader utils: handle empty namespace in `elemName`. Previously, if given an empty namespace `(elemName ns """" ""foo"")` `elemName` would output a QName with a `Just """"` namespace. This is never what we want. Now we output a `Nothing`. If someone _does_ want a `Just """"` in the namespace, they can enter the QName value explicitly.
-   ODT reader/writer:
  -   Inline code when text has a special style (Hubert Plociniczak). When a piece of text has a text `Source_Text` then we assume that this is a piece of the document that represents a code that needs to be inlined. Adapted the writer to also reflect that change. Previously it was just writing a 'preformatted' text using a non-distinguishable font style. Code blocks are still not recognized by the ODT reader. That's a separate issue.
  -   Infer table's caption from the paragraph (#3224, Hubert Plociniczak). ODT's reader always put empty captions for the parsed tables. This commit
    1.  checks paragraphs that follow the table definition
    2.  treats specially a paragraph with a style named 'Table'
    3.  does some postprocessing of the paragraphs that combines tables followed immediately by captions
  
  The ODT writer used the `TableCaption` style for the caption paragraph. This commit follows the OpenOffice approach which allows for appending captions to table but uses a built-in style named `Table` instead of `TableCaption`. Users of a custom `reference.odt` should change the style's name from `TableCaption` to `Table`.
-   ODT reader: Infer tables' header props from rows (#3199, Hubert Plociniczak). ODT reader simply provided an empty header list which meant that the contents of the whole table, even if not empty, was simply ignored. While we still do not infer headers we at least have to provide default properties of columns.
-   Markdown reader:
  -   Allow reference link labels starting with `@...` if `citations` extension disabled (#3209). Example: in
    
    ```
    \[link text\]\[@a\]
    ```
    
    `link text` isn't hyperlinked because `[@a]` is parsed as a citation. Previously this happened whether or not the `citations` extension was enabled. Now it happens only if the `citations` extension is enabled.
  -   Allow alignments to be specified in Markdown grid tables. For example,
    
    ```
    +-------+---------------+--------------------+
    | Right    | Left                 | Centered |
    +=========:+:=================+:=============:+
    | Bananas | $1.34         | built-in wrapper |
    +-------+---------------+--------------------+
    ```
  -   Allow Small Caps elements to be created using bracketed spans (as they already can be using HTML-syntax spans) (#3191, Kolen Cheung).
-   LaTeX reader:
  -   Don't treat `\vspace` and `\hspace` as block commands (#3256). Fixed an error which came up, for example, with `\vspace` inside a caption. (Captions expect inlines.)
  -   Improved table handling. We can now parse all of the tables emitted by pandoc in our tests. The only thing we don't get yet are alignments and column widths in more complex tables. See #2669.
  -   Limited support for minipage.
  -   Allow for `[]`s inside LaTeX optional args. Fixes cases like:
  -   Handle BVerbatim from fancyvrb (#3203).
  -   Handle hungarumlaut (#3201).
  -   Allow beamer-style `<...>` options in raw LaTeX (also in Markdown) (#3184). This allows use of things like `\only<2,3>{my content}` in Markdown that is going to be converted to beamer.
-   Use pre-wrap for code in dzslides template (Nicolas Porcel). Otherwise overly long code will appear on every slide.
-   Org reader (Albert Krewinkel):
  -   Respect column width settings (#3246). Table column properties can optionally specify a column's width with which it is displayed in the buffer. Some exporters, notably the ODT exporter in org-mode v9.0, use these values to calculate relative column widths. The org reader now implements the same behavior. Note that the org-mode LaTeX and HTML exporters in Emacs don't support this feature yet, which should be kept in mind by users who use the column widths parameters.
  -   Allow HTML attribs on non-figure images (#3222). Images which are the only element in a paragraph can still be given HTML attributes, even if the image does not have a caption and is hence not a figure. The following will add set the `width` attribute of the image to `50%`:
    
    ```
    +ATTR\_HTML: :width 50%
    =======================
    
    \[\[file:image.jpg\]\]
    ```
  -   Support `ATTR_HTML` for special blocks (#3182). Special blocks (i.e. blocks with unrecognized names) can be prefixed with an `ATTR_HTML` block attribute. The attributes defined in that meta-directive are added to the `Div` which is used to represent the special block.
  -   Support the `todo` export option. The `todo` export option allows to toggle the inclusion of TODO keywords in the output. Setting this to `nil` causes TODO keywords to be dropped from headlines. The default is to include the keywords.
  -   Add support for todo-markers. Headlines can have optional todo-markers which can be controlled via the `#+TODO`, `#+SEQ_TODO`, or `#+TYP_TODO` meta directive. Multiple such directives can be given, each adding a new set of recognized todo-markers. If no custom todo-markers are defined, the default `TODO` and `DONE` markers are used. Todo-markers are conceptually separate from headline text and are hence excluded when autogenerating headline IDs. The markers are rendered as spans and labelled with two classes: One class is the markers name, the other signals the todo-state of the marker (either `todo` or `done`).
-   LaTeX writer:
  -   Use `\autocites*` when ""suppress-author"" citation used.
  -   Ensure that simple tables have simple cells (#2666). If cells contain more than a single Plain or Para, then we need to set nonzero widths and put contents into minipages.
  -   Remove invalid inlines in sections (#3218, Hubert Plociniczak).
-   Markdown writer:
  -   Fix calculation of column widths for aligned multiline tables (#1911, Björn Peemöller). This also fixes excessive CPU and memory usage for tables when `--columns` is set in such a way that cells must be very tiny. Now cells are guaranteed to be big enough so that single words don't need to line break, even if this pushes the line length above the column width.
  -   Use bracketed form for native spans when `bracketed_spans` enabled (#3229).
  -   Fixed inconsistent spacing issue (#3232). Previously a tight bullet sublist got rendered with a blank line after, while a tight ordered sublist did not. Now we don't get the blank line in either case.
  -   Fix escaping of spaces in super/subscript (#3225). Previously two backslashes were inserted, which gave a literal backslash.
  -   Adjust widths in Markdown grid tables so that they match on round-trip.
-   Docx writer:
  -   Give full detail when there are errors converting tex math.
  -   Handle title text in images (Jesse Rosenthal). We already handled alt text. This just puts the image ""title"" into the docx ""title"" attr.
  -   Fixed XML markup for empty cells (#3238). Previously the Compact style wasn't being applied properly to empty cells.
-   HTML writer:
  -   Updated `renderHtml` import from blaze-html.
-   Text.Pandoc.Pretty:
  -   Fixed some bugs that caused blank lines in tables (#3251). The bugs caused spurious blank lines in grid tables when we had things like `blankline $$ blankline`.
  -   Add exported function `minOffet` [API change] (Björn Peemöller).
  -   Added error message for illegal call to `block` (Björn Peemöller).
-   Text.Pandoc.Shared:
  -   Put `warn` in MonadIO.
  -   `fetchItem`: Better handling of protocol-relative URL (#2635). If URL starts with `//` and there is no ""base URL"" (as there would be if a URL were used on the command line), then default to http:.
-   Export Text.Pandoc.getDefaultExtensions [API change] (#3178).
-   In --version, trap error in `getAppUserDataDirectory` (#3241). This fixes a crash with `pandoc --version` on unusual systems with no real user (e.g. SQL Server 2016).
-   Added weigh-pandoc for memory usage diagnostics (#3169).
-   Use correct mime types for woff and woff2 (#3228).
-   Remove make_travis_yml.hs (#3235, Kolen Cheung).
-   changelog: Moved an item that was misplaced in the 1.17.2 section to the 1.18 section where it belongs.
-   CONTRIBUTING.md: minor change in wording and punctuation (#3252, Kolen Cheung).
-   Further revisions to manual for `--version` changes (#3244).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/4800777/assets,https://api.github.com/repos/jgm/pandoc/releases/4800777,master,https://api.github.com/repos/jgm/pandoc/tarball/1.19,https://github.com/jgm/pandoc/releases/tag/1.19,https://api.github.com/repos/jgm/pandoc/zipball/1.19,1.19,False,False
4494678,2016-10-26T21:36:59Z,2016-10-26T22:47:30Z,pandoc 1.18,"-   Added `--list-input-formats`, `--list-output-formats`, `--list-extensions`, `--list-highlight-languages`, and `--list-highlight-styles` (#3173). Removed list of highlighting languages from `--version` output. Removed list of input and output formats from default `--help` output.
-   Added `--reference-location=block|section|document` option (Jesse Rosenthal). This determines whether Markdown link references and footnotes are placed at the end of the document, the end of the section, or the end of the top-level block.
-   Added `--top-level-division=section|chapter|part` (Albert Krewinkel). This determines what a level-1 header corresponds to in LaTeX, ConTeXt, DocBook, and TEI output. The default is `section`. The `--chapters` option has been deprecated in favor of `--top-level-division=chapter`.
-   Added `LineBlock` constructor for `Block` (Albert Krewinkel). This is now used in parsing RST and Markdown line blocks, DocBook `linegroup`/`line` combinations, and Org-mode `VERSE` blocks. Previously `Para` blocks with hard linebreaks were used. `LineBlock`s are handled specially in the following ouput formats: AsciiDoc (as `[verse]` blocks), ConTeXt (`\startlines`/`\endlines`), HTML (`div` with a style), Markdown (line blocks if `line_blocks` is enabled), Org-mode (`VERSE` blocks), RST (line blocks). In other output formats, a paragraph with hard linebreaks is emitted.
-   Allow binary formats to be written to stdout (but not to tty) (#2677). Only works on posix, since we use the unix library to check whether output is to tty. On Windows, pandoc works as before and always requires an output file parameter for binary formats.
-   Changed JSON output format (Jesse Rosenthal). Previously we used generically generated JSON, but this was subject to change depending on the version of aeson pandoc was compiled with. To ensure stability, we switched to using manually written ToJSON and FromJSON instances, and encoding the API version. **Note:** pandoc filter libraries will need to be revised to handle the format change. Here is a summary of the essential changes:
  -   The toplevel JSON format is now `{""pandoc-api-version"" :   [MAJ, MIN, REV], ""meta"" : META, ""blocks"": BLOCKS}` instead of `[{""unMeta"": META}, [BLOCKS]]`. Decoding fails if the major and minor version numbers don't match.
  -   Leaf nodes no longer have an empty array for their ""c"" value. Thus, for example, a `Space` is encoded as `{""t"":""Space""}` rather than `{""t"":""Space"",""c"":[]}` as before.
-   Removed `tests/Tests/Arbitrary.hs` and added a `Text.Pandoc.Arbitrary` module to pandoc-types (Jesse Rosenthal). This makes it easier to use QuickCheck with pandoc types outside of pandoc itself.
-   Add `bracketed_spans` Markdown extension, enabled by default in pandoc `markdown`. This allows you to create a native span using this syntax: `[Here is my span]{#id .class key=""val""}`.
-   Added `angle_brackets_escapable` Markdown extension (#2846). This is needed because github flavored Markdown has a slightly different set of escapable symbols than original Markdown; it includes angle brackets.
-   Export `Text.Pandoc.Error` in `Text.Pandoc` [API change].
-   Print highlighting-kate version in `--version`.
-   `Text.Pandoc.Options`:
  -   `Extension` has new constructors `Ext_brackted_spans` and `Ext_angle_brackets_escapable` [API change].
  -   Added `ReferenceLocation` type [API change] (Jesse Rosenthal).
  -   Added `writerReferenceLocation` field to `WriterOptions` (Jesse Rosenthal).
-   `--filter`: we now check `$DATADIR/filters` for filters before looking in the path (#3127, Jesse Rosenthal, thanks to Jakob Voß for the idea). Filters placed in this directory need not be executable; if the extension is `.hs`, `.php`, `.pl`, `.js`, or `.rb`, pandoc will run the right interpreter.
-   For `--webtex`, replace deprecated Google Chart API by CodeCogs as default (Kolen Cheung).
-   Removed `raw_tex` extension from `markdown_mmd` defaults (Kolen Cheung).
-   Execute .js filters with node (Jakob Voß).
-   Textile reader:
  -   Support `bc..` extended code blocks (#3037). Also, remove trailing newline in code blocks (consistently with Markdown reader).
  -   Improve table parsing. We now handle cell and row attributes, mostly by skipping them. However, alignments are now handled properly. Since in pandoc alignment is per-column, not per-cell, we try to devine column alignments from cell alignments. Table captions are also now parsed, and textile indicators for thead and tfoot no longer cause parse failure. (However, a row designated as tfoot will just be a regular row in pandoc.)
  -   Improve definition list parsing. We now allow multiple terms (which we concatenate with linebreaks). An exponential parsing bug (#3020) is also fixed.
  -   Disallow empty URL in explicit link (#3036).
-   RST reader:
  -   Use Div instead of BlockQuote for admonitions (#3031). The Div has class `admonition` and (if relevant) one of the following: `attention`, `caution`, `danger`, `error`, `hint`, `important`, `note`, `tip`, `warning`. **Note:** This will change the rendering of some RST documents! The word (""Warning"", ""Attention"", etc.) is no longer added; that must be done with CSS or a filter.
  -   A Div is now used for `sidebar` as well.
  -   Skip whitespace before note (Jesse Rosenthal, #3163). RST requires a space before a footnote marker. We discard those spaces so that footnotes will be adjacent to the text that comes before it. This is in line with what rst2latex does.
  -   Allow empty lines when parsing line blocks (Albert Krewinkel).
-   Markdown reader:
  -   Allow empty lines when parsing line blocks (Albert Krewinkel).
  -   Allow attributes on autolinks (#3183, Daniele D'Orazio).
-   LaTeX reader:
  -   More robust parsing of unknown environments (#3026). We no longer fail on things like `^` inside options for tikz.
  -   Be more forgiving of non-standard characters, e.g. `^` outside of math. Some custom environments give these a meaning, so we should try not to fall over when we encounter them.
  -   Drop duplicate `*` in bibtexKeyChars (Albert Krewinkel)
-   MediaWiki reader:
  -   Fix for unquoted attribute values in mediawiki tables (#3053). Previously an unquoted attribute value in a table row could cause parsing problems.
  -   Improved treatment of verbatim constructions (#3055). Previously these yielded strings of alternating Code and Space elements; we now incorporate the spaces into the Code. Emphasis etc. is still possible inside these.
  -   Properly interpret XML tags in pre environments (#3042). They are meant to be interpreted as literal text.
-   EPUB reader: don't add root path to data: URIs (#3150). Thanks to @lep for the bug report and patch.
-   Org reader (Albert Krewinkel):
  -   Preserve indentation of verse lines (#3064). Leading spaces in verse lines are converted to non-breaking spaces, so indentation is preserved.
  -   Ensure image sources are proper links. Image sources as those in plain images, image links, or figures, must be proper URIs or relative file paths to be recognized as images. This restriction is now enforced for all image sources. This also fixes the reader's usage of uncleaned image sources, leading to `file:` prefixes not being deleted from figure images. Thanks to @bsag for noticing this bug.
  -   Trim verse lines properly (Albert Krewinkel).
  -   Extract meta parsing code to module. Parsing of meta-data is well separable from other block parsing tasks. Moving into new module to get small files and clearly arranged code.
  -   Read markup only for special meta keys. Most meta-keys should be read as normal string values, only a few are interpreted as marked-up text.
  -   Allow multiple, comma-separated authors. Multiple authors can be specified in the `#+AUTHOR` meta line if they are given as a comma-separated list.
  -   Give precedence to later meta lines. The last meta-line of any given type is the significant line. Previously the value of the first line was kept, even if more lines of the same type were encounterd.
  -   Read LaTeX_header as header-includes. LaTeX-specific header commands can be defined in `#+LaTeX_header` lines. They are parsed as format-specific inlines to ensure that they will only show up in LaTeX output.
  -   Set documentclass meta from LaTeX_class.
  -   Set classoption meta from LaTeX_class_options.
  -   Read HTML_head as header-includes. HTML-specific head content can be defined in `#+HTML_head` lines. They are parsed as format-specific inlines to ensure that they will only show up in HTML output.
  -   Respect `author` export option. The `author` option controls whether the author should be included in the final markup. Setting `#+OPTIONS: author:nil` will drop the author from the final meta-data output.
  -   Respect `email` export option. The `email` option controls whether the email meta-field should be included in the final markup. Setting `#+OPTIONS: email:nil` will drop the email field from the final meta-data output.
  -   Respect `creator` export option. The `creator` option controls whether the creator meta-field should be included in the final markup. Setting `#+OPTIONS: creator:nil` will drop the creator field from the final meta-data output. Org-mode recognizes the special value `comment` for this field, causing the creator to be included in a comment. This is difficult to translate to Pandoc internals and is hence interpreted the same as other truish values (i.e. the meta field is kept if it's present).
  -   Respect unnumbered header property (#3095). Sections the `unnumbered` property should, as the name implies, be excluded from the automatic numbering of section provided by some output formats. The Pandoc convention for this is to add an ""unnumbered"" class to the header. The reader treats properties as key-value pairs per default, so a special case is added to translate the above property to a class instead.
  -   Allow figure with empty caption (Albert Krewinkel, #3161). A `#+CAPTION` attribute before an image is enough to turn an image into a figure. This wasn't the case because the `parseFromString` function, which processes the caption value, would fail on empty values. Adding a newline character to the caption value fixes this.
-   Docx reader:
  -   Use XML convenience functions (Jesse Rosenthal). The functions `isElem` and `elemName` (defined in Docx/Util.hs) make the code a lot cleaner than the original XML.Light functions, but they had been used inconsistently. This puts them in wherever applicable.
  -   Handle anchor spans with content in headers. Previously, we would only be able to figure out internal links to a header in a docx if the anchor span was empty. We change that to read the inlines out of the first anchor span in a header.
  -   Let headers use exisiting id. Previously we always generated an id for headers (since they wouldn't bring one from Docx). Now we let it use an existing one if possible. This should allow us to recurs through anchor spans.
  -   Use all anchor spans for header ids. Previously we only used the first anchor span to affect header ids. This allows us to use all the anchor spans in a header, whether they're nested or not (#3088).
  -   Test for nested anchor spans in header. This ensures that anchor spans in header with content (or with other anchor spans inside) will resolve to links to a header id properly.
-   ODT reader (Hubert Plociniczak)
  -   Include list's starting value. Previously the starting value of the lists' items has been hardcoded to 1. In reality ODT's list style definition can provide a new starting value in one of its attributes.
  -   Infer caption from the text following the image. Frame can contain other frames with the text boxes.
  -   Add `fig:` to title for Image with a caption (as expected by pandoc's writers).
  -   Basic support for images in ODT documents.
  -   Don't duplicate text for anchors (#3143). When creating an anchor element we were adding its representation as well as the original content, leading to text duplication.
-   DocBook writer:
  -   Include an anchor element when a div or span has an id (#3102). Note that DocBook does not have a class attribute, but at least this provides an anchor for internal links.
-   LaTeX writer:
  -   Don't use * for unnumbered paragraph, subparagraph. The starred variants don't exist. This helps with part of #3058...it gets rid of the spurious `*`s. But we still have numbers on the 4th and 5th level headers.
  -   Properly escape backticks in verbatim (#3121, Jesse Rosenthal). Otherwise they can cause unintended ligatures like `?``.
  -   Handle NARRAOW NO-BREAK SPACE into LaTeX (Vaclav Zeman) as `\,`.
  -   Don't include `[htbp]` placement for figures (#3103, Václav Haisman). This allows figure placement defaults to be changed by the user in the template.
-   HTML writer (slide show formats): In slide shows, don't change slide title to level 1 header (#2221).
-   TEI writer: remove heuristic to detect book template (Albert Krewinkel). TEI doesn't have `<book>` elements but only generic `<divN>` division elements. Checking the template for a trailing `</book>` is nonsensical.
-   MediaWiki writer: transform filename with underscores in images (#3052). `foo bar.jpg` becomes `foo_bar.jpg`. This was already done for internal links, but it also needs to happen for images.
-   ICML writer: replace partial function (!!) in table handling (#3175, Mauro Bieg).
-   Man writer: allow section numbers that are not a single digit (#3089).
-   AsciiDoc writer: avoid unnecessary use of ""unconstrained"" emphasis (#3068). In AsciiDoc, you must use a special form of emphasis (double `__`) for intraword emphasis. Pandoc was previously using this more than necessary.
-   EPUB writer: use stringify instead of plain writer for metadata (#3066). This means that underscores won't be used for emphasis, or CAPS for bold. The metadata fields will just have unadorned text.
-   Docx Writer:
  -   Implement user-defined styles (Jesse Rosenthal). Divs and Spans with a `custom-style` key in the attributes will apply the corresponding key to the contained blocks or inlines.
  -   Add ReaderT env to the docx writer (Jesse Rosenthal).
  -   Clean up and streamline RTL behavior (Jesse Rosenthal, #3140). You can set `dir: rtl` in YAML metadata, or use `-M dir=rtl` on the command line. For finer-grained control, you can set the `dir` attribute in Div or Span elements.
-   Org writer (Albert Krewinkel):
  -   Remove blank line after figure caption. Org-mode only treats an image as a figure if it is directly preceded by a caption.
  -   Ensure blank line after figure. An Org-mode figure should be surrounded by blank lines. The figure would be recognized regardless, but images in the following line would unintentionally be treated as figures as well.
  -   Ensure link targets are paths or URLs. Org-mode treats links as document internal searches unless the link target looks like a URL or file path, either relative or absolute. This change ensures that this is always the case.
  -   Translate language identifiers. Pandoc and Org-mode use different programming language identifiers. An additional translation between those identifiers is added to avoid unexpected behavior. This fixes a problem where language specific source code would sometimes be output as example code.
  -   Drop space before footnote markers (Albert Krewinkel, #3162). The writer no longer adds an extra space before footnote markers.
-   Markdown writer:
  -   Don't emit HTML for tables unless `raw_html` extension is set (#3154). Emit `[TABLE]` if no suitable table formats are enabled and raw HTML is disabled.
  -   Check for the `raw_html` extension before emiting a raw HTML block.
  -   Abstract out note/ref function (Jesse Rosenthal).
  -   Add ReaderT monad for environment variables (Jesse Rosenthal).
-   HTML, EPUB, slidy, revealjs templates: Use `<p>` instead of `<h1>` for subtitle, author, date (#3119). Note that, as a result of this change, authors may need to update CSS.
-   revealjs template: Added `notes-server` option (jgm/pandoc-templates#212, Yoan Blanc).
-   Beamer template:
  -   Restore whitespace between paragraphs. This was a regression in the last release (jgm/pandoc-templates#207).
  -   Added `themeoptions` variable (Carsten Gips).
  -   Added `beamerarticle` variable. This causes the `beamerarticle` package to be loaded in beamer, to produce an article from beamer slides. (Carsten Gips)
  -   Added support for `fontfamilies` structured variable (Artem Klevtsov).
  -   Added hypersetup options (Jake Zimmerman).
-   LaTeX template:
  -   Added dummy definition for `\institute`. This isn't a standard command, and we want to avoid a crash when `institute` is used with the default template.
  -   Define default figure placement (Václav Haisman), since pandoc no longer includes `[htbp]` for figures. Users with custom templates will want to add this. See #3103.
  -   Use footnote package to fix notes in tables (jgm/pandoc-templates#208, Václav Haisman).
-   Moved template compiling/rendering code to a separate library. `doctemplates`. This allows the pandoc templating system to be used independently.
-   Text.Pandoc.Error: Fix out of index error in `handleError` (Matthew Pickering). The fix is to not try to show the exact line when it would cause an out-of-bounds error as a result of included files.
-   Text.Pandoc.Shared: Add `linesToBlock` function (Albert Krewinkel).
-   Text.Pandoc.Parsing.emailAddress: tighten up parsing of email addresses. Technically `**@user` is a valid email address, but if we allow things like this, we get bad results in markdown flavors that autolink raw email addresses (see #2940). So we exclude a few valid email addresses in order to avoid these more common bad cases.
-   Text.Pandoc.PDF: Don't crash with nonexistent image (#3100). Instead, emit the alt text, emphasized. This accords with what the ODT writer currently does. The user will still get a warning about a nonexistent image.
-   Fix example in API documentation (#3176, Thomas Weißschuh).
-   Tell where to get tarball in INSTALL (#3062).
-   Rename README to MANUAL.txt and add GitHub-friendly README.md (Albert Krewinkel, Kolen Cheung).
-   Replace COPYING with Markdown version COPYING.md from GNU (Kolen Cheung).
-   MANUAL.txt:
  -   Put note on structured vars in separate paragraph (#2148, Albert Krewinkel). Make it clearer that structured author variables require a custom template
  -   Note that `--katex` works best with `html5` (#3077).
  -   Fix the LaTeX and EPUB links in manual (Morton Fox).
  -   Document `biblio-title` variable.
-   Improve spacing of footnotes in `--help` output (Waldir Pimenta).
-   Update KaTeX to v0.6.0 (Kolen Cheung).
-   Allow latest dependencies.
-   Use texmath 0.8.6.6 (#3040).
-   Allow http-client 0.4.30, which is the version in stackage lts. Previously we required 0.5. Remove CPP conditionals for earlier versions.
-   Remove support for GHC &lt; 7.8 (Jesse Rosenthal).
  -   Remove Compat.Monoid.
  -   Remove an inline monad compatibility macro.
  -   Remove Text.Pandoc.Compat.Except.
  -   Remove directory compat.
  -   Change constraint on mtl.
  -   Remove unnecessary CPP condition in UTF8.
  -   Bump base lower bound to 4.7.
  -   Remove 7.6 build from .travis.yaml.
  -   Bump supported ghc version in CONTRIBUTING.md.
  -   Add note about GHC version support to INSTALL.
  -   Remove GHC 7.6 from list of tested versions (Albert Krewinkel).
  -   Remove TagSoup compat.
  -   Add EOL note to time compat module. Because time 1.4 is a boot library for GHC 7.8, we will support the compatibility module as long as we support 7.8. But we should be clear about when we will no longer need it.
  -   Remove blaze-html CPP conditional.
  -   Remove unnecessary CPP in custom Prelude.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/4494678/assets,https://api.github.com/repos/jgm/pandoc/releases/4494678,master,https://api.github.com/repos/jgm/pandoc/tarball/1.18,https://github.com/jgm/pandoc/releases/tag/1.18,https://api.github.com/repos/jgm/pandoc/zipball/1.18,1.18,False,False
3676212,2016-07-17T16:27:16Z,2016-07-17T16:32:14Z,pandoc 1.17.2,"-   Added Zim Wiki writer, template and tests. `zimwiki` is now a valid output format. (Alex Ivkin)
-   Changed email-obfuscation default to no obfuscation (#2988).
  -   `writerEmailObfuscation` in `defaultWriterOptions` is now `NoObfuscation`.
  -   the default for the command-line `--email-obfuscation` option is now `none`.
-   Docbook writer: Declare xlink namespace in Docbook5 output (Ivo Clarysse).
-   Org writer:
  -   Support arbitrary raw inlines (Albert Krewinkel). Org mode allows arbitrary raw inlines (""export snippets"" in Emacs parlance) to be included as `@@format:raw foreign format text@@`.
  -   Improve Div handling (Albert Krewinkel). Div blocks handling is changed to make the output look more like idiomatic org mode:
    -   Div-wrapped content is output as-is if the div's attribute is the null attribute.
    -   Div containers with an id but neither classes nor key-value pairs are unwrapped and the id is added as an anchor.
    -   Divs with classes associated with greater block elements are wrapped in a `#+BEGIN`...`#+END` block.
    -   The old behavior for Divs with more complex attributes is kept.
-   HTML writer: Better support for raw LaTeX environments (#2758). Previously we just passed all raw TeX through when MathJax was used for HTML math. This passed through too much. With this patch, only raw LaTeX environments that MathJax can handle get passed through. This patch also causes raw LaTeX environments to be treated as math, when possible, with MathML and WebTeX output.
-   Markdown writer: use raw HTML for simple, pipe tables with linebreaks (#2993). Markdown line breaks involve a newline, and simple and pipe tables can't contain one.
-   Make --webtex work with the Markdown writer (#1177). This is a convenient option for people using websites whose Markdown flavors don't provide for math.
-   Docx writer:
  -   Set paragraph to FirstPara after display math (Jesse Rosenthal). We treat display math like block quotes, and apply FirstParagraph style to paragraphs that follow them. These can be styled as the user wishes. (But, when the user is using indentation, this allows for paragraphs to continue after display math without indentation.)
  -   Use actual creation time as doc prop (Jesse Rosenthal). Previously, we had used the user-supplied date, if available, for Word's document creation metadata. This could lead to weird results, as in cases where the user post-dates a document (so the modification might be prior to the creation). Here we use the actual computer time to set the document creation.
-   LaTeX writer:
  -   Don't URI-escape image source (#2825). Usually this is a local file, and replacing spaces with `%20` ruins things.
  -   Allow 'standout' as a beamer frame option (#3007). `## Slide title {.standout}`.
-   RST reader: Fixed links with no explicit link text. The link ``<foo>`_` should have `foo` as both its link text and its URL. See RST spec at http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#embedded-uris-and-aliases Closes Debian #828167 -- reported by Christian Heller.
-   Textile reader:
  -   Fixed attributes (#2984). Attributes can't be followed by a space. So, `_(class)emph_` but `_(noclass) emph_`.
  -   Fixed exponential parsing bug (#3020).
  -   Fix overly aggressive interpretation as images (#2998). Spaces are not allowed in the image URL in textile.
-   LaTeX reader:
  -   Fix `\cite` so it is a NormalCitation not AuthorInText.
  -   Strip off double quotes around image source if present (#2825). Avoids interpreting these as part of the literal filename.
-   Org reader:
  -   Add semicolon to list of special chars (Albert Krewinkel) Semicolons are used as special characters in citations syntax. This ensures the correct parsing of Pandoc-style citations: `[prefix; @key;   suffix]`. Previously, parsing would have failed unless there was a space or other special character as the last <prefix> character.
  -   Add support for ""Berkeley-style"" cites (Albert Krewinkel, #1978). A specification for an official Org-mode citation syntax was drafted by Richard Lawrence and enhanced with the help of others on the orgmode mailing list. Basic support for this citation style is added to the reader.
  -   Support arbitrary raw inlines (Albert Krewinkel). Org mode allows arbitrary raw inlines (""export snippets"" in Emacs parlance) to be included as `@@format:raw foreign format text@@`.
  -   Remove partial functions (Albert Krewinkel, #2991). Partial functions like `head` lead to avoidable errors and should be avoided. They are replaced with total functions.
  -   Support figure labels (Albert Krewinkel, #2496, #2999). Figure labels given as `#+LABEL: thelabel` are used as the ID of the respective image. This allows e.g. the LaTeX to add proper `\label` markup.
  -   Improve tag and properties type safety (Albert Krewinkel). Specific newtype definitions are used to replace stringly typing of tags and properties. Type safety is increased while readability is improved.
  -   Parse as headlines, convert to blocks (Albert Krewinkel). Emacs org-mode is based on outline-mode, which treats documents as trees with headlines are nodes. The reader is refactored to parse into a similar tree structure. This simplifies transformations acting on document (sub-)trees.
  -   Refactor comment tree handling (Albert Krewinkel). Comment trees were handled after parsing, as pattern matching on lists is easier than matching on sequences. The new method of reading documents as trees allows for more elegant subtree removal.
  -   Support archived trees export options (Albert Krewinkel). Handling of archived trees can be modified using the `arch` option. Archived trees are either dropped, exported completely, or collapsed to include just the header when the `arch` option is nil, non-nil, or `headline`, respectively.
  -   Put export setting parser into module (Albert Krewinkel). Export option parsing is distinct enough from general block parsing to justify putting it into a separate module.
  -   Support headline levels export setting (Albert Krewinkel). The depths of headlines can be modified using the `H` option. Deeper headlines will be converted to lists.
  -   Replace ugly code with view pattern (Albert Krewinkel). Some less-than-smart code required a pragma switching of overlapping pattern warnings in order to compile seamlessly. Using view patterns makes the code easier to read and also doesn't require overlapping pattern checks to be disabled.
  -   Fix parsing of verbatim inlines (Albert Krewinkel, #3016). Org rules for allowed characters before or after markup chars were not checked for verbatim text. This resultet in wrong parsing outcomes of if the verbatim text contained e.g. space enclosed markup characters as part of the text (`=is_substr = True=`). Forcing the parser to update the positions of allowed/forbidden markup border characters fixes this.
-   LaTeX template: fix for obscure hyperref/xelatex issue. Here's a minimal case:
  
  ```
  \documentclass[]{article}
  \usepackage{hyperref}
  \begin{document}
  \section{\%á}
  \end{document}
  ```
  
  Without this change, this fails on the second invocation of xelatex. This affects inputs this like `# %á` with pdf output via xelatex.
-   trypandoc: call results 'html' instead of 'result'. This is for better compatibility with babelmark2.
-   Document MultiMarkdown as input/output format (Albert Krewinkel, #2973). MultiMarkdown was only mentioned as a supported Markdown dialect but not as a possible input or output format. A brief mention is added everywhere the other supported markdown dialects are mentioned.
-   Document Org mode as a format containing raw HTML (Albert Krewinkel) Raw HTML is kept when the output format is Emacs Org mode.
-   Implement `RawInline` and `RawBlock` in sample lua custom writer (#2985).
-   Text.Pandoc.Shared:
  -   Introduce blocksToInlines function (Jesse Rosenthal). This is a lossy function for converting `[Block] -> [Inline]`. Its main use, at the moment, is for docx comments, which can contain arbitrary blocks (except for footnotes), but which will be converted to spans. This is, at the moment, pretty useless for everything but the basic `Para` and `Plain` comments. It can be improved, but the docx reader should probably emit a warning if the comment contains more than this.
  -   Add BlockQuote to blocksToInlines (Jesse Rosenthal).
  -   Add further formats for `normalizeDate` (Jesse Rosenthal). We want to avoid illegal dates -- in particular years with greater than four digits. We attempt to parse series of digits first as `%Y%m%d`, then `%Y%m`, and finally `%Y`.
  -   `normalizeDate` should reject illegal years (Jesse Rosenthal). We only allow years between 1601 and 9999, inclusive. The ISO 8601 actually says that years are supposed to start with 1583, but MS Word only allows 1601-9999. This should stop corrupted word files if the date is out of that range, or is parsed incorrectly.
  -   Improve year sanity check in normalizeDate (Jesse Rosenthal). Previously we parsed a list of dates, took the first one, and then tested its year range. That meant that if the first one failed, we returned nothing, regardless of what the others did. Now we test for sanity before running `msum` over the list of Maybe values. Anything failing the test will be Nothing, so will not be a candidate.
-   Docx reader:
  -   Add simple comment functionality. (Jesse Rosenthal). This adds simple track-changes comment parsing to the docx reader. It is turned on with `--track-changes=all`. All comments are converted to inlines, which can list some information. In the future a warning will be added for comments with formatting that seems like it will be excessively denatured. Note that comments can extend across blocks. For that reason there are two spans: `comment-start` and `comment-end`. `comment-start` will contain the comment. `comment-end` will always be empty. The two will be associated by a numeric id.
  -   Enable warnings in top-level reader (Jesse Rosenthal). Previously we had only allowed for warnings in the parser. Now we allow for them in the `Docx.hs` as well. The warnings are simply concatenated.
  -   Add warning for advanced comment formatting. (Jesse Rosenthal). We can't guarantee we'll convert every comment correctly, though we'll do the best we can. This warns if the comment includes something other than Para or Plain.
  -   Add tests for warnings. (Jesse Rosenthal).
  -   Add tests for comments (Jesse Rosenthal). We test for comments, using all track-changes options. Note that we should only output comments if `--track-changes=all`. We also test for emitting warnings if there is complicated formatting.
-   README: update to include track-changes comments. (Jesse Rosenthal)
-   Improved Windows installer - don't ignore properties set on command-line. See #2708. Needs testing to see if this resolves the issue. Thanks to @nkalvi.
-   Process markdown extensions on command line in L-&gt;R order (#2995). Previously they were processed, very unintuitively, in R-&gt;L order, so that `markdown-tex_math_dollars+tex_math_dollars` had `tex_math_dollars` disabled.
-   Added `secnumdepth` variable to LaTeX template (#2920).
-   Include table of contents in README.html in Windows package.
-   Writers: treat SoftBreak as space for stripping (Jesse Rosenthal) In Writers.Shared, we strip leading and trailing spaces for display math. Since SoftBreak's are treated as spaces, we should strip those too.
-   beamer, latex templates: pass biblatexoptions directly in package load. This allows runtime optinos to be used. Fixes jgm/pandoc-citeproc#201
-   CPP workaround for deprecation of `parseUrl` in http-client.
-   Removed some redundant class constraints.
-   make_oxs_package.sh - use OSX env variable.
-   Added `winpkg` target to Makefile. This downloads the windows package from appveyor and signs it using the key.
-   Document Org mode as a format containing raw TeX (Albert Krewinkel). Raw TeX is kept verbatim when the output format is Emacs Org mode.
-   Support math with haddock-library &gt;= 1.4.
-   Removed `-rtsopts` from library stanza. It has no effect, and Hackage wouldn't accept the package.
-   Update library dependency versions.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/3676212/assets,https://api.github.com/repos/jgm/pandoc/releases/3676212,master,https://api.github.com/repos/jgm/pandoc/tarball/1.17.2,https://github.com/jgm/pandoc/releases/tag/1.17.2,https://api.github.com/repos/jgm/pandoc/zipball/1.17.2,1.17.2,False,False
3374709,2016-06-04T21:02:57Z,2016-06-04T22:29:48Z,pandoc 1.17.1,"-   New output format: `docbook5` (Ivo Clarysse).
-   `Text.Pandoc.Options`: Add `writerDocBook5` to `WriterOptions` (API change).
-   Org writer:
  -   Add :PROPERTIES: drawer support (Albert Krewinkel, #1962). This allows header attributes to be added to org documents in the form of `:PROPERTIES:` drawers. All available attributes are stored as key/value pairs. This reflects the way the org reader handles `:PROPERTIES:` blocks.
  -   Add drawer capability (Carlos Sosa). For the implementation of the Drawer element in the Org Writer, we make use of a generic Block container with attributes. The presence of a `drawer` class defines that the `Div` constructor is a drawer. The first class defines the drawer name to use. The key-value list in the attributes defines the keys to add inside the Drawer. Lastly, the list of Block elements contains miscellaneous blocks elements to add inside of the Drawer.
  -   Use `CUSTOM_ID` in properties (Albert Krewinkel). The `ID` property is reserved for internal use by Org-mode and should not be used. The `CUSTOM_ID` property is to be used instead, it is converted to the `ID` property for certain export format.
-   LaTeX writer:
  -   Ignore `--incremental` unless output format is beamer (#2843).
  -   Fix polyglossia to babel env mapping (Mauro Bieg, #2728). Allow for optional argument in square brackets.
  -   Recognize `la-x-classic` as Classical Latin (Andrew Dunning). This allows one to access the hyphenation patterns in CTAN's hyph-utf8.
  -   Add missing languages from hyph-utf8 (Andrew Dunning).
  -   Improve use of `\strut` with `\minipage` inside tables (Jose Luis Duran). This improves spacing in multiline tables.
  -   Use `{}` around options containing special chars (#2892).
  -   Avoid lazy `foldl`.
  -   Don't escape underscore in labels (#2921). Previously they were escaped as `ux5f`.
  -   brazilian -&gt; brazil for polyglossia (#2953).
-   HTML writer: Ensure mathjax link is added when math appears in footnote (#2881). Previously if a document only had math in a footnote, the MathJax link would not be added.
-   EPUB writer: set `navpage` variable on nav page. This allows templates to treat it differently.
-   DocBook writer:
  -   Use docbook5 if `writerDocbook5` is set (Ivo Clarysse).
  -   Properly handle `ulink`/`link` (Ivo Clarysse).
-   EPUB reader:
  -   Unescape URIs in spine (#2924).
  -   EPUB reader: normalise link id (Mauro Bieg).
-   Docx Reader:
  -   Parse `moveTo` and `moveFrom` (Jesse Rosenthal). `moveTo` and `moveFrom` are track-changes tags that are used when a block of text is moved in the document. We now recognize these tags and treat them the same as `insert` and `delete`, respectively. So, `--track-changes=accept` will show the moved version, while `--track-changes=reject` will show the original version.
  -   Tests for track-changes moving (Jesse Rosenthal).
-   ODT, EPUB, Docx readers: throw `PandocError` on unzip failure (Jesse Rosenthal) Previously, `readDocx`, `readEPUB`, and `readOdt` would error out if zip-archive failed. We change the archive extraction step from `toArchive` to `toArchiveOrFail`, which returns an Either value.
-   Markdown, HTML readers: be more forgiving about unescaped `&` in HTML (#2410). We are now more forgiving about parsing invalid HTML with unescaped `&` as raw HTML. (Previously any unescaped `&` would cause pandoc not to recognize the string as raw HTML.)
-   Markdown reader:
  -   Fix pandoc title blocks with lines ending in 2 spaces (#2799).
  -   Added `-s` to markdown-reader-more test.
-   HTML reader: fixed bug in `pClose`. This caused exponential parsing behavior in documnets with unclosed tags in `dl`, `dd`, `dt`.
-   MediaWiki reader: Allow spaces before `!` in MediaWiki table header (roblabla).
-   RST reader: Support `:class:` option for code block in RST reader (Sidharth Kapur).
-   Org reader (all Albert Krewinkel, except where noted otherwise):
  -   Stop padding short table rows. Emacs Org-mode doesn't add any padding to table rows. The first row (header or first body row) is used to determine the column count, no other magic is performed.
  -   Refactor rows-to-table conversion. This refactors the codes conversing a list table lines to an org table ADT. The old code was simplified and is now slightly less ugly.
  -   Fix handling of empty table cells, rows (Albert Krewinkel, #2616). This fixes Org mode parsing of some corner cases regarding empty cells and rows. Empty cells weren't parsed correctly, e.g. `|||` should be two empty cells, but would be parsed as a single cell containing a pipe character. Empty rows where parsed as alignment rows and dropped from the output.
  -   Fix spacing after LaTeX-style symbols. The org-reader was droping space after unescaped LaTeX-style symbol commands: `\ForAll \Auml` resulted in `∀Ä` but should give `∀ Ä` instead. This seems to be because the LaTeX-reader treats the command-terminating space as part of the command. Dropping the trailing space from the symbol-command fixes this issue.
  -   Print empty table rows. Empty table rows should not be dropped from the output, so row-height is always set to be at least 1.
  -   Move parser state into separate module. The org reader code has become large and confusing. Extracting smaller parts into submodules should help to clean things up.
  -   Add support for sub/superscript export options. Org-mode allows to specify export settings via `#+OPTIONS` lines. Disabling simple sub- and superscripts is one of these export options, this options is now supported.
  -   Support special strings export option Parsing of special strings (like `...` as ellipsis or `--` as en dash) can be toggled using the `-` option.
  -   Support emphasized text export option. Parsing of emphasized text can be toggled using the `*` option. This influences parsing of text marked as emphasized, strong, strikeout, and underline. Parsing of inline math, code, and verbatim text is not affected by this option.
  -   Support smart quotes export option. Reading of smart quotes can be toggled using the `'` option.
  -   Parse but ignore export options. All known export options are parsed but ignored.
  -   Refactor block attribute handling. A parser state attribute was used to keep track of block attributes defined in meta-lines. Global state is undesirable, so block attributes are no longer saved as part of the parser state. Old functions and the respective part of the parser state are removed.
  -   Use custom `anyLine`. Additional state changes need to be made after a newline is parsed, otherwise markup may not be recognized correctly. This fixes a bug where markup after certain block-types would not be recognized.
  -   Add support for `ATTR_HTML` attributes (#1906). Arbitrary key-value pairs can be added to some block types using a `#+ATTR_HTML` line before the block. Emacs Org-mode only includes these when exporting to HTML, but since we cannot make this distinction here, the attributes are always added. The functionality is now supported for figures.
  -   Add `:PROPERTIES:` drawer support (#1877). Headers can have optional `:PROPERTIES:` drawers associated with them. These drawers contain key/value pairs like the header's `id`. The reader adds all listed pairs to the header's attributes; `id` and `class` attributes are handled specially to match the way `Attr` are defined. This also changes behavior of how drawers of unknown type are handled. Instead of including all unknown drawers, those are not read/exported, thereby matching current Emacs behavior.
  -   Use `CUSTOM_ID` in properties. See above on Org writer changes.
  -   Respect drawer export setting. The `d` export option can be used to control which drawers are exported and which are discarded. Basic support for this option is added here.
  -   Ignore leading space in org code blocks (Emanuel Evans, #2862). Also fix up tab handling for leading whitespace in code blocks.
  -   Support new syntax for export blocks. Org-mode version 9 uses a new syntax for export blocks. Instead of `#+BEGIN_<FORMAT>`, where `<FORMAT>` is the format of the block's content, the new format uses `#+BEGIN_export <FORMAT>` instead. Both types are supported.
  -   Refactor `BEGIN...END` block parsing.
  -   Fix handling of whitespace in blocks, allowing content to be indented less then the block header.
  -   Support org-ref style citations. The _org-ref_ package is an org-mode extension commonly used to manage citations in org documents. Basic support for the `cite:citeKey` and `[[cite:citeKey][prefix text::suffix text]]` syntax is added.
  -   Split code into separate modules, making for cleaner code and better decoupling.
-   Added `docbook5` template.
-   `--mathjax` improvements:
  -   Use new CommonHTML output for MathJax (updated default MathJax URL, #2858).
  -   Change default mathjax setup to use `TeX-AMS_CHTML` configuration. This is designed for cases where the input is always TeX and maximal conformity with TeX is desired. It seems to be smaller and load faster than what we used before. See #2858.
  -   Load the full MathJax config to maximize loading speed (KolenCheung).
-   Bumped upper version bounds to allow use of latest packages and compilation with ghc 8.
-   Require texmath 0.8.6.2. Closes several texmath-related bugs (#2775, #2310, #2310, #2824). This fixes behavior of roots, e.g. `\sqrt[3]{x}`, and issues with sub/superscript positioning and matrix column alignment in docx.
-   README:
  -   Clarified documentation of `implicit_header_references` (#2904).
  -   Improved documentation of `--columns` option.
-   Added appveyor setup, with artefacts (Jan Schulz).
-   stack.yaml versions: Use proper flags used for texmath, pandoc-citeproc.
-   LaTeX template: support for custom font families (vladipus). Needed for correct polyglossia operation with Cyrillic fonts and perhaps can find some other usages. Example usage in YAML metadata:
  
  ```
    fontfamilies:
    - name: \cyrillicfont
      font: Liberation Serif
    - name: \cyrillicfonttt
      options: Scale=MatchLowercase
      font: Liberation
  ```
-   Create unsigned msi as build artifact in appveyor build.
-   On travis, test with ghc 8.0.1; drop testing for ghc 7.4.1.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/3374709/assets,https://api.github.com/repos/jgm/pandoc/releases/3374709,master,https://api.github.com/repos/jgm/pandoc/tarball/1.17.1,https://github.com/jgm/pandoc/releases/tag/1.17.1,https://api.github.com/repos/jgm/pandoc/zipball/1.17.1,1.17.1,False,False
2873485,2016-03-23T00:20:39Z,2016-03-23T15:36:33Z,pandoc 1.17.0.2,"- Fixed serious regression in `htmlInBalanced`, which caused newlines to be omitted in some raw HTML blocks in Markdown (#2804).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/2873485/assets,https://api.github.com/repos/jgm/pandoc/releases/2873485,master,https://api.github.com/repos/jgm/pandoc/tarball/1.17.0.2,https://github.com/jgm/pandoc/releases/tag/1.17.0.2,https://api.github.com/repos/jgm/pandoc/zipball/1.17.0.2,1.17.0.2,False,False
2859563,2016-03-21T22:39:57Z,2016-03-22T01:45:54Z,pandoc 1.17.0.1,"-   File scope is no longer used when there are no input files (i.e., when input comes from stdin). Previously file scope was triggered when the `json` reader was specified and input came from `stdin`, and this caused no output to be produced. (Fix due to Jesse Rosenthal; thanks to Fedor Sheremetyev for calling the bug to our attention.)
-   Improved documentation of templates (#2797).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/2859563/assets,https://api.github.com/repos/jgm/pandoc/releases/2859563,master,https://api.github.com/repos/jgm/pandoc/tarball/1.17.0.1,https://github.com/jgm/pandoc/releases/tag/1.17.0.1,https://api.github.com/repos/jgm/pandoc/zipball/1.17.0.1,1.17.0.1,False,False
2849898,2016-03-20T16:01:52Z,2016-03-20T16:47:05Z,pandoc 1.17,"-   Added `--file-scope` option (Jesse Rosenthal).  By default pandoc operates on multiple files by first concatenating them (around extra line breaks) and then processing the joined file. So  it only parses a multi-file document at the document scope. This has the benefit that footnotes and links can be in different files, but for some purposes it is useful to parse the individual files first and then combine their outputs (e.g. when the files use footnotes or links with the same labels).  The `--file-scope` option causes pandoc to parse the files first, and then combine the parsed output, instead of combining before parsing. `--file-scope` is selected automatically for binary input files (which cannot be concatenated) and for pandoc json.
-   Add TEI Writer (Chris Forster) and `tei` output format.
-   Added a general `ByteStringReader` with warnings, used by the docx reader (API change, Jesse Rosenthal).
-   Add `readDocxWithWarnings` (API change, Jesse Rosenthal).
-   Changed type of `Shared.uniqueIdent`'s argument from `[String]` to `Set String`. This avoids performance problems in documents with many identically named headers (API change, #2671).
-   Removed `tex_math_single_backslash` from `markdown_github` options (#2707).
-   Make language extensions as well as full language names trigger syntax highlighting. For example, `py` will now work as well as `python` (jgm/highlighting-kate#83).
-   Added `institute` variable to latex, beamer templates (Fraser Tweedale, Josef Svenningsson).
-   Docx reader (Jesse Rosenthal):
  -   Handle alternate content. Some word functions (especially graphics) give various choices for content so there can be backwards compatibility.
  -   Don't turn numbered headers into lists.
  -   Docx Reader: Add state to the parser, for warnings
  -   Update feature checklist in source code.
  -   Get rid of `Modifiable` typeclass.
  -   Add tests for adjacent hyperlinks.
  -   Add a ""Link"" modifier to `Reducible`. We want to make sure that links have their spaces removed, and are appropriately smushed together (#2689).
-   HTML reader:
  -   Fixed behavior of base tag (#2777). If the base path does not end with slash, the last component will be replaced. E.g. base = `http://example.com/foo` combines with `bar.html` to give `http://example.com/bar.html`. If the href begins with a slash, the whole path of the base is replaced. E.g. base = `http://example.com/foo/` combines with `/bar.html` to give `http://example.com/bar.html`.
  -   Rewrote `htmlInBalanced`. This version avoids an exponential performance problem with `<script>` tags, and it should be faster in general (#2730).
  -   Properly handle an empty cell in a simple table (#2718).
  -   Handle multiple `<meta>` tags with same name. Put them in a list in the metadata so they are all preserved, rather than (as before) throwing out all but one..
-   Markdown reader:
  -   Improved pipe table parsing (#2765).
  -   Allow `+` separators in pipe table cells. We already allowed them in the header, but not in the body rows, for some reason. This gives compatibility with org-mode tables.
  -   Don't cross line boundary parsing pipe table row. Previously an Emph element could be parsed across the newline at the end of the pipe table row.
  -   Use `htmlInBalanced` for `rawVerbatimBlock`, for better performance (#2730).
  -   Fixed bug with smart quotes around tex math.
-   LaTeX reader:
  -   Handle interior `$` characters in math (#2743). For example, `$$\hbox{$i$}$$`.
  -   `inlineCommand` now gobbles an empty `{}` after any command (#2687). This gives better results when people write e.g. `\TeX{}` in Markdown.
  -   Properly handle LaTeX ""math"" environment as inline math (#2171).
-   Textile reader: Support `>`, `<`, `=`, `<>` text alignment attributes. Closes #2674.
-   Org reader (Albert Krewinkel):
  -   Prefix even empty figure names with ""fig:"" (#2643). The convention used by pandoc for figures is to mark them by prefixing the name with `fig:`. The org reader failed to do this if a figure had no name.
  -   Refactor link-target processing (#2684).
-   ConTeXt writer: Fix whitespace at line beginning in line blocks (#2744). Thanks to @c-foster.
-   HTML writer: Don't include alignment attribute for default table columns. Previously these were given ""left"" alignment. Better to leave off alignment attributes altogether (#2694).
-   Markdown writer: Use hyphens for YAML metadata block bottom line, for better compatibility with other Markdown flavors (Henrik Tramberend).
-   LaTeX writer:
  -   Use image identifier to create a label and hypertarget for figures (Mauro Bieg).
  -   Avoid double toprule in headerless table with caption (#2742).
  -   Clean up options parser (Jesse Rosenthal).
  -   Treat `memoir` template with `article` option as article, instead of treating all `memoir` templates as books.
  -   Allow more flexible table alignment (Henrik Tramberend, #2665). New default is not to include `[c]` option (which is the default anyway if no positioning is specified). Now LaTeX emplates can control the overall table alignment in a document by setting the longtable length variables `LTleft` and `LTright`. For example, `\setlength\LTleft\parindent\setlength\LTright\fill` will create left-aligned tables that respect paragraph indentation.
-   Docx writer: Handle image alt text (#2754, Mauro Bieg).
-   Org writer - pass through RawInline with format ""org"".
-   DokuWiki writer: use `$$` for display math.
-   Custom writer: Pass attributes parameter to CaptionedImage (#2697).
-   Make protocol-relative URIs work again (#2737).
-   make_osx_package.sh: Use env variable for developer id certs.
-   Raise `tagsoup` lower bound to 0.13.7 to fix entity-related problems (#2734).
-   Allow `zip-archive` 0.3.
-   Allow `aeson` 0.11.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/2849898/assets,https://api.github.com/repos/jgm/pandoc/releases/2849898,master,https://api.github.com/repos/jgm/pandoc/tarball/1.17,https://github.com/jgm/pandoc/releases/tag/1.17,https://api.github.com/repos/jgm/pandoc/zipball/1.17,1.17,False,False
2424764,2016-01-13T18:36:02Z,2016-01-14T05:07:36Z,pandoc 1.16.0.2,"-   Depend on deepseq rather than deepseq-generics (fpco/stackage#1096).
-   Fixed regression in latex smart quote parsing (#2645). In cases where a match was not found for a quote, everything from the open quote to the end of the paragraph was being dropped.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/2424764/assets,https://api.github.com/repos/jgm/pandoc/releases/2424764,master,https://api.github.com/repos/jgm/pandoc/tarball/1.16.0.2,https://github.com/jgm/pandoc/releases/tag/1.16.0.2,https://api.github.com/repos/jgm/pandoc/zipball/1.16.0.2,1.16.0.2,False,False
2402646,2016-01-11T00:48:47Z,2016-01-11T01:54:53Z,pandoc 1.16.0.1,"-   Fixed regression with `--latex-engine` (#2618). In 1.16 `--latex-engine` raises an error if a full path is given.
-   Org reader: Fix function dropping subtrees tagged `:noexport` (Albert Krewinkel, #2628):
-   Markdown reader: renormalize table column widths if they exceed 100% (#2626).
-   Textile reader: don't allow block HTML tags in inline contexts. The reader previously did allow this, following redcloth, which happily parses
  
  ```
  Html blocks can be <div>inlined</div> as well.
  ```
  
  as
  
  ```
  <p>Html blocks can be <div>inlined</div> as well.</p>
  ```
  
  This is invalid HTML. The above sample now produces;
  
  ```
  <p>Html blocks can be</p>
  <div>
  <p>inlined</p>
  </div>
  <p>as well.</p>
  ```
-   Improved default template lookup for custom lua scripts (#2625). Previously, if you tried to do `pandoc -s -t /path/to/lua/script.lua`, pandoc would look for the template in `~/.pandoc/templates/default./path/to/lua/script.lua`. With this change it will look in the more reasonable `~/.pandoc/templates/default.script.lua`. This makes it possible to store default templates for custom writers.
-   RST, Markdown writers: Fixed rendering of grid tables with blank rows (#2615).
-   LaTeX writer: restore old treatment of Span (#2624). A Span is now rendered with surrounding `{}`, as it was before 1.16.
-   Entity handling fixes: improved handling of entities like `&lang;` that require a trailing semicolon. Allow uppercase `x` in numerical hexidecimal character references, working around a tagsoup bug.
-   `stack.yaml` - use lts-4.0, but with older aeson to avoid excessive memory use on compile. With aeson 0.10 we were getting an out of memory error on a 2GB Ubuntu 64-bit VM.
-   Improved deb package creation script. Made `DPKGVER` work. Renamed `COMMIT` to `TREE`. You should now be able to do `TREE=1.16.0.1 DPKGVER=2 make deb`.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/2402646/assets,https://api.github.com/repos/jgm/pandoc/releases/2402646,master,https://api.github.com/repos/jgm/pandoc/tarball/1.16.0.1,https://github.com/jgm/pandoc/releases/tag/1.16.0.1,https://api.github.com/repos/jgm/pandoc/zipball/1.16.0.1,1.16.0.1,False,False
2364416,2016-01-02T23:54:23Z,2016-01-03T05:59:37Z,pandoc 1.16,"pandoc (1.16)
-   Added `Attr` field to `Link` and `Image` (Mauro Bieg, #261, API change).
  -   Added syntax for link and image attributes to pandoc's Markdown.
  -   Updated readers and writers to use link and image attributes when appropriate.
  -   Support image attributes in Docx, Textile, RST readers.
-   Renamed link attribute extensions. The old `link_attributes` is now `mmd_link_attributes`, and `link_attributes` now enables the new pandoc-style link and image attributes (API change). Note: this change could break some existing workflows.
-   Implemented `SoftBreak` and new `--wrap` option (#1701, API change). Added threefold wrapping option.
  -   Command line option: deprecated `--no-wrap`, added `--wrap=[auto|none|preserve]`
  -   Added `WrapOption`, exported from `Text.Pandoc.Options`
  -   Changed type of `writerWrapText` in `WriterOptions` from `Bool` to `WrapOption`.
  -   Modified `Text.Pandoc.Shared` functions to allow `SoftBreak`.
  -   Supported `SoftBreak` in readers and writers.
-   Text.Pandoc.Options: Added `writerDpi` to `WriterOptions` (API change, Mauro Bieg).
-   Added `--dpi` command-line option (Mauro Bieg).
-   Rationalized behavior of `--no-tex-ligatures` and `--smart` (#2541). This change makes `--no-tex-ligatures` affect the LaTeX reader as well as the LaTeX and ConTeXt writers. If it is used, the LaTeX reader will parse characters ```, `'`, and `-` literally, rather than parsing ligatures for quotation marks and dashes. And the LaTeX writer will print unicode quotation mark and dash characters literally, rather than converting them to the standard ASCII ligatures. Note that `--smart` has no effect on the LaTeX reader. `--smart` is still the default for all input formats when LaTeX or ConTeXt is the output format, _unless_ `--no-tex-ligatures` is used.
  
  Some examples to illustrate the logic:
  
  ```
  % echo ""'hi'"" | pandoc -t latex
  `hi'
  % echo ""'hi'"" | pandoc -t latex --no-tex-ligatures
  'hi'
  % echo ""'hi'"" | pandoc -t latex --no-tex-ligatures --smart
  ‘hi’
  % echo ""'hi'"" | pandoc -f latex --no-tex-ligatures
  <p>'hi'</p>
  % echo ""'hi'"" | pandoc -f latex
  <p>’hi’</p>
  ```
-   Removed deprecated options `--offline` and `--html5`.
-   Fixed language code for Czech (`cs` not `cz`) (#2597).
-   Implemented `east_asian_line_breaks` extension (#2586). In `Text.Pandoc.Options`, added `Ext_east_asian_line_breaks` constructor to `Extension` (API change). This extension is like `ignore_line_breaks`, but smarter -- it only ignores line breaks between two East Asian wide characters. This makes it better suited for writing with a mix of East Asian and non-East Asian scripts.
-   Added support for PDF creation via `wkhtmltopdf`. To use this: `pandoc -t html5 -o result.pdf` (and add `--mathjax` if you have math.) Margins can be set using the variables `margin-top`, `margin-bottom`, `margin-left`, `margin-right`. Other styling can be done through CSS.
-   Fixed cite key parsing regression (jgm/pandoc-citeproc#201). We were capturing final colons as in `[@foo: bar]`; the citation id was being parsed as `@foo:`.
-   ICML writer:
  -   Fixed image syntax for local files (#2589).
  -   Changed type of `writeICML` (Mauro Bieg). API change: It is now `WriterOptions -> Pandoc -> IO String`. Also handle new image attributes.
  -   Intersperse line breaks instead of appending them to every `ParagraphStyleRange` (Mauro Bieg, #2501).
  -   Add `Cite` style to citations (Mauro Bieg).
  -   Added figure handling (#2590, Mauro Bieg).
  -   Better handling of math. Instead of just printing the raw tex, we now try to fake it with unicode characters.
-   HTML writer: Include `example` class for example lists (#2524).
-   ODT/OpenDocument writer: improved image attributes (Mauro Bieg).
  -   Support for percentage widths/heights
  -   Use `Attr` instead of title to get dimensions from ODT walker to `writeOpenDocument`.
-   AsciiDoc writer:
  -   Support anchors in spans and divs with id elements (jgm/pandoc-citeproc#143).
  -   Fixed code blocks (#1861).
-   Haddock writer: omit formatting inside links, which isn't supported by Haddock (#2515).
-   MediaWiki writer: Fixed spacing issues in table cells.
  -   Start cell on new line unless it's a single Para or Plain (#2606).
  -   For single Para or Plain, insert a space after the `|` to avoid problems when the text begins with a character like `-` (#2604).
-   Beamer writer: mark frame as fragile when it contains verbatim (#1613).
-   LaTeX writer:
  -   Add support for GAP highlighting using listings (Raniere Silva).
  -   Consider `header-includes` content as well as templates when determining whether to use csquotes (Andreas Lööw).
  -   Create defaults for geometry using `margin-left` etc. If `geometry` has no value, but `margin-left`, `margin-right`, `margin-top`, and/or `-margin-bottom` are given, a default value for `geometry` is created from these. Note that these variables already affect PDF production via HTML5 with `wkhtmltopdf`.
-   ConTeXt writer: set default layout based on `margin-left`, etc. This sets up `\setuplayout` based on the variables `margin-left`, `margin-right`, `margin-bottom`, and `margin-top`, if no layout is given.
-   Docx writer: better handling of PDF images. Previously we tried to get the image size from the image even if an explicit size was specified. Since we still can't get image size for PDFs, this made it impossible to use PDF images in docx. Now we don't try to get the image size when a size is already explicitly specified.
-   Markdown writer: use raw HTML for link/image attributes when the `link_attributes` extension is unset and `raw_html` is set (#2554).
-   MediaWiki reader: interpret markup inside `<tt>`, `<code>` (#2607).
-   LaTeX reader:
  -   Improved smart quote parsing (#2555). This fixes redering of unmatched quotes.
  -   Use curly quotes for unmatched ` (#2555).
  -   Allow blank space between braced arguments of commands (#2592).
-   Markdown reader:
  -   Improved pipe table relative widths. Previously pipe table columns got relative widths (based on the header underscore lines) when the source of one of the rows was greater in width than the column width. This gave bad results in some cases where much of the width of the row was due to nonprinting material (e.g. link URLs). Now pandoc only looks at printable width (the width of a plain string version of the source), which should give better results. Thanks to John Muccigrosso for bringing up the issue.
  -   Fixed parsing bug with macros. Previously macro definitions in indented code blocks were being parsed as macro definitions, not code.
-   Textile reader: skip over attribute in image source (#2515). We don't have a place yet for styles or sizes on images, but we can skip the attributes rather than incorrectly taking them to be part of the filename.
-   Docx reader: Handle dummy list items (Jesse Rosenthal). These come up when people create a list item and then delete the bullet. It doesn't refer to any real list item, and we used to ignore it.
-   CommonMark reader/writer rewritten to use latest `cmark`.
-   Fixed Emoji character definitions (#2523). There were many bugs in the definitions.
-   `Text.Pandoc.CSS`:
  -   Added `pickStylesToKVs` function to extract multiple properties at once (API change, Mauro Bieg).
  -   Parse CSS that doesn't contain the optional semicolon (Mauro Bieg).
-   `trypandoc`: sort drop-down lists.
-   Beamer template:
  -   Made `\euro` conditional on presence of character. for xelatex and lualatex, as it is for pdflatex (Andrew Dunning).
  -   Moved `header-includes` before setting of title (Thomas Hodgson), to match the LaTeX template (jgm/pandoc-templates#168).
  -   Added `section-titles` variable (defaults to true) to enable/suppress section title pages in beamer slide shows (Thomas Hodgson).
  -   Moved beamer themes after fonts, so that themes can change fonts. (Previously the fonts set were being clobbered by lmodern.sty.) (Thomas Hodgson).
-   Beamer/LaTeX template changes (Thomas Hodgson):
  -   Added `thanks` variable
  -   Use `parskip.sty` when `indent` isn't set (fall back to using `setlength` as before if `parskip.sty` isn't available).
  -   Use `biblio-style` with biblatex.
  -   Added `biblatexoptions` variable.
-   LaTeX template changes:
  -   Added `paper` after `$papersize$` variable in latex template. Thus you can say `papersize: a4` and the latex will contain `a4paper`. This change may break some existing workflows; if you currently specify `a4paper`, you'll get `a4paperpaper` which is meaningless. However, the change seems worth it, as it will make the `papersize` variable work uniformly across ConTeXt, LaTeX, and html-&gt;pdf via wkhtmltopdf.
  -   Only pass options to color package if `colorlinks` is set (Andrew Dunning).
  -   Make definition of `\euro` conditional in xelatex/lualatex, as it is already for pdflatex (Andrew Dunning).
  -   Removed setting of `subject` in PDF metadata. This used to be set to the subtitle, but really the subtitle need not give the subject. Also, `subtitle` can contain formatting, so we'd need, at least, a plain text version for this.
  -   Moved `header-includes` before setting of `\title`, `\author`, etc. This allows these macros to be redefined.
  -   Use `\subtitle` command for `subtitle`, instead of tacking it on to the title as before. We give a no-op fallback definition if it is not defined. This change should produce much better results in classes that support `\subtitle`. With the default article class, which does not define `\subtitle`, subtitles will no longer be printed unless the user defines `\subtitle` and redefines `\maketitle`.
  -   Moved redefinitions of `\paragraph` and `\subparagraph` to before header-includes.
-   Context template:
  -   Use `simplefonts` for font loading (Paolo Rodríguez). This is needed for things to work on ConTeXt stable from TeXLive 2015.
  -   Revert use of `\setuphead` in title block (Andrew Dunning, Rik Kabel).
-   Update LaTeX/ConTeXt link colour usage (Andrew Dunning).
-   Fixed man template so disabling hyphenation actually works. The command needs to come after .TH.
-   Added 'navigation' variable to beamer template (#2543). Valid values are `empty` (the default), `horizontal`, `vertical`, and `frame`. Note that this changes the default behavior from `horizontal` to `empty`. Closes #2543.
-   Added `toc` to HTML slide format templates (Andrew Dunning), so that `--toc` creates a contents slide.
-   Added `stack.full.yaml` to build `pandoc-citeproc` as well.
-   Allow pipe tables with no body rows (#2556). Previously this raised a runtime error.
-   Shared: Improved `fetchItem` so that `C:/Blah/Blah.jpg` isn't treated as URL. The Haskell URI parsing routines will accept ""C:"" as a scheme, so we rule that out manually. This helps with `--self-contained` and absolute Windows paths.
-   Define a `meta-json` variable for all writers (#2019). This contains a JSON version of all the metadata, in the format selected for the writer. So, for example, to get just the YAML metadata, you can run pandoc with the following custom template: `$meta-json$`. The intent is to make it easier for static site generators and other tools to get at the metadata.
-   Document limitations of --self-contained (#2553).
-   Improved Citations section of README (#2551). Added information about `link-citations` and a link to the pandoc-citeproc man page.
-   `ImageSize`: use `safeRead` instead of `readMaybe`, which isn't in base &lt; 4.6.
-   Allow .adoc file extension for AsciiDoc (Andrew Dunning).
-   Improved implicit pandoc-citeproc inclusion. The filter pandoc-citeproc is automatically used when `--bibliography` is specified on the command line, unless `--natbib` or `--biblatex` is used. However, previously this only worked if `--bibliography` was spelled out in full, and not if `--biblio` was used.
-   reveal.js: Interpret pauses correctly for all headers (#2530). Previously, when using headers below the slide level, pauses are left uninterpreted into pauses. In my opinion, unexpected behavior but intentional looking at the code.
-   Remove redundant `center` variable for reveal.js (Andrew Dunning).
-   Parsing: Add `extractIdClass`, modified type of `KeyTable` (Mauro Bieg, API change).
-   ImageSize: Added functions for converting between image dimensions (Mauro Bieg).
-   Use lts-3.18 in stack.yaml. This avoids Windows build issues with the HTTP library.
-   Bump version bounds for dependencies.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/2364416/assets,https://api.github.com/repos/jgm/pandoc/releases/2364416,master,https://api.github.com/repos/jgm/pandoc/tarball/1.16,https://github.com/jgm/pandoc/releases/tag/1.16,https://api.github.com/repos/jgm/pandoc/zipball/1.16,1.16,False,False
2129444,2015-11-15T22:21:51Z,2015-11-15T22:25:17Z,pandoc 1.15.2,"-   `pandoc my.md -t context -o my.pdf` will now create a PDF using ConTeXt rather than LaTeX (#2463).
-   Fixed omitted `url(...)` in CSS data-uri with `--self-contained` (#2489).
-   Added `emoji` Markdown extension, enabled by default in `markdown_github` (#2523). Added `Ext_emoji` to `Extension` in `Text.Pandoc.Options` (API change).
-   `Text.Pandoc.Readers.HTML.parseTags`: Fixed over-eager raw HTML inline parsing (#2469). Tightened up the inline HTML parser so it disallows TagWarnings.
-   Derive `Generic` instances for the types in `Text.Pandoc.Options`.
-   Org reader:
  -   Fix paragraph/list interaction (Albert Krewinkel, #2464). Paragraphs can be followed by lists, even if there is no blank line between the two blocks. However, this should only be true if the paragraph is not within a list, were the preceding block should be parsed as a plain instead of paragraph (to allow for compact lists). Thanks to @rgaiacs for bringing this up.
  -   Allow toggling header args (Albert Krewinkel, #2269). Org-mode allows to skip the argument of a code block header argument if it's toggling a value. Argument-less headers are now recognized, avoiding weird parsing errors.
  -   Fix markup parsing in headers (Albert Krewinkel, #2504). Markup as the very first item in a header wasn't recognized. This was caused by an incorrect parser state: positions at which inline markup can start need to be marked explicitly by changing the parser state. This wasn't done for headers. The proper function to update the state is now called at the beginning of the header parser, fixing this issue.
  -   Fix emphasis rules for smart parsing (Albert Krewinkel, #2513). Smart quotes, ellipses, and dashes should behave like normal quotes, single dashes, and dots with respect to text markup parsing.
  -   Require whitespace around definition list markers (#2518). This rule was not checked before, resulting in bugs with footnotes and some link types.
-   Markdown reader:
  -   Pipe tables with long lines now get relative cell widths (#2471). If a pipe table contains a line longer than the column width (as set by `--columns` or 80 by default), relative widths are computed based on the widths of the separator lines relative to the column width. This should solve persistent problems with long pipe tables in LaTeX/PDF output, and give more flexibility for determining relative column widths in other formats, too. For narrower pipe tables, column widths of 0 are used, telling pandoc not to specify widths explicitly in output formats that permit this.
  -   Improved parser for `mmd_title_block`. We now allow blank metadata fields. These were explicitly disallowed before.
  -   Citation keys can now contain `://`, so URLs and DOIs can be used as citation keys (jgm/pandoc-citeproc#166).
-   Beamer template: fix incompatibility of section slides with natbib. Natbib (and presumably biblatex) bibliography commands create their own section. Since these are in frame environments, we have an incompatibility with the `\AtBeginSection` macro which creates a special frame when a new section occurs. (We can't have a frame inside another frame.) This change disables `\AtBeginSection` inside bibliography slides. Thinks to Yihui Xie for bringing the problem to my attention. This supersedes #145. See discussion there.
-   Textile reader: don't do smart punctuation unless explicitly asked (#2480). Note that although smart punctuation is part of the textile spec, it's not always wanted when converting from textile to, say, Markdown. So it seems better to make this an option.
-   LaTeX reader: Handle `comment` environment (Arata Mizuki). The `comment` environment is handled in a similar way to the `verbatim` environment, except that its content is discarded.
-   Docx reader: Follow relationships correctly in foot/endnotes (#2258, Jesse Rosenthal). This fixes a problem with links in notes.
-   LaTeX and ConTeXt writers: support `lang` attribute on divs and spans (mb21). For LaTeX, also collect `lang` and `dir` attributes on spans and divs to set the `lang`, `otherlangs` and `dir` variables if they aren’t set already. See #895.
-   LaTeX writer:
  -   Use proper command for `\textarabic` (mb21).
  -   Added `de-CH-1901`, fixed `el-polyton` in `toPloyglossia` (Nick Bart).
  -   Use `\hypertarget` and `\hyperlink` for links. This works correctly to link to Div or Span elements. We now don't bother defining `\label` for Div or Span elements. Closes jgm/pandoc-citeproc#174.
  -   Avoid footnotes in list of figures (#1506).
  -   Properly handle footnotes in captions (#1506).
  -   Add `\protect` to `\hyperlink` (#2490). Thanks to Hadrien Mary.
  -   Set `colorlinks` if `linkcolor`, `urlcolor`, `citecolor`, or `toccolor` is set (#2508).
-   Textile writer: support start number in ordered lists (#2465).
-   OpenDocument writer: Allow customization of opendocument automatic styles. Automatic styles can now be inserted in the template, which now provides the enclosing `<office:automatic-styles>` tags (#2520).
-   Docx writer: insert space between footnote reference and note (#2527). This matches Word's default behavior.
-   EPUB writer: don't download linked media when `data-external` attribute set (#2473). By default pandoc downloads all linked media and includes it in the EPUB container. This can be disabled by setting `data-external` on the tags linking to media that should not be downloaded. Example:
  
  ```
  <audio controls=""1"">
   <source src=""http://www.sixbarsjail.it/tmp/bach_toccata.mp3""
   type=""audio/mpeg""></source>
  </audio>
  ```
-   HTML writer: use width on whole table if col widths sum to &lt; 100%. Otherwise some browsers display the table with the columns separated far apart.
-   AsciiDoc template: Fix `author` and `date`; add `keywords`, `abstract` (Andrew Dunning).
-   HTML-based templates (Andrew Dunning):
  -   Use en dash instead of hyphen between title prefix and title.
  -   Add `keywords` to metadata.
  -   Add `lang`, `dir`, `quotes` where missing.
  -   Always make author and date display conditional.
  -   Updated dzslides template from source.
-   Man template: make ""generated by"" comment conditional.
-   LaTeX, Beamer templates:
  -   Add `babel-otherlangs` for language divs/spans; `babel-newcommands`, filled by commands that make babel understand the polyglossia-style language directives (mb21, #137).
  -   Improved formatting of conditionals; `$for$` is always provided to allow multiple options (Andrew Dunning, #141).
  -   Use `Ligatures=TeX` rather than `Mapping=tex-text` with `fontspec` to improve support for LuaTeX (Andrew Dunning, #135).
  -   Revise `hyperref` usage (Andrew Dunning, #139, #141):
    -   use same options for all LaTeX engines;
    -   add `subtitle` and `keywords` to PDF metadata;
    -   do not override `hyperref` link coloring without user input, effectively making the `hidelinks` option the default (removed as a separate variable);
    -   link colors can be enabled (using a slightly darker version of the old defaults) using a new `colorlinks` variable, automatically used by the LaTeX writer when custom colors are specified;
    -   `pdfborder={0 0 0}` is automatically set by `hyperref` with `colorlinks`, and is only applied if `colorlinks` is disabled.
-   ConTeXt template (Andrew Dunning):
  -   New variables for controlling styles: `linkstyle`, `linkcolor`, `linkcontrastcolor`, `layout`, `pagenumbering`, `whitespace`, `indenting`, `interlinespace`, `headertext`, `footertext`, `mainfont`, `sansfont`, `monofont`, `mathfont`, `fontsize`.
  -   Default template no longer supports MkII.
  -   Improve writing of title block (suppressing numbering of first page).
  -   Add `title` `subtitle`, `author`, `date`, `keywords` to PDF metadata.
  -   Support `subtitle`, `abstract`.
  -   Support list of figures (`lof`), list of tables (`lot`).
  -   Disable link styling by default.
  -   Define styles for all section types.
  -   Enable microtype.
  -   Improved formatting of conditionals.
-   Beamer template: added code to prevent slide breaks inside paragraphs (#2422, thanks to Nick Bart). This will matter, in practice, only when `allowframebreaks` is used. It is especially helpful for bibliography slides.
-   OpenDocument template: Add `<office:automatic-styles>` tag around automatic styles. The writer now longer provides this (see #2520).
-   Restored Text.Pandoc.Compat.Monoid.
-   Do not export (&lt;&gt;) from custom Prelude. The Prelude now matches base 4.8 Prelude's API.
-   Don't use custom prelude with ghc 7.10. Use the custom prelude only for earlier versions. This change makes `stack ghci` and `cabal repl` work (#2503), at least with ghc 7.10.
-   Changed § to % in operators from Odt.Arrows.Utils (#2457). This prevents problems building haddocks with ""C"" locale.
-   Change default for old-locale flag to False.
-   Use stack in deb, osx, and Windows package generators.
-   Added Vagrantfile for building deb in vm. This should help in automating binary package creation. 'make package' will make the package. 'make package COMMIT=blah' will make the package from commit blah.
-   README:
  -   Consistent capitalization for pandoc and Markdown.
  -   Fixed `auto_identifiers` examples (Benoit Schweblin).
  -   Improved documentation of template variables (Andrew Dunning).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/2129444/assets,https://api.github.com/repos/jgm/pandoc/releases/2129444,master,https://api.github.com/repos/jgm/pandoc/tarball/1.15.2,https://github.com/jgm/pandoc/releases/tag/1.15.2,https://api.github.com/repos/jgm/pandoc/zipball/1.15.2,1.15.2,False,False
1977730,2015-10-18T05:23:37Z,2015-10-18T05:50:20Z,pandoc 1.15.1.1,"- `Text.Pandoc.Data`:  store paths in dataFiles using posix separators. This way we have uniform separators, whether on Windows or Linux. This should solve a problem where on some Windows versions the data files weren't being found (#2459).

**Note:  This release does nothing more than fix a problem with some Windows builds of 1.15.1.  Linux and OSX users may continue to use [pandoc 1.15.1](https://github.com/jgm/pandoc/releases/1.15.1), so binary packages for these platforms are not provided here.**
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1977730/assets,https://api.github.com/repos/jgm/pandoc/releases/1977730,master,https://api.github.com/repos/jgm/pandoc/tarball/1.15.1.1,https://github.com/jgm/pandoc/releases/tag/1.15.1.1,https://api.github.com/repos/jgm/pandoc/zipball/1.15.1.1,1.15.1.1,False,False
1973378,2015-10-16T16:58:48Z,2015-10-16T17:04:18Z,pandoc 1.15.1,"-   `pandocVersion` is now defined in `Text.Pandoc.Shared` and reexported from `Text.Pandoc` (Alex Vong). This allows writers to access it. (Alex Vong) (API change)
-   For `markdown_mmd`, add: `implicit_figures`, `superscripts`, `subscripts` (#2401).
-   Added `odt` as input format (MarLinn). Added new module `Text.Pandoc.Reader.ODT` (API change). Fully implemented features: Paragraphs, Headers, Basic styling, Unordered lists, Ordered lists, External Links, Internal Links, Footnotes, Endnotes, Blockquotes. Partly implemented features: Citations, Tables.
-   Markdown Reader:
  -   Add basic tests for each header style (Ophir Lifshitz).
  -   Add implicit header ref tests for headers with spaces (Ophir Lifshitz).
  -   Skip spaces in headers (Ophir Lifshitz).
  -   Handle 'id' and 'class' in parsing key/value attributes (#2396). `# Header {id=""myid"" class=""foo bar""}` is now equivalent to `# Header {#myid .foo .bar}`.
  -   Use '=' instead of '#' for atx-style headers in markdown+lhs. (Kristof Bastiaensen)
  -   Pipe tables: allow indented columns. Previously the left-hand column could not start with 4 or more spaces indent. This was inconvenient for right-aligned left columns. Note that the first (header column) must still have 3 or fewer spaces indentation, or the table will be treated as an indented code block.
  -   Fix regression: allow HTML comments containing `--`. Technically this isn't allowed in an HTML comment, but we've always allowed it, and so do most other implementations. It is handy if e.g. you want to put command line arguments in HTML comments.
-   LaTeX reader:
  -   Don't eat excess whitespace after macros with only optional arguments (#2446).
  -   Support longtable (#2411).
  -   Implement `\Cite` (#2335).
  -   Support abstract environment. The abstract populates an `abstract` metadata field.
  -   Properly handle booktabs lines. Lines aren't part of the pandoc table model, so we just ignore them (#2307).
-   HTML reader:
  -   Handle type attribute on ol, e.g. `<ol type=""i"">` (#2313).
  -   Updated for new automatic header attributes.
  -   Add auto identifiers if not present on headers. This makes TOC linking work properly.
  -   Detect `font-variant` with `pickStyleAttrProps` (Ophir Lifshitz).
  -   Test `<ol>` type, class, and inline list-style(-type) CSS (Ophir Lifshitz).
  -   Better handling of ""section"" elements (#2438). Previously `<section>` tags were just parsed as raw HTML blocks. With this change, section elements are parsed as Div elements with the class ""section"".
-   MediaWiki reader: handle unquoted table attributes (#2355).
-   DocBook reader:
  -   Added proper support for DocBook `xref` elements (Frerich Raabe). Added `dbContent` field to reader state, so we can lookup cross refs.
  -   Handle `informalexample` (#2319).
-   Docx Reader:
  -   Create special punctuation test (Ophir Lifshitz).
  -   Parse soft, no-break hyphen elements (Ophir Lifshitz).
  -   Updated headers test (Ophir Lifshitz). Replaced `styles.xml` in `headers.docx` with pandoc's current `styles.xml`, which contains styles for Heading 1 through 6. Added Heading 4 through 7 to the test document. Note that Heading 7 is not parsed as a Heading because there is no Heading 7 style.
-   RST reader: better handling of indirect roles. Previously the parser failed on this kind of case
  
  ```
  .. role:: indirect(code)
  
  .. role:: py(indirect)
     :language: python
  
  :py:`hi`
  ```
  
  Now it correctly recognizes `:py:` as a code role.
-   Org reader:
  -   Add auto identifiers if not present on headers (#2354, Juliusz Gonera).
  -   Allow verse blocks to contain empty lines (#2402, Albert Krewinkel).
-   EPUB reader: stop mangling external URLs (#2284).
-   RST writer:
  -   Don't insert `\` when complex expression in matched pairs. E.g. `[:sup:`3`]` is okay; you don't need `[:sup:`3`\ ]`.
  -   Ensure that `\` is inserted when needed before Cite and Span elements that begin with a ""complex"" element (jgm/pandoc-citeproc#157).
  -   Normalize headers only in ""standalone"" mode (#2394).
-   Haddock writer: escape `*` and `^` (G. Bataille).
-   Markdown writer:
  -   In TOC, add links to headers (#829).
  -   Use unicode super/subscripts for digits in plain output (when the `superscripts` and `subscripts` extensions are not enabled).
-   Docx writer:
  -   Moved invalid character stripping to `formattedString`. This avoids an inefficient generic traversal (#2356).
  -   Use user data directory for `reference.docx` archive. This allows the test suite to work without installing pandoc first. It also brings the docx writer in line with the odt writer.
  -   Tests: docx writer tests now use `../data` for data directory. This allows tests to be run without installing first.
  -   Tests: Use real jpg (not empty) for docx tests to avoid warning.
-   LaTeX writer:
  -   Fixed detection of 'chapters' from template. If a documentclass isn't specified in metadata, but the template has a hardwired bookish documentclass, act as if `--chapters` was used. This was the default in earlier versions, but it has been broken for a little while.
  -   Correctly recognize book documentclass in metadata (#2395).
  -   Set language-related variables automatically, depending on the value of the `lang` field, which is now always assumed to be in BCP47 format (mb21, #1614, #2437).
  -   Add `\protect` to `\hyperdef` in inline context. This way we don't get an error when this is used as a moveable argument (#2136).
  -   Support all frame attributes in Beamer.
  -   Percent-encode more special characters in URLs (#1640, #2377). The special characters are '&lt;','&gt;','|','""','{','}','[',']','^', '`'.
-   HTML writer:
  -   Update KaTeX JS and CSS versions (Emily Eisenberg).
  -   For dzslides, add `role=""note""` for speaker notes (#1693).
  -   Percent-encode more special characters in URLs (#1640, #2377). The special characters are '&lt;','&gt;','|','""','{','}','[',']','^', '`'.
  -   Render Div with class `section` as `<section>` in HTML5.
-   EPUB writer:
  -   In TOC, replace literal `<br/>` with space (#2105).
  -   With `--webtex`, include image file rather than `data:` URI (#2363).
-   Native writer: format Div properly, with blocks separated.
-   Support bidirectional text output with XeLaTeX, ConTeXt and HTML (#2191, mb21).
-   Reference Docx:
  -   Add missing Header 6 style (steel blue) (Ophir Lifshitz).
  -   Correct `outlineLvl` for Header styles (Ophir Lifshitz).
-   Templates
  -   Beamer: Add `innertheme`, `outertheme` variables (Guilhem Bonnefille, #121). Add space after colon in figure caption. Integrate recent font and language updates from LaTeX template; allow use of `mainfont` variable for changing the slide text in XeTeX and LuaTeX (Andrew Dunning, #131).
  -   LaTeX: Add `mainfontoptions`, `sansfontoptions`, `monofontoptions`, `mathfontoptions`, `fontfamilyoptions` (Andrew Dunning, #122). Support handling of bidirectional text (mb21, #120). Improve reliability of superscripts/subscripts under XeTeX and prevent letters and numbers from appearing on a different baseline by removing use of the `realscripts` package (via `xltxtra`). To restore use of OpenType characters for these features under XeTeX or LuaTeX, add `\usepackage{realscripts}` to `header-includes` (Andrew Dunning, #130). Remove redundant reference to `xunicode` (Andrew Dunning, #130). Add `fontenc`, `indent`, `subparagraph` variables (Andrew Dunning). Allow use of `hidelinks` variable for `hyperref` package (Hugo Roy, #113). Prevent package clash with `tufte-latex` and other classes that include `hyperref` or `color` (Xavier Olive, #115).
  -   ConTeXt: Support handling of bidirectional text (mb21, #120).
  -   LaTeX and ConTeXt: Use more specific language variables. Instead of directly using `lang`, we now use `babel-lang` and `polyglossia-lang` and `context-lang`. These variables are set by the writers to the necessary values, based on the `lang` variable (which now always takes a value in BCP47 format). (mb21, #114, #129).
  -   HTML: Support handling of bidirectional text (mb21, #120). Move HTML5 shiv after CSS and fix URL (Andrew Dunning). Add dir attribute in html5 (Andrew Dunning).
  -   reveal.js: Add `controls`, `progress` variables (Grégoire Pineau, #127). Add `width`, `height` variables (Anrew Dunning). Update template from 3.1 source (Andrew Dunning). All configuration options are now available as variables, but are only be included if set (reveal.js uses defaults otherwise).
  -   man: Added comment stating that the page is autogenerated by pandoc, giving version. Added `adjusting` and `hyphenate` variables (Alex Vong, #123).
-   epub.css: added selectors for nested emphasis (Pablo Rodriguez).
-   MediaBag: ensure that `/` is always used as path separator.
-   `sample.lua`: define `CaptionedImage`, add newline at end (#2393).
-   Added `--bash-completion` option. This generates a bash completion script. To use: `eval ""$(pandoc --bash-completion)""`.
-   Text.Pandoc.Error: Define Typeable and Exception instances for PandocError (#2386).
-   Text.Pandoc.Parsing: `toKey`: strip off outer brackets. This makes keys with extra space at the beginning and end work: e.g.
  
  ```
  [foo]: bar
  
  [ foo ]
  ```
  
  will now be a link to bar (it wasn't before).
-   Text.Pandoc: disable `auto_identifiers` for epub. The epub writer inserts its own auto identifiers; this is more complex due to splitting into ""chapter"" files.
-   Renamed Text.Pandoc.Compat.Locale -&gt; Text.Pandoc.Compat.Time. It now reexports Data.Time.
-   Use custom Prelude to avoid compiler warnings.
  -   The (non-exported) prelude is in prelude/Prelude.hs.
  -   It exports Monoid and Applicative, like base 4.8 prelude, but works with older base versions.
  -   It exports (&lt;&gt;) for mappend.
  -   It hides 'catch' on older base versions.
-   Added a `stack.ymal` and stack install instructions to INSTALL.
-   Clarified what is ""out of scope"" in README and CONTRIBUTING.md.
-   Added note to CONTRIBUTING.md about ghc versions and travis.
-   Clarify docs on block quotes. The space after `>` is optional (#2346).
-   Removed obsolete reference to default.csl (#2372).
-   List all styles in manual for `--reference-docx` (Chris Black)
-   Don't capitalize header links in man page.
-   Added section on repl to CONTRIBUTING.md.
-   README: Added space after backslash in image example (#2329).
-   Document details of citation locator terms (Nick Bart).
-   Fixed some internal links in README (#2309).
-   Improve CSL documentation, variables documentations, links, and cross-references in README. (Andrew Dunning)
-   Fix build failure with `--flags=-https` (Sergei Trofimovich).
-   Use `newManager` instead of `withManager` in recent `http-client`. This avoids a deprecation warning.
-   Allow building with latest versions of http-types, HUnit, criterion, syb, aeson.
-   Updated benchmark program for new criterion API.
-   Setup.hs: rewrite so as not to use process, directory, filepath. Using anything outside base is dangerous, since older versions of ghc may link against two different versions.
-   Added appveyor (Windows continuous integration) builds.
-   New `.travis.yml`. Autgenerated using `make_travis_yml.hs`. This script has been modified in a few ways, e.g. to add `GHCOPTS`. `make .travis.yml` regenerates it based on the tested-with field of the cabal file.

**Where's the Windows package?  See [pandoc 1.15.1.1](https://github.com/jgm/pandoc/releases/1.15.1.1).**
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1973378/assets,https://api.github.com/repos/jgm/pandoc/releases/1973378,master,https://api.github.com/repos/jgm/pandoc/tarball/1.15.1,https://github.com/jgm/pandoc/releases/tag/1.15.1,https://api.github.com/repos/jgm/pandoc/zipball/1.15.1,1.15.1,False,False
1541783,2015-07-15T16:18:52Z,2015-07-15T17:08:33Z,pandoc 1.15.0.6,"-   `--self-contained`: Fixed overaggressive CSS minimization (#2301, 2286). Previously `--self-contained` wiped out all spaces in CSS, including semantically significant spaces. This was a regression from 1.14.x.
-   Markdown reader: don't allow bare URI links or autolinks in link label (#2300). Added test cases.
-   `Text.Pandoc.Parsing`, `uri`: Improved bare autolink detection (#2299). Previously we disallowed `-` at the end of an autolink, and disallowed the combination `=-`. This commit liberalizes the rules for allowing punctuation in a bare URI, and adds test cases. One potential drawback is that you can no longer put a bare URI in em dashes like this: `this uri---http://example.com---is an example.` But in this respect we now match github's treatment of bare URIs.
-   HTML writer: support speaker notes in dzslides. With this change `<div class=""notes"">` and also `<div class=""notes"" role=""note"">` will be output if `-t dzslides` is used. So we can have speaker notes in dzslides too. Thanks to maybegeek.
-   Updated dzslides template.
-   Improved documentation of options to print system default files (#2298). `--print-default-data-file` and `--print-default-template`.
-   DokuWiki writer: use `$..$` for Math instead of `<math>..</math>` (Tiziano Müller). MathJax seems currently to be the only maintained math rendering extension for DokuWiki.
-   `Text.Pandoc.Shared`: Changed `hierarchicalize` so it treats references div as top-level header (#2294). This fixes a bug with `--section-divs`, where the final references section added by pandoc-citeproc, enclosed in its own div, got nested in the div for the section previous to it.
-   Allow vector 0.11.
-   Require cmark &gt; 0.4.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1541783/assets,https://api.github.com/repos/jgm/pandoc/releases/1541783,master,https://api.github.com/repos/jgm/pandoc/tarball/1.15.0.6,https://github.com/jgm/pandoc/releases/tag/1.15.0.6,https://api.github.com/repos/jgm/pandoc/zipball/1.15.0.6,1.15.0.6,False,False
1522538,2015-07-10T18:55:05Z,2015-07-10T19:27:13Z,pandoc 1.15.0.5,"-   HTML writer: Fixed email javascript obfuscation with `mailto:` URLs (#2280). This fixes a potential security issue. Because single quotes weren't being escaped in the link portion, a specially crafted email address could allow javascript code injection.
-   Markdown/HTML readers: Avoid parsing partial URLs like `<www.pandoc.org/blah#foo>` as HTML tags (#2277).
-   RST reader: allow inline formatting in definition list field names (Lars-Dominik Braun).
-   PDF: Make sure `--latex-engine-opt` goes before the filename on the command line. LaTeX needs the argument to come after the options (#1779).
-   CommonMark writer: fixed tags used for super/subscript.
-   ConTeXt template: activate hanging indent for definition lists (mb21).
-   Make cabal require `hsb2hs` &gt;= 0.3.1 if `embed_data_files` specified. This is done by adding `hookedPrograms` in `Setup.hs`, which allows us to include `hsb2hs` in Build-Tools in cabal.
-   Improved Windows installer (thanks to nkalvi).
  -   When per-machine installation is chosen, the system path is updated instead of the user's.
  -   An appropriate default is used for per-machine installation directory.
  -   Admin privileges are no longer required for a per-user install
-   Travis: unpack sdist for build to catch packaging bugs.
-   Improved documentation on where user templates go (#2272).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1522538/assets,https://api.github.com/repos/jgm/pandoc/releases/1522538,master,https://api.github.com/repos/jgm/pandoc/tarball/1.15.0.5,https://github.com/jgm/pandoc/releases/tag/1.15.0.5,https://api.github.com/repos/jgm/pandoc/zipball/1.15.0.5,1.15.0.5,False,False
1494199,2015-07-03T18:30:11Z,2015-07-03T18:38:01Z,pandoc 1.15.0.4,"**For binary packages see [pandoc 1.15](https://github.com/jgm/pandoc/releases/1.15).**
- Added pandoc.1 man page to the repository.  It is no longer
  built as part of the cabal build process. (This proved too
  fragile.)  pandoc.1 can be regenerated (`make man/pandoc.1`)
  when `README` is changed.
- Copying of the man page now respects `--destdir` (#2262).
- Improved error messages for filters.  User is now informed if
  the filter requires an interpreter that isn't found in the path,
  or if the filter returns an error status.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1494199/assets,https://api.github.com/repos/jgm/pandoc/releases/1494199,master,https://api.github.com/repos/jgm/pandoc/tarball/1.15.0.4,https://github.com/jgm/pandoc/releases/tag/1.15.0.4,https://api.github.com/repos/jgm/pandoc/zipball/1.15.0.4,1.15.0.4,False,False
1489476,2015-07-02T16:32:45Z,2015-07-02T16:37:36Z,pandoc 1.15.0.3,"This release just fixes a packaging bug in 1.15.0.2.  **For binary packages, see [pandoc 1.15](https://github.com/jgm/pandoc/releases/1.15).**
- Ensure target directory is created when installing man page.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1489476/assets,https://api.github.com/repos/jgm/pandoc/releases/1489476,master,https://api.github.com/repos/jgm/pandoc/tarball/1.15.0.3,https://github.com/jgm/pandoc/releases/tag/1.15.0.3,https://api.github.com/repos/jgm/pandoc/zipball/1.15.0.3,1.15.0.3,False,False
1489052,2015-07-02T15:13:28Z,2015-07-02T15:17:04Z,pandoc 1.15.0.2,"This release just fixes a packaging bug in 1.15.0.1.  **For binary packages, see [pandoc 1.15](https://github.com/jgm/pandoc/releases/1.15).**
- Added files needed for building man page to Extra-Source-Files.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1489052/assets,https://api.github.com/repos/jgm/pandoc/releases/1489052,master,https://api.github.com/repos/jgm/pandoc/tarball/1.15.0.2,https://github.com/jgm/pandoc/releases/tag/1.15.0.2,https://api.github.com/repos/jgm/pandoc/zipball/1.15.0.2,1.15.0.2,False,False
1486510,2015-07-02T01:05:00Z,2015-07-02T02:17:28Z,pandoc 1.15.0.1,"**Note:** Because this release only affects building of man pages, we have not provided a binary package.  Please see [pandoc 1.15](https://github.com/jgm/pandoc/releases/1.15) for the latest binary package.
- Man page is now built and installed as part of the cabal build process. Removed Makefile target for man page.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1486510/assets,https://api.github.com/repos/jgm/pandoc/releases/1486510,master,https://api.github.com/repos/jgm/pandoc/tarball/1.15.0.1,https://github.com/jgm/pandoc/releases/tag/1.15.0.1,https://api.github.com/repos/jgm/pandoc/zipball/1.15.0.1,1.15.0.1,False,False
1485611,2015-07-01T19:41:25Z,2015-07-01T20:45:30Z,pandoc 1.15,"Note: This is a fairly minor update. The bump in major version number is due to the removal of `Text.Pandoc.ManPages` and the `--man1` and `--man5` options, which were only in pandoc for one day.  

**Note to packagers:**
1.  There is no longer a separate `pandoc_markdown.5` man page.  The two man pages have been merged into `pandoc.1`.
2.  To create `pandoc.1`, just do `make man/man1/pandoc.1` after building pandoc.

---
- Man page changes:
  - Removed `--man1`, `--man5` options (breaking change).
  - Removed `Text.Pandoc.ManPages` module (breaking API change).
  - Makefile target for `man/man1/pandoc.1`.  This uses pandoc to create the man page from README using a custom template and filters.
  - Added `man/` directory with template and filters needed to build man page.
  - We no longer have two man pages: `pandoc.1` and `pandoc_markdown.5`.  Now there is just pandoc.1, which has all the content from README.  This change was needed because of the extensive cross-references between parts of the README.
  - Removed old `data/pandoc.1.template` and  `data/pandoc_markdown.5.template`.
- OpenDocument writer: Do not add a carriage return after a hard line break (Michael Chladek).
- ConTeXt writer:
  - use `\goto` for internal links.
  - Added a `%` at end for `\reference` to avoid spurious space.
- Ignore sandbox on 'make quick'
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1485611/assets,https://api.github.com/repos/jgm/pandoc/releases/1485611,master,https://api.github.com/repos/jgm/pandoc/tarball/1.15,https://github.com/jgm/pandoc/releases/tag/1.15,https://api.github.com/repos/jgm/pandoc/zipball/1.15,1.15,False,False
1481743,2015-06-30T15:38:17Z,2015-07-01T05:48:40Z,pandoc 1.14.1,"-   Added `--man1` and `--man5` options to pandoc, allowing pandoc to generate its own man pages. Man pages are no longer automatically generated in the build process (the process for this was too complex and prone to failure, #2190). The `make-pandoc-man-pages` executable has been removed. The `man/` directory has been removed, and man page templates have been moved to `data/`. NOTE TO PACKAGERS: You will no longer find pandoc's man pages in `man/`, but you can generate them using `pandoc --man1 > pandoc.1` and `pandoc --man5 > pandoc_markdown.5`.
-   Added new unexported module: `Text.Pandoc.ManPages`.
-   `README` now acts like a data file (even though it isn't in `data/`). So, for example, `pandoc --print-default-data-file README` will produce the README.) This change was required for the `--man1` and `--man5` options, since the man pages are produced from the README, but it may be useful for other purposes as well.
-   Allow `reference.docx` and `reference.odt` to be used with `--print-default-data-file` and to shadow defaults if placed in the user data directory. Note that as of 1.14, we no longer include these files as data files; instead, we include their components. This change causes pandoc to behave as if it has these data files; they are constructed on demand when needed using `getDefaultReferenceDocx` and `getDefaultReferenceODT`.
-   Fixed regression in CSS parsing with `--self-contained` (#2224). Pandoc 1.14.0.x used css-text to parse the CSS, but its parser silently drops big sections of CSS. This commit replaces the use of css-text with a small but principled CSS preprocessor, which removes whitespace and comments and replaces `url()` with base 64 data when possible.
-   Use `https://` instead of `//` for MathJax and KaTeX CDN URLs (#1920). This will allow math to work when pages are being viewed locally.
-   `Text.Pandoc.Options`: Export `plainExtensions`. These are the extensions used in `plain` output.
-   LaTeX reader: Don't parse `_` and `^` as sub/superscript outside of math mode; treat them as regular inline text. Normally these will cause an error in LaTeX, but there are contexts (e.g. `alltt` environments) where they are allowed.
-   HTML reader: allow `<body>` to close `<head>`.
-   DocBook reader: support `mediaobject`s and `figures` (#2184, mb21).
-   RST reader: Fix reference names with special characters (Lars-Dominik Braun).
-   Textile writer: escape `+` and `-` as entities (#2225).
-   DokuWiki writer: Use proper `<code>` tags for code blocks (#2213).
-   Plain writer: don't use symbols for super/subscript (#2237). Simplified code by using `plainExtensions`.
-   InDesign writer: Properly escape URLs containing more than one colon character (gohai).
-   Docx writer: Make sure we use dist version of `reference.docx` (and not the user's version) for certain settings. Taking some settings values from a user-supplied reference.docx can lead to corruption. This fixes a regression from the last release (#2249).
-   `Text.Pandoc.Shared`: exports `getDefaultReferenceDocx` and `getDefaultReferenceODT` (API change). These functions have been removed from the Docx and ODT writers.
-   LaTeX template (Xavier Olive):
  -   Added `CJKmainfont` and `CJKoptions` variables.
  -   Allow dvipsnames (e.g. `MidnightBlue`) for colors (Xavier Olive).
-   Epub templates: use `author.role`, not `author.type`.
-   Bump cmark version to &gt;= 0.3.4.
-   Improved Windows installer (#2205, thanks to nkalvi). Users can now select a per-user or systemwide install, and can set the installation path. At the end of installation, the install location is given. The install location is also now given in the list of installed programs in Control Panel. Cleaner WiX syntax is used for setting the path.
-   Added `download_stats` target to Makefile.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1481743/assets,https://api.github.com/repos/jgm/pandoc/releases/1481743,master,https://api.github.com/repos/jgm/pandoc/tarball/1.14.1,https://github.com/jgm/pandoc/releases/tag/1.14.1,https://api.github.com/repos/jgm/pandoc/zipball/1.14.1,1.14.1,False,False
1418321,2015-06-02T11:25:56Z,2015-06-15T17:37:54Z,pandoc 1.14.0.4,"- Added missing commonmark template.
- Improved try pandoc (moved button, show raw command).

**NOTE:  There are no binary packages for this release.  Please see [the 1.14.1 release](https://github.com/jgm/pandoc/releases/1.14.1).**
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1418321/assets,https://api.github.com/repos/jgm/pandoc/releases/1418321,master,https://api.github.com/repos/jgm/pandoc/tarball/1.14.0.4,https://github.com/jgm/pandoc/releases/tag/1.14.0.4,https://api.github.com/repos/jgm/pandoc/zipball/1.14.0.4,1.14.0.4,False,False
1362954,2015-06-01T08:39:00Z,2015-06-01T19:57:12Z,pandoc 1.14.0.3,"- Allow compilation with syb 0.5.*.
- Custom writer:  fixed some compiler warnings for ghc < 7.10.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1362954/assets,https://api.github.com/repos/jgm/pandoc/releases/1362954,master,https://api.github.com/repos/jgm/pandoc/tarball/1.14.0.3,https://github.com/jgm/pandoc/releases/tag/1.14.0.3,https://api.github.com/repos/jgm/pandoc/zipball/1.14.0.3,1.14.0.3,False,False
1362950,2015-05-31T12:10:25Z,2015-06-01T19:56:45Z,pandoc 1.14.0.2,"- Allow building with hslua 0.4.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1362950/assets,https://api.github.com/repos/jgm/pandoc/releases/1362950,master,https://api.github.com/repos/jgm/pandoc/tarball/1.14.0.2,https://github.com/jgm/pandoc/releases/tag/1.14.0.2,https://api.github.com/repos/jgm/pandoc/zipball/1.14.0.2,1.14.0.2,False,False
1351128,2015-05-29T03:36:04Z,2015-05-29T04:40:47Z,pandoc 1.14.0.1,"- Fixed problem with building of `reference.docx` and `reference.odt` when the `embed_data_files` flag is used.  Instead of having a phase of the build where `reference.docx` and `reference.odt` are created from their constituent data files, we now construct these archives from their constituents when a `docx` or `odt` is built.  The  constituent files have been moved from `extra-source-files` to `data-files`, and `reference.docx` and `reference.odt` have been  removed. Users can create their own `reference.docx` or `reference.odt` by using pandoc to create a simple `docx` or `odt`. `make-reference-files.hs` has been removed, simplifying the build  process (#2187)
- Don't include generated man pages in extra-source-files (#2189).
- Bumped upper bound for aeson.
- ConTeXt writer:  create internal link anchors for Div elements with  identifiers.  (This is needed for linked citations to work.)
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1351128/assets,https://api.github.com/repos/jgm/pandoc/releases/1351128,master,https://api.github.com/repos/jgm/pandoc/tarball/1.14.0.1,https://github.com/jgm/pandoc/releases/tag/1.14.0.1,https://api.github.com/repos/jgm/pandoc/zipball/1.14.0.1,1.14.0.1,False,False
1346134,2015-05-28T04:21:26Z,2015-05-28T05:18:37Z,pandoc 1.14,"## New features
-   Added `commonmark` as input and output format.
-   Added `--verbose` flag for debugging output in PDF production (#1840, #1653).
-   Allow wildcards in `--epub-embed-font` arguments (#1939).
-   Added `--latex-engine-opt` option (#969, #1779, Sumit Sahrawat).
-   Added `shortcut_reference_links` extension (Konstantin Zudov, #1977). This is enabled by default for those markdown flavors that support reading shortcut reference links, namely: `markdown`, `markdown_strict`, `markdown_github`, `markdown_php`. If the extension is enabled, the reader parses shortcut reference links like `[foo]`, and the writer creates such links unless doing so would cause problems. Users of markdown flavors that support shortcut reference links should not notice a difference in reading markdown, but the markdown pandoc produces may differ. If shortcut links are not desired, the extension can be disabled in the normal way.

## Behavior changes
-   `--toc` is now supported for `docx` output (#458, Nikolay Yakimov). A ""dirty"" TOC is created at the beginning of document. It can be regenerated after the document has been opened.
-   An implicit `--filter pandoc-citeproc` is now triggered only when the `--bibliography` option is used, and not when the `bibliography` field in metadata is specified (#1849).
-   Markdown reader:
  -   Reference links with `implicit_header_references` are no longer case-sensitive (#1606).
  -   Definition lists no longer require indentation for first line (#2087). Previously the body of the definition (after the `:` or `~` marker) needed to be in column 4. This commit relaxes that requirement, to better match the behavior of PHP Markdown Extra. So, now this is a valid definition list:
    
    ```
    foo
    : bar
    ```
  -   Resolve a potentially ambiguity with table captions:
    
    ```
    foo
    
      : bar
    
      -----
      table
      -----
    ```
  
  Is ""bar"" a definition, or the caption for the table? We'll count it as a caption for the table.
  -   Disallow headerless pipe tables (#1996), to conform to GFM and PHP Markdown Extra. Note: If you have been using headerless pipe tables, this change may cause existing tables to break.
  -   Allow pipe tables with header but no body (#2017).
  -   Allow a digit as first character of a citation key (Matthias Troffaes). See https://github.com/jgm/pandoc-citeproc/issues/97
-   LaTeX reader:
  -   Don't limit includes to `.tex` extension (#1882). If the extension is not `.tex`, it must be given explicitly in the `\input` or `\include`.
-   Docx reader:
  -   Allow numbering in the style file. This allows inherited styles with numbering (lists) (Jesse Rosenthal).
-   Org reader:
  -   Support smart punctuation (Craig Bosma).
  -   Drop trees with a :noexport: tag (Albert Krewinkel). Trees having a `:noexport:` tag set are not exported. This mirrors org-mode.
  -   Put header tags into empty spans (Albert Krewinkel, #2160). Org mode allows headers to be tagged: `* Headline  :TAG1:TAG2`. Instead of being interpreted as part of the headline, the tags are now put into the attributes of empty spans. Spans without textual content won't be visible by default, but they are detectable by filters. They can also be styled using CSS when written as HTML.
  -   Generalize code block result parsing (Albert Krewinkel). Previously, only code blocks were recognized as result blocks; now, any kind of block can be the result.
-   Append newline to the LineBreak in Dokuwiki, HTML, EPUB, LaTeX, MediaWiki, OpenDocument, Texinfo writers (#1924, Tim Lin).
-   HTML writer:
  -   Add ""inline"" or ""display"" class to math spans (#1914). This allows inline and display math to be styled differently.
  -   Include raw latex blocks if `--mathjax` specified (#1938).
  -   Require highlighting-kate &gt;= 0.5.14 (#1903). This ensures that all code blocks will be wrapped in a `div` with class `sourceCode`. Also, the default highlighting CSS now adds `div.sourceCode { x-overflow: auto; }`, which means that code blocks (even with line numbers) will acquire a scroll bar on screens too small to display them (e.g. mobile phones). See also jgm/highlighting-kate#65.
-   LaTeX writer:
  -   Use a declaration for tight lists (Jose Luis Duran, Joseph Harriott). Previously, pandoc hard-coded some commands to make tight lists in LaTeX. Now we use a custom command instead, allowing the styling to be changed in a macro in the header. (Note: existing templates may need to be modified to include the definition of this macro. See the current template.)
  -   Beamer output: if the header introducing a slide has the class `fragile`, add the `[fragile]` option to the slide (#2119).
-   MediaWiki writer:
  -   Use `File:` instead of the deprecated `Image:` for images and other media files (Greg Rundlett).
-   DocBook writer:
  -   Render a `Div (id,_,_) [Para _]` element as a `para` element with an `id` attribute. This makes links to citations work in DocBook with pandoc-citeproc.
-   RST writer:
  -   Normalize headings to sequential levels (Nikolay Yakimov). This is pretty much required by docutils.
  -   Treat headings in block quotes, etc as rubrics (Nikolay Yakimov).
  -   Better handling of raw latex inline (#1961). We use `:raw-latex:`...`` and add a definition for this role to the template.
-   EPUB writer:
  -   Remove `linear=no` from cover `itemref` (#1609).
  -   Don't use `sup` element for epub footnotes (#1995). Instead, just use an a element with class `footnoteRef`. This allows more styling options, and provides better results in some readers (e.g. iBooks, where anything inside the a tag breaks popup footnotes).
  -   Take TOC title from `toc-title` metadata field.
-   Docx writer:
  -   Implemented `FirstParagraph` style (Jesse Rosenthal). Following the ODT writer, we add the `FirstParagraph` style to the first text paragraph following an image, blockquote, table, heading, or beginning of document. This allows it to be styled differently. The default is for it to be the same as `Normal`.
  -   Added `BodyText` style (Jesse Rosenthal). We apply a `BodyText` style to all unstyled paragraphs. This is, essentially, the same as `Normal`, except that since not everything inherits from `BodyText` (the metadata won't, for example, or the headers or footnote numbers), we can change the text in the body without having to make exceptions for everything. If we do want to change _everything_, we can still do it through `Normal`.
  -   Altered `Blockquote` style slightly (Jesse Rosenthal). Since `BlockQuote` derives from `BodyText`, we just want to specify by default that it won't indent, regardless of what `BodyText` does. Note that this will not produce any visible difference in the default configuration.
  -   Take TOC title from `toc-title` metadata field (Nikolay Yakimov).
  -   Added a style to figure images (Nikolay Yakimov). Figures with empty captions use style `Figure`. Figures with nonempty captions use style `Figure with Caption`, which is based on `Figure`, and additionally has `keepNext` set.
-   ODT writer:
  -   Added figure captions (Nikolay Yakimov). The following styles are used for figures: `Figure` -- for figure with empty caption), `FigureWithCaption` (based on `Figure`) -- for figure with caption, `FigureCaption` (based on `Caption`) -- for figure captions. Also, `TableCaption` (based on `Caption`) is used for table captions.

## API changes
-   New `Text.Pandoc.Error` module with `PandocError` type (Matthew Pickering).
-   All readers now return `Either PandocError Pandoc` instead of `Pandoc` (Matthew Pickering). This allows better handling of errors.
-   Added `Text.Pandoc.Writers.CommonMark`, exporting `writeCommonMark`.
-   Added `Text.Pandoc.Readers.CommonMark`, exporting `readCommonMark`.
-   Derive `Data` and `Typeable` instances for `MediaBag`, `Extension`, `ReaderOptions`, `EPUBVersion`, `CiteMethod`, `ObfuscationMethod`, `HTMLSlideVariant`, `TrackChanges`, `WriterOptions` (Shabbaz Youssefi).
-   New `Ext_shortcut_reference_links` constructor for `Extension` (Konstantin Zudov).

## Bug fixes
-   Markdown reader:
  -   Allow smart `'` after inline math (#1909, Nikolay Yakimov).
  -   Check for tex macros after indented code (#1973).
  -   Rewrote `charsInBalancedBrackets` for efficiency.
  -   Make sure a closing `</div>` doesn't get included in a definition list item (#2127).
  -   Don't parse bracketed text as citation if it might be a link, image, or footnote (Nikolay Yakimov).
  -   Require space after key in mmd title block (#2026, Nikolay Yakimov). Require space after key-value delimiter colon in mmd title block.
  -   Require nonempty value in mmd title block (Nikolay Yakimov).
  -   Disable all metadata block extensions when parsing metadata field values (#2026, Nikolay Yakimov). Otherwise we could get a mmd title block inside YAML metadata, for example.
-   HTML reader:
  -   Improve self-closing tag detection in `htmlInBalanced` (#2146).
  -   Handle tables with `<th>` in body rows (#1859, mb21).
  -   Fixed `htmlTag` (#1820). If the tag parses as a comment, we check to see if the input starts with `<!--`. If not, it's bogus comment mode and we fail `htmlTag`.
  -   Handle `base` tag; if it has an `href` value, this is added to all relative URLs in links and images.
-   DocBook reader:
  -   Look inside ""info"" elements for section titles (#1931).
-   Docx reader:
  -   Parse images in deprecated vml format (Jesse Rosenthal).
  -   Allow sub/superscript verbatims (Jesse Rosenthal). Verbatim usually shuts off all other run styles, but we don't want it to shut off sub/superscript.
-   LaTeX reader:
  -   Handle `tabular*` environment (#1850). Note that the table width is not actually parsed or taken into account, but pandoc no longer chokes on it.
  -   Ignore options in `\lstinline` rather than raising error (#1997).
  -   Add some test cases for simple tables (Mathias Schenner).
  -   Handle valign argument in tables (Mathias Schenner) (currently we just ignore this).
  -   Allow non-empty colsep in tables (Mathias Schenner). The `tabular` environment allows non-empty column separators with the ""@{...}"" syntax. Previously, pandoc would fail to parse tables if a non-empty colsep was present. With this commit, these separators are still ignored, but the table gets parsed. A test case is included.
  -   Recognize `\newpage` as a block command.
  -   Allow block content in  (#2001).
  -   Check for block-level newcommand aliases in blockCommand (Nikolay Yakimov).
  -   Guard against paragraph starting with inline macro (Nikolay Yakimov).
  -   Properly gobble spaces after `\\` (#2007).
-   Textile reader:
  -   Handle newlines in table cells, and empty cells (#1919).
-   Org reader:
  -   Allow image links with non-image targets (Hans-Peter Deifel). This matches behavior of Org-Mode for links like `[[http://example.com][https://www.haskell.org/static/img/logo.png]]`.
-   Docbook writer:
  -   Don't print empty id attributes (thanks to Steve Horne).
-   HTML writer:
  -   Fixed list-style-type for numbered example lists. Should be ""decimal,"" not ""example"" (#1902).
  -   Do not omit missing `alt` attribute on `img` tag (#1131, Konstantin Zudov).
  -   Allow multiple colgroups in table (#2122).
  -   In revealjs, ensure that lists in speaker notes don't add ""fragment"" classes, which can cause additional keypresses to be needed to advance a slide (#1394).
-   LaTeX writer:
  -   Don't escape `$` in URL (#1913).
  -   Don't use listings in headers (Matthew Pickering, #1963).
  -   Recognize book documentclass if set in metadata (#1971). This sets `--chapters` implicitly if the documentclass in metadata is a book documentclass. Previously this was done only if a book documentclass was set in a variable.
  -   Add a `\label` in `\hyperdef` for Div, Span (or links don't work).
  -   Make `mainlang` work when `lang` is in metadata (#2174).
-   Texinfo writer:
  -   Fix wrapping by using breakable spaces (Tim Lin).
-   RST writer:
  -   Fixed toc depth in RST writer. Previously the depth was being rendered as a floating point number with a decimal point.
-   Markdown writer:
  -   Improved escaping (#2086). `<` should not be escaped as `\<`, for compatibility with original Markdown. We now escape `<` and `>` with entities. Also, we now backslash-escape square brackets.
  -   Avoid introducing spurious list items through wrapping (#1946).
  -   Don't emit span tags if plain or raw HTML disabled.
-   MediaWiki writer:
  -   Convert spaces to underscores in wikilink URL (#1982), like MediaWiki.
-   AsciiDoc writer:
  -   Insert some needed blank lines (#1860).
  -   Avoid wrapping after list marker (#1858).
-   EPUB writer:
  -   Properly handle internal links to IDs in spans, divs (#1884).
  -   Use plain writer for metadata dc: fields (#2121). This gives better results when we have, e.g. multiple paragraphs. Note that tags aren't allowed in these fields.
  -   Properly handle image links without an extension (#1855).
  -   Improved chapter splitting and internal link rewriting (#1887, #2162, #2163). This will ensure that internal links work and that the references section produced by pandoc-citeproc is in its own chapter.
  -   Fixed handling of svg images (#2183).
-   ICML writer:
  -   Better handling of raw blocks and inlines (#1951). Previously these were always escaped and printed verbatim. Now they are ignored unless the format is `icml`, in which case they are passed through unescaped.
  -   Fixed image URIs in ICML output (gohai).
-   Custom writer:
  -   Raise error if loadstring returns an error status.
  -   Raise `PandocLuaException` instead of using 'error'. Eventually we'll change the return type so that no exception is involved, but at least this can be trapped.
  -   Use UTF-8 aware bytestring conversion.
  -   Set foreign encoding to UTF-8 (Nikolay Yakimov, #2101, #1634). Also factored out ByteString, since it's only used as an intermediate representation.
-   Docx writer:
  -   Copy hyphenation settings from reference.docx (Nikolay Yakimov).
  -   Filter out illegal XML characters (#1992, Matthew Pickering).
  -   Added `noProof` to docx syntax highlighting `SourceCode` style.
  -   Added footnotes id -1 and 0 (Jesse Rosenthal). Word uses, by default, footnotes with id -1 and 0 for separators. If a user modifies `reference.docx`, they will end up with a `settings.xml` file that references these footnotes, but no such footnotes in the document. This will produce a corruption error. Here we add these to the document and `settings.xml` file, so future modifications won't break the file.
  -   Handle lists correctly inside table cells (Jesse Rosenthal). Previously we didn't transform lists inside table cells.
  -   Set firstRow information in tables (Nikolay Yakimov).
  -   Don't replace `SourceCode` style in `reference.docx` if it is defined there (Nikolay Yakimov, #1872). If `--no-highlight` specified, remove any `SourceCode` and `*Tok` styles in `reference.docx`.
  -   Attempt to match international style names (#1607, Nikolay Yakimov).
  -   Set these styles as custom (Nikolay Yakimov): `Author`, `Abstract`, `Compact`, `Image Caption`, `Table Caption`, `Definition Term`, `Definition`, `First Paragraph`.
  -   Rename these styles to correspond with Word `Normal.dotm` (Nikolay Yakimov): `Block Quote -> Block Text`, `Link -> Hyperlink`, `Footnote Ref -> Footnote Reference`.
  -   Added `Caption` style (Nikolay Yakimov).
  -   Changed these styles' inheritance (Nikolay Yakimov): `Image Caption <- Caption`, `Table Caption <- Caption`.
  -   Remove `SourceCode` style from `reference.docx` (#1872). This is added automatically by the docx writer.
  -   Added toc heading style to `reference.docx` (Nikolay Yakimov).
-   `Text.Pandoc.PDF`
  -   Don't suggest ""Try xelatex"" if xelatex already in use (mb21, #1832).
  -   More comprehensible errors on image conversion (#2067). EPS can't be supported without shelling out to something like ImageMagick, but at least we can avoid mysterious error messages.
-   `Text.Pandoc.Shared`:
  -   Make safeRead safe (#1801, Matthew Pickering).
  -   Addded `mapLeft`, `hush` (Matthew Pickering).
-   `Text.Pandoc.Pretty`:
  -   Remove partial function (Matthew Pickering).
-   `Text.Pandoc.SelfContained`:
  -   Add `;charset=utf-8` to script mime type if missing (#1842).
  -   Improved building of data URIs (#1940). Now base64 is used except for `text/*` mime types.
  -   `cssURLs` no longer tries to fetch fragment URLs (#2121).
  -   Properly handle data URIs in css urls (#2129). Use a proper CSS parser (adds dependency on `text-css`).
-   `Text.Pandoc.UTF8`:
  -   Better handling of bare CRs in input files (#2132). Previously we just stripped them out; now we convert other line ending styles to LF line endings.
-   `Text.Pandoc.ImageSize`:
  -   Fixed some exif header parsing bugs (#1834).
  -   Make imageSize return an Either, not a Maybe (#1834). Use `runGetOrFail` (with `binary >= 0.7`) to return `Left` on parse failure (rather than `error`).
  -   Improved warnings when image size can't be determined.
  -   Removed error landmines (Matthew Pickering).
-   Added woff2 to MIME types (Alfred Wechselberger).
-   pandoc: When a binary input format is used, warn that file arguments past the first one are being ignored (Matthew Pickering).

## Template changes
-   LaTeX template:
  -   Degrade gracefully if `\paragraph` not defined.
  -   Include `grffile` together with `graphicx` (#2074). This properly handles filenames containing spaces and dots.
  -   Redefine `\paragraph`, `\subparagraph`... to behave more like section headers (#1658).
  -   Import hyperref before polyglossia to avoid an error with xelatex, ""please load package hyperref before bidi package"" (Nick Bart).
  -   Added `toccolor` variable to control link color in toc (Kaixhin).
-   LaTeX, Beamer templates:
  -   Provide `\tightlist`, which is now used by the LaTeX writer.
  -   Use polyglossia in beamer (#85).
  -   Use `bibliography` instead of `biblio-files` (#1661). Also use `\addbibresource` instead of `\bibliography` for biblatex.
  -   Added `setotherlanguages` in polyglossia. This uses an `otherlang` variable that is derived from a comma-separated list in `lang`; the last language is `mainlang` and the others are `otherlang`.
-   EPUB templates:
  -   Use `div`, not `p`, for ""rights"" on title page.
  -   Added header-includes, include-before, include-after (#1987).
-   OpenDocument template:
  -   Use `text:p` instead of `text:h` for title. Using `text:h` causes problems with numbering. Closes #2059. Thansk to @nkalvi for diagnosing this.
-   reveal.js template:
  -   Link to non-minified css, js. The minified versions no longer ship with the library.
  -   Correctly include style CSS (#1949).
  -   New configurable options options: `center`, `maxScale`, `slideNuber` (Dmitry Smirnov, pandoc-templates#89).
  -   Moved custom CSS after theme. This allows custom CSS to modify themes, instead of being replaced by them.
  -   Allow `center` to be set to false.

## Under the hood improvements
-   Removed pre-built `reference.docx` and `reference.odt` (Nikolay Yakimov). Instead the repository now includes the component text files, and the zipped binaries are built from these using a helper program, `make-reference-files`. This should make maintenance of these components easier going forward.
-   `Text.Pandoc.Parsing`:
  -   Added new `<+?>` combinator (Nikolay Yakimov).
  -   Added `stateHeaderKeys` to `ParserState`.
-   `make_deb.sh` fixes:
  -   Detect architecture.
  -   Add Installed-Size to debian package control file (#1900).
  -   Use `fakeroot` to get permissions right.
  -   Use `mkdir` and `cp` instead of `install`.
  -   Set permissions of directories to 755.
  -   Install in `/usr` rather than `/usr/local`.
  -   Compress man pages.
  -   Combine copyright files for `pandoc`, `pandoc-citeproc`.
-   Added `Text.Pandoc.Compat.Locale` and `old-locale` flag to assist with transition to `time` 1.5.
-   Updated CONTRIBUTING.md with information about issue tags (Matthew Pickering).
-   Updated travis installs to the new sudo-less syntax (Tim Lin).
-   Updated dependency version bounds.
-   EPUB tests: don't use `joinPath`, which varies across platforms. Instead, use a forward-slash to join paths, regardless of the platform. This matches the way `MediaBag` now works.
-   Clarify JSON input and output in usage message (Caleb McDaniel).
-   Improved INSTALL instructions.
-   Always build man pages. Removed make-pandoc-man-pages flag.
-   Makefile: removed man target, now that we generate man pages by default.
-   README:
  -   Fixed typos (J. Lewis Muir).
  -   Added documentation on backtick_code_blocks (#2135, Nikolay Yakimov).
  -   Added note on in-field markup in biblio databases (Nick Bart).
  -   Fixed misleading example of raw HTML block.
  -   Various minor formatting and consistency fixes for the program options (Andreas Lööw).
  -   Made definition lists for options all ""loose"" for consistency.
  -   Added YAML biblio format to table, and note on `pandoc-citeproc`'s `--bib2json` and `--bib2yaml` options (Nick Bart).
  -   Removed obsolete reference to `mods2yaml` (Nick Bart).
  -   Added section on syntax highlighting.
  -   Documented `toccolor` variable.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/1346134/assets,https://api.github.com/repos/jgm/pandoc/releases/1346134,master,https://api.github.com/repos/jgm/pandoc/tarball/1.14,https://github.com/jgm/pandoc/releases/tag/1.14,https://api.github.com/repos/jgm/pandoc/zipball/1.14,1.14,False,False
799908,2014-12-20T05:41:53Z,2014-12-20T08:43:08Z,pandoc 1.13.2,"This is mainly a spit-and-polish release, though there is one new reader and some minor new features.  Note that, for the first time, we are providing a linux binary (64-bit Debian/Ubuntu).
-   TWiki Reader: add new new twiki reader (API chaneg, Alexander Sulfrian).
-   Markdown reader:
  -   Better handling of paragraph in div (#1591). Previously text that ended a div would be parsed as Plain unless there was a blank line before the closing div tag.
  -   Don't treat a citation as a reference link label (#1763).
  -   Fix autolinks with following punctuation (#1811). The price of this is that autolinked bare URIs can no longer contain `>` characters, but this is not a big issue.
  -   Fix `Ext_lists_without_preceding_blankline` bug (#1636, Artyom).
  -   Allow `startnum` to work without `fancy_lists`. Formerly `pandoc -f markdown-fancy_lists+startnum` did not work properly.
-   RST reader (all Daniel Bergey):
  -   Parse quoted literal blocks (#65). RST quoted literal blocks are the same as indented literal blocks (which pandoc already supports) except that the quote character is preserved in each line.
  -   Parse RST class directives. The class directive accepts one or more class names, and creates a Div value with those classes. If the directive has an indented body, the body is parsed as the children of the Div. If not, the first block folowing the directive is made a child of the Div. This differs from the behavior of rst2xml, which does not create a Div element. Instead, the specified classes are applied to each child of the directive. However, most Pandoc Block constructors to not take an Attr argument, so we can't duplicate this behavior.
  -   Warn about skipped directives.
  -   Literal role now produces Code. Code role should have ""code"" class.
  -   Improved support for custom roles
    -   Added `sourceCode` to classes for `:code:` role, and anything inheriting from it.
    -   Add the name of the custom role to classes if the Inline constructor supports Attr.
    -   If the custom role directive does not specify a parent role, inherit from the `:span:` role.
  
  This differs somewhat from the `rst2xml.py` behavior. If a custom role inherits from another custom role, Pandoc will attach both roles' names as classes. `rst2xml.py` will only use the class of the directly invoked role (though in the case of inheriting from a `:code:` role with a `:language:` defined, it will also provide the inherited language as a class).
  -   Warn about ignored fields in role directives.
-   LaTeX reader:
  -   Parse label after caption into a span instead of inserting an additional paragraph of bracketed text (#1747).
  -   Parse math environments as inline when possible (#1821).
  -   Better handling of `\noindent` and `\greektext` (#1783).
  -   Handle `\texorpdfstring` more gracefully.
  -   Handle `\cref` and `\sep` (Wikiwide).
  -   Support `\smartcite` and `\Smartcite` from biblatex.
-   HTML reader:
  -   Retain display type of MathML output (#1719, Matthew Pickering).
  -   Recognise `<br>` tags inside `<pre>` blocks (#1620, Matthew Pickering).
  -   Make `embed` tag either block or inline (#1756).
-   DocBook reader:
  -   Handle `keycombo`, `keycap` (#1815).
  -   Get string content in inner tags for literal elements (#1816).
  -   Handle `menuchoice` elements better, with a `>` between (#1817).
  -   Include `id` on section headers (#1818).
  -   Document/test ""type"" as implemented (Brian O'Sullivan).
  -   Add support for calloutlist and callout (Brian O'Sullivan). We treat a calloutlist as a bulleted list. This works well in practice.
  -   Add support for `classname` (Bryan O'Sullivan).
-   Docx reader:
  -   Fix window path for image lookup (Jesse Rosenthal). Don't use os-sensitive ""combine"", since we always want the paths in our zip-archive to use forward-slashes.
  -   Single-item headers in ordered lists are headers (Jesse Rosenthal). When users number their headers, Word understands that as a single item enumerated list. We make the assumption that such a list is, in fact, a header.
  -   Rewrite rewriteLink to work with new headers (Jesse Rosenthal). There could be new top-level headers after making lists, so we have to rewrite links after that.
  -   Use polyglot header list (Jesse Rosenthal). We're just keeping a list of header formats that different languages use as their default styles. At the moment, we have English, German, Danish, and French. We can continue to add to this. This is simpler than parsing the styles file, and perhaps less error-prone, since there seems to be some variations, even within a language, of how a style file will define headers.
  -   Remove header class properly in other langs (Jesse Rosenthal). When we encounter one of the polyglot header styles, we want to remove that from the par styles after we convert to a header. To do that, we have to keep track of the style name, and remove it appropriately.
  -   Account for external link URLs with anchors. Previously, if a URL had an anchor, the reader would incorrectly identify it as an internal link and return only the anchor as URL. (Caleb McDaniel)
  -   Fix for Issue #1692 (i18n styles) (Nikolay Yakimov).
-   Org reader:
  -   Added state changing blanklines (Jesse Rosenthal). This allows us to emphasize at the beginning of a new paragraph (or, in general, after blank lines).
  -   Fixed bug with bulleted lists:
    -   a
    -   b
    -   c
  
  was being parsed as a list, even though an unindented `*` should make a heading. See http://orgmode.org/manual/Plain-lists.html#fn-1.
  -   Org reader: absolute, relative paths in link (#1741, Albert Krewinkel). The org reader was too restrictive when parsing links; some relative links and links to files given as absolute paths were not recognized correctly.
  -   Org reader: allow empty links (jgm/gitit#471, Albert Krewinkel). This is important for use in gitit, which uses empty links for wikilinks.
  -   Respect indent when parsing Org bullet lists (#1650, Timothy Humphries). Fixes issue with top-level bullet list parsing.
  -   Fix indent issue for definition lists (Timothy Humphries, see #1650, #1698, #1680).
  -   Parse multi-inline terms correctly in definition list (#1649, Matthew Pickering).
  -   Fix rules for emphasis recognition (Albert Krewinkel). Things like `/hello,/` or `/hi'/` were falsy recognized as emphasised strings. This is wrong, as `,` and `'` are forbidden border chars and may not occur on the inner border of emphasized text.
  -   Drop COMMENT document trees (Albert Krewinkel). Document trees under a header starting with the word `COMMENT` are comment trees and should not be exported. Those trees are dropped silently (#1678).
  -   Properly handle links to `file:target` (Albert Krewinkel). Org links like `[[file:target][title]]` were not handled correctly, parsing the link target verbatim. The org reader is changed such that the leading `file:` is dropped from the link target (see #756, #1812).
  -   Parse LaTeX-style MathML entities (#1657, Albert Krewinkel). Org supports special symbols which can be included using LaTeX syntax, but are actually MathML entities. Examples for this are `\nbsp` (non-breaking space), `\Aacute` (the letter A with accent acute) or `\copy` (the copyright sign ©)
-   EPUB reader:
  -   URI handling improvements. Now we outsource most of the work to `fetchItem'`. Also, do not include queries in file extensions (#1671).
-   LaTeX writer:
  -   Use `\texorpdfstring` for section captions when needed (Vaclav Zeman).
  -   Handle consecutive linebreaks (#1733).
  -   Protect graphics in headers (Jesse Rosenthal). Graphics in `\section`/`\subsection` etc titles need to be `\protect`ed.
  -   Put `~` before header in list item text (Jesse Rosenthal). Because of the built-in line skip, LaTeX can't handle a section header as the first element in a list item.
  -   Avoid using reserved characters as `\lstinline` delimiters (#1595).
  -   Better handling of display math in simple tables (#1754). We convert display math to inline math in simple tables, since LaTeX can't deal with display math in simple tables.
  -   Escape spaces in code (#1694, Bjorn Buckwalter).
-   MediaWiki writer:
  -   Fixed links with URL = text. Previously these were rendered as bare words, even if the URL was not an absolute URL (#1825).
-   ICML writer:
  -   Don't force all citations into footnotes.
-   RTF writer:
  -   Add blankline at end of output (#1732, Matthew Pickering).
-   RST writer:
  -   Ensure blank line after figure.
  -   Avoid exces whitespace after last list item (#1777).
  -   Wrap line blocks with spaces before continuations (#1656).
  -   Fixed double-rendering of footnotes in RST tables (#1769).
-   DokuWiki writer:
  -   Better handling of block quotes. This change ensures that multiple paragraph blockquotes are rendered using native `>` rather than as HTML (#1738).
  -   Fix external images (#1739). Preface relative links with "":"", absolute URIs without. (Timothy Humphries)
-   HTML writer:
  -   Use protocol-relative URL for mathjax.
  -   Put newline btw img and caption paragraph.
  -   MathML now outputted with tex annotation (#1635, Matthew Pickering).
  -   Add support for KaTeX HTML math (#1626, Matthew Pickering). This adds `KaTeX` to `HTMLMathMethod` (API change).
  -   Don't double render when `email-obfuscation=none` (#1625, Matthew Pickering).
  -   Make header attributes work outside top level (#1711). Previously they only appeared on top level header elements. Now they work e.g. in blockquotes.
-   ODT writer:
  -   Correctly handle images without extensions (#1729).
  -   Strip querystring in ODT write (#1682, Todd Sifleet).
-   FB2 writer:
  -   Add newline to output.
-   EPUB writer:
  -   Don't add `sourceURL` to absolute URIs (#1669).
  -   Don't use unsupported `opf:title-type` for epub2.
  -   Include ""landmarks"" section in nav document for epub3 (#1757).
  -   Removed playOrder from navpoint elements in ncx file (#1760). These aren't required, and they make manual modification of epubs difficult.
  -   Extract title even from structured title.
  -   Don't include nav node in spine unless `--toc` was requested. Previously we included it in the spine with `linear=""no""`, leading to odd results in some readers (#1593).
  -   Fixed absolute URI detection (#1672).
  -   Correctly resolve relative URIs (#1671).
  -   Use regular page template for `nav.xhtml`, including doctype (#1759).
-   Docx writer:
  -   Put docx table captions above tables (#1641, Nikolay Yakimov).
  -   Get the page width from the reference docx file, and use it to scale images that are too large to fit (Grégory Bataille).
  -   Partial fix for #1607 (Nikolay Yakimov). International heading styles are inferred based on `<w:name val=""heading #"">` fallback, if there are no en-US ""Heading#"" styles
  -   Look in user data dir for archive `reference.docx`.
  -   Renumber header and footer relationships to avoid collisions (Jesse Rosenthal). We previously took the old relationship names of the headers and footer in secptr. That led to collisions. We now make a map of availabl names in the relationships file, and then rename in secptr.
-   ConTeXt writer:
  -   Add function toLabel (Mark Szepieniec). This function can be used to sanitize reference labels so that they do not contain any of the illegal characters #[]"",{}%()|= . Currently only Links have their labels sanitized, because they are the only Elements that use passed labels.
-   `Text.Pandoc.Shared`:
  -   Moved import of `toChunks` outside of CPP conditional (#1590).
  -   Fix `inDirectory` to reset to the original directory in case an exception occurs (Freiric Barral).
-   Templates:
  -   LaTeX template: load polyglossia before bibtex (jgm/pandoc-templates#70). Thanks to bluebirch.
  -   LaTeX template: Added `\VerbatimFootnotes` if there is verbatim in notes (#1616).
  -   LaTeX template: Add shorthands=off to babel options (#1648).
  -   EPUB, EPUB3 templates: Added `id=""cover""` to body of cover page. This aids styling, making it possible for example to set 0 margins on the title page (#1758).
  -   EPUB, EPUB3 templates: Handle structured metadata on titlepage. Previously we just expected 'title', 'subtitle', 'author', 'date'. Now we still support those, but also support the format recommended for epub metadata in the pandoc README:
-   `Text.Pandoc.Templates.getDefaultTemplate`: don't fail when called with ""fb2"" (#1660).
-   `Text.Pandoc.Parsing`:
  -   Fixed `inlineMath` so it handles `\text{..}` containing `$`. For example: `$x = \text{the $n$th root of $y$}` (#1677).
  -   Change `parseFromString` to fail if not all input is consumed. (Matthew Pickering)
  -   Moved `addWarning` from Markdown reader to `Parsing`, so it can be used by more readers (API change, Daniel Bergey).
-   `Text.Pandoc.Pretty`:
  -   Improve performance of `realLength` (Matthew Pickering).
  -   Make CR + BLANKLINE = BLANKLINE. This fixes an extra blank line we were getting at the end of markdown fragments (as well as rst, org, etc.) (#1705).
-   `Text.Pandoc.MIME`:
  -   Add mime type for WebVTT (Jason Ronallo).
  -   Changed mime type for `otf` to `application/vnd.ms-opentype` (#1761). This is needed for epub3 validation.
-   `Text.Pandoc.MediaBag`:
  -   Fix Windows specific path problems (#1597).
-   `Text.Pandoc.Shared`:
  -   Make `collapseFilePath` OS-agnostic (Matthew Pickering).
-   Link the test suite using `-threaded`. This allows the test suite to be run using `+RTS -N`.
-   Added `network` dependency under `network-uri` flag in test section.
-   Give better error messages when someone tries to convert from pdf, doc, odt (#1683).
-   Added `track` to list of tags treated by `--self-contained` (#1664).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/799908/assets,https://api.github.com/repos/jgm/pandoc/releases/799908,master,https://api.github.com/repos/jgm/pandoc/tarball/1.13.2,https://github.com/jgm/pandoc/releases/tag/1.13.2,https://api.github.com/repos/jgm/pandoc/zipball/1.13.2,1.13.2,False,False
526135,2014-08-31T06:15:04Z,2014-08-31T06:23:39Z,pandoc 1.13.1,"-   Fixed `--self-contained` with Windows paths (#1558). Previously `C:\foo.js` was being wrongly interpreted as a URI.
-   HTML reader: improved handling of tags that can be block or inline. Previously a section like this would be enclosed in a paragraph, with RawInline for the video tags (since video is a tag that can be either block or inline):
  
  ```
  <video controls=""controls"">
     <source src=""../videos/test.mp4"" type=""video/mp4"" />
     <source src=""../videos/test.webm"" type=""video/webm"" />
     <p>
        The videos can not be played back on your system.<br/>
        Try viewing on Youtube (requires Internet connection):
        <a href=""http://youtu.be/etE5urBps_w"">Relative Velocity on
  Youtube</a>.
     </p>
  </video>
  ```
  
  This change will cause the video and source tags to be parsed as RawBlock instead, giving better output. The general change is this: when we're parsing a ""plain"" sequence of inlines, we don't parse anything that COULD be a block-level tag.
-   Docx reader:
  -   Be sensitive to user styles. Note that ""Hyperlink"" is ""blacklisted,"" as we don't want the default underline styling to be inherited by all links by default (Jesse Rosenthal).
  -   Read single paragraph in table cell as `Plain` (Jesse Rosenthal). This makes to docx reader's native output fit with the way the markdown reader understands its markdown output.
-   Textile writer: Extended the range of cases where native textile tables will be used (as opposed to raw HTML): we now handle any alignment type, but only for simple tables with no captions.
-   Txt2Tags reader:
  -   Header is now parsed only if standalone flag is set (Matthew Pickering).
  -   The header is now parsed as meta information. The first line is the `title`, the second is the `author` and third line is the `date` (Matthew Pickering).
  -   Corrected formatting of `%%mtime` macro (Matthew Pickering).
  -   Fixed crash when reading from stdin.
-   EPUB writer: Don't use page-progression-direction in EPUB2, which doesn't support it. Also, if page-progression-direction not specified in metadata, don't include the attribute even in EPUB3; not including it is the same as including it with the value ""default"", as we did before. (#1550)
-   Org writer: Accept example lines with indentation at the beginning (Calvin Beck).
-   DokuWiki writer:
  -   Refactor to use Reader monad (Matthew Pickering).
  -   Avoid using raw HTML in table cells; instead, use `\\` instead of newlines (Jesse Rosenthal).
  -   Properly handle HTML table cell alignments, and use spacing to make the tables look prettier (#1566).
-   Docx writer:
  -   Bibliography entries get `Bibliography` style (#1559).
  -   Implement change tracking (Jesse Rosenthal).
-   LaTeX writer:
  -   Fixed a bug that caused a table caption to repeat across all pages (Jose Luis Duran).
  -   Improved vertical spacing in tables and made it customizable using standard lengths set by booktab. See https://groups.google.com/forum/#!msg/pandoc-discuss/qMu6_5lYy0o/ZAU7lzAIKw0J (Jose Luis Duran).
  -   Added `\strut` to fix spacing in multiline tables (Jose Luis Duran).
  -   Use `\tabularnewline` instead of `\\` in table cells (Jose Luis Duran).
  -   Made horizontal rules more flexible (Jose Luis Duran).
-   Text.Pandoc.MIME:
  -   Added `MimeType` (type synonym for `String`) and `getMimeTypeDef`. Code cleanups (Artyom Kazak).
-   Templates:
  -   LaTeX template: disable microtype protrusion for typewriter font (#1549, thanks lemzwerg).
-   Improved OSX build procedure.
-   Added `network-uri` flag, to deal with split of `network-uri` from `network`.
-   Fix build dependencies for the `trypandoc` flag, so that they are ignored if `trypandoc` flag is set to False (Gabor Pali).
-   Updated README to remove outdated claim that `--self-contained` looks in the user data directory for missing files.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/526135/assets,https://api.github.com/repos/jgm/pandoc/releases/526135,master,https://api.github.com/repos/jgm/pandoc/tarball/1.13.1,https://github.com/jgm/pandoc/releases/tag/1.13.1,https://api.github.com/repos/jgm/pandoc/zipball/1.13.1,1.13.1,False,False
496970,2014-08-17T23:29:22Z,2014-08-18T01:11:55Z,pandoc 1.13.0.1,"This release fixes a couple of serious regressions in 1.13.
- Docx writer:
  - Fixed regression which bungled list numbering (#1544), causing all lists to appear as basic ordered lists.
  - Include row width in table rows (Christoffer Ackelman, Viktor Kronvall).  Added a property to all table rows where the sum of column widths is specified in pct (fraction of 5000).  This helps persuade Word to lay out the table with the widths we specify.
- Fixed a bug in Windows 8 which caused pandoc not to find the `pandoc-citeproc` filter (#1542).
- Docx reader: miscellaneous under-the-hood improvements (Jesse Rosenthal).  Most significantly, the reader now uses Builder, leading to some performance improvements.
- HTML reader:  Parse appropriately styled span as SmallCaps.
- Markdown writer: don't escape `$`, `^`, `~` when `tex_math_dollars`, `superscript`, and `subscript` extensions, respectively, are deactivated (#1127).
- Added `trypandoc` flag to build CGI executable used in the online demo.
- Makefile:  Added 'quick', 'osxpkg' targets.
- Updated README in templates to indicate templates license.  The templates are dual-licensed, BSD3 and GPL2+.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/496970/assets,https://api.github.com/repos/jgm/pandoc/releases/496970,master,https://api.github.com/repos/jgm/pandoc/tarball/1.13.0.1,https://github.com/jgm/pandoc/releases/tag/1.13.0.1,https://api.github.com/repos/jgm/pandoc/zipball/1.13.0.1,1.13.0.1,False,False
495169,2014-08-15T16:51:59Z,2014-08-16T04:06:53Z,pandoc 1.13,"## New features
-   Added `docx` as an input format (Jesse Rosenthal). The docx reader includes conversion of native Word equations to pandoc LaTeX `Math` elements. Metadata is taken from paragraphs at the beginning of the document with styles `Author`, `Title`, `Subtitle`, `Date`, and `Abstract`.
-   Added `epub` as an input format (Matthew Pickering). The epub reader includes conversion of MathML to pandoc LaTeX `Math` elements.
-   Added `t2t` (Txt2Tags) as an input format (Matthew Pickering). Txt2tags is a lightweight markup format described at http://txt2tags.org/.
-   Added `dokuwiki` as an output format (Clare Macrae).
-   Added `haddock` as an output format.
-   Added `--extract-media` option to extract media contained in a zip container (docx or epub) while adjusting image paths to point to the extracted images.
-   Added a new markdown extension, `compact_definition_lists`, that restores the syntax for definition lists of pandoc 1.12.x, allowing tight definition lists with no blank space between items, and disallowing lazy wrapping. (See below under behavior changes.)
-   Added an extension `epub_html_exts` for parsing HTML in EPUBs.
-   Added extensions `native_spans` and `native_divs` to activate parsing of material in HTML span or div tags as Pandoc Span inlines or Div blocks.
-   `--trace` now works with the Markdown, HTML, Haddock, EPUB, Textile, and MediaWiki readers. This is an option intended for debugging parsing problems; ordinary users should not need to use it.

## Behavior changes
-   Changed behavior of the `markdown_attribute` extension, to bring it in line with PHP markdown extra and multimarkdown. Setting `markdown=""1""` on an outer tag affects all contained tags, recursively, until it is reversed with `markdown=""0""` (#1378).
-   Revised markdown definition list syntax (#1429). Both the reader and writer are affected. This change brings pandoc's definition list syntax into alignment with that used in PHP markdown extra and multimarkdown (with the exception that pandoc is more flexible about the definition markers, allowing tildes as well as colons). Lazily wrapped definitions are now allowed. Blank space is required between list items. The space before a definition is used to determine whether it is a paragraph or a ""plain"" element. **WARNING: This change may break existing documents!** Either check your documents for definition lists without blank space between items, or use `markdown+compact_definition_lists` for the old behavior.
-   `.numberLines` now works in fenced code blocks even if no language is given (#1287, jgm/highlighting-kate#40).
-   Improvements to `--filter`:
  -   Don't search PATH for a filter with an explicit path. This fixed a bug wherein `--filter ./caps.py` would run `caps.py` from the system path, even if there was a `caps.py` in the working directory.
  -   Respect shebang if filter is executable (#1389).
  -   Don't print misleading error message. Previously pandoc would say that a filter was not found, even in a case where the filter had a syntax error.
-   HTML reader:
  -   Parse `div` and `span` elements even without `--parse-raw`, provided `native_divs` and `native_spans` extensions are set. Motivation: these now generate native pandoc Div and Span elements, not raw HTML.
  -   Parse EPUB-specific elements if the `epub_html_exts` extension is enabled. These include `switch`, `footnote`, `rearnote`, `noteref`.
-   Org reader:
  -   Support for inline LaTeX. Inline LaTeX is now accepted and parsed by the org-mode reader. Both math symbols (like `\tau`) and LaTeX commands (like `\cite{Coffee}`), can be used without any further escaping (Albert Krewinkel).
-   Textile reader and writer:
  -   The `raw_tex` extension is no longer set by default. You can enable it with `textile+raw_tex`.
-   DocBook reader:
  -   Support `equation`, `informalequation`, `inlineequation` elements with `mml:math` content. This is converted into LaTeX and put into a Pandoc Math inline.
-   Revised `plain` output, largely following the style of Project Gutenberg:
  -   Emphasis is rendered with `_underscores_`, strong emphasis with ALL CAPS.
  -   Headings are rendered differently, with space to set them off, not with setext style underlines. Level 1 headers are ALL CAPS.
  -   Math is rendered using unicode when possible, but without the distracting emphasis markers around variables.
  -   Footnotes use a regular `[n]` style.
-   Markdown writer:
  -   Horizontal rules are now a line across the whole page.
  -   Prettier pipe tables. Columns are now aligned (#1323).
  -   Respect the `raw_html` extension. `pandoc -t markdown-raw_html` no longer emits any raw HTML, including span and div tags generated by Span and Div elements.
  -   Use span with style for `SmallCaps` (#1360).
-   HTML writer:
  -   Autolinks now have class `uri`, and email autolinks have class `email`, so they can be styled.
-   Docx writer:
  -   Document formatting is carried over from `reference.docx`. This includes margins, page size, page orientation, header, and footer, including images in headers and footers.
  -   Include abstract (if present) with `Abstract` style (#1451).
  -   Include subtitle (if present) with `Subtitle` style, rather than tacking it on to the title (#1451).
-   Org writer:
  -   Write empty span elements with an id attribute as org anchors. For example `Span (""uid"",[],[]) []` becomes `<<uid>>`.
-   LaTeX writer:
  -   Put table captions above tables, to match the conventional standard. (Previously they appeared below tables.)
  -   Use `\(..\)` instead of `$..$` for inline math (#1464).
  -   Use `\nolinkurl` in email autolinks. This allows them to be styled using `\urlstyle{tt}`. Thanks to Ulrike Fischer for the solution.
  -   Use `\textquotesingle` for `'` in inline code. Otherwise we get curly quotes in the PDF output (#1364).
  -   Use `\footnote<.>{..}` for notes in beamer, so that footnotes do not appear before the overlays in which their markers appear (#1525).
  -   Don't produce a `\label{..}` for a Div or Span element. Do produce a `\hyperdef{..}` (#1519).
-   EPUB writer:
  -   If the metadata includes `page-progression-direction` (which can be `ltr` or `rtl`, the `page-progression-direction` attribute will be set in the EPUB spine (#1455).
-   Custom lua writers:
  -   Custom writers now work with `--template`.
  -   Removed HTML header scaffolding from `sample.lua`.
  -   Made citation information available in lua writers.
-   `--normalize` and `Text.Pandoc.Shared.normalize` now consolidate adjacent `RawBlock`s when possible.

## API changes
-   Added `Text.Pandoc.Readers.Docx`, exporting `readDocx` (Jesse Rosenthal).
-   Added `Text.Pandoc.Readers.EPUB`, exporting `readEPUB` (Matthew Pickering).
-   Added `Text.Pandoc.Readers.Txt2Tags`, exporting `readTxt2Tags` (Matthew Pickering).
-   Added `Text.Pandoc.Writers.DokuWiki`, exporting `writeDokuWiki` (Clare Macrae).
-   Added `Text.Pandoc.Writers.Haddock`, exporting `writeHaddock`.
-   Added `Text.Pandoc.MediaBag`, exporting `MediaBag`, `lookupMedia`, `insertMedia`, `mediaDirectory`, `extractMediaBag`. The docx and epub readers return a pair of a `Pandoc` document and a `MediaBag` with the media resources they contain. This can be extracted using `--extract-media`. Writers that incorporate media (PDF, Docx, ODT, EPUB, RTF, or HTML formats with `--self-contained`) will look for resources in the `MediaBag` generated by the reader, in addition to the file system or web.
-   `Text.Pandoc.Readers.TexMath`: Removed deprecated `readTeXMath`. Renamed `readTeXMath'` to `texMathToInlines`.
-   `Text.Pandoc`: Added `Reader` data type (Matthew Pickering). `readers` now associates names of readers with `Reader` structures. This allows inclusion of readers, like the docx reader, that take binary rather than textual input.
-   `Text.Pandoc.Shared`:
  -   Added `capitalize` (Artyom Kazak), and replaced uses of `map toUpper` (which give bad results for many languages).
  -   Added `collapseFilePath`, which removes intermediate `.` and `..` from a path (Matthew Pickering).
  -   Added `fetchItem'`, which works like `fetchItem` but searches a `MediaBag` before looking on the net or file system.
  -   Added `withTempDir`.
  -   Added `removeFormatting`.
  -   Added `extractSpaces` (from HTML reader) and generalized its type so that it can be used by the docx reader (Matthew Pickering).
  -   Added `ordNub`.
  -   Added `normalizeInlines`, `normalizeBlocks`.
  -   `normalize` is now `Pandoc -> Pandoc` instead of `Data a :: a -> a`. Some users may need to change their uses of `normalize` to the newly exported `normalizeInlines` or `normalizeBlocks`.
-   `Text.Pandoc.Options`:
  -   Added `writerMediaBag` to `WriterOptions`.
  -   Removed deprecated and no longer used `readerStrict` in `ReaderOptions`. This is handled by `readerExtensions` now.
  -   Added `Ext_compact_definition_lists`.
  -   Added `Ext_epub_html_exts`.
  -   Added `Ext_native_divs` and `Ext_native_spans`. This allows users to turn off the default pandoc behavior of parsing contents of div and span tags in markdown and HTML as native pandoc Div blocks and Span inlines.
-   `Text.Pandoc.Parsing`:
  -   Generalized `readWith` to `readWithM` (Matthew Pickering).
  -   Export `runParserT` and `Stream` (Matthew Pickering).
  -   Added `HasQuoteContext` type class (Matthew Pickering).
  -   Generalized types of `mathInline`, `smartPunctuation`, `quoted`, `singleQuoted`, `doubleQuoted`, `failIfInQuoteContext`, `applyMacros` (Matthew Pickering).
  -   Added custom `token` (Matthew Pickering).
  -   Added `stateInHtmlBlock` to `ParserState`. This is used to keep track of the ending tag we're waiting for when we're parsing inside HTML block tags.
  -   Added `stateMarkdownAttribute` to `ParserState`. This is used to keep track of whether the markdown attribute has been set in an enclosing tag.
  -   Generalized type of `registerHeader`, using new type classes `HasReaderOptions`, `HasIdentifierList`, `HasHeaderMap` (Matthew Pickering). These allow certain common functions to be reused even in parsers that use custom state (instead of `ParserState`), such as the MediaWiki reader.
  -   Moved `inlineMath`, `displayMath` from Markdown reader to Parsing, and generalized their types (Matthew Pickering).
-   `Text.Pandoc.Pretty`:
  -   Added `nestle`.
  -   Added `blanklines`, which guarantees a certain number of blank lines (and no more).

## Bug fixes
-   Markdown reader:
  -   Fixed parsing of indented code in list items. Indented code at the beginning of a list item must be indented eight spaces from the margin (or edge of the container), or four spaces from the list marker, whichever is greater.
  -   Fixed small bug in HTML parsing with `markdown_attribute`, which caused incorrect tag nesting for input like `<aside markdown=""1"">*hi*</aside>`.
  -   Fixed regression with intraword underscores (#1121).
  -   Improved parsing of inline links containing quote characters (#1534).
  -   Slight rewrite of `enclosure`/`emphOrStrong` code.
  -   Revamped raw HTML block parsing in markdown (#1330). We no longer include trailing spaces and newlines in the raw blocks. We look for closing tags for elements (but without backtracking). Each block-level tag is its own `RawBlock`; we no longer try to consolidate them (though `--normalize` will do so).
  -   Combine consecutive latex environments. This helps when you have two minipages which can't have blank lines between them (#690, #1196).
  -   Support smallcaps through span. `<span style=""font-variant:small-caps;"">foo</span>` will be parsed as a `SmallCaps` inline, and will work in all output formats that support small caps (#1360).
  -   Prevent spurious line breaks after list items (#1137). When the `hard_line_breaks` option was specified, pandoc would formerly produce a spurious line break after a tight list item.
  -   Fixed table parsing bug (#1333).
  -   Handle `c++` and `objective-c` as language identifiers in github-style fenced blocks (#1318).
  -   Inline math must have nonspace before final `$` (#1313).
-   LaTeX reader:
  -   Handle comments at the end of tables. This resolves the issue illustrated in http://stackoverflow.com/questions/24009489.
  -   Correctly handle table rows with too few cells. LaTeX seems to treat them as if they have empty cells at the end (#241).
  -   Handle leading/trailing spaces in `\emph` better. `\emph{ hi }` gets parsed as `[Space, Emph [Str ""hi""], Space]` so that we don't get things like `* hi *` in markdown output. Also applies to `\textbf` and some other constructions (#1146).
  -   Don't assume preamble doesn't contain environments (#1338).
  -   Allow (and discard) optional argument for `\caption` (James Aspnes).
-   HTML reader:
  -   Fixed major parsing problem with HTML tables. Table cells were being combined into one cell (#1341).
  -   Fixed performance issue with malformed HTML tables. We let a `</table>` tag close an open `<tr>` or `<td>` (#1167).
  -   Allow space between `<col>` and `</col>`.
  -   Added `audio` and `source` in `eitherBlockOrInline`.
  -   Moved `video`, `svg`, `progress`, `script`, `noscript`, `svg` from `blockTags` to `eitherBlockOrInline`.
  -   `map` and `object` were mistakenly in both lists; they have been removed from `blockTags`.
  -   Ignore `DOCTYPE` and `xml` declarations.
-   MediaWiki reader:
  -   Don't parse backslash escapes inside `<source>` (#1445).
  -   Tightened up template parsing. The opening `{{` must be followed by an alphanumeric or `:`. This prevents the exponential slowdown in #1033.
  -   Support ""Bild"" for images.
-   DocBook reader:
  -   Better handle elements inside code environments. Pandoc's document model does not allow structure inside code blocks, but at least this way we preserve the text (#1449).
  -   Support `<?asciidoc-br?>` (#1236).
-   Textile reader:
  -   Fixed list parsing. Lists can now start without an intervening blank line (#1513).
  -   HTML block-level tags that do not start a line are parsed as inline HTML and do not interrupt paragraphs (as in RedCloth).
-   Org reader:
  -   Make tildes create inline code (#1345). Also relabeled `code` and `verbatim` parsers to accord with the org-mode manual.
  -   Respect `:exports` header argument in code blocks (Craig Bosma).
  -   Fixed tight lists with sublists (#1437).
-   EPUB writer:
  -   Avoid excess whitespace in `nav.xhtml`. This should improve TOC view in iBooks (#1392).
  -   Fixed regression on cover image. In 1.12.4 and 1.12.4.2, the cover image would not appear properly, because the metadata id was not correct. Now we derive the id from the actual cover image filename, which we preserve rather than using ""cover-image.""
  -   Keep newlines between block elements. This allows easier diff-ability (#1424).
  -   Use `stringify` instead of custom `plainify`.
  -   Use `renderTags'` for all tag rendering. This properly handles tags that should be self-closing. Previously `<hr/>` would appear in EPUB output as `<hr></hr>` (#1420).
  -   Better handle HTML media tags.
  -   Handle multiple dates with OPF `event` attributes. Note: in EPUB3 we can have only one dc:date, so only the first one is used.
-   LaTeX writer:
  -   Correctly handle figures in notes. Notes can't contain figures in LaTeX, so we fake it to avoid an error (#1053).
  -   Fixed strikeout + highlighted code (#1294). Previously strikeout highlighted code caused an error.
-   ConTeXt writer:
  -   Improved detection of autolinks with URLs containing escapes.
-   RTF writer:
  -   Improved image embedding: `fetchItem'` is now used to get the images, and calculated image sizes are indicated in the RTF.
  -   Avoid extra paragraph tags in metadata (#1421).
-   HTML writer:
  -   Deactivate ""incremental"" inside slide speaker notes (#1394).
  -   Don't include empty items in the table of contents for slide shows. (These would result from creating a slide using a horizontal rule.)
-   MediaWiki writer:
  -   Minor renaming of `st` prefixed names.
-   AsciiDoc writer:
  -   Double up emphasis and strong emphasis markers in intraword contexts, as required by asciidoc (#1441).
-   Markdown writer:
  -   Avoid wrapping that might start a list, blockquote, or header (#1013).
  -   Use Span instead of (hackish) `SmallCaps` in `plainify`.
  -   Don't use braced attributes for fenced code (#1416). If `Ext_fenced_code_attributes` is not set, the first class attribute will be printed after the opening fence as a bare word.
  -   Separate adjacent lists of the same kind with an HTML comment (#1458).
-   PDF writer:
  -   Fixed treatment of data uris for images (#1062).
-   Docx writer:
  -   Use Compact style for empty table cells (#1353). Otherwise we get overly tall lines when there are empty table cells and the other cells are compact.
  -   Create overrides per-image for `media/` in reference docx. This should be somewhat more robust and cover more types of images.
  -   Improved `entryFromArchive` to avoid an unneeded parse.
  -   Section numbering carries over from reference.docx (#1305).
  -   Simplified `abstractNumId` numbering. Instead of sequential numbering, we assign numbers based on the list marker styles.
-   `Text.Pandoc.Options`:
  -   Removed `Ext_fenced_code_attributes` from `markdown_github` extensions.
-   `Text.Pandoc.ImageSize`:
  -   Use default instead of failing if image size not found in exif header (#1358).
  -   ignore unknown exif header tag rather than crashing. Some images seem to have tag type of 256, which was causing a runtime error.
-   `Text.Pandoc.Shared`:
  -   `fetchItem`: unescape URI encoding before reading local file (#1427).
  -   `fetchItem`: strip a fragment like `?#iefix` from the extension before doing mime lookup, to improve mime type guessing.
  -   Improved logic of `fetchItem`: absolute URIs are fetched from the net; other things are treated as relative URIs if `sourceURL` is `Just _`, otherwise as file paths on the local file system.
  -   `fetchItem` now properly handles links without a protocol (#1477).
  -   `fetchItem` now escapes characters not allowed in URIs before trying to parse the URIs.
  -   Fixed runtime error with `compactify'DL` on certain lists (#1452).
-   `pandoc.hs`: Don't strip path off of `writerSourceURL`: the path is needed to resolve relative URLs when we fetch resources (#750).
-   `Text.Pandoc.Parsing`
  -   Simplified `dash` and `ellipsis` (#1419).
  -   Removed `(>>~)` in favor of the equivalent `(<*)` (Matthew Pickering).
  -   Generalized functions to use `ParsecT` (Matthew Pickering).
  -   Added `isbn` and `pmid` to list of recognized schemes (Matthew Pickering).

## Template changes
-   Added haddock template.
-   EPUB3: Added `type` attribute to `link` tags. They are supposed to be ""advisory"" in HTML5, but kindlegen seems to require them.
-   EPUB3: Put title page in section with `epub:type=""titlepage""`.
-   LaTeX: Made `\subtitle` work properly (#1327).
-   LaTeX/Beamer: remove conditional around date (#1321).
-   LaTeX: Added `lot` and `lof` variables, which can be set to get `\listoftables` and `\listoffigures` (#1407). Note that these variables can be set at the command line with `-Vlot -Vlof` or in YAML metadata.

## Under the hood improvements
-   Rewrote normalize for efficiency (#1385).
-   Rewrote Haddock reader to use `haddock-library` (#1346).
  -   This brings pandoc's rendering of haddock markup in line with the new haddock.
  -   Fixed line breaks in `@` code blocks.
  -   alex and happy are no longer build-depends.
-   Added `Text.Pandoc.Compat.Directory` to allow building against different versions of the `directory` library.
-   Added `Text.Pandoc.Compat.Except` to allow building against different verions of `mtl`.
-   Code cleanup in some writers, using Reader monad to avoid passing options parameter around (Matej Kollar).
-   Improved readability in `pandoc.hs`.
-   Miscellaneous code cleanups (Artyom Kazak).
-   Avoid `import Prelude hiding (catch)` (#1309, thanks to Michael Thompson).
-   Changed `http-conduit` flag to `https`. Depend on `http-client` and `http-client-tls` instead of `http-conduit`. (Note: pandoc still depends on `conduit` via `yaml`.)
-   Require `highlighting-kate >= 0.5.8.5` (#1271, #1317, Debian #753299). This change to highlighting-kate means that PHP fragments no longer need to start with `<?php`. It also fixes a serious bug causing failures with ocaml and fsharp.
-   Require latest `texmath`. This fixes `\tilde{E}` and allows `\left` to be used with `]`, `)` etc. (#1319), among many other improvements.
-   Require latest `zip-archive`. This has fixes for unicode path names.
-   Added tests for plain writer.
-   `Text.Pandoc.Templates`:
  -   Fail informatively on template syntax errors. With the move from parsec to attoparsec, we lost good error reporting. In fact, since we weren't testing for end of input, malformed templates would fail silently. Here we revert back to Parsec for better error messages.
  -   Use `ordNub` (#1022).
-   Benchmarks:
  -   Made benchmarks compile again (Artyom Kazak).
  -   Fixed so that the failure of one benchmark does not prevent others from running (Artyom Kazak).
  -   Use `nfIO` instead of the `getLength` trick to force full evaluation.
  -   Changed benchmark to use only the test suite, so that benchmarks run more quickly.
-   Windows build script:
  -   Add `-windows` to file name.
  -   Use one install command for pandoc, pandoc-citeproc.
  -   Force install of pandoc-citeproc.
-   `make_osx_package`: Call zip file `pandoc-VERSION-osx.zip`. The zip should not be named `SOMETHING.pkg.zip`, or OSX finder will extract it into a folder named `SOMETHING.pkg`, which it will interpret as a defective package (#1308).
-   `README`:
  -   Made headers for all extensions so they have IDs and can be linked to (Beni Cherniavsky-Paskin).
  -   Fixed typos (Phillip Alday).
  -   Fixed documentation of attributes (#1315).
  -   Clarified documentation on small caps (#1360).
  -   Better documentation for `fenced_code_attributes` extension (Caleb McDaniel).
  -   Documented fact that you can put YAML metadata in a separate file (#1412).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/495169/assets,https://api.github.com/repos/jgm/pandoc/releases/495169,master,https://api.github.com/repos/jgm/pandoc/tarball/1.13,https://github.com/jgm/pandoc/releases/tag/1.13,https://api.github.com/repos/jgm/pandoc/zipball/1.13,1.13,False,False
320943,2014-05-14T21:23:17Z,2014-05-14T22:06:42Z,pandoc 1.12.4.2,"-   Require highlighting-kate >= 0.5.8. Fixes a performance regression.
-   Shared: `addMetaValue` now behaves slightly differently: if both the new and old values are lists, it concatenates their contents to form a new list.
-   LaTeX reader:
  -   Set `bibliography` in metadata from `\bibliography` or `\addbibresource` command.
  -   Don't error on `%foo` with no trailing newline.
-   Org reader:
  -   Support code block headers (`#+BEGIN_SRC ...`) (Albert Krewinkel).
  -   Fix parsing of blank lines within blocks (Albert Krewinkel).
  -   Support pandoc citation extension (Albert Krewinkel). This can be turned off by specifying `org-citation` as the input format.
-   Markdown reader:
  -   `citeKey` moved to `Text.Pandoc.Parsing` so it can be used by other readers (Albert Krewinkel).
-   `Text.Pandoc.Parsing`:
  -   Added `citeKey` (see above).
  -   Added `HasLastStrPosition` type class and `updateLastStrPos` and `notAfterString` functions.
-   Updated copyright notices (Albert Krewinkel).
-   Added default.icml to data files so it installs with the package.
-   OSX package:
  -   The binary is now built with options to ensure that it can be used with OSX 10.6+.
  -   Moved OSX package materials to osx directory.
  -   Added OSX package uninstall script, included in the zip container (thanks to Daniel T. Staal).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/320943/assets,https://api.github.com/repos/jgm/pandoc/releases/320943,master,https://api.github.com/repos/jgm/pandoc/tarball/1.12.4.2,https://github.com/jgm/pandoc/releases/tag/1.12.4.2,https://api.github.com/repos/jgm/pandoc/zipball/1.12.4.2,1.12.4.2,False,False
309540,2014-05-08T03:12:46Z,2014-05-08T07:26:27Z,pandoc 1.12.4,"- Made it possible to run filters that aren't executable (#1096).
  Pandoc first tries to find the executable (searching the path
  if path isn't given).  If it fails, but the file exists and has
  a `.py`, `.pl`, `.rb`, `.hs`, or `.php` extension, pandoc runs the filter
  using the appropriate interpreter.  This should make it easier to
  use filters on Windows, and make it more convenient for everyone.
- Added Emacs org-mode reader (Albert Krewinkel).
- Added InDesign ICML Writer (mb21).
- MediaWiki reader:
  - Accept image links in more languages (Jaime Marquínez Ferrándiz).
  - Fixed bug in certain nested lists (#1213).  If a level 2 list was
    followed by a level 1 list, the first item of the level 1 list
    would be lost.
  - Handle table rows containing just an HTML comment (#1230).
- LaTeX reader:
  - Give better location information on errors, pointing to line
    numbers within included files (#1274).
  - LaTeX reader:  Better handling of `table` environment (#1204).
    Positioning options no longer rendered verbatim.
  - Better handling of figure and table with caption (#1204).
  - Handle `@{}` and `p{length}` in tabular.  The length is not actually
    recorded, but at least we get a table (#1180).
  - Properly handle `\nocite`.  It now adds a `nocite` metadata
    field.  Citations there will appear in the bibliography but not
    in the text (unless you explicitly put a `$nocite$` variable
    in your template).
- Markdown reader:
  - Ensure that whole numbers in YAML metadata are rendered without
    decimal points.  (This became necessary with changes to aeson
    and yaml libraries.  aeson >= 0.7 and yaml >= 0.8.8.2 are now required.)
  - Fixed regression on line breaks in strict mode (#1203).
  - Small efficiency improvements.
  - Improved parsing of nested `div`s.  Formerly a closing `div` tag
    would be missed if it came right after other block-level tags.
  - Avoid backtracking when closing `</div>` not found.
  - Fixed bug in reference link parsing in `markdown_mmd`.
  - Fixed a bug in list parsing (#1154).  When reading a raw list
    item, we now strip off up to 4 spaces.
  - Fixed parsing of empty reference link definitions (#1186).
  - Made one-column pipe tables work (#1218).
- Textile reader:
  - Better support for attributes.  Instead of being ignored, attributes
    are now parsed and included in Span inlines.  The output will be a bit
    different from stock textile: e.g. for `*(foo)hi*`, we'll get
    `<em><span class=""foo"">hi</span></em>` instead of
    `<em class=""foo"">hi</em>`.  But at least the data is not lost.
  - Improved treatment of HTML spans (%) (#1115).
  - Improved link parsing.  In particular we now pick up on attributes.
    Since pandoc links can't have attributes, we enclose the whole link in
    a span if there are attributes (#1008).
  - Implemented correct parsing rules for inline markup (#1175, Matthew
    Pickering).
  - Use Builder (Matthew Pickering).
- DocBook reader:
  - Better treatment of `formalpara`.  We now emit the title (if present)
    as a separate paragraph with boldface text (#1215).
  - Set metadata `author` not `authors`.
  - Added recognition of `authorgroup` and `releaseinfo` elements (#1214,
    Matthew Pickering).
  - Converted current meta information parsing in DocBook to a more
    extensible version which is aware of the more recent meta
    representation (Matthew Pickering).
- HTML reader:
  - Require tagsoup 0.13.1, to fix a bug with parsing of script tags
    (#1248).
  - Treat processing instructions & declarations as block.  Previously
    these were treated as inline, and included in paragraph tags in HTML
    or DocBook output, which is generally not what is wanted (#1233).
  - Updated `closes` with rules from HTML5 spec.
  - Use Builder (Matthew Pickering, #1162).
- RST reader:
  - Remove duplicate `http` in PEP links (Albert Krewinkel).
  - Make rst figures true figures (#1168, CasperVector)
  - Enhanced Pandoc's support for rST roles (Merijn Verstaaten).
    rST parser now supports: all built-in rST roles, new role definition,
    role inheritance, though with some limitations.
  - Use `author` rather than `authors` in metadata.
  - Better handling of directives.  We now correctly handle field
    lists that are indented more than three spaces.  We treat an
    `aafig` directive as a code block with attributes, so it can be
    processed in a filter (#1212).
- LaTeX writer:
  - Mark span contents with label if span has an ID (Albert Krewinkel).
  - Made `--toc-depth` work well with books in latex/pdf output (#1210).
  - Handle line breaks in simple table cells (#1217).
  - Workaround for level 4-5 headers in quotes.  These previously produced
    invalid LaTeX: `\paragraph` or `\subparagraph` in a `quote` environment.
    This adds an `mbox{}` in these contexts to work around the problem.
    See http://tex.stackexchange.com/a/169833/22451 (#1221).
  - Use `\/` to avoid en-dash ligature instead of `-{}-` (Vaclav Zeman).
    This is to fix LuaLaTeX output. The `-{}-` sequence does not avoid the
    ligature with LuaLaTeX but `\/` does.
  - Fixed string escaping in `hyperref` and `hyperdef` (#1130).
- ConTeXt writer:  Improved autolinks (#1270).
- DocBook writer:
  - Improve handling of hard line breaks in Docbook writer
    (Neil Mayhew).  Use a `<literallayout>` for the entire paragraph, not
    just for the newline character.
  - Don't let line breaks inside footnotes influence the enclosing
    paragraph (Neil Mayhew).
  - Distinguish tight and loose lists in DocBook output, using
    `spacing=""compact""` (Neil Mayhew, #1250).
- Docx writer:  When needed files are not present in the user's
  `reference.docx`, fall back on the versions in the `reference.docx`
  in pandoc's data files. This fixes a bug that occurs when a
  `reference.docx` saved by LibreOffice is used. (#1185)
- EPUB writer:
  - Include extension in epub ids.  This fixes a problem with duplicate
    extensions for fonts and images with the same base name but different
    extensions (#1254).
  - Handle files linked in raw `img` tags (#1170).
  - Handle media in `audio` source tags (#1170).
    Note that we now use a `media` directory rather than `images`.
  - Incorporate files linked in `video` tags (#1170).  `src` and `poster`
    will both be incorporated into `content.opf` and the epub container.
- HTML writer:
  - Add colgroup around col tags (#877).  Also affects EPUB writer.
  - Fixed bug with unnumbered section headings.  Unnumbered section
    headings (with class `unnumbered`) were getting numbers.
  - Improved detection of image links. Previously image links with
    queries were not recognized, causing `<embed>` to be used instead
    of `<img>`.
- Man writer:  Ensure that terms in definition lists aren't line wrapped
  (#1195).
- Markdown writer:
  - Use proper escapes to avoid unwanted lists (#980).  Previously we used
    0-width spaces, an ugly hack.
  - Use longer backtick fences if needed (#1206).  If the content contains a
    backtick fence and there are attributes, make sure longer fences are
    used to delimit the code.  Note:  This works well in pandoc, but github
    markdown is more limited, and will interpret the first string of three
    or more backticks as ending the code block.
- RST writer:  Avoid stack overflow with certain tables (#1197).
- RTF writer:  Fixed table cells containing paragraphs.
- Custom writer:
  - Correctly handle UTF-8 in custom lua scripts (#1189).
  - Fix bugs with lua scripts with mixed-case filenames and
    paths containing `+` or `-` (#1267).  Note that `getWriter`
    in `Text.Pandoc` no longer returns a custom writer on input
    `foo.lua`.
- AsciiDoc writer:  Handle multiblock and empty table cells
  (#1245, #1246).  Added tests.
- `Text.Pandoc.Options`: Added `readerTrace` to `ReaderOptions`
- `Text.Pandoc.Shared`:
  - Added `compactify'DL` (formerly in markdown reader) (Albert Krewinkel).
  - Fixed bug in `toRomanNumeral`:  numbers ending with '9' would
    be rendered as Roman numerals ending with 'IXIV' (#1249).  Thanks to
    Jesse Rosenthal.
  - `openURL`: set proxy with value of http_proxy env variable (#1211).
    Note:  proxies with non-root paths are not supported, due to
    limitations in `http-conduit`.
- `Text.Pandoc.PDF`:
  - Ensure that temp directories deleted on Windows (#1192).  The PDF is
    now read as a strict bytestring, ensuring that process ownership will
    be terminated, so the temp directory can be deleted.
  - Use `/` as path separators in a few places, even on Windows.
    This seems to be necessary for texlive (#1151, thanks to Tim Lin).
  - Use `;` for `TEXINPUTS` separator on Windows (#1151).
  - Changes to error reporting, to handle non-UTF8 error output.
- `Text.Pandoc.Templates`:
  - Removed unneeded datatype context (Merijn Verstraaten).
  - YAML objects resolve to ""true"" in conditionals (#1133).
    Note:  If `address` is a YAML object and you just have `$address$`
    in your template, the word `true` will appear, which may be
    unexpected.  (Previously nothing would appear.)
- `Text.Pandoc.SelfContained`:  Handle `poster` attribute in `video`
  tags (#1188).
- `Text.Pandoc.Parsing`:
  - Made `F` an instance of Applicative (#1138).
  - Added `stateCaption`.
  - Added `HasMacros`, simplified other typeclasses.
    Removed `updateHeaderMap`, `setHeaderMap`, `getHeaderMap`,
    `updateIdentifierList`, `setIdentifierList`, `getIdentifierList`.
  - Changed the smart punctuation parser to return `Inlines`
    rather than `Inline` (Matthew Pickering).
  - Changed `HasReaderOptions`, `HasHeaderMap`, `HasIdentifierList`
    from typeclasses of monads to typeclasses of states.  This simplifies
    the instance definitions and provides more flexibility.  Generalized
    type of `getOption` and added a default definition.  Removed
    `askReaderOption`.  Added `extractReaderOption`.  Added
    `extractHeaderMap` and `updateHeaderMap` in `HasHeaderMap`.
    Gave default definitions for `getHeaderMap`, `putHeaderMap`,
    `modifyHeaderMap`.  Added `extractIdentifierList` and
    `updateIdentifierList` in `HasIdentifierList`.  Gave defaults
    for `getIdentifierList`, `putIdentifierList`, and
    `modifyIdentifierList`.  The ultimate goal here is to allow different
    parsers to use their own, tailored parser states (instead of
    `ParserState`) while still using shared functions.
- Template changes:
  - LaTeX template: Use `fontenc` package only with `pdflatex` (#1164).
  - LaTeX template:  Add `linestretch` and `fontfamily` variables.
  - LaTeX template:  Conditionalize author and date commands.
  - Beamer template: Consistent styles for figure and table captions
    (aaronwolen).
  - LaTeX and beamer template:  Adjust widths correctly for oversized
    images.  Use `\setkeys{Gin}{}` to set appropriate defaults for
    `\includegraphics` (Yihui Xie, Garrick Aden-Buie).  Load
    `upquote` only after `fontenc` (Yihui Xie).
  - Beamer template: Added caption package (#1200).
  - Beamer template:  changes for better unicode handling (KarolS).
  - DocBook template:  use `authorgroup` if there are authors.
  - revealjs template: Move `include-after` to end (certainlyakey).
  - revealjs template: Fixed PDF print function (#1220, kevinkenan).
- Bumped version bounds of dependencies.
- Added a `--trace` command line option, for debugging backtracking
  bugs.  So far this only works with the markdown reader.
- MathMLinHTML:  Fixed deprecation warning (#362, gwern, Albert Krewinkel).
- Updated travis script to test with multiple GHC versions.
- Force failure of a Travis build if GHC produces warnings (Albert
  Krewinkel).
- Add `.editorconfig` (Albert Krewinkel).
  See http://editorconfig.org/ for details.
- Give more useful error message if '-t pdf' is specified (#1155).
- Added `Cite`, `SmallCaps` to `Arbitrary` instance (#1269).
- Allow `html4` as a synonym of `html` as a reader (it already works
  as a writer).
- README:
  - Added an explanation of how to use YAML metadata to
    force items to appear in the bibliography without citations in
    the text (like LaTeX `\nocite`).
  - Added note to `--bibtex/--natbib`: not for use in making PDF
    (#1194, thanks to nahoj).
  - Added explanatory notes about `--natbib` and `--biblatex`.
  - Added specification of legal syntax for citation keys.
  - Fixed variable defaults documentation (Albert Krewinkel).
- Removed copyright statements for files that have been removed
  (Albert Krewinkel).
- Moved some doc files from `data-files` to `extra-source-files` (#1123).
  They aren't needed at runtime.  We keep README and COPYRIGHT in data
  to ensure that they'll be available on all systems on which pandoc
  is installed.
- Use cabal sandboxes in Windows build script.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/309540/assets,https://api.github.com/repos/jgm/pandoc/releases/309540,master,https://api.github.com/repos/jgm/pandoc/tarball/1.12.4,https://github.com/jgm/pandoc/releases/tag/1.12.4,https://api.github.com/repos/jgm/pandoc/zipball/1.12.4,1.12.4,False,False
144360,2014-01-10T07:12:19Z,2014-01-10T19:35:01Z,pandoc 1.12.3,"-   The `--bibliography` option now sets the `biblio-files` variable. So, if you're using `--natbib` or `--biblatex`, you can just use `--bibliography=foo.bib` instead of `-V bibliofiles=foo`.
-   Don't run pandoc-citeproc filter if `--bibliography` is used together with `--natbib` or `--biblatex` (Florian Eitel).
-   Template changes:
  -   Updated beamer template to include booktabs.
  -   Added `abstract` variable to LaTeX template.
  -   Put `header-includes` after `title` in LaTeX template (#908).
  -   Allow use of `\includegraphics[size]` in beamer. This just required porting a macro definition from the default LaTeX template to the default beamer template.
-   `reference.docx`: Include `FootnoteText` style. Otherwise Word ignores the style, even when specified in the `pPr`. (#901)
-   `reference.odt`: Tidied `styles.xml`.
-   Relaxed version bounds for dependencies.
-   Added `withSocketsDo` around http conduit code in `openURL`, so it works on Windows (#1080).
-   Added `Cite` function to `sample.lua`.
-   Markdown reader:
  -   Fixed regression in title blocks (#1089). If author field was empty, date was being ignored.
  -   Allow backslash-newline hard line breaks in grid and multiline table cells.
  -  Citation keys may now start with underscores, and may contain underscores adjacent to internal punctuation.
-   LaTeX reader:
  -   Add support for `Verb` macro (jrnold) (#1090).
  -   Support babel-style quoting: `""`...""'`.
-   Properly handle script blocks in strict mode. (That is, `markdown-markdown_in_html_blocks`.) Previously a spurious `<p>` tag was being added (#1093).
-   Docbook reader: Avoid failure if `tbody` contains no `tr` or `row` elements.
-   LaTeX writer:
  -   Factored out function for table cell creation.
  -   Better treatment of footnotes in tables. Notes now appear in the regular sequence, rather than in the table cell. (This was a regression in 1.10.)
-   HTML reader: Parse name/content pairs from meta tags as metadata. Closes #1106.
-   Moved `fixDisplayMath` from Docx writer to `Writer.Shared`.
-   OpenDocument writer: Fixed `RawInline`, `RawBlock` so they don't escape.
-   ODT writer: Use mathml for proper rendering of formulas. Note: LibreOffice's support for this seems a bit buggy. But it should be better than what we had before.
-   RST writer: Ensure no blank line after def in definition list (#992).
-   Markdown writer: Don't use tilde code blocks with braced attributes in `markdown_github` output. A consequence of this change is that the backtick form will be preferred in general if both are enabled. That is good, as it is much more widespread than the tilde form. (#1084)
-   Docx writer: Fixed problem with some modified reference docx files. Include `word/_rels/settings.xml.rels` if it exists, as well as other `rels` files besides the ones pandoc generates explicitly.
-   HTML writer:
  -   With `--toc`, headers no longer link to themselves (#1081).
  -   Omit footnotes from TOC entries. Otherwise we get doubled footnotes when headers have notes!
-   EPUB writer:
  -   Avoid duplicate notes when headings contain notes. This arose because the headings are copied into the metadata ""title"" field, and the note gets rendered twice. We strip the note now before putting the heading in ""title"".
  -   Strip out footnotes from toc entries.
  -   Fixed bug with `--epub-stylesheet`. Now the contents of `writerEpubStylesheet` (set by `--epub-stylesheet`) should again work, and take precedence over a stylesheet specified in the metadata.
-   `Text.Pandoc.Pretty`: Added `nestle`. API change.
-   `Text.Pandoc.MIME`: Added `wmf`, `emf`.
-   `Text.Pandoc.Shared`: `fetchItem` now handles image URLs beginning with `//`.
-   `Text.Pandoc.ImageSize`: Parse EXIF format JPEGs. Previously we could only get size information for JFIF format, which led to squished images in Word documents. Closes #976.
-   Removed old `MarkdownTest_1.0.3` directory (#1104).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/144360/assets,https://api.github.com/repos/jgm/pandoc/releases/144360,master,https://api.github.com/repos/jgm/pandoc/tarball/1.12.3,https://github.com/jgm/pandoc/releases/tag/1.12.3,https://api.github.com/repos/jgm/pandoc/zipball/1.12.3,1.12.3,False,False
116118,2013-12-08T22:35:51Z,2013-12-09T03:32:12Z,pandoc 1.12.2.1,"- Markdown reader:  Fixed regression in list parser, involving continuation lines containing raw HTML (or even verbatim raw HTML).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/116118/assets,https://api.github.com/repos/jgm/pandoc/releases/116118,master,https://api.github.com/repos/jgm/pandoc/tarball/1.12.2.1,https://github.com/jgm/pandoc/releases/tag/1.12.2.1,https://api.github.com/repos/jgm/pandoc/zipball/1.12.2.1,1.12.2.1,False,False
115322,2013-12-07T19:57:53Z,2013-12-07T20:55:22Z,pandoc 1.12.2,"-   Much improved citation support.
-   Metadata may now be included in YAML blocks in a markdown document. For example,
  
  ```
  ---
  title:
  - type: main
    text: My Book
  - type: subtitle
    text: An investigation of metadata
  creator:
  - role: author
    text: John Smith
  - role: editor
    text: Sarah Jones
  identifier:
  - scheme: DOI
    text: doi:10.234234.234/33
  publisher:  My Press
  rights:  (c) 2007 John Smith, CC BY-NC
  cover-image: img/mypic.jpg
  ...
  ```
  
  Metadata may still be provided using `--epub-metadata`; it will be merged with the metadata in YAML blocks.
-   EPUB writer:
  -   `meta` tags are now used instead of `opf` attributes for EPUB3.
  -   Insert ""svg"" property as needed in opf (EPUB 3).
  -   Simplify `imageTypeOf` using `getMimeType`.
  -   Add properties attribute to `cover-image` item for EPUB 3.
  -   Don't include node for `cover.xhtml` if no cover!
  -   Ensure that same identifier is used throughout (#1044). If an identifier is given in metadata, we use that; otherwise we generate a random uuid.
  -   Add cover reference to guide element (EPUB 2) (Shaun Attfield). Fixes an issue with Calibre putting the cover at the end of the book if the spine has `linear=""no""`. Apparently this is best practice for other converters as well: http://www.idpf.org/epub/20/spec/OPF_2.0.1_draft.htm#Section2.6.
  -   Allow `stylesheet` in metadata. The value is a path to the stylesheet.
  -   Allow partial dates: `YYYY`, `YYYY-MM`.
-   Markdown writer: Fix rendering of tight sublists (#1050). Previously a spurious blank line was included after a tight sublist.
-   ODT writer: Add `draw:name` attribute to `draw:frame` elements (#1069). This is reported to be necessary to avoid an error from recent versions of Libre Office when files contain more than one image Thanks to wmanley for reporting and diagnosing the problem.
-   ConTeXt writer: Don't hardcode figure/table placement and numbering. Instead, let this be set in the template, using `\setupfloat`. Thanks to on4aa and Aditya Mahajan for the suggestion (#1067).
-   Implemented CSL flipflopping spans in DOCX, LaTeX, and HTML writers.
-   Fixed bug with markdown intraword emphasis. Closes #1066.
-   Docbook writer: Hierarchicalize block content in metadata. Previously headers just disappeared from block-level metadata when it was used in templates. Now we apply the 'hierarchicalize' transformation. Note that a block headed by a level-2 header will turn into a `<sect1>` element.
-   OpenDocument writer: Skip raw HTML (#1035). Previously it was erroneously included as verbatim text.
-   HTML/EPUB writer, footnotes: Put `<sup>` tag inside `<a>` tags. This allows better control of formatting, since the `<a>` tags have a distinguishing class (#1049).
-   Docx writer:
  -   Use mime type info returned by fetchItem.
  -   Fixed core metadata (#1046). Don't create empty date nodes if no date given. Don't create multiple `dc:creator` nodes; instead separate by semicolons.
  -   Fix URL for core-properties in `_rels/.rels` (#1046).
-   Plain writer: don't print `<span>` tags.
-   LaTeX writer:
  -   Fix definition lists with internal links in terms (#1032). This fix puts braces around a term that contains an internal link, to avoid problems with square brackets.
  -   Properly escape pdftitle, pdfauthor (#1059).
  -   Use booktabs package for tables (thanks to Jose Luis Duran).
-   Updated beamer template. Now references should work properly (in a slide) when `--biblatex` or `--natbib` is used.
-   LaTeX reader:
  -   Parse contents of curly quotes or matched `""` as quotes.
  -   Support `\textnormal` as span with class `nodecor`. This is needed for pandoc-citeproc.
  -   Improved citation parsing. This fixes a run-time error that occured with `\citet{}` (empty list of keys). It also ensures that empty keys don't get produced.
-   MediaWiki reader: Add automatic header identifiers.
-   HTML reader:
  -   Use pandoc `Div` and `Span` for raw `<div>`, `<span>` when `--parse-raw`.
  -   Recognize `svg` tags as block level content (thanks to MinRK).
  -   Parse LaTeX math if appropriate options are set.
-   Markdown reader:
  -   Yaml block must start immediately after `---`. If there's a blank line after `---`, we interpreted it as a horizontal rule.
  -   Correctly handle empty bullet list items.
  -   Stop parsing ""list lines"" when we hit a block tag. This fixes exponential slowdown in certain input, e.g. a series of lists followed by `</div>`.
-   Slides: Preserve `<div class=""references"">` in references slide.
-   `Text.Pandoc.Writer.Shared`:
  -   Fixed bug in `tagWithAttrs`. A space was omitted before key-value attributes, leading to invalid HTML.
  -   `normalizeDate`: Allow dates with year only (thanks to Shaun Attfield).
  -   Fixed bug in `openURL` with `data:` URIs. Previously the base-64 encoded bytestring was returned. We now decode it so it's a proper image!
-   DocBook reader: Handle numerical attributes starting with decimal. Also use `safeRead` instead of `read`.
-   `Text.Pandoc.Parsing`:
  -   Generalized type of `registerHeader`, using new type classes `HasReadeOptions`, `HasIdentifierList`, `HasHeaderMap`. These allow certain common functions to be reused even in parsers that use custom state (instead of `ParserState`), such as the MediaWiki reader.
  -   Moved inlineMath, displayMath from Markdown reader to Parsing. Generalize their types and export them from Parsing. (API change.)
-   `Text.Pandoc.Readers.TexMath`: Export `readTeXMath'`, which attends to display/inline. Deprecate `readTeXMath`, and use `readTeXMath'` in all the writers. Require `texmath >= 0.6.5.2`.
-   `Text.Pandoc.MIME`:
  -   Add entry for `jfif`.
  -   In looking up extensions, drop the encoding info. E.g. for 'image/jpg;base64' we should lookup 'image/jpg'.
-   Templates: Changed how array variables are resolved. Previously if `foo` is an array (which might be because multiple values were set on the command line), `$foo$` would resolve to the concatenation of the elements of foo. This is rarely useful behavior. It has been changed so that the first value is rendered. Of course, you can still iterate over the values using `$for(foo)$`. This has the result that you can override earlier settings using `-V` by putting new values later on the command line, which is useful for many purposes.
-   `Text.Pandoc`: Don't default to `pandocExtensions` for all writers.
-   Allow ""epub2"" as synonym for ""epub"", ""html4"" for ""html"".
-   Don't look for slidy files in data files with `--self-contained`.
-   Allow `https:` command line arguments to be downloaded.
-   Fixed `make_osx_package.sh` so data files embedded in `pandoc-citeproc`.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/115322/assets,https://api.github.com/repos/jgm/pandoc/releases/115322,master,https://api.github.com/repos/jgm/pandoc/tarball/1.12.2,https://github.com/jgm/pandoc/releases/tag/1.12.2,https://api.github.com/repos/jgm/pandoc/zipball/1.12.2,1.12.2,False,False
71551,2013-10-20T20:43:15Z,2013-10-20T23:04:13Z,Pandoc 1.12.1,"This release fixes a few bugs (details in the [release notes](http://johnmacfarlane.net/pandoc/releases.html)) and considerably improves citation handling. The new pandoc-citeproc (0.1.2.1) can read bibtex and biblatex files directly (not using bibutils to translate them, as before). Though this is still a work in progress, the results are already significantly better.  LaTeX constructs in bibtex fields are translated properly, and simple math gets converted.

Three changes of note:
1.  The default JSON serialization format has changed. Instead of `{""Str"": ""foo""}`, for example, we now have `{""t"": ""Str"", ""c"": ""foo""}` (""t"" for tag, ""c"" for contents). This new format is easier to work with outside of Haskell. This change should only affect people who are interacting with pandoc's JSON using languages other than Haskell, since in Haskell the JSON conversions can be handled automatically by the aeson library. Those who use the python library pandocfilters for filters should upgrade to version 1.2, which has already been updated to use the new format.
2.  Pandoc's data files no longer include the javascript, CSS, and images for S5, slidy, and slideous slide formats. If you wish to produce S5 or slideous slides with the `--self-contained` option, you'll need to download the appropriate code into the `s5` or `slideous` directories, respectively, as with `revealjs`. (This is what the User's Guide has said to do for some time.) The default for `slidy` is to embed a link to the code on the slidy website, so nothing should change for slidy users who are using the default template.
3.  You can now create ""speaker notes"" in slide formats, by putting them inside `<div class=""notes"">` tags. (Note that you may need to leave a blank line before the closing `</div>` tag in some contexts.) Currently these are supported in beamer (where the notes go to `\note{...}`) and revealjs (where they turn into `<aside class=""notes"">`; in other formats the speaker notes are just ignored.

_Added 2013-10-21_:  The OSX package installer that was originally attached to this release was defective.  Please download the new installer below, `pandoc-1.12.1-1.dmg`.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/71551/assets,https://api.github.com/repos/jgm/pandoc/releases/71551,master,https://api.github.com/repos/jgm/pandoc/tarball/1.12.1,https://github.com/jgm/pandoc/releases/tag/1.12.1,https://api.github.com/repos/jgm/pandoc/zipball/1.12.1,1.12.1,False,False
55134,2013-09-21T03:31:43Z,2013-09-30T00:26:23Z,Pandoc 1.12.0.2,"This version fixes an incompatibility between pandoc's JSON output and what was expected by the python pandocfilters package.  Anyone who intends to use pandocfilters should upgrade.
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/55134/assets,https://api.github.com/repos/jgm/pandoc/releases/55134,master,https://api.github.com/repos/jgm/pandoc/tarball/1.12.0.2,https://github.com/jgm/pandoc/releases/tag/1.12.0.2,https://api.github.com/repos/jgm/pandoc/zipball/1.12.0.2,1.12.0.2,False,False
49305,2013-09-21T00:56:11Z,2013-09-21T01:26:56Z,pandoc 1.12.0.1,"- Allow `--metadata` to be repeated for the same key to form a list.
  This also has the effect that `--bibliography` can be repeated,
  as before.
- Handle boolean values in `--metadata`.  Note that anything not parseable
  as a YAML boolean or string is treated as a literal string.
  You can get a string value with ""yes"", or any of the strings interpretable
  as booleans, by quoting it:
  
  ```
  -M boolvalue=yes -M stringvalue='""yes""'
  ```
- LaTeX writer: Don't print references if `--natbib` or `--biblatex`
  option used.
- DOCX writer: Add `settings.xml` to the zip container.  Fixes a bug
  in which docx files could not be read by some versions of Word
  and LibreOffice (#990).
- Fixed a regression involving slide shows with bibliographies.
  The Div container around references messed up the procedure for carving
  a document into slides.  So we now remove the surrounding Div in
  `prepSlides`.
- More informative error message when a filter is not found in path.
- Depend on pandoc-types 1.12.1.  This provide `ToJSONFilter`
  instances for `Data a => a -> [a]` and `Data a => a -> IO [a]`.
- Don't use unicode_collation in building OSX package:
  it adds something like 50MB of dependencies to the package.
- Declare alex and happy as build-tools (#986).
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/49305/assets,https://api.github.com/repos/jgm/pandoc/releases/49305,master,https://api.github.com/repos/jgm/pandoc/tarball/1.12.0.1,https://github.com/jgm/pandoc/releases/tag/1.12.0.1,https://api.github.com/repos/jgm/pandoc/zipball/1.12.0.1,1.12.0.1,False,False
45386,2013-09-15T16:34:27Z,2013-09-15T20:00:23Z,pandoc 1.12,"[Complete changelog](http://johnmacfarlane.net/pandoc/releases.html#pandoc-1.12-2013-09-15)

The focus of this release is customizability.  Several features
have been added that should make it easier to fit pandoc to your
needs:
- Flexible metadata:  metadata is no longer limited to title,
  authors, and date.  You can add whatever fields you like.  Metadata
  values are also structured:  they can be lists, maps, booleans,
  strings, or lists of pandoc Inline or Block elements.  A new
  YAML metadata block is provided so structured metadata can be
  included in pandoc markdown documents. (Of course, the old title
  blocks will still work, and can be combined with the YAML blocks.)
  Template variables will automatically be set from metadata, so
  if you want to create a template with variables like `subject`,
  `abstract`, or `author.institution`, you can.
- A new `--filter` option is provided, to make it easier to use
  JSON filters that transform the pandoc AST.  Instead of
  
  ```
  pandoc -t json -s | ./myfilter | pandoc -f json -t html5 -s
  ```
  
  you can now do
  
  ```
  pandoc -t html5 -s --filter ./myfilter
  ```
  
  Pandoc passes the output format as the first argument to the
  filter, so filters can easily be made sensitive to the output
  format.  (For example, a graphviz filter might produce a PNG
  if the output is HTML and a PDF if the output is LaTeX.)
- For those who don't know Haskell, a python library,
  `pandocfilters`, has been created to make it easy to write pandoc
  filters using python.  There are some examples in the
  [pandocfilters repository](http://github.com/jgm/pandocfilters).
- You can now script your own custom pandoc writer using lua.  See
  example 33 on the
  [demos page](http://johnmacfarlane.net/pandoc/demos.html).  While
  JSON filters are a better approach for most customizations, this
  approach gives you complete control over the writer's behavior,
  and allows you to support completely new output formats.
- Generic Inline (`Span`) and Block (`Div`) containers that take
  attributes have been added to the underlying Pandoc types.
  These provide the customization possibilites for formatted
  text that the `Code` and `CodeBlock` elements provide for unformatted
  text.

Other significant changes include support for OPML (as both an input
and an output format), support for writing reveal.js slide shows,
and support for reading Haddock markup.

Citation support has been extracted from core pandoc and put into
a new `pandoc-citeproc` package. (Users who install pandoc using
cabal should `cabal install pandoc-citeproc` if they want to use
citations.)  Bibliographic information can now be included right in
a pandoc markdown document, inside a YAML metadata block, making
the document self-contained.  (A tool `biblio2yaml` is provided to
convert existing bibliographies, for those who want to do this.)
",https://api.github.com/users/jgm,3044,jgm,https://api.github.com/repos/jgm/pandoc/releases/45386/assets,https://api.github.com/repos/jgm/pandoc/releases/45386,master,https://api.github.com/repos/jgm/pandoc/tarball/1.12,https://github.com/jgm/pandoc/releases/tag/1.12,https://api.github.com/repos/jgm/pandoc/zipball/1.12,1.12,False,False
