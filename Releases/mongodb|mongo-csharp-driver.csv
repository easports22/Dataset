id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
6653320,2017-06-08T14:42:02Z,2017-06-08T19:19:00Z,v2.4.4,"# .NET Driver Version 2.4.4 Release Notes

This is a patch release that fixes a few bugs reported since 2.4.3 was released.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.4.4.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.4.4%20ORDER%20BY%20key%20ASC

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/6653320/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/6653320,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.4.4,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.4.4,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.4.4,v2.4.4,False,False
5692349,2017-03-09T16:30:10Z,2017-03-09T16:56:36Z,v2.4.3,"# .NET Driver Version 2.4.3 Release Notes

This is a patch release that fixes a few bugs reported since 2.4.2 was released.

Most of the changes are minor, but if you use X509 certificates with SSL you should
definitely upgrade to 2.4.3. See:

https://jira.mongodb.org/browse/CSHARP-1914

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.4.3.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.4.3%20ORDER%20BY%20key%20ASC

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/5692349/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/5692349,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.4.3,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.4.3,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.4.3,v2.4.3,False,False
5342907,2017-02-02T17:24:47Z,2017-02-02T17:37:27Z,v2.4.2,"# .NET Driver Version 2.4.2 Release Notes

This is a patch release that fixes a few bugs reported since 2.4.1 was released.

The main change is adding back support for using a <TField> which is not the same as the actual
field type in filter builder methods and the Distinct method. Normally <TField> is expected to
match the actual field type, but it turns out there are cases where one might want to specify
a type for <TField> that does not match the field type exactly. See the following tickets for
more information about these changes

https://jira.mongodb.org/browse/CSHARP-1884
https://jira.mongodb.org/browse/CSHARP-1890
https://jira.mongodb.org/browse/CSHARP-1891

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.4.2.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.4.2%20ORDER%20BY%20key%20ASC

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/5342907/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/5342907,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.4.2,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.4.2,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.4.2,v2.4.2,False,False
5066951,2017-01-04T02:22:05Z,2017-01-04T14:43:56Z,v2.4.1,"# .NET Driver Version 2.4.1 Release Notes

This is a patch release which fixes a few bugs reported since 2.4.0 was released.

It is a required upgrade if you are using MongoDB-X509 authentication. See:

https://jira.mongodb.org/browse/CSHARP-1861

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.4.1.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.4.1%20ORDER%20BY%20key%20ASC

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/5066951/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/5066951,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.4.1,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.4.1,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.4.1,v2.4.1,False,False
4787432,2016-11-29T19:40:35Z,2016-11-29T19:49:43Z,v2.4.0,"# .NET Driver Version 2.4.0

The main new feature of 2.4.0 is support for the new features of the 3.4 version of the server:
- New Decimal128 data type
- New convention for automapping immutable classes for serialization
- New IAggregateFluent methods
  - Bucket and BucketAuto
  - Count
  - Facet
  - GraphLookup
  - ReplaceRoot
  - SortByCount
- New PipelineDefinitionBuilder for building pipelines for CreateView and Facet
- New MaxStaleness property for ReadPreference
- Configurable HeartbeatInterval
- Support for collations
- Driver identifies itself to the server when connecting
- Support for creating read-only views
- Commands that write now support WriteConcern
- LINQ supports new methods: Aggregate, Reverse, Zip

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.4.0.md

The JIRA tickets resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.4%20ORDER%20BY%20key%20ASC

Upgrading

We believe there are only minor breaking changes in classes that normally would not be directly used by applications.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/4787432/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/4787432,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.4.0,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.4.0,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.4.0,v2.4.0,False,False
4312034,2016-10-05T17:15:46Z,2016-10-05T17:26:13Z,v2.4.0-beta1,"# .NET Driver Version 2.4.0-beta1 (PRE-RELEASE)

This is a beta release of the upcoming 2.4.0 version of the driver.

The main new feature of 2.4.0 is support for the new features of the 3.4.0 version of the server.

The JIRA tickets scheduled to be resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.4%20ORDER%20BY%20key%20ASC

A few of these tickets are still open.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/4312034/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/4312034,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.4.0-beta1,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.4.0-beta1,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.4.0-beta1,v2.4.0-beta1,False,True
4217238,2016-09-23T19:01:26Z,2016-09-23T19:11:52Z,v2.3.0,"# .NET Driver Version 2.3.0

This is a minor release consisting of:
1. Bug fixes since 2.2.4 was released
2. Support for .NET Core

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.3.0.md

The JIRA tickets resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.3%20ORDER%20BY%20key%20ASC

Upgrading

We don't believe there are any breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/4217238/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/4217238,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.3.0,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.3.0,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.3.0,v2.3.0,False,False
3999497,2016-08-28T21:00:49Z,2016-08-29T16:08:09Z,2.3.0-rc1,"# .NET Driver Version 2.3.0-rc1 Release Notes (PRE-RELEASE)

This is a minor release consisting of:
1. Bug fixes since 2.2.4 was released
2. Support for .NET Core
3. Bug fixes since 2.3.0-beta1 was released

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v2.3.0-rc1/Release%20Notes/Release%20Notes%20v2.3.0.md

The JIRA tickets resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.3%20ORDER%20BY%20key%20ASC

Upgrading

We don't believe there are any breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/3999497/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/3999497,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.3.0-rc1,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.3.0-rc1,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.3.0-rc1,v2.3.0-rc1,False,True
3807139,2016-08-03T18:08:35Z,2016-08-03T21:28:41Z,2.3.0-beta1,"# .NET Driver Version 2.3.0-beta1 Release Notes

This is a minor release consisting of:
1. Bug fixes since 2.2.4 was released
2. Support for .NET Core

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.3.0.md

The JIRA tickets resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.3%20ORDER%20BY%20key%20ASC

Upgrading

We don't believe there are any breaking changes in this release.

| Note |
| --- |
| All tests pass on our local machines against the current server version. We are investigating sporadic test failures on our CI server that appear to be race conditions in the tests. We plan to resolve these for beta2 |
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/3807139/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/3807139,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.3.0-beta1,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.3.0-beta1,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.3.0-beta1,v2.3.0-beta1,False,True
3254947,2016-05-18T19:09:00Z,2016-05-18T19:16:04Z,2.2.4,"# .NET Driver Version 2.2.4 Release Notes

This is a patch release which fixes some bugs reported since 2.2.3 was released.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v2.2.x/Release%20Notes/Release%20Notes%20v2.2.4.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.2.4%20ORDER%20BY%20key%20ASC

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/3254947/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/3254947,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.2.4,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.2.4,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.2.4,v2.2.4,False,False
2533589,2016-02-01T23:40:55Z,2016-02-02T00:39:00Z,2.2.3,"# .NET Driver Version 2.2.3 Release Notes

This is a patch release which fixes a bug reported since 2.2.2 was released.

This is a recommended upgrade if you are using ReadPreferences with a sharded cluster (i.e. connecting through mongos).

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v2.2.x/Release%20Notes/Release%20Notes%20v2.2.3.md

Only one issue was fixed in this release:

https://jira.mongodb.org/browse/CSHARP-1537

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2533589/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2533589,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.2.3,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.2.3,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.2.3,v2.2.3,False,False
2432387,2016-01-15T03:34:56Z,2016-01-15T03:40:00Z,2.2.2,"# .NET Driver Version 2.2.2 Release Notes

This is a patch release which fixes a few bugs reported since 2.2.1 was released.

This is a recommended upgrade for everyone, and is a required upgrade if you are using the Legacy API (see CSHARP-1515).

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v2.2.x/Release%20Notes/Release%20Notes%20v2.2.2.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.2.2%20ORDER%20BY%20key%20ASC

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2432387/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2432387,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.2.2,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.2.2,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.2.2,v2.2.2,False,False
2396227,2016-01-08T15:09:19Z,2016-01-08T19:10:30Z,2.2.1,"# .NET Driver Version 2.2.1 Release Notes

This is a patch release which fixes a few bugs reported since 2.2.0 was released.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v2.2.1/Release%20Notes/Release%20Notes%20v2.2.1.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20fixVersion%20%3D%202.2.1

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2396227/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2396227,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.2.1,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.2.1,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.2.1,v2.2.1,False,False
2261213,2015-12-09T19:17:06Z,2015-12-09T19:28:40Z,1.11.0,"# C#/.NET Driver Version 1.11.0 Release Notes

This is a minor release to support MongoDB server version 3.2.

It also fixes some issues reported since 1.10.1 was released.

This is likely to be the last point release in the 1.x series. We recommend that you upgrade to the 2.x series as soon as possible.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v1.x/Release%20Notes/Release%20Notes%20v1.11.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20fixVersion%20%3D%201.11%20ORDER%20BY%20key%20ASC%2C%20summary%20ASC

Documentation on the C# driver can be found at:

http://www.mongodb.org/display/DOCS/CSharp+Language+Center
http://api.mongodb.org/csharp/current/

# General Changes

The 1.x releases will be the last non-bug fix release supporting .NET 3.5.

## Compatibility Changes

There were no intentional backwards breaking changes.  If you come across any,
please inform us as soon as possible by email dotnetdriver@mongodb.com or by reporting 
an issue at jira.mongodb.com.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2261213/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2261213,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.11.0,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.11.0,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.11.0,v1.11.0,False,False
2247954,2015-12-07T22:06:32Z,2015-12-07T22:21:41Z,2.2.0,"# .NET Driver Version 2.2.0 Release Notes

This is a minor release which supports all MongoDB server versions from 2.4 through 3.2.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.2.0.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20fixVersion%20%3D%202.2%20ORDER%20BY%20key%20ASC

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

## New Features

Notable new features are listed below. For a full list, see the list of JIRA issues linked above.

### Sync API

The 2.0 and 2.1 versions of the .NET driver featured a new async-only API. Some users gave us feedback
that they wanted a choice whether to use a sync or an async API. Version 2.2 introduces sync versions
of every async method.

### Support for server 3.2
- Support for bypassing document validation for write operations on collections where document validation
  has been enabled
- Support for write concern for FindAndModify methods
- Support for read concern
- Builder support for new aggregation stages and new accumulators in $group stage
- Support for version 3 text indexes

## Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2247954/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2247954,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.2.0,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.2.0,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.2.0,v2.2.0,False,False
2143676,2015-11-18T02:58:13Z,2015-11-18T03:26:18Z,2.2.0-rc0,"# .NET Driver Version 2.2.0-rc0 Release Notes

(Preliminary)
This is a release candidate. It is not recommended for production use.

This is a minor release which supports all MongoDB server versions from 2.4 through the upcoming
3.2 release.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.2.0.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?jql=project%20%3D%20CSHARP%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20fixVersion%20%3D%202.2%20ORDER%20BY%20key%20ASC

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

## New Features

Notable new features are listed below. For a full list, see the list of JIRA issues linked above.

### Sync API

The 2.0 and 2.1 versions of the .NET driver featured a new async-only API. Some users gave us feedback
that they wanted a choice whether to use a sync or an async API. Version 2.2 introduces sync versions
of every async method.

### Support for server 3.2
- Support for bypassing document validation for write operations on collections where document validation
  has been enabled
- Support for write concern for FindAndModify methods
- Support for read concern
- Builder support for new aggregation stages and new accumulators in $group stage
- Support for version 3 text indexes

## Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2143676/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2143676,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.2.0-rc0,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.2.0-rc0,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.2.0-rc0,v2.2.0-rc0,False,True
2143561,2015-11-18T02:31:27Z,2015-11-18T02:34:29Z,1.11.0-rc0,"# C#/.NET Driver Version 1.11.0-rc0 Release Notes (PRE_RELEASE)

This is a major release supporting mongodb 3.2.

It also fixes some issues reported since 1.10.1 was released.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v1.x/Release%20Notes/Release%20Notes%20v1.11.md

Documentation on the C# driver can be found at:

http://www.mongodb.org/display/DOCS/CSharp+Language+Center
http://api.mongodb.org/csharp/current/

# General Changes

The 1.x releases will be the last non-bug fix release supporting .NET 3.5.

## Compatibility Changes

There were no intentional backwards breaking changes.  If you come across any,
please inform us as soon as possible by email dotnetdriver@mongodb.com or by reporting 
an issue at jira.mongodb.com.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2143561/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2143561,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.11.0-rc0,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.11.0-rc0,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.11.0-rc0,v1.11.0-rc0,False,True
2109398,2015-11-11T13:37:11Z,2015-11-11T16:14:51Z,2.1.1,"# .NET Driver Version 2.1.1 Release Notes

This is a minor release which supports all MongoDB server versions since 2.4.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v2.1.x/Release%20Notes/Release%20Notes%20v2.1.1.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/browse/CSHARP-1468?filter=18754

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

## Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2109398/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2109398,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.1.1,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.1.1,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.1.1,v2.1.1,False,False
2109373,2015-11-11T13:42:10Z,2015-11-11T16:11:25Z,2.0.2,"# .NET Driver Version 2.0.2 Release Notes

This is a patch release which fixes some issues reported since 2.0.1 was released. It is a recommended
upgrade for anyone using 2.0.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v2.0.x/Release%20Notes/Release%20Notes%20v2.0.2.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/browse/CSHARP-1462?filter=18755

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

## Compatibility Changes

There were no intentional backwards breaking changes.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2109373/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/2109373,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.0.2,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.0.2,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.0.2,v2.0.2,False,False
1983804,2015-10-19T15:49:21Z,2015-10-19T17:22:04Z,2.1.0,"# .NET Driver Version 2.1.0 Release Notes

This is a minor release which supports all MongoDB server versions since 2.4.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.1.0.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?filter=18283

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

## New Features

Notable new features are listed below. For a full list, see the full list of JIRA issues linked above.

### GridFS

[CSHARP-1191](https://jira.mongodb.org/browse/CSHARP-1191) - GridFS support has been implemented.

### LINQ

[CSHARP-935](https://jira.mongodb.org/browse/CSHARP-935) LINQ support has been rewritten and now targets the aggregation framework. It is a more natural translation and enables many features of LINQ that were previously not able to be translated.

Simply use the new AsQueryable method to work with LINQ.

### Eventing

[CSHARP-1374](https://jira.mongodb.org/browse/CSHARP-1374) - An eventing API has been added allowing a user to subscribe to one or more events from the core driver for insight into server discovery, server selection, connection pooling, and commands.

## Upgrading

There are no known backwards breaking changes in this release.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/1983804/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/1983804,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.1.0,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.1.0,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.1.0,v2.1.0,False,False
1662371,2015-08-12T14:59:37Z,2015-08-12T15:13:08Z,1.10.1,"# C#/.NET Driver Version 1.10.1 Release Notes

This is a minor release and contains no API changes.

It also fixes some issues reported since 1.10.0 was released.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v1.x/Release%20Notes/Release%20Notes%20v1.10.1.md

Documentation on the C# driver can be found at:

http://www.mongodb.org/display/DOCS/CSharp+Language+Center
http://api.mongodb.org/csharp/current/

# General Changes

The 1.x releases will be the last non-bug fix release supporting .NET 3.5.

The issues fixed in 1.10.1 are:

[CSHARP-1351](https://jira.mongodb.org/browse/CSHARP-1351) - ObjectSerializer should not be dependent on the order of the _t and _v elements.

## Compatibility Changes

There were no intentional backwards breaking changes.  If you come across any,
please inform us as soon as possible by email dotnetdriver@mongodb.com or by reporting 
an issue at jira.mongodb.com.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/1662371/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/1662371,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.10.1,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.10.1,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.10.1,v1.10.1,False,False
1389677,2015-06-08T16:22:56Z,2015-06-08T16:31:30Z,2.0.1,"# .NET Driver Version 2.0.1 Release Notes

This is a patch release which fixes some issues reported since 2.0 was released. It is a recommended
upgrade for anyone using 2.0.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v2.0.x/Release%20Notes/Release%20Notes%20v2.0.1.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?filter=17849

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

## General Changes

The key issues fixed in 2.0.1 are:
- [CSHARP-1264](https://jira.mongodb.org/browse/CSHARP-1264) WaitQueueSize now properly configures the server selection wait queue.
- [CSHARP-1280](https://jira.mongodb.org/browse/CSHARP-1280) Deserializing fails if a document contains unmapped field which name starts with the same name as currently mapped class property.
- [CSHARP-1265](https://jira.mongodb.org/browse/CSHARP-1265) Update variants allow sending empty documents as update statements, which results in a replacement.

## Compatibility Changes

There were no intentional backwards breaking changes.  If you come across any,
please inform us as soon as possible by email dotnetdriver@mongodb.com or by reporting 
an issue at jira.mongodb.com.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/1389677/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/1389677,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.0.1,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.0.1,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.0.1,v2.0.1,False,False
1119879,2015-04-01T19:13:06Z,2015-04-02T14:39:02Z,2.0.0,"# .NET Driver Version 2.0.0 Release Notes

This is a major release which supports all MongoDB server versions since 2.4.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v2.0.0.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?filter=16826

Documentation on the .NET driver can be found at:

http://mongodb.github.io/mongo-csharp-driver/

## New Features

Notable new features are listed below. For a full list, see the full list of JIRA issues linked above.

### Async

As has been requested for a while now, the driver now offers a full async stack. Since it uses Tasks, it is fully usable
with async and await. 

While we offer a mostly backwards-compatible sync API, it is calling into the async stack underneath. Until you are ready
to move to async, you should measure against the 1.x versions to ensure performance regressions don't enter your codebase.

All new applications should utilize the New API.

### New API

Because of our async nature, we have rebuilt our entire API. The new API is accessible via MongoClient.GetDatabase. 
- Interfaces are used (`IMongoClient`, `IMongoDatabase`, `IMongoCollection<TDocument>`) to support easier testing.
- A fluent Find API is available with full support for expression trees including projections.
  
  ``` csharp
  var names = await db.GetCollection<Person>(""people"")
      .Find(x => x.FirstName == ""Jack"")
      .SortBy(x => x.Age)
      .Project(x => x.FirstName + "" "" + x.LastName)
      .ToListAsync();
  ```
- A fluent Aggregation API is available with mostly-full support for expression trees.
  
  ``` csharp
  var totalAgeByLastName = await db.GetCollection<Person>(""people"")
      .Aggregate()
      .Match(x => x.FirstName == ""Jack"")
      .GroupBy(x => x.LastName, g => new { _id = g.Key, TotalAge = g.Sum(x => x.Age)})
      .ToListAsync();
  ```
- Support for dynamic.
  
  ``` csharp
  var person = new ExpandoObject();
  person.FirstName = ""Jane"";
  person.Age = 12;
  person.PetNames = new List<dynamic> { ""Sherlock"", ""Watson"" }
  await db.GetCollection<dynamic>(""people"").InsertOneAsync(person);
  ```

## Upgrading

As 2.0 is a major revision, there are some breaking changes when coming from the 1.x assemblies. We've tried our best to mitigate those breaking changes, but some were inevitable. These changes may not affect everyone, but take a moment to review the list of known changes below:

### System Requirements
- .NET 3.5 and .NET 4.0 are no longer supported. If you still must use these platforms, the 1.x series of the driver will continue to be developed.
- [CSHARP-952](https://jira.mongodb.org/browse/CSHARP-952): We've removed support for partially trusted callers.

### Packaging
- The nuget package [mongocsharpdriver](http://nuget.org/packages/mongocsharpdriver) now includes the legacy driver. It depends on 3 new nuget packages, [MongoDB.Bson](http://nuget.org/packages/MongoDB.Bson), [MongoDB.Driver.Core](http://nuget.org/packages/MongoDB.Driver.Core), and [MongoDB.Driver](http://nuget.org/packages/MongoDB.Driver). [MongoDB.Driver](http://nuget.org/packages/MongoDB.Driver) is the replacement for [mongocsharpdriver](http://nuget.org/packages/mongocsharpdriver).
- [CSHARP-616](https://jira.mongodb.org/browse/CSHARP-616): We are no longer strong naming  our assemblies. Our previous strong naming was signed with a key in our public repository. This did nothing other than satisfy certain tools. If you need MongoDB assemblies to be strongly named, it is relatively straight-forward to build the assemblies yourself.

### BSON
- [CSHARP-933](https://jira.mongodb.org/browse/CSHARP-933): Improved the BSON Serializer infrastructure. Anyone who has written a custom serializer will be affected by this. The changes are minor, but were necessary to support dynamic serializers as well as offering great speed improvements and improved memory management.
- Certain methods, such as `BsonMemberMap.SetRepresentation` have been removed. The proper way to set a representation, for instance, would be to use `SetSerializer` and configure the serializer with the appropriate representation.
- [CSHARP-939](https://jira.mongodb.org/browse/CSHARP-939): Dynamic DictionaryRepresentation has been removed. Its intent was to store, in some manner, anything in a .NET dictionary. In practice, this leads to the same values getting stored in different ways depending on factors such as a ""."" inside the key name. We made the decision to eliminate this variability. This means that documents that used to serialize correctly may start throwing a BsonSerializationException with a message indicating the key must be a valid string. [CSHARP-1165](https://jira.mongodb.org/browse/CSHARP-1165) has a solution to this problem. It should be noted that we will continue to read these disparate representations without error.

### Driver
- [CSHARP-979](https://jira.mongodb.org/browse/CSHARP-979): `MongoConnectionStringBuilder` has been removed. Use the documented mongodb connection string format and/or `MongoUrlBuilder`.
- `MongoServer` is a deprecated class. Anyone using `MongoClient.GetServer()` will encounter a deprecation warning and, depending on how your build is setup, may receive an error. It is still safe to use this API until your code is ported to the new API. *Note that this API requires the use of the [mongocsharpdriver](http://nuget.org/packages/mongocsharpdriver) to include the legacy API.
- [CSHARP-1043](https://jira.mongodb.org/browse/CSHARP-1043) and [CSHARP-1044](https://jira.mongodb.org/browse/CSHARP-1044): `ReadPreference` and `WriteConcern` were rewritten. These classes are now immutable. Any current application code that sets values on these classes will no longer function. Instead, you should use the With method to alter a `ReadPreference` or `WriteConcern`.
  
  ``` csharp
  var writeConcern = myCurrentWriteConcern.With(journal: true);
  ```
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/1119879/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/1119879,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v2.0.0,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v2.0.0,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v2.0.0,v2.0.0,False,False
897553,2015-01-29T16:35:32Z,2015-01-29T16:40:27Z,1.10.0,"# C#/.NET Driver Version 1.10 Release Notes

This is a minor release which is fully compatible with server version 3.0 and fully supports
the new features introduced by server version 3.0.

It also fixes some issues reported since 1.9.2 was released.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v1.x/Release%20Notes/Release%20Notes%20v1.10.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?filter=16411

Documentation on the C# driver can be found at:

http://www.mongodb.org/display/DOCS/CSharp+Language+Center
http://api.mongodb.org/csharp/current/

# General Changes

The 1.x releases will be the last non-bug fix release supporting .NET 3.5.

The issues fixed in 1.10 are:
- Support for changes in server 3.0
- Support SCRAM-SHA1 authentication
- Deprecate classes, properties and methods that will be removed in version 2.0
- other minor fixes (see JIRA tickets)

## Note about SCRAM-SHA1 authenticaton

Starting with the MongoDB 3.0 release, the SCRAM-SHA1 authentication protocol is supported. By
itself, this will not cause any compatibility issues. However, before updating the server's
authentication schema such that the MONGODB-CR protocol is no longer available, you must
replace any calls to:

```
MongoCredential.CreateMongoCRCredential(...)
```

with calls to:

```
MongoCredential.CreateCredential(...)
```

## Compatibility Changes

There were no intentional backwards breaking changes.  If you come across any,
please inform us as soon as possible by email dotnetdriver@mongodb.com or by reporting 
an issue at jira.mongodb.com.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/897553/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/897553,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.10.0,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.10.0,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.10.0,v1.10.0,False,False
402557,2014-06-30T13:46:29Z,2014-06-30T13:55:13Z,1.9.2,"# C#/.NET Driver Version 1.9.2 Release Notes

This is a minor release which fixes some issues reported since 1.9.1 was released. It is a recommended
upgrade for anyone using 1.9.1.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v1.x/Release%20Notes/Release%20Notes%20v1.9.2.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?filter=15440

Documentation on the C# driver can be found at:

http://www.mongodb.org/display/DOCS/CSharp+Language+Center
http://api.mongodb.org/csharp/current/

# General Changes

The 1.9.x releases will be the last non-bug fix release supporting .NET 3.5.

The issues fixed in 1.9.2 are:

[Kerberos authentication occasionally crashes runtime](https://jira.mongodb.org/browse/CSHARP-980)
[Allow $external special database to be used](https://jira.mongodb.org/browse/CSHARP-986)
[Handle pre-2.6 upserted identifier](https://jira.mongodb.org/browse/CSHARP-987)
[Altered ObjectId generation to take into account the AppDomain](https://jira.mongodb.org/browse/CSHARP-993)
[Added 2.6 extended json support to JsonReader](https://jira.mongodb.org/browse/CSHARP-995)
[SetMaxScan rendered $maxscan instead of $maxScan](https://jira.mongodb.org/browse/CSHARP-1000)
[Updated output of JsonWriter to include 2.6 extended json support](https://jira.mongodb.org/browse/CSHARP-1001)
[Replica set tags GetHashCode was calculated improperly](https://jira.mongodb.org/browse/CSHARP-1005)

## Compatibility Changes

There were no intentional backwards breaking changes.  If you come across any,
please inform us as soon as possible by email dotnetdriver@mongodb.com or by reporting 
an issue at jira.mongodb.com.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/402557/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/402557,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.9.2,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.9.2,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.9.2,v1.9.2,False,False
323061,2014-05-15T20:23:41Z,2014-05-15T20:40:02Z,1.9.1,"# C#/.NET Driver Version 1.9.1 Release Notes

This is a minor release which fixes some issues reported since 1.9.0 was released. It is a recommended
upgrade for anyone using 1.9.0.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v1.x/Release%20Notes/Release%20Notes%20v1.9.1.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?filter=15166

Documentation on the C# driver can be found at:

http://www.mongodb.org/display/DOCS/CSharp+Language+Center
http://api.mongodb.org/csharp/current/

# General Changes

The 1.9.x releases will be the last non-bug fix release supporting .NET 3.5.

The issues fixed in 1.9.1 are:
- [LINQ queries against BsonValue properties whose value is C# null](https://jira.mongodb.org/browse/CSHARP-932)
- [$maxDistance must go inside $near when using GeoJson data](https://jira.mongodb.org/browse/CSHARP-950)
- [Allow ParallelScan to go to secondaries](https://jira.mongodb.org/browse/CSHARP-955)
- [Allow Aggreagate to go to secondaries as long as the pipeline doesn't contain $out](https://jira.mongodb.org/browse/CSHARP-956)
- [Support automatically setting the _id even when using an interface as the document type](https://jira.mongodb.org/browse/CSHARP-958)
- [Don't consider any wnote and jnote values to be errors](https://jira.mongodb.org/browse/CSHARP-959)
- [Fixed a stack overflow when deserializing an interface with a missing _t discriminator value](https://jira.mongodb.org/browse/CSHARP-961)
- [Added SetBits to IndexOptions builder](https://jira.mongodb.org/browse/CSHARP-962)
- [JsonReader support for new $date format with ISO8601 strings as used by 2.6 version mongoexport](https://jira.mongodb.org/browse/CSHARP-963)

## Compatibility Changes

There were no intentional backwards breaking changes.  If you come across any,
please inform us as soon as possible by email dotnetdriver@mongodb.com or by reporting 
an issue at jira.mongodb.com.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/323061/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/323061,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.9.1,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.9.1,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.9.1,v1.9.1,False,False
255299,2014-04-03T15:54:09Z,2014-04-03T16:19:54Z,1.9.0,"# C#/.NET Driver Version 1.9.0 Release Notes

This is a major release which supports all MongoDB server versions since 2.0.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v1.9.md

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/secure/IssueNavigator.jspa?mode=hide&requestId=14713

Documentation on the C# driver can be found at:

http://www.mongodb.org/display/DOCS/CSharp+Language+Center
http://api.mongodb.org/csharp/current/

# General Changes

This release is primarily in support of new features offered by server 2.6.  
Additionally, this will be the last non-bug fix release supporting .NET 3.5.

Some of the notable features:
- [Bulk Write Commands](http://docs.mongodb.org/master/release-notes/2.6/#new-write-commands)
- [Text Search](http://docs.mongodb.org/master/release-notes/2.6/#text-search-changes)
- [$out for aggregation](http://docs.mongodb.org/master/release-notes/2.6/#out-stage-to-write-data-to-a-collection)
- [Aggregation cursors](http://docs.mongodb.org/master/release-notes/2.6/#aggregation-operations-now-return-cursors)
- [Improved sorting in aggregation](http://docs.mongodb.org/master/release-notes/2.6/#improved-sorting)
- [Aggregation explain](http://docs.mongodb.org/master/release-notes/2.6/#explain-option-for-the-aggregation-pipeline)
- [x.509 Authentication](http://docs.mongodb.org/master/release-notes/2.6/#x-509-authentication)
- [LDAP Support for Authentication](http://docs.mongodb.org/master/release-notes/2.6/#x-509-authentication)
- [Max execution time enforcement](https://jira.mongodb.org/browse/SERVER-2212)

A full set of server changes in server 2.6 can be found [here](http://docs.mongodb.org/master/release-notes/2.6/).

## Compatibility Changes

There were no intentional backwards breaking changes.  If you come across any,
please inform us as soon as possible by email dotnetdriver@mongodb.com or by reporting 
an issue at jira.mongodb.com.
",https://api.github.com/users/rstam,275022,rstam,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/255299/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/255299,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.9.0,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.9.0,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.9.0,v1.9.0,False,False
55926,2013-09-30T20:01:39Z,2013-09-30T20:36:09Z,1.8.3,"# C#/.NET Driver Version 1.8.3 Release Notes

This is a minor release but is a recommended upgrade for all 1.8.2 users, particularly
if you use the limit option with queries (1.8.3 fixes a performance issue that occurs
when small limits are used with queries that would otherwise return a large number of
results).

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v1.8.3/Release%20Notes/Release%20Notes%20v1.8.3.md

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/v1.8.3/Release%20Notes/Change%20Log%20v1.8.3-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/v1.8.3/Release%20Notes/Change%20Log%20v1.8.3-Driver.txt

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/issues/?filter=14059

Documentation on the C#/.NET driver can be found at:

http://docs.mongodb.org/ecosystem/drivers/csharp/
http://api.mongodb.org/csharp/current/

# BSON Library Changes

## Id mapping change

If the Id field is declared abstract or virtual in a base class and later overridden
in a derived class we were incorrectly mapping it twice. We now only map it once in 
the class where it is first declared.

# Driver Changes

## Better handling of server state when errors occurr

When an error occurred on one connection we were setting the server instance state
to Unknown, which caused problems on other connections. Now we simply tell the server
instance to refresh its state as soon as possible.

## GeoJson deserialization accepts numeric types besides doubles

In 1.8.2 the GeoJson deserializers required that the coordinate values be stored as
doubles. In 1.8.3 the Serialize method still stores them as doubles but the Deserialize
method can convert from other numeric types to doubles.

## Id generators

The container parameter to the GenerateId method of the IIdGenerator interface was
inadvertently changed in 1.8.2. In 1.8.3 the value of the container parameter is once
again the MongoCollection instance for which an Id needs to be generated.

## Performance problem with queries that used limit

The Execute method of the new QueryOperation class would in certain cases fetch one
more batch of results than necessary from the server. This did not affect the correctness
of the results but could result in a substantial loss of performance. This has been
fixed in 1.8.3.

## Save method and _id values

The Save method has been simplified to correctly serialize the _id value for all
possible serializers. The new approach is slightly less efficient in some cases but
is the only approach that will work if custom serializers are being used. Since all 
Save does is call either Insert or Update you can get slightly better performance 
by calling Insert or Update yourself (call Insert if you know it's a new document
or call Update with an appropriate query and the Upsert flag if you are not sure).
",https://api.github.com/users/sridharn,581893,sridharn,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/55926/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/55926,v1.8.3,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.8.3.9,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.8.3.9,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.8.3.9,v1.8.3.9,False,False
22567,2013-08-07T15:10:12Z,2013-08-07T16:37:58Z,1.8.2,"# C#/.NET Driver Version 1.8.2 Release Notes

This is a minor release.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v1.8.2.md

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.8.2-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.8.2-Driver.txt

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/secure/IssueNavigator.jspa?mode=hide&requestId=13830

Documentation on the C#/.NET driver can be found at:

http://docs.mongodb.org/ecosystem/drivers/csharp/
http://api.mongodb.org/csharp/current/

# BSON Library Changes

## Performance improvements

Serialization and deserialization of enumerable types that serialize to BSON 
arrays has been sped up. The serializer for the nominal type is only looked
up once, and when using polymorphic types, the actual serializer only has to
be looked up when the actual type changes so runs of identical subtypes are
handled more efficiently.

## WriteCString error checking

The BSON spec does not allow CStrings to have embedded nulls. The driver now
enforces this restriction thoroughly.

## BsonMemberMaps are now frozen when BsonClassMap is frozen

The BsonMemberMap now has a Freeze method, and BsonClassMap now calls Freeze
on all the member maps when the Freeze is called on the class map.

## Better support for mutable default values

A default value for mutable types is vulnerable to being altered by the 
application, which would affect future uses of the default value. When using
a mutable type we really need a new instance of the default value every time.
There is now a new overload of SetDefaultValue that allows you to provide a
creator function instead of a value, so the creator function can instantiate
a new instance of the default value each time one is needed.

# Driver Changes

## Improved tracking of the primary for replica sets

Tracking of the current primary for replica sets has been made more reliable.
There were certain scenarios in which the driver might have two members
marked as being the current primary. With these changes there is a single 
field that tracks the most recently seen primary so by definition there will
never be more than one.

## Internal restructuring

Some changes were made to the internal implementation of the driver which do
not affect the public API. There is a new set of operation classes that
encapsulate the handling of wire protocol messages and some logic that used
to exist in MongoCollection has been moved to the operations. In addition,
the way commands are run has been refactored somewhat.

## IndexCache removed

In the past drivers and the mongo shell kept track of calls to EnsureIndex in
order to optimize away additional round trips to the server for the same index.
But this approach has inherent problems, one of which is that it can't see
any changes made to the indexes by other processes. Therefore, the driver
no longer tracks calls to EnsureIndex and all calls to EnsureIndex are sent to
the server and it is up to the server to decide if the index already exists or
not. Typically this will not cause any backward compatibility problems and
the performance hit will be very small (unless you were calling EnsureIndex
very frequently).
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22567/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22567,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.8.2.34,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.8.2.34,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.8.2.34,v1.8.2.34,False,False
22564,2013-04-08T18:08:09Z,2013-08-07T16:32:35Z,1.8.1,"# C#/.NET Driver Version 1.8.1 Release Notes

This is a minor release. It should be considered a mandatory upgrade from 1.8. The
issues fixed were minor changes but their impact is not minor. In particular, if
you are using replica sets or are using InsertBatch with very large batches you
should consider 1.8.1 a mandatory upgrade.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v1.8.1.md

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.8.1-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.8.1-Driver.txt

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/secure/IssueNavigator.jspa?mode=hide&requestId=13252

Documentation on the C#/.NET driver can be found at:

http://www.mongodb.org/display/DOCS/CSharp+Language+Center
http://api.mongodb.org/csharp/current/

# BSON Library Changes

## Handling of closed sockets

There was an unfortunate regression in 1.8 with respect to sockets closed by the
server which causes the driver to hang waiting for data that is never going to
arrive.

This was discovered by a user who called Shutdown (which of course resulted in
all sockets being closed), but you could also encounter this issue if
you are connecting to replica sets and the primary closes all sockets when it
steps down (either due to an explicit step down or a re-election).

## AscendingGuidGenerator

If you are using Guids as your _ids and you want the values to be ascending so
that they are always inserted at the right hand side of the index you can use
this IdGenerator. Note that for the server to see the Guids as ascending you
have to make sure to store them in the right representation, which is
GuidRepresentation.Standard.

We used to recommend CombGuidGenerator for this use case, but we have since
realized that the Guids generated by the CombGuid are only considered ascending
when Guids are compared using SQL Server's method of comparing Guids.

# Driver Changes

## MongoCollection

There is a new overload of Distinct which returns the values as TValue(s)
instead of as BsonValue(s).

There was a bug in InsertBatch that resulted in a high probability of
InsertBatch failing if the batch was big enough to have to be split into
multiple sub-batches.

## MongoDatabase

RunCommandAs now uses the standard serialization mechanisms to deserialize
all command results returned from the server.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22564/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22564,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.8.1.20,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.8.1.20,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.8.1.20,v1.8.1.20,False,False
22560,2013-02-12T23:07:15Z,2013-08-07T16:28:32Z,,,https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22560/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22560,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.7.1.4791,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.7.1.4791,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.7.1.4791,v1.7.1.4791,False,False
22558,2013-03-20T00:54:42Z,2013-08-07T16:28:51Z,1.8,"# C# Driver Version 1.8 Release Notes

This is a major release.

This release has two major goals: to support the new features of the 2.4 release
of the server and to begin preparing the path for some major cleanup in the 2.0
release of the driver by marking as obsolete in the 1.8 release items that we plan to
remove in the 2.0 release.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v1.8.md

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.8-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.8-Driver.txt

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/secure/IssueNavigator.jspa?mode=hide&requestId=13193

Documentation on the C# driver can be found at:

http://www.mongodb.org/display/DOCS/CSharp+Language+Center
http://api.mongodb.org/csharp/current/

# General changes

In this release we are deprecating a large number of methods that we intend to
remove in a subsequent release. With few exceptions, these deprecated methods
still exist and continue to work as they used to, so you can choose when to
transition off of them. Because they are deprecated they will result in 
compile time warnings.

# BSON Library Changes

## Changes to the IO classes

The ReadBinaryData, ReadObjectId and ReadRegularExpression methods have simplified
signatures. There is a new ReadBytes method, as well as new ReadRawBsonArray
and ReadRawBsonDocument methods.

The WriteBinaryData, WriteObjectId and WriteRegularExpression methods have simplified
signatures. There is a new WriteBytes method, as well as new WriteRawBsonArray
and WriteRawBsonDocument methods.

The settings classes for the binary readers and writers now have an Encoding property
that you can use to provide an encoding. The value you supply must be an instance of a
UTF8Encoding, but you can configure that encoding any way you want. In particular,
you would want to configure lenient decoding if you have existing data that does not
conform strictly to the UTF8 standard.

## BsonDocument object model changes

We are deprecating all the static Create factory methods and encourage you to
simply call the constructors instead. We are also no longer attempting to
cache any precreated instances of any BSON value (e.g. BsonInt32.Zero). These
classes are so light weight that there is no need to cache them.

A really helpful change is that you can now use indexers on documents and
arrays without having to use AsBsonDocument or AsBsonArray first. You can
now write:

```
var zip = person[""Addresses""][0][""Zip""].AsString;
```

instead of

```
var zip = person[""Addresses""].AsBsonArray[0].AsBsonDocument[""Zip""].AsString;
```

The new LazyBsonDocument and LazyBsonArray classes allow you to defer
deserialization of elements until you first access them. The document or
array is kept in its raw byte form until you first access it, at which point
one level is deserialized. This can be a big performance win if you only
access some parts of a large document.

The new RawBsonDocument and RawBsonArray classes are similar to their lazy
counterparts, except that the data is always kept in raw bytes form only
and any elements you access are deserialized every time you access them.

The new Lazy and Raw classes are useful when you want to copy large documents
from one place to another and only need to examine a small part of the 
documents.

## New conventions system for automatically creating class maps

The BsonClassMapSerializer relies on class maps to control how it
serializes documents. These class maps have to be created. The easiest
way to create the class maps is to let the driver create them automatically,
which it does based on a number of conventions that control the process.
The implementation of the conventions system is completely new in this
release. Conventions implemented using the old conventions architecture
are still supported but will be based on deprecated classes and interfaces
and should be rewritten to use the new architecture.

## Deserialization can now call constructors or static factory methods

You can now identify constructors or static factory methods that can
be used during deserialization to instantiate objects. This means that
it is now possible to deserialize immutable classes. During deserialization
values from the serialized document are matched to parameters of a constructor
or static factory method. If there is more than one possible constructor
or factory method then the one with the most matching parameters is chosen.

## Standard serializers are now created and registered as late as possible

The standard built-in serializers are now created and instantiated as late
as possible, giving you a chance to create and register your own if you
prefer. You can either register the standard built-in serializers with 
different default serialization options, or you can write and register
your own.

## BsonDocument object model serialization standardized

Serialization of BsonDocument object model classes has been completely
moved to IBsonSerializer based classes. The existing ReadFrom/WriteTo
methods in the BsonDocument object model have been deprecated.

# Driver Changes

## New authentication model

In previous versions of the driver there was only one kind of credential
(a username/password credential) and there was a mapping that specified
which credential to use for each database being accessed. Based on that
mapping the driver would determine which credential was needed for the
database being accessed and would ensure that the connection being used
was authenticated properly.

The authentication model on the server has changed drastically, and it is no
longer required that the credential used to access a database be stored
in that same database. Therefore it is impossible to determine in advance
which credential is the one that will give you access to a database. So
now the drivers simply work with a list of credentials, with no attempt
to figure out which credential should be used with which database. Instead,
all connections are authenticated against all of the credentials supplied.

## Strict enforcement of MaxConnectionIdleTime and MaxConnectionLifeTime

Previously these values were only loosely enforced and were treated more
like hints. Now they are enforced strictly. This helps prevent network
errors in certain environments where the networking infrastructure will
terminate connections that are idle for a certain amount of time or that
have been open too long (for example, some firewalls and Azure).

## Driver no longer opens and closes a connection every 10 seconds

The driver pings the state of any server it is connected to once every
10 seconds. In earlier releases it would open and close a new connection
each time. While this guaranteed that the ping would happen wihtout delay
it had the unfortunate consequence of filling the server logs with
messages reporting the opening and closing of the connections. The
driver now tries to reuse an existing connection for the ping, and will
only open a new one if it can't acquire an existing one rapidly.

## Removed DeprecatedQuery and DeprecatedQueryBuilder classes

These classes have been deprecated for several releases now and have
been removed entirely.

## Changes to Fields builder

There is a new ElemMatch method to select which elements of an array
to include in the result documents.

## Changes to Query builder

The new GeoIntersects method supports the $geoIntersects query operator with
GeoJson values. In addition, new overloads of Near and Within support
using GeoJson values with these existing query operators.

## Changes to Update builder

New SetOnInsert method to support the $setOnInsert update operator.

New overload of PushEach that has a PushEachOptions parameter that can
be used to provide advanced options to the $pushEach update operator.

## Changes to Index builder

Added support for creating hashed and 2dsphere indexes.

## GeoJson object model

The GeoJson object model is a type-safe in memory representation of GeoJSON
objects. When these objects are serialized to BSON documents the resulting
BSON documents will be valid GeoJSON documents. You can use the GeoJson
object model to represent GeoJSON properties in your POCOs and to provide
values to the new methods added to the Query builder to support GeoJson queries.

## Simplified settings classes

The settings classes have been simplified a bit and we have standardized how
settings are stored internally and how default values are applied. See the
comments below on the different settings classes.

## MongoClientSettings

The CredentialsStore and DefaultCredentials properties have been replaced by
the new Credentials property. The CredentialsStore property was a mapping from
a database name to the credential to use to access that database. The Credentials
property is simply a list of credentials that will be used with all connections,
regardless of which database is being accessed.

There is a new SslSettings property that lets you control every aspect of an
SSL connection to the server.

The new ReadEncoding and WriteEncoding settings can be used to configure the
details of UTF8 encoding.

## MongoServerSettings

While this class has not yet been deprecated, it eventually will be. We recommend
you always use MongoClientSettings instead. 

The new settings added to MongoClientSettings have also been added to
MongoServerSettings.

## MongoDatabaseSettings

The database name has been moved out of the settings class and is now an 
argument to the GetDatabase method. Therefore the DatabaseName property
has been deprecated.

The proper way to create an instance of MongoDatabaseSettings is to call the
constructor. The CreateDatabaseSettings method of MongoServer is deprecated.

The Credentials property has been removed. It is no longer necessary (or
possible) to provide a credential at the database level.

The new ReadEncoding and WriteEncoding settings can be used to configure the
details of UTF8 encoding. If not set, they are inherited from the server
settings.

## MongoCollectionSettings

The big change is that the name of the collection and the default document type
have been moved out of the settings class and are now arguments of the
GetCollection method. As part of this change the MongoCollection<TDefaultDocument>
subclass is deprecated, as have the CollectionName and DefaultDocumentType
properties.

The proper way to create an instance of MongoCollectionSettings is to call the
constructor. The CreateCollectionSettings method of MongoDatabase is deprecated.

The new ReadEncoding and WriteEncoding settings can be used to configure the
details of UTF8 encoding. If not set, they are inherited from the database
settings.

## New LINQ features

You can now add WithIndex to LINQ queries to provide an index hint, and you
can use Explain to have the server explain how the resulting MongoDB query
was executed.

## MongoServer changes

MongoServer no longer maintains a mapping from database settings to MongoDatabase
instances, and therefore GetDatabase no longer returns the same instance
every time it is called with the same parameters. MongoDatabase is a light
weight object so there is not much benefit in caching it, and by returning
a new instance every time, GetDatabase no longer has to use a lock to be
thread safe.

The indexers for getting a database are deprecated, so use:

```
var database = server.GetDatabase(""test"");
```

instead of:

```
var database = server[""test""];
```

All of the methods that take adminCredentials have been removed. It is no
longer possible to provide admin credentials for just one operation. You
have to provide the admin credentials in your MongoClientSettings if you
need to run admin commands. If you want to keep your admin credentials
separate from your regular credentials create two (or more) instances
of MongoClient with different MongoClientSettings.

## MongonDatabase changes

MongoDatabase no longer maintains a mapping from collection settings to
MongoCollection instances, and therefore GetCollection not longer returns
the same instance every time it is called with the same parameters.
MongoCollection is a light weight object so there is not much benefit
in caching it, and by returning a new instance every time, GetCollection
no longer has to use a lock to be thread safe.

The indexers for getting a collection are deprecated, so use:

```
var collection = database.GetCollection<TDocument>(""test"");
```

instead of:

```
var collection = database[""test""]; // note: indexers can't have type parameters
```

One reason we are deprecating the indexers is that they can't have type
parameters, so there is no way to specify the default document type when
using an indexer.

All of the methods that take adminCredentials have been removed. It is no
longer possible to provide admin credentials for just one operation. You
have to provide the admin credentials in your MongoClientSettings if you
need to run admin commands.

## MongoCollection changes

InsertBatch has always had the capability to break large batches into smaller
batches that fit within the server's maximum message length. There has been a
slight change in 1.8 to how those sub batches are processed. If you are using
a WriteConcern of Unacknowledged and the ContinueOnError flag is false, then
the driver will insert a GetLastError command after each sub batch except the
last to detect whether an error occurred. This is necessary to implement the
semantics of ContinueOnError being false, where an error in one of the sub
batches should prevent all following sub batches from being sent.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22558/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22558,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.8.0.124,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.8.0.124,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.8.0.124,v1.8.0.124,False,False
22553,2012-11-27T19:24:30Z,2013-08-07T16:16:06Z,1.7,"# C# Driver Version 1.7 Release Notes

This is a major release.

This release has two major goals: to standardize on the name WriteConcern and
to make Acknowledged the new default WriteConcern.

The following classes are being replaced:
- SafeMode is replaced by WriteConcern
- SafeModeResult is replaced by WriteConcernResult
- MongoSafeModeException is replaced by WriteConcernException

To make Acknowledged the new default WriteConcern without breaking any existing
code that might rely on the old default we are introducing a new root class
called MongoClient.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v1.7.md

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.7-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.7-Driver.txt

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/secure/IssueNavigator.jspa?mode=hide&requestId=12915

Documentation on the C# driver can be found at:

http://www.mongodb.org/display/DOCS/CSharp+Language+Center
http://api.mongodb.org/csharp/current/

## Standardizing on WriteConcern instead of SafeMode

Some MongoDB drivers (the C# driver included) have used SafeMode as the name 
for the class which determines whether writes to the database are checked for
errors. We are now standardizing across all drivers to use the name WriteConcern
instead of SafeMode. The C# driver will continue to support the SafeMode class
for a few releases but eventually it will be removed.

You should start using the new WriteConcern class, but we have also provided
an implicit conversion from SafeMode to WriteConcern so any code that passes
a SafeMode argument to a method taking a WriteConcern parameter will still
compile and work.

## New MongoClient class and default WriteConcern

The new default WriteConcern is Acknowledged, but we have introduced the new
default in a way that doesn't alter the behavior of existing programs. We
are introducing a new root class called MongoClient that defaults the 
WriteConcern to Acknowledged. The existing MongoServer Create methods are
deprecated but when used continue to default to a WriteConcern of Unacknowledged.

In prior releases you would start using the C# driver with code like this:

```
var connectionString = ""mongodb://localhost"";
var server = MongoServer.Create(connectionString); // deprecated
var database = server.GetDatabase(""test""); // WriteConcern defaulted to Unacknowledged
```

The new way to start using the C# driver is:

```
var connectionString = ""mongodb://localhost"";
var client = new MongoClient(connectionString);
var server = client.GetServer();
var database = server.GetDatabase(""test""); // WriteConcern defaulted to Acknowledged
```

If you use the old way to start using the driver the default WriteConcern will
be Unacknowledged, but if you use the new way (using MongoClient) the default
WriteConcern will be Acknowledged.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22553/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22553,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.7.0.4714,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.7.0.4714,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.7.0.4714,v1.7.0.4714,False,False
22549,2012-10-22T19:56:34Z,2013-08-07T16:11:32Z,1.6.1,"# C# Driver Version 1.6.1 Release Notes

This is a minor release containing a few bug fixes, particularly related to ReadPreference support
and sending commands to secondaries.

An online version of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v1.6.1.md

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.6.1-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.6.1-Driver.txt

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/secure/IssueNavigator.jspa?mode=hide&requestId=12609

## Changes to ReadPreference

The implementation of ReadPreference has been changed to more accurately follow the ReadPreference spec:

http://docs.mongodb.org/manual/applications/replication/#read-preference

The changes are:
- SecondaryPreferred only uses the Primary if no secondaries are available (regardless of latency)
- SecondayAcceptableLatency is now configurable
- when sending queries to mongos:
  - ReadPreference.Primary is encoded setting the SlaveOk bit on the wire protocol to 0
  - ReadPreference.SecondaryPreferred (without tags) is encoded setting the SlaveOk bit on the wire protocol to 1
  - all other ReadPreferences are encoded using $readPreference on the wire
  - $query is now encoded before $readPreference as required by mongos
- commands now correctly use the collection settings (they were using the database settings)

## Sending commands to secondaries

Only a limited set of commands are now allowed to be sent to secondaries. All other commands
will be sent to the primary regardless of the ReadPreference you specify. The commands
that can be sent to secondaries are:
- aggregate
- collStats
- count
- dbStats
- distinct
- geoNear
- geoSearch
- geoWalk
- group
- mapReduce (but _only_ if using Inline results)

The corresponding helper methods in the C# driver are:
- MongoCollection.Aggregate
- MongoCollection.GetStats
- MongoCollection.Count, MongoCursor.Count and MongoCursor.Size
- MongoDatabase.GetStats
- MongoCollection.Distinct
- MongoCollection.GeoNear and MongoCollection.GeoNearAs
- MongoCollection.GeoHaystackSearch and MongoCollection.GeoHaystackSearchAs
- MongoCollection.Group
- MongoCollection.MapReduce (with MapReduceOutputMode.Inline)

There is no helper method (yet) for the geoWalk command.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22549/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22549,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.6.1.4678,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.6.1.4678,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.6.1.4678,v1.6.1.4678,False,False
22546,2012-08-29T20:36:27Z,2013-08-07T16:08:23Z,1.6,"# C# Driver Version 1.6 Release Notes

This is a major release featuring support for server 2.2. The major change is
support for read preferences, allowing tag based granularity for selecting
servers to send commands and queries to. In addition, we have added support
for SSL and a helper method for the new aggregation framework.

An online version (with possible corrections) of these release notes is available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Release%20Notes%20v1.6.md

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.6-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.6-Driver.txt

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/secure/IssueNavigator.jspa?mode=hide&requestId=12011

Information about read preferences is available online at:

http://docs.mongodb.org/manual/applications/replication/#read-preference

These release notes describe the changes at a higher level, and omits describing
some of the minor changes.

## Breaking changes
- Commands are no longer always sent to primaries.  If you are expecting this
  behavior, ensure that your read preference is set to Primary.
- ConnectWaitFor has been removed and replaced with read preferences.  Anyone
  using the ConnectWaitFor enumeration will need to change their code.
- The serialized representation for a C# null of type BsonNull has been changed
  from { $csharpnull : true } to { _csharpnull : true } to work around limitations
  of the server. Existing data will still be correctly deserialized but new data
  will be written in the new format. This is very unlikely to affect you because
  it is very unlikely you have any properties of type BsonNull in your classes.

## New features
- There is a new [BsonSerializer] attribute that can be used to specify which
  serializer to use for a class.
- Instances of ReadOnlyCollection are now serializable/deserializable.
- Queries involving Mod now work with 64-bit integers also.
- Support for TTL collections (see IndexOptions.SetTimeToLive).
- Simple helper method for aggregation framework (see MongoCollection.Aggregate).
- SlaveOK has been deprecated and replaced with the more flexible ReadPreference options.
- Support for SSL connections.
- Improved support for LINQ queries from VB.NET.
- Support for connecting to multiple mongos’ with load balancing
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22546/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22546,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.6.0.4624,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.6.0.4624,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.6.0.4624,v1.6.0.4624,False,False
22543,2012-07-03T01:28:52Z,2013-08-07T16:02:58Z,1.5,"# C# Driver Version 1.5 Release Notes

This is a major release featuring Typed Builders, enhanced LINQ support, and serialization of custom collections.  There are significant serialization performance improvements, specifically when using class maps.  In addition, there are a number of other enhancements and bug fixes.

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.5-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.5-Driver.txt

These release notes describe the changes at a higher level, and omit describing
some of the minor changes.

## Breaking changes
- Any custom IBsonSerializer implementations utilizing the methods GetDocumentId, SetDocumentId, GetMemberSerializationInfo, or GetItemSerializationInfo will need to implement the corresponding interface to restore functionality; IBsonIdProvider, IBsonDocumentSerializer, IBsonArraySerializer
- A call to BsonSerializer.RegisterSerializer will now fail for types that implement IBsonSerializable
- The BsonDefaultSerializer methods IsTypeDiscriminated, LookupActualType, LookupDiscriminatorConvention, RegisterDiscriminator, and RegisterDiscriminatorConvention have been moved to BsonSerializer.
- ObjectId.TryParse will now return false instead of throwing an exception when argument is null
- BsonDocumentWrapper no longer ignores null, but wrather wraps it with a BsonNull.Value.  Any code relying on BsonDocumentWrapper ignoring null will need to be evaluated.
- Custom collection/dictionary classes are now serialized by a collection/dictionary serializer instead of the class map serializer.  This means that the items will be serialized instead of the properties and fields.  Any code relying on the old behaviour will need to use BsonClassMap.RegisterClassMap with their custom collection/dictionary to preserve the old behaviour.
- The static Query class used to build queries has changed significantly.  Users of this class can either modify their code or add a using statement alias to the old version.  The DeprecatedQuery version will get dropped in version 2.0.
  
  ```
  using Query = MongoDB.Driver.Builders.DeprecatedQuery;
  ```

## JIRA issues resolved

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/secure/IssueNavigator.jspa?mode=hide&requestId=11900

# High-Level Library Changes

## Medium Trust

Support for medium trust is still not here.  The communication protocol with a mongodb server is over TCP, which is dissallowed in vanilla medium trust environments.  However, a slightly altered, custom medium trust permission system allowing sockets enables the driver to run fully.  This can be done by copying the existing medium trust policy file and:
- adding the SocketPermission: 
  
  ```
  <SecurityClass Name=""SocketPermission"" Description=""System.Net.SocketPermission, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""/>
  ```
- adding an IPermission for the new SocketPermission security class:
  
  ```
  <IPermission class=""SocketPermission"" version=""1"" Unrestricted=""true""/>
  ```

Support for Azure partial trust should work without changes.  However, the default trust level for Azure is full, so this will only affect you if you have changed your Azure defaults.

## Custom Collection Serialization

Classes that implement IDictionary or IDictionary<TKey, TValue> are now always serialized by a DictionarySerializer. Classes that implement IEnumerable ot IEnumerable< T > are now always serialized by a CollectionSerializer. We believe that a large majority of the time, classes implementing the collection interfaces intend for their items to be persisted rather than any properties (such as Count).  This should enable the use of custom collection classes without any extra effort on your part.

## Query Builder

We have rewritten the static Query class.  The old Query class followed the odd query syntax of mongodb and was found to be somewhat unintuitive for those coming from traditional C# backgrounds and relational databases.  In addition, as we completed the new typed Query< T > static class (discussed below) to aid the building of queries for classes that are using class maps underneath, we found that the difference in the old one and the new one was too stark.

In the older version, a complex query would be built as follows.  

```
var query = Query.Or(
    Query.Exists(""fn"", true).NE(""Jack""),
    Query.GTE(""age"", 20).LTE(40));
```

There are some implied ""ands"" for the two fields(name and age) that we wanted to remove so that the generated query was as predictable as possible.  The new query syntax is a little more verbose, but we believe overall easier to understand.

```
var query = Query.And(
    Query.And(
        Query.Exists(""fn""),
        Query.NE(""fn"", ""Jack""))
    Query.And(
        Query.GTE(""age"", 20),
        Query.LET(""age"", 40)));
```

In many cases, you might find that you don't need to change anything, as the syntax is only different when a conjunction is chained.  However, if you use this syntax a lot, then you can still use the old query builder by including a using statement in your files as follows:

```
using Query = MongoDB.Driver.Builders.DeprecatedQuery;
```

In version 2.0, we'll be removing the DeprecatedQuery class, so you'll need to update eventually.

## Typed Builders

In conjunction with the new query builder, we have also included typed builders that mirror all the existing builders.  So, Query has a corresponding Query< T > class, Update has a corresponding Update< T > class, etc...  The huge benefit to this is that you can remove your ""magic"" strings from your code!  In addition, anyone using custom serializers with class maps has support built-in for value based comparisons.

For instance, given that we have a Person class defined:

```
public class Person
{
    [BsonRepresentation(BsonType.ObjectId)]
    public string Id { get; set;}

    [BsonElement(""fn"")]
    public string FirstName { get; set;}

    [BsonElement(""ln"")]
    public string LastName { get; set;}

    [BsonElement(""age"")]
    public int Age { get; set;}
}   
```

Without the typed builder, a typical query might look like this:

```
ObjectId idFromUserInput = ...;
var query = Query.And(
    Query.NE(""_id"", idFromUserInput),
    Query.EQ(""fn"", ""Jack""));
```

In the above query for a person, we need special knowledge to construct a valid query. First, that ""Id"" is ""_id"" in mongodb.  Second, that ""_id"" is an ObjectId, even though our class exposes it as a string.  And third, that ""FirstName"" is ""fn"" in mongodb.  With the typed builders, you can specify this configuration information in one place, either as attributes or through the fluent configuration api, and never need to think about it again, as is demonstrated below, where the exact same query is generated as above.

```
string idFromUserInput = ...;
var query = Query.And(
    Query<Person>.NE(p => p.Id, idFromUserInput),
    Query<Person>.EQ(p => p.FirstName, ""Jack""));
```

In addition, the typed query builders are type-safe, so you can't put an integer value where you have declared your property as a string.  However, the biggest benefit to our internal refactoring is that you can now express your queries as predicates, making the above query even easier and more readable.

```
string idFromUserInput = ...;
var query = Query<Person>.Where(p => p.Id != idFromUserInput && p.FirstName == ""Jack"");
```

## LINQ Enhancements

We continue to make Linq improvements.  Thanks to all who report missing features and problematic queries.  Linq is difficult to implement because IQueryable provides a lot of flexibility and operators that simply aren't supported in MongoDB.  Where implementation makes sense, we will continue to enhance our linq implementations.  As such, we have implemented a number of new operators:
- Added support for & and | operators when both sides evaluate to a boolean.
- Added support for the Any operator when the target is an enumerable of documents.  This will generate an $elemMatch query.  We do NOT support targets that are enumerables of primitives because the mongodb server does not support those.  As soon as the server supports this, we will add this in as well.
- Using ToUpper or ToLower will generate a case-insentive query to mongodb using a regular expression.
- There are a number of times when certain queries will always evaluate to false.  These queries will generate a special query that will utilize an index when possible, but still always evaluate to false on the server.  Don't be surprised to see this query in your query plans: { ""_id"" : { $type : -1 } }.  In addition, there are some queries that always evaluate to true.  These will generate an empty query document: { }. 
  
  ```
  // { ""_id"" : { $type : -1 } }
  
  var query = Query<Person>.Where(p => p.Name.ToUpper() == ""Abc"");
  ```
- Nullable Enums are now supported.
- ContainsKey on any typed impementing IDictionary or IDictionary<K,V> is now supported and will generate a query corresponding to it's serialization format.
- Contains can now be used on any type implementing IEnumerable or IEnumerable< T > and will be serialized to it's corresponding form.  In the case of a local collection containing a field, this would generate an $in clause.
  
  ```
  var local = new List<int> { 1, 2, 3};
  
  // {""Age"" : { $in : [1,2,3] } }
  
  var query = from p in people.AsQueryable()
          where local.Contains(p.Age)
          select p;
  ```
- Type queries either via comparison 
  
  ```
  Query<A>.Where(a => a.GetType() == typeof(T)) 
  ```
  
  or in LINQ
  
  ```
  collection.AsQueryable().OfType<T>() 
  ```
  
  are supported for those of you using inheritance in your class maps.  These will generate queries where the type discriminator is checked for the proper value.

## GridFS Changes

In previous releases, downloading files attempted to ensure that indexes existed in the mongodb servers.  This prevented read-only users from downloading files.  We have removed the call to ensure indexes when downloading files so that read-only users can now download files as would be expected.  The downside to this is that if you delete your indexes in GridFS, then there is a good change they will not come back automatically.  So, don't delete your indexes.

In addition, there was a limitation with GridFS files that were larger than 2GB.  This limitation has been removed.

## Installer Changes

The installer has been rewritten using WIX as the visual studio based installer project will not be supported in future versions of visual studio.  As part of this rewrite, we have removed the installation of the libraries to the GAC.  We will still be strong-signing the assemblies, so you'll be able to install them to the GAC yourself.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22543/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22543,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.5.0.4566,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.5.0.4566,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.5.0.4566,v1.5.0.4566,False,False
22540,2012-04-27T15:38:37Z,2013-08-07T15:59:49Z,1.4.2,"# C# Driver Version 1.4.2 Release Notes

This minor release fixes a few issues found in the 1.4.1 release.

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.4.2-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.4.2-Driver.txt

These release notes describe the changes at a higher level, and omit describing
some of the minor changes.

## Breaking changes

After 1.4.1 was released it was discovered that there were some minor breaking
changes. The breaking changes were in methods that we considered to be internal,
but that were not made private so that they leaked out into the public API.
Those methods have now been marked obsolete and will be made private in 
a future release. The 1.4.2 release restores backward compatibility for these
methods (GetDocumentId and SetDocumentId in BsonDocument).

## JIRA issues resolved

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/secure/IssueNavigator.jspa?mode=hide&requestId=11409

# BSON library changes

## GetDocumentId/SetDocumentId marked obsolete

These methods were intended to be private. They have been marked as obsolete
and will be made private in a future release.

# Driver changes

## Query.All/In/NotIn

There was an issue with Query.All/In/NotIn that might have affected you. If you
cast a BsonArray to IEnumerable&lt;BsonValue&gt; before calling Query.All/In/NotIn
you would get an exception. This only happened when casting a BsonArray to
IEnumerable&lt;BsonValue&gt;. If you passed a BsonArray to the BsonArray overload or
passed an IEnumerable&lt;BsonValue&gt; that was not a BsonArray to the
IEnumerable&lt;BsonValue&gt; overload no exception was thrown.

## RequestStart/RequestDone

Calling RequestStart when the connection pool was oversubscribed would often
result in a deadlock. This has been fixed in the 1.4.2 release.

## Ping/VerifyState

These methods are usually called from a timer to monitor the state of the
server (or of multiple servers if connected to a replica set), but you can
also call them yourself. These methods now use a new connection instead
of one from the connection pool so that they are not delayed waiting for a
connection when the connection pool is oversubscribed.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22540/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22540,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.4.2.4500,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.4.2.4500,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.4.2.4500,v1.4.2.4500,False,False
22535,2012-04-18T02:47:11Z,2013-08-07T15:56:46Z,1.4.1,"# C# Driver Version 1.4.1 Release Notes

This minor release fixes a few issues found by users of the LINQ support added
in v1.4 of the C# driver and also adds support for a few new LINQ query
operators and where clauses.

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.4.1-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.4.1-Driver.txt

These release notes describe the changes at a higher level, and omit describing
some of the minor changes.

## Breaking changes

There are no breaking changes in this release.

## JIRA issues resolved

The full list of JIRA issues resolved in this release is available at:

https://jira.mongodb.org/secure/IssueNavigator.jspa?mode=hide&requestId=11397

# LINQ query support

The main purpose of this minor release is to fix some issues found by users of
the new LINQ support added in v1.4.

One bug that many have encountered is a NullReferenceException when writing a
query against an inherited property.

https://jira.mongodb.org/browse/CSHARP-418

You would hit this error if you had any queries that were similar to this:

```
public class B
{
    public ObjectId Id; 
}

public class C : B
{
    public int X;
}

var query =
    from c in collection.AsQueryable<C>()
    where c.Id = id // class C inherits Id from class B
    select c;
```

Another bug that a few users have encountered is an ArgumentOutOfRangeException
when writing a LINQ query that consists of a bare AsQueryable and nothing else:

https://jira.mongodb.org/browse/CSHARP-419

as in this sample:

```
var query = collection.AsQueryable<C>(); // no where clause
```

Normally a query would contain something else besides the call to AsQueryable
(like a where clause), but this is a legal query and is now supported.

# BSON library changes

## MaxSerializationDepth

The BSON serialization mechanism does not support circular references in your
object graph. In earlier versions of the C# driver if you attempted to
serialize an object with circular references you would get a
StackOverflowExpection. The 1.4.1 version now tracks the serialization depth
as it serializes an object and if it exceeds MaxSerializationDepth a
BsonSerializationException is thrown. The problem with StackOverflowException
was that it was fatal to your process, but the BsonSerializationException can
be caught and your process can continue executing if you choose.

The default MaxSerializationDepth is 100.

## Interpretation of C# null vs BsonNull.Value

When working with the BsonDocument object model a C# null is usually ignored,
specially when creating BsonDocuments using functional construction. However,
when mapping between .NET types and the BsonDocument object model a C# null
will now be mapped to a BsonNull. For example:

```
var dictionary = new Dictionary<string, object> { { ""x"", null } };
var document = new BsonDocument(dictionary);
// document[""x""] == BsonNull.Value
```

and when mapping in the reverse direction a BsonNull will map to a C# null:

```
var document = new BsonDocument { { ""x"", BsonNull.Value } };
var dictionary = document.ToDictionary();
// dictionary[""x""] == null
```

Usually mapping between .NET types and the BsonDocument object model happens
automatically as needed, but if you want to invoke the mapping yourself you
can access the BsonTypeMapper directly:

```
var dictionary = new Dictionary<string, object> { { ""x"", null } };
var document = BsonTypeMapper.MapToBsonValue(dictionary);
// document[""x""] == BsonNull.Value
```

or in the other direction:

```
var document = new BsonDocument { { ""x"", BsonNull.Value } };
var dictionary = (IDictionary<string, object>)BsonTypeMapper.MapToDotNetValue(document);
// dictionary[""x""] == null
```

## Serializing read-only properties

The class map based serialization support normally serializes only public
read-write properties (or fields). Sometimes it can be useful to serialize
read-only properties as well, specially if you want to query against them.
You can now opt-in your read-only properties so that they appear in the
serialized document. For example:

```
public class Book
{
    public ObjectId Id;
    public string Title;
    [BsonElement] // opt-in the read-only LowercaseTitle property
    public string LowercaseTitle { get { return Title.ToLower(); } }
}
```

Now when a Book is serialized the document will look like:

```
{
    _id : ObjectId(""4f8d771dae879111d289dbc0""),
    Title : ""For Whom the Bell Tolls"",
    LowercaseTitle : ""for whom the bell tolls""
}
```

During deserialization any elements in the serialized document that
correspond to read-only properties are ignored.

# Driver changes

## MongoServer

There is a new method called IsDatabaseNameValid that you can call to test if
a database name is valid.

## MongoDatabase

There is a new method called IsCollectionNameValid that you can call to test if a
collection name is valid.

## MongoGridFS

You can now disable computing the MD5 at the server when uploading a GridFS
file. You can also disable the client side verification of the MD5 that is
normally done on Upload or Download. The reason you might choose to disable
MD5 verification is that it is computationally expensive to compute the MD5.

## LINQ OfType<T> query operator

You can now use the OfType<T> query operator in LINQ queries. For example:

```
var query = collection.AsQueryable<B>().OfType<C>();
```

this generates a query against the ""_t"" discriminator value that is used to
identify the actual type of a serialized document.

## Additional expressions supported in LINQ where clauses

The following expressions are now supported in LINQ where clauses:

```
// d is the document
// p is a property of the document
// c is a character constant
// ca is an array of character constants
// s is a string constant
// i, j, k, n are integer constants

where d.p.Equals(constant)
where string.IsNullOrEmpty(d.p)
where d.p.IndexOf(c) == i
where d.p.IndexOf(c, j) == i
where d.p.IndexOf(c, j, k) == i
where d.p.IndexOf(s) == i
where d.p.IndexOf(s, j) == i
where d.p.IndexOf(s, j, k) == i
where d.p.IndexOfAny(ca) == i
where d.p.IndexOfAny(ca, j) == i
where d.p.IndexOfAny(ca, j, k) == i
where d.p[i] == c
where d.p.Length == n
where d.p.ToLower().Contains(""xyz"")
where d.p.ToLower().StartsWith(""xyz"")
where d.p.ToLower().EndsWith(""xyz"")
where d.p.ToUpper().Contains(""xyz"")
where d.p.ToUpper().StartsWith(""xyz"")
where d.p.ToUpper().EndsWith(""xyz"")
where d.p.Trim().Contains(""xyz"")
where d.p.Trim().StartsWith(""xyz"")
where d.p.Trim().EndsWith(""xyz"")
where d.p.TrimStart().Contains(""xyz"")
where d.p.TrimStart().StartsWith(""xyz"")
where d.p.TrimStart().EndsWith(""xyz"")
where d.p.TrimEnd().Contains(""xyz"")
where d.p.TrimEnd().StartsWith(""xyz"")
where d.p.TrimEnd().EndsWith(""xyz"")
where d.GetType() == typeof(T)
where d is T

// you can use any combination of ToLower/ToUpper/Trim/TrimStart/TrimEnd
// before Contains/StartsWith/EndsWith
```

In the 1.4 version of the C# driver the constant always had to appear on the
right of a comparison operator. That restriction is lifted in 1.4.1 so now the
following are equivalent:

```
where d.Height < 60
where 60 > d.Height
```

## Type of <T> in AsQueryable can now be deduced

The type of <T> in the call to AsQueryable can now be deduced from the collection argument:

```
var collection = database.GetCollection<MyDocument>(""mydocuments"")
var query = collection.AsQueryable(); // <T> is deduced to be MyDocument
```
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22535/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22535,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.4.1.4490,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.4.1.4490,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.4.1.4490,v1.4.1.4490,False,False
22534,2012-03-27T05:12:25Z,2013-08-07T15:50:37Z,v1.4,"# C# Driver Version 1.4 Release Notes

The major feature of this release is support for LINQ queries. Some of the other
changes (e.g. new IBsonSerializer methods) are also in support of the new LINQ
implementation.

File by file change logs are available at:

https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.4-Bson.txt
https://github.com/mongodb/mongo-csharp-driver/blob/master/Release%20Notes/Change%20Log%20v1.4-Driver.txt

These release notes describe the changes at a higher level, and omit describing
some of the minor changes.

## Breaking changes

There are some breaking changes in this release. Some of them are only breaking
at the binary level and are easily taken care of by simply recompiling your
application. Others require minor changes to your source code. Many of the 
breaking changes are in low level classes, and these won't affect most users,
unless for example you are doing things like writing custom serializers.

Please read these release notes carefully before adopting the new 1.4 release
of the C# driver to determine if any of the breaking changes affect you.

## LINQ query support

As stated previously, the major feature of this release is support for LINQ
queries. These release notes don't describe the new LINQ support, for that
please refer to the online LINQ tutorial at:

http://www.mongodb.org/display/DOCS/CSharp+Driver+LINQ+Tutorial

(Please note that the LINQ tutorial won't be available until several weeks 
after the 1.4 release has been shipped. Sorry.)

## CLS compliance

Both the MongoDB.Bson.dll and MongoDB.Driver.dll libraries have been marked
as CLS compliant, which should make them more useful from other .NET languages.
Most of the changes required to make the libraries CLS compliant are not even
visible in the public interface.

## Release builds

Starting with the 1.4 version we are shipping Release builds of the DLLs.

## Code formatting changes

In response to popular demand the code base has been reformatted using the
default Visual Studio C# code formatting settings. We have also adopted
the convention of prefixing instance field names with a single ""_"" and static
fields names with a double ""__"" (while this convention for static fields is 
not common it is very useful). One of the nice benefits of these conventions
is that the drop down menu in Visual Studio that displays class members ends
up grouping all static fields first, followed by instance fields, followed by 
the rest of the properties and methods.

# BSON library changes

## ArraySerializationOptions

This new class allows you to specify serialization options for array-like
members. Initially the only option available is to specify serialization
options for the items of the array. When using attributes to specify
serialization options any attributes that don't apply to the collection as a
whole implictly apply to the items of the collection.

## BsonDateTime is now a pure BSON DateTime value

In previous versions the BsonDateTime class stored its value twice in two
different private fields: _millisecondsSinceEpoch (a long) and _value (a .NET
DateTime). The idea was that you could store a .NET DateTime without losing any
precision. However, that turns out to be confusing because as soon as you save
the BsonDateTime value to the database and read it back you are going to lose
precision anyway, so you might as well lose it right up front and not make 
false promises.

BsonDateTime also has two new helper methods: ToLocalTime and ToUniversalTime.
These methods convert the BSON DateTime to either local or UTC .NET DateTime
values. There are also new AsLocalTime and AsUniversalTime properties in
BsonValues that can be used to convert BsonValues to .NET DateTime values (like
all AsXyz properties in BsonValue they throw an InvalidCastException if the
BsonValue is not actually a BsonDateTime).

## BsonIgnoreExtraElements attribute

The BsonIgnoreExtraElements attribute has a new property called Inherited. If
this property is set to true then all classes derived from this one will
automatically inherit this setting, which makes it easy to set it for an
entire class hierarchy at once.

## BsonIgnoreIfDefault attribute

This new attribute allows you to specify that you want a field to be ignored
during serialization if it is equal to the default value. This replaces the
SerializeDefaultValue parameter of the BsonDefaultValue attribute. By making
this a separate attribute you can specify that you want the default value
ignored without having to specify the default value as well.

## BsonReader: CurrentBsonType vs GetCurrentBsonType

In previous versions the CurrentBsonType property had side effects. In general
it is bad form for the get accessor of a property to have side effects, as even
something as simple as looking at the value of the property in a debugger can
have unintended consequences. Therefore, in the 1.4 release the CurrentBsonType
property has no side effects. The previous behavior is now implemented in the
GetCurrentBsonType method. While this is mostly an internal change, _if_ you
have written a custom serializer that used the CurrentBsonType property and
were relying on its side effects you will have to change your custom serializer
to call GetCurrentBsonType instead.

## ConventionProfile new conventions

The ConventionProfile class has two new conventions: IgnoreIfDefaultConvention
and SerializationOptionsConvention. Also, the SerializeDefaultValueConvention
has been obsoleted in favor of the new IgnoreIfDefaultConvention.

## DictionarySerializationOptions

This class has a new property called ItemSerializationOptions that can be used
to specify the options to use when serializing the value of the items in the
dictionary. When using attributes to specify serialization options, any
attributes that don't apply to the dictionary as a whole implicitly apply to
the value of the items in the dictionary.

## ExtraElements

Previous versions of the C# driver allowed you to specify a field of the class
to be used to store any extra elements encountered during deserialization.
However, this field _had_ to be of type BsonDocument, which meant introducing
a dependency on the driver into your data model classes (which some developers
don't want to do). You now have the additional option of declaring your
ExtraElements field to be of type IDictionary<string, object> instead.

## IBsonSerializationOptions

The IBsonSerializationOptions has several new methods. ApplyAttribute is used
during the AutoMap process to apply an attribute to some serialization options
that are being built incrementally (starting from the default serialization
options). This provides an extensible mechanism for applying new attributes to
new serialization options classes. The Clone and Freeze methods are introduced
to allow serialization options to be converted to read-only once initialization
is complete to provide thread safety.

## IBsonSerializer

The IBsonSerializer has several new methods. GetDefaultSerializationOptions
provides an initial set of serialization options that any serialization 
attributes found can be applied against. GetItemSerializationInfo provides
serialization info about the items and applies only to serializers for 
collection-like classes. GetMemberSerializationInfo provides serialization 
info about members of a class. The last two are used in the implementation 
of LINQ queries.

## Image/Bitmap serializers

New serializers have been provided for the Image abstract base class and the
Bitmap class derived from it.

## ISupportInitialize

The ISupportInitialize interface defines two methods: BeginInit and EndInit.
The BsonClassMapSerializer now checks whether the class being deserialized
implements this interface, and if so, calls BeginInit just before it starts
to deserialize a class, and EndInit just after it has finished. You can 
use this feature to do any pre- or post-processing.

## ObjectId/BsonObjectId creation

ObjectId (and BsonObjectId) have a new constructor that allows you to supply
the timestamp as a .NET DateTime value and it will automatically be converted
to seconds since the Unix Epoch. These new constructors are useful if you want
to create artificial ObjectIds to use in range based ObjectId queries (in
which case you will usually set the machine, pid and increment fields to zero).

There are also two new overloads of GenerateNewId that allow you to provide
the desired timestamp as either an int or a .NET DateTime. These new overloads
are useful if you need to create backdated ObjectIds. When generating backdated
ObjectIds there is a slight risk that you might create an ObjectId that is
not unique (but that risk is very small).

## TimeSpanSerializationOptions

You can now choose any of the following representations for a TimeSpan: string,
double, Int32 or Int64. In addition, when using any of the numeric
representations, you can use the Units property to choose the units that the
numeric value is in (choose from: Ticks, Days, Hours, Minutes, Seconds, 
Milliseconds and Nanoseconds).

# Driver changes

## Authentication support improved

Operations that require admin credentials previously required you to set the
DefaultCredentials of MongoServerSetttings to admin credentials. But that is
undesirable because it provides the client code full access to all databases, 
essentially negating the benefit of using authentication in the first place.
In the 1.4 release all operations that require admin credentials have a new
overload where you can provide the needed credentials; you no longer have to
set the DefaultCredentials. Another option is to store credentials for the 
admin database in the new MongoCredentialsStore.

## Connection pool defaults changed

The default value of WaitQueueMultiple has been changed from 1.0 to 5.0 and the
default value of WaitQueueTimeout has been changed from 0.5 seconds to 2
minutes. These new values are taken from the Java driver, where they have
reportedly been working well for users running under heavy loads. These new
values mean that many more threads can be waiting for a longer time before a 
timeout exception is thrown.

## Exceptions are no longer caught and rethrown when possible

Wherever possible exception handling code that used to use catch exceptions
and rethrow them after processing them has been changed to roughly equivalent
code that uses try/finally to accomplish the same objective. This is specially
helpful if you are running the debugger set to stop whenever an exception is
thrown.

## IBsonSerializable semi-deprecated

The LINQ support relies heavily on the new methods added to IBsonSerializer.
Because of this it is highly encouraged that _if_ you have to handle your own
serialization that you always opt to write an IBsonSerializer for your class 
instead of having it implement IBsonSerializable (see the notes for MongoDBRef 
and SystemProfileInfo for examples of where the driver itself has switched 
from IBsonSerializable to using a IBsonSerializer). IBsonSerializable still 
has a modest role to play in classes that just need to be serialized quickly 
and simply and for which we won't be writing LINQ queries (for example, the 
driver's Builders and Wrappers still use IBsonSerializable).

## LINQ query support

As mentioned earlier in the release notes more information about the new
support for LINQ queries can be found in the forthcoming LINQ tutorial:

http://www.mongodb.org/display/DOCS/CSharp+Driver+LINQ+Tutorial

## Locking issues

A number of locking issues related to connection pooling have been resolved.
These issues were particularly likely to occur if you had more threads than
the maximum size of the connection pool and were using the connections heavily
enough that the connection pool could be used up.

## MongoCredentialsStore

You can now create a credentials store which contains credentials for multiple
databases (the name of the database is the key and the credentials are the
value). The credentials store must be set up (in the MongoServerSettings) 
before you call MongoServer.Create, so it is only intended for scenarios 
where you have a fixed set of credentials that aren't going to change at runtime.

## MongoDBRef no longer implements IBsonSerializable

MongoDBRef used to handle its own serialization by virtue of implementing
IBsonSerializable. But the IBsonSerializable interface is not helpful when we
try to add support for writing LINQ queries against components of a MongoDBRef.
Instead, there is now a MongoDBRefSerializer which handles serialization of
MongoDBRefs, as well as implementing GetMemberSerializationInfo which enables 
the LINQ implementation to support LINQ queries against MongoDBRefs.

## MongoInsertOptions/MongoUpdateOptions constructor changed

The constructors for MongoInsertOptions and MongoUpdateOptions used to require
that the collection be passed in as a parameter. The purpose was to allow
the constructor to inherit some of the options from the collection settings.
To the developer however, this was awkward, as it required providing the
collection where it seemed to be redundant. By handling default values in a
different way we no longer require the collection to be supplied to the 
constructors. The old constructors (that require the collection parameter) are
still temporarily supported but have been marked as deprecated with a warning.

## MongoServer Admin properties and methods removed

The following Admin properties and methods have been removed from MongoServer:
AdminDatabase, GetAdminDatabase, RunAdminCommand, and RunAdminCommandAs. The
reason for removing them is that many developers would never use them anyway,
and adding new overloads for providing admin credentials would have resulted
in even more of these rarely used properties and methods. If you were using
any of these methods or properties they can easily be replaced with calls to 
methods of an instance of MongoDatabase (use one of the overloads of 
GetDatabase with ""admin"" as the database name to get a reference to the admin
database).

## RequestStart/RequestDone

Recall that the purpose of RequestStart is to tell the driver that a series of
operations should all be done using the same connection (which in the case of a
replica set also implies using the same member of the connection set). Which
member of a replica set was chosen depended on the slaveOk parameter: a value 
of false meant that the primary had to be used, and a value of true meant that
an arbitrary secondary could be used. A new overload of RequestStart now allows
the caller to specify which member should be used, which can be very useful for
implementing custom query routing algorithms or for querying specific members
of a replica set. In general though, keep in mind that you should _not_ be
using RequestStart unless you have an unusual scenario which requires it.

## SocketTimeout default changed

The default value for SocketTimeout has been changed from 30 seconds to 0,
which is a special value meaning to use the operating system default value,
which in turn is infinity. If you actually want a SocketTimeout you now
have to set it yourself. The SocketTimeout is currently a server level setting, 
but most likely in a future release it will be possible to set it at other
levels, including for individual operations.

## SystemProfileInfo no longer implements IBsonSerializable

See the notes for MongoDBRef. SystemProfileInfo no longer implements 
IBsonSerializable for the same reasons, and there is a new 
SystemProfileInfoSerializer instead.
",https://api.github.com/users/craiggwilson,167901,craiggwilson,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22534/assets,https://api.github.com/repos/mongodb/mongo-csharp-driver/releases/22534,master,https://api.github.com/repos/mongodb/mongo-csharp-driver/tarball/v1.4.0.4468,https://github.com/mongodb/mongo-csharp-driver/releases/tag/v1.4.0.4468,https://api.github.com/repos/mongodb/mongo-csharp-driver/zipball/v1.4.0.4468,v1.4.0.4468,False,False
