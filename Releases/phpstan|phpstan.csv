id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
7657065,2017-09-06T17:19:42Z,2017-09-06T17:26:12Z,0.8.5,"* Fixed a problem when an installation of dependencies including dev ones was followed by installation of dependencies with dev ones excluded. (#490, #433, #484)",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/7657065/assets,https://api.github.com/repos/phpstan/phpstan/releases/7657065,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.8.5,https://github.com/phpstan/phpstan/releases/tag/0.8.5,https://api.github.com/repos/phpstan/phpstan/zipball/0.8.5,0.8.5,False,False
7520413,2017-08-25T08:24:40Z,2017-08-25T08:29:50Z,0.8.4,"This release contains several enhancements that sprouted from the work on 0.9 but can be released separately now. This is probably the last 0.8.x release before the more substantial 0.9 gets out. You can look forward to a lot of good stuff ðŸ˜Š (check out dev-master for a sneak peek, but some things are broken right now)

Enhancements:

* Specify return type of count() function (d5dc81d3e167b9ab7623d09cd1e468a38a8c7ba2)
* Specify types of various boolean operators (19bc90e8ffc7c85c2cad761fa99717baf2f61dac)
* Specify types of plus operations on arrays (2830469188a2cd77b241de3017483b821750834f)
* Specify type of error suppress operator (99d33674e17f9036037fa2a8bfecbb557b043fe2)
* Specify type of the assign operator (7745ab983ff05e0c4ca2c94e26c113ab734db3ce)",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/7520413/assets,https://api.github.com/repos/phpstan/phpstan/releases/7520413,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.8.4,https://github.com/phpstan/phpstan/releases/tag/0.8.4,https://api.github.com/repos/phpstan/phpstan/zipball/0.8.4,0.8.4,False,False
7402113,2017-08-15T19:32:09Z,2017-08-15T19:35:44Z,0.8.3,"Enhancements:

* `@var` annotation support for value in `foreach` #452 - thanks @kukulich!
* New convenient CLI option `--memory-limit` #444 - thanks @kukulich!

Bugfixes:

* Added missing assigning by reference in FileTypeMapper #451 - thanks @kukulich!
* Ignored errors patterns can now contain the trailing period #324 
* ArrayAccess allows any type as the array key #450 ",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/7402113/assets,https://api.github.com/repos/phpstan/phpstan/releases/7402113,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.8.3,https://github.com/phpstan/phpstan/releases/tag/0.8.3,https://api.github.com/repos/phpstan/phpstan/zipball/0.8.3,0.8.3,False,False
7375281,2017-08-13T21:13:24Z,2017-08-13T21:17:08Z,0.8.2,Improved compatibility when installed with Composer and `--no-plugins`.,https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/7375281/assets,https://api.github.com/repos/phpstan/phpstan/releases/7375281,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.8.2,https://github.com/phpstan/phpstan/releases/tag/0.8.2,https://api.github.com/repos/phpstan/phpstan/zipball/0.8.2,0.8.2,False,False
7373854,2017-08-13T13:43:09Z,2017-08-13T16:07:19Z,0.8.1,"PHPStan accepts one-time donations through PayPal!

[![Donate on PayPal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://paypal.me/phpstan)

Besides PayPal, there's [Patreon](https://www.patreon.com/phpstan) where you can support PHPStan with recurring monthly donations.

-------

**Enhancements:**

* CLI outputs correct version number for all installation methods (#433, #160) - thanks @Jean85!
* Exclude analysed files earlier - this might result in a lower and more correct reported number of analysed files (#438) - thanks @kukulich!
* Support `if (is_int($foo) === true)` #399 - thanks @JanTvrdik 
* Highest level has `max` alias (run `analyse -l max`) #430 
* [Rules & extensions developers-only] Allow determination of whether MixedType was explicit or default #423 - thanks @stefan-squareweave!

**Bugfixes:**

* Fallback to union in case where intersection is required (restores behaviour from 0.7) (#418, #417) - thanks @JanTvrdik!
* Various fixes for iterables (#443, #402)
* Fixed appending value to null (#403, #404) - thanks @JanTvrdik!
* Fixed `setproctitle()` #411 
* Skip empty parts of phpDoc typehint 6e3dfcc4ff608aadf732156096d4f79421bc2f12",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/7373854/assets,https://api.github.com/repos/phpstan/phpstan/releases/7373854,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.8.1,https://github.com/phpstan/phpstan/releases/tag/0.8.1,https://api.github.com/repos/phpstan/phpstan/zipball/0.8.1,0.8.1,False,False
7137939,2017-07-23T19:20:56Z,2017-07-23T21:07:33Z,0.8,"[PHPStan is on Patreon!](https://www.patreon.com/phpstan) You can show your support by backing PHPStan on Patreon. Choose your reward from different tiers and be a part of PHPStan's sustainable future development. I will deeply appreciate it. Thanks!

PHPStan now has an [**on-line playground over at phpstan.org**](https://phpstan.org/)! Thanks to @JanTvrdik, you can try out the static analyser right in your browser!

**Major new features**:

* Parsing read-only/write-only properties with `@property-read`/`@property-write` annotations. #285 (thanks @stekycz!)
* Checking writing to read-only properties and reading from write-only properties (level 0 for accesses on `$this` and level 2 for the rest). This is useful in combo with `@property-read|write` annotations and with custom class reflection extensions.
* Reading and checking correctness of passed parameters to methods from `@method` annotations including variadic methods. #285 (thanks @stekycz!)
* Check for duplicate keys in literal arrays (level 0)
* Checks for invalid key types in literal arrays, in `list()` and short array destructuring syntax, in writing to and reading from arrays (level 3)
* Handle fatal errors when autoloading unknown classes/interfaces/traits #255 (thanks @Majkl578) This lowers the risk of a fatal error during analysis because of an unknown class.

Enhancements:

* For level 7 (checking possible nullables), PHPStan now considers check for truthy value as a confirmation of not-null value (`if ($possibleNullable)`) #278 #296 #291 
* Added Checkstyle error formatter #271
* Getting annotation methods and properties also from interfaces #292 
* Static calls on arbitrary expressions (not just on class names) are checked on level 2 and higher
* Separate setting to check arguments passed by reference on level 5. Use `checkArgumentsPassedByReference: true` in your config file if you're on a lower level and want to check this.
* Read methods and properties from annotations also from traits
* Checking that constructors do not return anything (returned value is silently thrown away)
* Checking accessing properties on possible null values (level 7)
* Types assigned to properties are checked also for assign operations like `.=`
* Simpler and faster caching without dependency on `nette/caching` #396 (thanks @kukulich!)
* Parsing type of variable from `@var` annotation with type only #395 (thanks @stekycz!)
* `TypeCombinator::combine` accepts multiple types as variadic argument

BC breaks:

* Removed support for PHP-Parser 2.x. #293 Use `phpstan/phpstan-shim` in case of conflicting dependencies.
* Moved properties-related rules to `PHPStan\Rules\Properties` namespace. Rename the rules in case you're using completely custom ruleset (no predefined level).
* Added isReadable/isWritable on PropertyReflection

Bugfixes:

* Fixed mysqli::query parameters count #280 
* Fixed argument count for DateTimeZone::getTransitions() #297 
* DateInterval has microseconds since PHP 7.1 #311
* Fixed looking for inheritDoc when the phpDoc is in an interface 
* Fixed \Locale::getDisplayLanguage() and locale_get_display_language() 2nd parameter optionality #312 
* Added first parameter to DOMDocument::saveHTML() #279 
* Find dynamic return type extensions in case the scope class name case does not match the reality
* Fixed deleting non-existent memory limit file when the rule level is not passed as CLI option while it should
* Changed all use of ""catched"" to ""caught"" #341 
* PHPStan does not crash on PHP 7.2 (full support coming soon)
* Type specifier: fixed handling of nested logical operators #338 
* CallToCountOnlyWithArrayOrCountableRule: fixed union handling
* Add better description to ""call on nullable"" error #282 
* Fixed internal error when analysing short array destructuring syntax from PHP 7.1 with missing item #368 
* RequireParentConstructCallRule fix: supressed constructor calls are now detected correctly #312 
* Fixed resolving variable and expression types from branches. This fixed a lot of issues in conditional code. #277 #299 #355 
* Fixed overriding specified variable type in foreach and catch
* Fixed availability of variables in finally block defined in try and catch blocks with early termination
* Fixed undefined variables because of other assign operations #322 
* Correct type for string with multiple parts in doublequotes #376 
* Fixed imagewebp reflection - added 3rd optional parameter #389 
* Fix ""incorrect case"" error when using trait aliases #391 ",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/7137939/assets,https://api.github.com/repos/phpstan/phpstan/releases/7137939,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.8,https://github.com/phpstan/phpstan/releases/tag/0.8,https://api.github.com/repos/phpstan/phpstan/zipball/0.8,0.8,False,False
5514522,2017-02-20T20:45:32Z,2017-02-20T20:56:46Z,0.6.4,"Enhancements:
- Added support for custom php file extensions (#128 - thanks @mfettig!)
- Support Symfony 2.7 to be compatible with more dependencies, most notable Laravel 5.1 LTS (#151 - thanks @nCrazed!)
- Support experimental Nette 3.0 alpha

Bugfixes:
- Do not report unknown variable in `isset()` (#122)
- Variables used in `compact()` call are considered as used when checking constructor parameters and used closure variables (#121 - thanks @cinamo!)
- Add XMLReader properties missing from native PHP reflection (#139 - thanks @pavelkovar!)
- CallableType accepts any object with `__invoke` method (#147 - thanks @PavelJurasek!)
- Fix `imagepng()` definition (#127 - thanks @finwe!)
- Fixed resolving defined variables in branches for short array destructuring syntax from PHP 7.1 (#124)

**Version 0.7 is in active development, PHPStan is going to experience a big leap once again!**
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/5514522/assets,https://api.github.com/repos/phpstan/phpstan/releases/5514522,0.6.x,https://api.github.com/repos/phpstan/phpstan/tarball/0.6.4,https://github.com/phpstan/phpstan/releases/tag/0.6.4,https://api.github.com/repos/phpstan/phpstan/zipball/0.6.4,0.6.4,False,False
5514443,2017-05-14T20:37:59Z,2017-05-14T20:46:21Z,0.7,"This is a huge release that was in the works for the last 2.5 months! I'd like to do smaller and more frequent releases from now on so that users don't have to wait that long for improvements and bugfixes to arrive to a stable version.

[PHPStan is on Patreon!](https://www.patreon.com/phpstan) You can show your support by backing PHPStan on Patreon. Choose your reward from different tiers and be a part of PHPStan's sustainable future development. I will deeply appreciate it. Thanks!

**Major new features:**
- Big changes around **union types and nullables**:
  - Nullables are now part of UnionType and are now handled equally to other common types. This leads to better detection of nullables when they are passed incorrectly.
  - Functions/methods can check for returned nullables better than before
  - Eliminating types from union in if/elseif/else branches and ternary operator
- Introduced **three new levels**!
  - Level 5: Check passed function/methods **argument types** (only numbers of arguments are checked on lower levels)
    - Also: check whether the argument passed to `count()` function is an array or a Countable, otherwise PHP always returns 1
    - Also: check whether an argument for parameter passed by reference is a variable (otherwise PHP emits a notice)
  - Level 6: Check compliance with union types
  - Level 7: Check nullables more strictly
    - Also: check whether a method is called on a possible nullable #194 
- Support parsing and using **`@method` annotations** - thanks @petaak and @rquadling! #99 
- PHPStan can now be installed and used via a **PHAR archive** (instructions are in README). This solves the problem of conflicting versions of dependencies used by PHPStan and by the analyzed projects. Also, the relevant package [phpstan/phpstan-shim](https://packagist.org/packages/phpstan/phpstan-shim) allows installing the selected PHAR archive via Composer without the risk of conflicting dependencies, so it **can be used in any project**. You can also download the final PHAR below these release notes. Big thanks to @fprochazka!
- Support for **custom error formatters** #185 
- Unified working with classes and anonymous classes. This will probably fix some bugs and inconsistencies related to anonymous classes as a nice side effect.
- Check for undefined constants (level 1). You must define your constants in an autoloaded file or otherwise PHPStan cannot see them.
- Nice analysis speedup #256  - thanks @lookyman!
- **Default temp dir for caching** changed to the result of `sys_get_temp_dir()` - thanks @fprochazka! #250 
- Temp dir is now configurable - thanks @fprochazka! #250

Enhancements
- Check accessed static properties even outside of class scope
- Check called static method even outside of class scope
- Better messages for inaccessible properties/methods/constants from current scope
- ClassConstantRule - checking wrong usage of static and parent
- Instantiation - check self and static outside of class scope
- Instantiation - support parent
- Improve error message in StrictComparisonOfDifferentTypesRule (#136 - thanks @mzk!)
- Added support for `scalar` pseudotype
- Report inner named functions #165 
- Ignore nonexistent fastcgi_ functions #226 
- universalObjectCratesClasses - allow class autoloader to be defined later than this extension is initialized #252 
- Support FloatType alias double in phpDocs #214 
- Define types of magic constants like `__DIR__` or `__CLASS__`
- Combining float and int results in float|int, not just float
- Result type of min and max functions is mostly known #113 
- Type override applies only to the nearest assign of the same expression
- Arrays created from array_ functions aren't checked for appended item types
- Specified boolean type as result of `<=`, `<`, `>`, `>=`
- Custom class reflection extensions are prioritized before annotation extensions
- Combine types with foreach even if we don't know that it ever loops
- Get correct value type when accessing a constant.

BC breaks
- Removed option `defineVariablesWithoutDefaultBranch` because it was a maintenance burden and didn't make much sense

BC breaks (for rules & extension developers)
- `Scope::getClass()` (string|null) was replaced with `Scope::getClassReflection()` (ClassReflection, always returns an object - check for `isInClass()` beforehand), also includes anonymous class reflection
- Removed `Type::isNullable()` and all the `bool $nullable` parameters from Type implementations constructors. Use `PHPStan\Type\TypeCombinator::addNull()` to create a nullable union type.

Bugfixes
- Solve if-else-if-else problem (#118, #209, #243)
- Fix ReflectionClass::newInstance variadic argument #178 
- Do not report empty return statement on functions/methods with yield #166 
- Added missing properties for classes from PHP DOM extension reflection #148 
- Fixed anonymous class with inherited constructor #142 
- Fixed analyzing traits on Windows
- Function parameters with non-null default value were considered nullable
- Properties and static properties are not typed to null when they are checked against null
- Do not override type with is_array to mixed[] if argument is already an array
- Fix printf parameters rule (several times - #217, #211)
- Do not check printf and similar calls with unpacked arguments #253 
- Fixed defect in session_start parameter #241 
- Do not require call to abstract constructor #205 
- Support $argc and $argv variables when defined #232 
- Follow symlinks in analysed directories #218 
- RequireParentConstructCallRule - do not analyze constructors in traits #112 
- FileExcluder should match case-insensitively on Windows #261
- Fixed VariableCloningRule for union types
- Fixed mixed return types processing issue #105
- Do not create an array variable when appending values to an ArrayAccess (#268)
- Variadic parameters also accept Traversables and iterables (#272)
- Respect variable type after assign operation like *= or /= (#114)
- `finally` is always executed, variables defined in there are available below try-catch-finally (#140)",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/5514443/assets,https://api.github.com/repos/phpstan/phpstan/releases/5514443,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.7,https://github.com/phpstan/phpstan/releases/tag/0.7,https://api.github.com/repos/phpstan/phpstan/zipball/0.7,0.7,False,False
5309505,2017-01-30T23:13:17Z,2017-01-30T23:16:50Z,0.6.3,"Dynamic return type extensions are discovered also via an interface (implemented especially for [PHPStan Doctrine extension](https://github.com/phpstan/phpstan-doctrine))
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/5309505/assets,https://api.github.com/repos/phpstan/phpstan/releases/5309505,0.6.x,https://api.github.com/repos/phpstan/phpstan/tarball/0.6.3,https://github.com/phpstan/phpstan/releases/tag/0.6.3,https://api.github.com/repos/phpstan/phpstan/zipball/0.6.3,0.6.3,False,False
5306687,2017-01-30T17:43:36Z,2017-01-30T18:24:33Z,0.6.2,"Enhancements:
- Option to turn off reporting unmatched ignored errors (set `reportUnmatchedIgnoredErrors` to false) #98

Bugfixes:
- Fixed crash related to when `Closure::__invoke` was used literally (`Closure::__invoke` is not in PHP reflection)
- Fixed DatePeriod constructor signature #89 
- Fixed calls to fputcsv - added fifth optional parameter
- Fixed defining variables in switch #109 
- Fixed unpack function - third parameter introduced in 7.1.1 is optional #111 
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/5306687/assets,https://api.github.com/repos/phpstan/phpstan/releases/5306687,0.6.x,https://api.github.com/repos/phpstan/phpstan/tarball/0.6.2,https://github.com/phpstan/phpstan/releases/tag/0.6.2,https://api.github.com/repos/phpstan/phpstan/zipball/0.6.2,0.6.2,False,False
5227352,2017-01-21T20:48:18Z,2017-01-21T21:05:45Z,0.6.1,"Bugfixes:
- RequireParentConstructCallRule - fixed checking static method call on an expression, not class name (#92)
- Added fourth parameter to DatePeriod constructor definition (#89)
- Fixed a bunch of issues that emerged while using multiple class reflection extensions:
  - DefaultValueTypesAssignedToPropertiesRule - always access native class properties
  - TypesAssignedToPropertiesRule - respect local scope when getting the property
  - ClassReflection - better scope-aware caching of properties
  - ClassReflection - getting a method is also scope-aware
- Define variables from var for further arguments in method call
- Support assigning variables in array keys
- Find variable assigns in left part of `instanceof`
- Condition in `switch` statement was not processed and checked
- Exclude analysis of traits in files excluded from analysis
- Exclude analysis of traits outside of analysed paths
- Method parameter with type `string` accepts object with `__toString()` method (#94)
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/5227352/assets,https://api.github.com/repos/phpstan/phpstan/releases/5227352,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.6.1,https://github.com/phpstan/phpstan/releases/tag/0.6.1,https://api.github.com/repos/phpstan/phpstan/zipball/0.6.1,0.6.1,False,False
5099081,2017-01-15T20:09:29Z,2017-01-15T20:29:17Z,0.6,"**[PHPStan is on Patreon!](https://www.patreon.com/phpstan)** You can show your support by backing PHPStan on Patreon. Choose your reward from different tiers and be a part of PHPStan's sustainable future development. I will deeply appreciate it. Thanks!

Major new features:
- Support for `{@inheritDoc}` above methods and properties
- Check correct `$this` usage (level 0) - using `$this` outside a class and in static context

Enhancements:
- Union iterable type (like `Foo[]|Collection`) is created on all rule levels. This helps for specifying iterated value in foreach.
- Support for `isset()` and `empty()` on static properties access through `static::`
- Support for properties `isset()` and `empty()` in ternary operator
- Checking if there's a `parent` typehint without parent class
- `Foo::class` is of type string, not mixed
- Support for standalone `null` in phpDocs
- Specifying types returned from `array_fill` and `array_fill_keys`
- Support for `$foo instanceof static`
- Types of variables defined before for/foreach/while loop scope are now combined with types assigned to those variables inside the loop. This prevents the need for annotating such variables with `/** @var */` when defining them.
- Support negated instanceof in boolean condition (#81)

BC breaks for extension developers:
- Added `MethodReflection::getPrototype()` (because of #66)

Bugfixes:
- Fixed calling sibling method with prototype in common parent class (#66)
- Fixed checking protected and private class members from an anonymous class
- Fixed referencing `parent` in typehints
- Fixes related to format parsing in `printf` and similar functions (#75, #85)
- Fixed excluding for relative paths (#73)
- Instance method can be called statically from an instance method when in the same class or a child (a9649ed0af2f30ea0ecbcf3a216be931c513ab3f)
- Fixed is_null causing the expression to be null in other part of a binary operation in if and while loop condition (#81)
- Create `$http_response_header` in local scope after `fopen()` or `file_get_contents()` call
- Universal object crates extension - do not crash on nonexistent class, skip it
- Properties missing in native PHP Reflection (like those on DateInterval or DOMDocument) are now recognized in child classes (#80)
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/5099081/assets,https://api.github.com/repos/phpstan/phpstan/releases/5099081,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.6,https://github.com/phpstan/phpstan/releases/tag/0.6,https://api.github.com/repos/phpstan/phpstan/zipball/0.6,0.6,False,False
5099068,2017-01-08T16:18:06Z,2017-01-08T16:20:39Z,0.5.2,"Enhancements
- Dynamic return type extensions for static method calls (#71)
- Parse error reports a line
- Do not report unmatched ignored error messages when analyzing individual files
- Combining integer with float results in float instead of mixed (#60)

Bugfixes:
- Support regex-like character classes for sscanf (#64)
- Fixes for compatibility with Windows (#63)
- Fixed support for trait method aliases (#69)
- Fixed PDO::query() parameters
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/5099068/assets,https://api.github.com/repos/phpstan/phpstan/releases/5099068,0.5.x,https://api.github.com/repos/phpstan/phpstan/tarball/0.5.2,https://github.com/phpstan/phpstan/releases/tag/0.5.2,https://api.github.com/repos/phpstan/phpstan/zipball/0.5.2,0.5.2,False,False
5051402,2017-01-02T19:35:26Z,2017-01-02T19:39:06Z,0.5.1,"- New check: Unused variable uses in closures (level 0)
- Bugfix: Unused constructor parameters check did not see closure uses
- Bugfix: Unused constructor parameters check descended into closures
- Bugfix: Infinite traits recursion with class and trait in the same file (#61)
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/5051402/assets,https://api.github.com/repos/phpstan/phpstan/releases/5051402,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.5.1,https://github.com/phpstan/phpstan/releases/tag/0.5.1,https://api.github.com/repos/phpstan/phpstan/zipball/0.5.1,0.5.1,False,False
5046787,2017-01-01T20:53:06Z,2017-01-01T23:06:28Z,0.5,"**This is the biggest release of PHPStan yet!** I and other contributors have worked hard over the holiday season to bring you awesome new features and other enhancements.

**[PHPStan is now on Patreon!](https://www.patreon.com/phpstan)** You can show your support by backing PHPStan on Patreon. Choose your reward from different tiers and be a part of PHPStan's sustainable future development. I will deeply appreciate it. Thanks!

**Major new features in 0.5**
- Completely reworked traits support. Previously, each trait was analysed separately and users complained about a lot of ""method undefined"" errors when calling `$this->x()`. In 0.5, each trait is analysed in context of class that uses it, so it's analysed multiple times for each using class. (#19)
- Check for unused constructor parameters (level 0). If it finds one, it can either mean that it's supposed to be unused and you can safely delete it, or that you forgot to use it, e. g. assign it to a property.
- PHPStan now reads phpDocs from functions, enriching data about parameter types and return types.
- Check return types of functions (level 3), in a similar fashion to already checked return types from methods and closures.
- Support for `@property` and `@property-read` annotations on classes.
- Added experimental level 5 with two new features:
  - Union types support. On level 0-4, any type connected with a `|` (like `Foo|Bar` with the exception of `null`) is mixed and no checks are performed on them. On level 5, `Foo|Bar` is a full-fledged type checked when returning from a function or assigned to a property or an array. Additionally, if one of the types is an iterable (`Foo[]|Bar`), it's specifying the type of the value when entering `foreach`.
  - Checking arguments passed to functions and methods. This was the missing piece of a puzzle from previous versions and it brings PHPStan to a whole new level. You should have much less TypeErrors in your application thanks to it. It also works with union types mentioned above. This check even found [some errors in PHPStan itself](https://github.com/phpstan/phpstan/commit/ae6d4a4e916c649fc3a61ec580ebce3d28a65e0c)!
  - Level 5 is marked as experimental because it's a complex area and there can be some rough edges. I'd appreciate if you tried it out in your app [and reported issues](https://github.com/phpstan/phpstan/issues/new) it finds you don't consider errors in your code.
- `true` or `false` (as opposed to `bool`) are also valid types that can be documented in phpDoc
- Check that function or method return result of type `void` is not further used (for methods called on `$this` on level 0 and for others on level 2)
- Check whether `clone` is called on an object (level 3)
- Support for `empty()` - it's like `!isset()` - variables in if `(!empty(...))` are not reported as undefined, similarly with properties
- Support for `@return $this` - similar resolving type logic to `@return static`.
- Added `--no-progress` option to hide progress bar during analysis (#45)

**Enhancements**
- PHPStan can be installed alongside PHP-Parser 2.x so that folks using Laravel can also analyse their code :) However, using PHP-Parser 3.x if you're on PHP 7.1 is strongly recommended and PHPStan will output a warning if that's not the case.
- Removed `tracy/tracy` as a dependency. PHPStan is now more lighweight.
- Callables accept strings (references to functions) and arrays with two strings (static methods).
- Reporting accessing a property on an unknown class
- Reporting calling a method on an unknown class
- Better support for aliased classes
- Helpful message if PHPStan crashes on low memory limit
- Methods with `func_num_args()` and/or `func_get_arg()` are also considered variadic
- Added `%currentWorkingDirectory%` config parameter
- Variables in unset() are not reported as undefined
- Getting type from the ternary operator, including the Elvis `?:` variant 
- Getting type from coalesce `??` operator
- Correctly resolving `static` type logic in more complex types like `static[]`
- Getting type from `clone` keyword
- Specifying expression type with `is_string`
- Improved `isset()` support for specifying properties existence
- Specifying expression type in switch using `switch (get_class($foo)) case Foo::class:`

**BC breaks for extension developers**
- Added `ParameterReflection::isVariadic()`

**Bugfixes**
- Arguments passed by reference can also define a new variable in a static method call
- Closures recognize variadic arguments
- Fixed ""undefined variable"" errors in a lot of weird code situations
- Fixed assigning `$$variable` (PHPStan used to crash on internal error here)
- Fixed error with variadic function detection
- Protected methods from a child class can be called from the parent class.
- Some types' description were missing `|null` in case of nullables.
- Fixed `strtok()` call check
- Fixes around defined variables and `finally` block
- Fixed mixing variable types in some switch cases
- float can be combined with integer resulting in float instead of mixed
- Class reflection extension for deficiencies reported in native PHP reflection - currently supports ZipArchive properties that are missing in reflection ([PHP bug #73803](https://bugs.php.net/bug.php?id=73803))
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/5046787/assets,https://api.github.com/repos/phpstan/phpstan/releases/5046787,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.5,https://github.com/phpstan/phpstan/releases/tag/0.5,https://api.github.com/repos/phpstan/phpstan/zipball/0.5,0.5,False,False
4898972,2016-12-12T20:31:52Z,2016-12-12T20:41:15Z,0.4.2,"Enhancements:
- PrintfParametersRule also checks calls to sscanf and fscanf
- Better message for misconfigured autoloader when an analyzed function is not found
- CallableType also accepts strings (references to functions) and arrays with two strings (static methods)

Bugfixes:
- Assign new variables from variadic parameters passed by reference (#26)
- Assigning new variables in various weird situations (#27)
- Do not print the note about default rule level being used when a custom ruleset is present
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/4898972/assets,https://api.github.com/repos/phpstan/phpstan/releases/4898972,0.4.x,https://api.github.com/repos/phpstan/phpstan/tarball/0.4.2,https://github.com/phpstan/phpstan/releases/tag/0.4.2,https://api.github.com/repos/phpstan/phpstan/zipball/0.4.2,0.4.2,False,False
4843360,2016-12-06T11:43:01Z,2016-12-06T12:00:01Z,0.4.1,"Enhancements:
- When there are no errors in an analysis with the default rule level, print a note about the default level being used and the option to perform more thorough checks with a higher rule level. (But the user can safely ignore this message and continue using the default level, he just should be aware that he's not using PHPStan to its full potential.)
- Print a more friendly message when a class is not found due to a misconfigured autoloading.

Bugfixes:
- iterable accepts any object that implements the `\Traversable` interface
- Fixed resolving and checking nullable return types in anonymous functions
- Fixed short array destructuring syntax in foreach
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/4843360/assets,https://api.github.com/repos/phpstan/phpstan/releases/4843360,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.4.1,https://github.com/phpstan/phpstan/releases/tag/0.4.1,https://api.github.com/repos/phpstan/phpstan/zipball/0.4.1,0.4.1,False,False
4828238,2016-12-04T21:14:58Z,2016-12-04T21:36:16Z,0.4,"**Full PHP 7.1 support!**
- Support for iterable type
- Support for the void return typehint
- Support for nullable parameter and return typehints
- Support for short array destructuring syntax (shorthand for list())
- Support for class constant visibiility

Bug fixes:
- Constants can be accessed using parent::FOO
- Protected static methods can be called from the parent class
- Correct handling of nested list(...)
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/4828238/assets,https://api.github.com/repos/phpstan/phpstan/releases/4828238,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.4,https://github.com/phpstan/phpstan/releases/tag/0.4,https://api.github.com/repos/phpstan/phpstan/zipball/0.4,0.4,False,False
4823710,2016-12-03T11:52:09Z,2016-12-03T11:54:20Z,0.3.1,"- Allow default value null even in not-nullable properties because it's equivalent to having no default value at all (fixes #17)
- Casting a division to float is not always useless (fixes #16)
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/4823710/assets,https://api.github.com/repos/phpstan/phpstan/releases/4823710,0.3.x,https://api.github.com/repos/phpstan/phpstan/tarball/0.3.1,https://github.com/phpstan/phpstan/releases/tag/0.3.1,https://api.github.com/repos/phpstan/phpstan/zipball/0.3.1,0.3.1,False,False
4767611,2016-11-27T19:17:00Z,2016-11-27T19:17:33Z,0.3,"Major new features:
- **Rule levels**. If you want to use PHPStan but your codebase isn't up to speed with strong typing and PHPStan's strict checks, you can choose from currently 5 levels (0 is the loosest and 4 is the strictest) by passing `--level` to `analyse` command. Default level is 0.
- **Custom rulesets**. This builds on the idea of rule levels by enabling you to create your own rulesets without limiting yourself to predefined levels. Create your own ruleset by selecting which rules you want to check by copying the service definitions from the built-in config level files in `conf` directory to your PHPStan project config file. Don't forget to set the parameter `customRulesetUsed` in `parameters` section of your project config file.
- Finding useless casts like `(string) 'foo'`.
- Checking the types of operands of strict comparison operators - e. g. `'foo' === 5` will always evaluate to false.

BC breaks:
- When using a custom project config file, you have to pass the `--level` option to `analyse` command (default value does not apply here - I need some way to identify whether a custom ruleset is used or not).
- For strictest checks, you now have to pass `--level 4` (currently highest level) to `analyse` command.

Enhancements:
- Removed dependency on gettext
- Support for Closure::call()
- Specifying return types of several array functions which depend on argument types
- CallableType accepts obects of type Closure
- CallableType accepts an array that is possible a callable
- Specifying types of expressions using is_\* functions
- Specifying types using expressions in assert()
- Division and other binary operations with floats result in mixed if either operand is mixed

Bugfixes:
- Futher reinforce resolving type names from phpDocs
- Closure return type is nullable when the typehint is not present
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/4767611/assets,https://api.github.com/repos/phpstan/phpstan/releases/4767611,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.3,https://github.com/phpstan/phpstan/releases/tag/0.3,https://api.github.com/repos/phpstan/phpstan/zipball/0.3,0.3,False,False
4734310,2016-11-22T20:30:47Z,2016-11-22T20:32:00Z,0.2.2,"- Fixed name resolving when skipping some syntax-unsuitable names like New
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/4734310/assets,https://api.github.com/repos/phpstan/phpstan/releases/4734310,0.2.x,https://api.github.com/repos/phpstan/phpstan/tarball/0.2.2,https://github.com/phpstan/phpstan/releases/tag/0.2.2,https://api.github.com/repos/phpstan/phpstan/zipball/0.2.2,0.2.2,False,False
4726370,2016-11-22T07:28:45Z,2016-11-22T07:30:43Z,0.2.1,"- Fixed checking implode() call with just one parameter $pieces
- Fixed a crashing issue when a different version of a class from the autoloaded one is analyzed
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/4726370/assets,https://api.github.com/repos/phpstan/phpstan/releases/4726370,0.2.x,https://api.github.com/repos/phpstan/phpstan/tarball/0.2.1,https://github.com/phpstan/phpstan/releases/tag/0.2.1,https://api.github.com/repos/phpstan/phpstan/zipball/0.2.1,0.2.1,False,False
4709473,2016-11-20T15:15:46Z,2016-11-20T15:40:06Z,0.2,"Major new features:
- **Check types of values assigned to properties**
- **Checking return types from class methods and anonymous functions**
- **Check types of values appended to arrays**
- **Check property access and method calls on non-objects**
- Support `/** @var $foo \Type */`, `/** @var \Type $foo */` and `/* @var ... */` preceding a variable assign
- Support for bootstrap file (0f16708a00567807be2d2fadfcc92bee8bacb0eb)
- Rules are now registered via a tag so users can register their own rules (#13 - thanks @pepakriz!)
- ArrayType knows its item type; used in foreach and dimfetches
- Support for getting types from static calls and fetching static properties
- Support for void type
- Improved \Closure::bind support - it correctly checks code inside the closure

BC breaks:
- Config option polluteScopeWithForLoopInitialAssignments renamed to polluteScopeWithLoopInitialAssignments and also applies to while-loop
- Method parameters with typehints in both phpDocs and native PHP can now resolve to a different type (973cc8f31e4e21ced4d6afdb35af409a96455e4b, 93e868d721d371dbdc412b4e54f2c3de2b441737, f64959622088fbd69b977021aca0326f65d345ec)

BC breaks for authors of extensions:
- Introducing ParameterReflection::isPassedByReference() (424eb9de66554c7bfbc64919841aaca86052649e)
- Removed Scope::isInClosureBind(), type of $this is correctly resolved even inside the closure; access to private properties is also not reported when the scope is set to the correct class

Enhancements:
- Alias `analyse` command to `analyze` (#8 - thanks @Mikulas)
- All parameters passed by reference can create a new variable in outer scope, not just a few listed ones (05498a5add1f3f4cd071da5f11f5bb311d032d55)
- Variables assigned in elseifs are available in subsequent elseifs and in else
- Concatenated strings are always StringType
- Handle negated instanceofs in more complex conditions
- stdClass and SimpleXMLElement are universal object crates by default
- Support for instanceof in cases of switch(true)
- Checking array type of properties and method typehints
- Performance optimization: ClassReflection - stop on first accessible property from current scope (2e64fbb5170856938b864173cce02a774c5fed5e)
- Performance optimization: FileTypeMapper - additional in-memory cache to prevent frequent disk access (433804ffbca8d1a48391af761f845130e7db56c8)
- Type of spaceship `<=>` operator is detected as an integer

Bugfixes:
- Support for assigning variable with =&
- Typehints are case-insensitive (so that NULL means the same thing as null)
- Reinforce resolving type names from phpDocs so that internal errors do not occur
- Fixed checking access to static properties with dynamic name
- Do not throw an exception when unsetting undefined variable
- Do not show progress bar in case of early errors
- Fixed name-resolving bug when an annotation contains ""new"" keyword
- Universal object crates - real properties are preferred
- Detect variadic parameters correctly as arrays
- Fixing PHP bug [#71416](https://bugs.php.net/bug.php?id=71416)
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/4709473/assets,https://api.github.com/repos/phpstan/phpstan/releases/4709473,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.2,https://github.com/phpstan/phpstan/releases/tag/0.2,https://api.github.com/repos/phpstan/phpstan/zipball/0.2,0.2,False,False
3676783,2016-07-17T20:04:41Z,2016-07-17T20:10:14Z,Initial release,"Hello world!
",https://api.github.com/users/ondrejmirtes,104888,ondrejmirtes,https://api.github.com/repos/phpstan/phpstan/releases/3676783/assets,https://api.github.com/repos/phpstan/phpstan/releases/3676783,master,https://api.github.com/repos/phpstan/phpstan/tarball/0.1,https://github.com/phpstan/phpstan/releases/tag/0.1,https://api.github.com/repos/phpstan/phpstan/zipball/0.1,0.1,False,False
