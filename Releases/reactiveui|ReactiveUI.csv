id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
6474711,2017-05-23T11:23:57Z,2017-05-23T11:44:58Z,7.4.0,"As part of this release we had [8 commits](https://github.com/reactiveui/reactiveui/compare/7.3.0...7.4.0) which resulted in [3 issues](https://github.com/reactiveui/ReactiveUI/issues?milestone=9&state=closed) being closed.


__All Platforms__

- [__#1336__](https://github.com/reactiveui/ReactiveUI/pull/1336) fix: ViewModelViewHost memory leak
- [__#1298__](https://github.com/reactiveui/ReactiveUI/issues/1298) fix: ViewLocator can now throw null reference exceptions

__Windows Phone, Store and Universal__

- [__#1299__](https://github.com/reactiveui/ReactiveUI/issues/1299) fix: ViewLocator can't resolve views specified by UWP RoutedViewHost

### Where to get it
You can download this release from [nuget.org](https://www.nuget.org/packages/reactiveui/7.4.0)",https://api.github.com/users/ghuntley,127353,ghuntley,https://api.github.com/repos/reactiveui/ReactiveUI/releases/6474711/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/6474711,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/7.4.0,https://github.com/reactiveui/ReactiveUI/releases/tag/7.4.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/7.4.0,7.4.0,False,False
6276092,2017-05-04T09:06:15Z,2017-05-04T09:17:32Z,7.3.0,"As part of this release we had [17 commits](https://github.com/reactiveui/reactiveui/compare/7.2.0...7.3.0) which resulted in [17 issues](https://github.com/reactiveui/ReactiveUI/issues?milestone=7&state=closed) being closed.


__All Platforms__

- [__#1325__](https://github.com/reactiveui/ReactiveUI/pull/1325) fix: schedule output of ReactiveCommand.Execute
- [__#1317__](https://github.com/reactiveui/ReactiveUI/pull/1317) refactor: removed unused extension method and make class internal
- [__#1306__](https://github.com/reactiveui/ReactiveUI/pull/1306) refactor: use xunit IsType in unit tests

__Xamarin Android__

- [__#1302__](https://github.com/reactiveui/ReactiveUI/pull/1302) feature: improved exception message when there are multiple resource IDs with the same name 

__Xamarin Mac__

- [__#1259__](https://github.com/reactiveui/ReactiveUI/issues/1259) bug: the assembly for Xamarin.Mac20 in the reactiveui-events NuGet package was not included

__Housekeeping__

- [__#1331__](https://github.com/reactiveui/ReactiveUI/pull/1331) housekeeping: use hello@reactiveui.net for all communication
- [__#1313__](https://github.com/reactiveui/ReactiveUI/pull/1313) housekeeping: add table of contents with relative links
- [__#1326__](https://github.com/reactiveui/ReactiveUI/pull/1326) housekeeping: add backers and sponsors from Open Collective

__Documentation__

- [__#1323__](https://github.com/reactiveui/ReactiveUI/pull/1323) chore: tidy up ReactiveCollectionMixin xml comments
- [__#1322__](https://github.com/reactiveui/ReactiveUI/pull/1322) chore: tidy up xml comments in PropertyBinding
- [__#1321__](https://github.com/reactiveui/ReactiveUI/pull/1321) chore: tidy up xml comments in OrderedComparer
- [__#1320__](https://github.com/reactiveui/ReactiveUI/pull/1320) chore: improved ObservedChangedMixin xml documentation
- [__#1319__](https://github.com/reactiveui/ReactiveUI/pull/1319) chore: tidy up XMLDOC in ObservableAsPropertyHelper
- [__#1310__](https://github.com/reactiveui/ReactiveUI/pull/1310) chore: tidy xml documentation for AutoPersistHelpers
- [__#1308__](https://github.com/reactiveui/ReactiveUI/pull/1308) chore: tidy xml comments in RegisterableInterfaces
- [__#1307__](https://github.com/reactiveui/ReactiveUI/pull/1307) chore: tidy up xml comment
- [__#1309__](https://github.com/reactiveui/ReactiveUI/pull/1309) chore: fix xml doc referencing type with generic arguments

### Where to get it
You can download this release from [nuget.org](https://www.nuget.org/packages/reactiveui/7.3.0)",https://api.github.com/users/ghuntley,127353,ghuntley,https://api.github.com/repos/reactiveui/ReactiveUI/releases/6276092/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/6276092,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/7.3.0,https://github.com/reactiveui/ReactiveUI/releases/tag/7.3.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/7.3.0,7.3.0,False,False
5573710,2017-02-26T03:12:38Z,2017-02-26T03:29:39Z,7.2.0,"As part of this release we had [34 commits](https://github.com/reactiveui/reactiveui/compare/7.1.0...7.2.0) which resulted in [27 issues](https://github.com/reactiveui/ReactiveUI/issues?milestone=6&state=closed) being closed.

**All Platforms**
- [**#1282**](https://github.com/reactiveui/ReactiveUI/pull/1282) feat: a more flexible default view locator
- [**#1261**](https://github.com/reactiveui/ReactiveUI/pull/1261) feat: allow interaction handlers of any observable type
- [**#1255**](https://github.com/reactiveui/ReactiveUI/pull/1255) feat: add scheduling support to interactions
- [**#1283**](https://github.com/reactiveui/ReactiveUI/pull/1283) fix: add `UseInvariantCultureAttribute` and apply to relevant tests
- [**#1274**](https://github.com/reactiveui/ReactiveUI/pull/1274) fix: ensure synchronous command execution is lazy. Note that this is a potentially breaking change if your existing usage of synchronous commands is incorrect. See the issue for details.
- [**#1247**](https://github.com/reactiveui/ReactiveUI/issues/1247) fix: catch exceptions from `InvokeCommand`
- [**#1244**](https://github.com/reactiveui/ReactiveUI/issues/1244) fix: complete command execution only when pipeline completes
- [**#1235**](https://github.com/reactiveui/ReactiveUI/issues/1235) fix: `InvokeCommand` targets `ReactiveCommandBase`, not `ReactiveCommand`
- [**#1289**](https://github.com/reactiveui/ReactiveUI/pull/1289) perf: use shared, static observables to reduce allocations
- [**#1236**](https://github.com/reactiveui/ReactiveUI/issues/1236) perf: remove superfluous `AsObservable` calls in `ReactiveCommand`
- [**#1269**](https://github.com/reactiveui/ReactiveUI/pull/1269) test: add activation tests
- [**#1268**](https://github.com/reactiveui/ReactiveUI/pull/1268) style: tidy up and expand comments in activation code

**Xamarin Android**
- [**#1250**](https://github.com/reactiveui/ReactiveUI/pull/1250) feat: more flexible `WireUpControls` implementation 

**Xamarin Forms**
- [**#1270**](https://github.com/reactiveui/ReactiveUI/pull/1270) feat: synchronize `ViewModel` and `BindingContext` properties
- [**#1281**](https://github.com/reactiveui/ReactiveUI/pull/1281) fix: assign VM from correct thread in `RoutedViewHost`

**Housekeeping**
- [**#1180**](https://github.com/reactiveui/ReactiveUI/pull/1180) feat: enable unit test coverage/coveralls
- [**#1267**](https://github.com/reactiveui/ReactiveUI/pull/1267) style: tidy up comments for binding code
- [**#1263**](https://github.com/reactiveui/ReactiveUI/pull/1263) chore: failing to set the appveyor version should not be a fatal build error
- [**#1257**](https://github.com/reactiveui/ReactiveUI/pull/1257) chore: resolved gitlink wasn't working because pdbs/xml were not included because of a packaging defect
- [**#1252**](https://github.com/reactiveui/ReactiveUI/pull/1252) chore: rename _MobileLifecycle.cs_ to _SuspensionHost.cs_
- [**#1238**](https://github.com/reactiveui/ReactiveUI/pull/1238) chore: removed next-version definition

**Documentation**
- [**#1243**](https://github.com/reactiveui/ReactiveUI/pull/1243) docs: delete docs folder
- [**#1198**](https://github.com/reactiveui/ReactiveUI/issues/1198) docs: document pull-request merging guidelines/process
- [**#1197**](https://github.com/reactiveui/ReactiveUI/issues/1197) docs: document release process for contributors

### Where to get it

You can download this release from [nuget.org](https://www.nuget.org/packages/reactiveui/7.2.0)
",https://api.github.com/users/ghuntley,127353,ghuntley,https://api.github.com/repos/reactiveui/ReactiveUI/releases/5573710/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/5573710,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/7.2.0,https://github.com/reactiveui/ReactiveUI/releases/tag/7.2.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/7.2.0,7.2.0,False,False
5138222,2017-01-12T08:41:13Z,2017-01-12T09:44:06Z,7.1.0,"As part of this release we had [8 commits](https://github.com/reactiveui/reactiveui/compare/7.0.0...7.1.0) which resulted in [4 issues](https://github.com/reactiveui/ReactiveUI/issues?milestone=5&state=closed) being closed.

**All Platforms**
- [**#1225**](https://github.com/reactiveui/ReactiveUI/pull/1225)  fix: reactiveui NuGet packages should be pinned and only work with packages from the same release
- [**#1218**](https://github.com/reactiveui/ReactiveUI/pull/1218) fix: subscription leakage in `ReactiveCommand`

**Xamarin Android**
- [**#1217**](https://github.com/reactiveui/ReactiveUI/pull/1217) feature: allow `WireUpControls` to find `View` members

**Xamarin iOS**
- [**#1216**](https://github.com/reactiveui/ReactiveUI/pull/1216) feature: added generic reactive controllers and views for iOS and Mac

**Xamarin Mac**
- [**#1216**](https://github.com/reactiveui/ReactiveUI/pull/1216) feature: added generic reactive controllers and views for iOS and Mac

### Where to get it

You can download this release from [nuget.org](https://www.nuget.org/packages/reactiveui/7.1.0)
",https://api.github.com/users/ghuntley,127353,ghuntley,https://api.github.com/repos/reactiveui/ReactiveUI/releases/5138222/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/5138222,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/7.1.0,https://github.com/reactiveui/ReactiveUI/releases/tag/7.1.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/7.1.0,7.1.0,False,False
4641303,2016-11-12T00:38:52Z,2016-11-12T04:52:57Z,7.0.0,"_Oh, hai!_ 

![](https://media.giphy.com/media/nrYqOTU8hoAeY/giphy.gif)

Wow! It's been a while, but we have a juicy new release for you. We had to take some time to heal internally, to train and mentor the future generations of maintainers which are going to carry us forward.  Additionally the .NET ecosystem changed underneath us, and we didn't have continuous integration setup. Let this be a lesson to anyone considering operating an open-source project that targets nine platforms. Have a roadmap and succession plan in place and never allow long-running branches, ever. Implement continuous integration and mature your release processes to the point where cutting a new release is as simple as pressing a button.

**So what is ReactiveUI?**

ReactiveUI is inspired by functional reactive programming and is the father of the ReactiveCocoa (Cocoa/Swift) framework. Internally we debate whether we are or are not a framework, as at its core the project is essentially a bunch of extension methods for the Reactive Extensions.

ReactiveUI was started seven years ago and is now old enough to attend grade school but unlike a teenager is extremely stable. ReactiveUI has matured over the years into a solid and fine choice for building your next application. Additionally, because the implementation is unopinionated migration from another framework to ReactiveUI is incredibly easy.. You can slide it in on a single ViewModel and then migrate as you become more comfortable. Avoid those costly rewrites.

When reading the code, you'll find that ReactiveUI is rather unopinionated in the implementation, but we have always held some beliefs which have been the basis and foundation of the project.

We believe that code is communication between people, that also happens to run on a computer. If you optimise for humans, then over a long time your project will end up better. Software should be understandable by other people; that is super important. 

We believe that only the power of the Reactive Extensions allows you to express the idea around a feature in one readable place. 

![Even Miguel de Icaza agrees](https://i.imgur.com/mCYZ2M4.png)

Think about your typical user interface? It's a mutable bag of sadness with code all over the place. Instead of telling a computer how to do its job, why not define what the computers job is and get out of its way? If that sounds odd, let us re-introduce you to Microsoft Excel. 

Instead of doing the typical ViewModel isLoading = true/false mutable dance by toggling it on and off in different branches of your code. Why not express the condition in a single place using a Microsoft Excel expression - =SUM(A1: B2)?

**Still not convinced?**
- [Why You Should Be Building Better Mobile Apps with Reactive Programming](https://www.youtube.com/watch?v=DYEbUF4xs1Q) – Michael Stonis (Xamarin Univeristy Trainer/Eightbot)
- [Awaiting for Rx: A Play in Four Acts](https://www.youtube.com/watch?v=5DZ8nC0ENdg) - Paul Betts (Slack/GitHub) 
- [FRP In Practice: Taking a look at ReactiveUI/ReactiveCocoa](https://www.youtube.com/watch?v=1XNATGjqM6U) by Paul Betts (Slack/GitHub)

Maybe you need to watch this insanely smart, and eccentric guy in a tie-dye t-shirt do maths on a whiteboard:

[![](https://i.imgur.com/P1Bt3iw.png)](https://channel9.msdn.com/Shows/Going+Deep/E2E-Erik-Meijer-and-Wes-Dyer-Reactive-Framework-Rx-Under-the-Hood-1-of-2)

Async/await is the zombie plague. Liberate your codebase today.

ReactiveUI is used in production at GitHub, Slack, Microsoft and is supported by consultants from different companies from all around the world. It's used at our clients, we can't name names specifically, but we encourage our community to [showcase where and how they have used ReactiveUI in their applications](https://github.com/reactiveui/ReactiveUI/issues/979), some members have even gone [as far as open-sourcing their app and sharing their entire codebase](https://github.com/github/VisualStudio/tree/master/src). You are of course under no obligation to share these insights (or code) with us but it is greatly appreciated by the project maintainers, and you'll usually get a retweet out of it.

**Where are the examples?**

We are working on it; this release was for us. Next release is for you.  For now:
- Read https://docs.reactiveui.net/en/fundamentals/history.html
- [Watch the guest lecture over at Xamarin Univeristy](https://university.xamarin.com/guestlectures/introduction-to-reactiveui-for-xamarin)
- [Watch this god damn amazing video series by Kent Boogaart (one of the core maintainers)](https://github.com/kentcb/WorkoutWotch)
- [Play with the Xamarin University lecture source code. (Xamarin Forms)](https://github.com/TheEightBot/Reactive-Examples)
- [Play with the GitHub for Windows Visual Studio source code. (WPF)](https://github.com/github/visualstudio)

**Rx is hard**

No, it's not. Learning Rx is one of the best things you can do to improve yourself as a software engineer. Unit testing was hard, so was dependency injection at first. The principals you learn during your journey will forever change you and best of all the knowledge is implementation and language agnostic. We have designed ReactiveUI so you can slowly transition from an async/await codebase at a pace that feels comfortable to you.

# Highlights

## ReactiveCommand is Better

`ReactiveCommand` is completely rewritten again (sorry).
- interfaces are gone. Any use of `IReactiveCommand` should be replaced with `ReactiveCommand`, possibly with type information (see below).
- static creation methods have changed:
  - execution logic is _always_ required when calling `CreateXxx` methods, including synchronous commands (i.e. those created with `Create`). So rather than calling `Create` and then subscribing, you call `Create` and pass in your execution logic right then and there.
  - for consistency, the execution logic is always provided as the first parameter. Other parameters (`canExecute`, `scheduler`) are optional.
  - `CreateAsyncObservable` is now called `CreateFromObservable`.
  - `CreateAsyncTask` is now called `CreateFromTask`.
- parameter types are formalized by `TParam` in `ReactiveCommand<TParam, TResult>`.
  - if your command takes a parameter, you no longer take an `object` and cast it. Instead, you explicitly specify the parameter type when creating the command (of course, you can still choose `object` as your `TParam` if that makes sense, perhaps as an intermediary migration step).
- `ICommand` is now implemented explicitly. As a result:
  - the `Execute` exposed by `ReactiveCommand` is reactive (it returns `IObservable<TResult>`). It is therefore lazy and won't do anything unless something subscribes to it.
  - `CanExecuteObservable` is now called `CanExecute`.
- observables such as `CanExecute` and `IsExecuting` are now behavioral. That is, they will always provide the current value to new subscribers.
- `RoutingState` has been updated to use the new implementation. Consequently, any use of its commands will be affected per the above.
- the `ToCommand` extension method has been removed. This was a simple convenience to take an `IObservable<bool>` and use it as the `canExecute` pipeline for a new command. If you're using `ToCommand`, you can just replace it with a call to one of the creation methods on `ReactiveCommand`.

**Old:**

``` cs
var canExecute = ...;
var someCommand = ReactiveCommand.Create(canExecute);
someCommand.Subscribe(x => /* execution logic */);

var someAsyncCommand1 = ReactiveCommand.CreateAsyncObservable(canExecute, someObservableMethod);
var someAsyncCommand2 = ReactiveCommand.CreateAsyncTask(canExecute, someTaskMethod);

someCommand.Execute();
```

**New:**

``` cs
var canExecute = ...;
var someCommand = ReactiveCommand.Create(() => /* execution logic */);

var someAsyncCommand1 = ReactiveCommand.CreateFromObservable(someObservableMethod, canExecute);
var someAsyncCommand2 = ReactiveCommand.CreateFromTask(someTaskMethod, canExecute);

someCommand.Execute().Subscribe();
```

For more details, please see the [extensive documentation](https://docs.reactiveui.net/en/user-guide/commands/index.html) on this topic.

> **Note** To enable you to ease into the migration, all previous types are available under the `ReactiveUI.Legacy` namespace. Note, however, that there is no legacy version of `RoutingState`, so any code you have that interacts with its command may require minor updates.

## Interactions are New and Exciting

`UserError` has been generalized and re-imagined. We call it interactions, and we think you'll like it. We did this in part because people were feeling icky using `UserError` for non-error scenarios. Basically, we realized that people need a general mechanism via which a view model can ask a question, and wait for the answer. It doesn't have to be an error - we're not that pessimistic! You could be asking to confirm a file deletion, or maybe how the weather is out there in the analog world.

Migrating from `UserError` to the interactions infrastructure is not really a case of one-for-one substitution. But here are some tips to get you started:
- read through [the documentation](http://docs.reactiveui.net/en/user-guide/interactions/index.html) first.
- decide whether you need shared interactions and, if so, define them in an appropriate place for your application (often just a static class).
- for any non-shared interactions, have your view model create an instance of the interaction and expose it via a property.
- typically you want the corresponding view to handle interactions by calling one of the `RegisterHandler` methods on the interaction exposed by the view model.
- the view model can call `Handle` on the interaction, passing in an input value.
- Recovery commands are no longer a built-in thing. If you need such a mechanism for your interactions, you are encouraged to write an appropriate class and use it as the input for your interaction.

> **Note** To enable you to ease into the migration, all previous types are available under the `ReactiveUI.Legacy` namespace.

## ToProperty is now eager by default

In previous ReactiveUI versions, `ToProperty` was lazy. That is, it would have no effect unless something was ""pulling"" on the target property. This was for performance reasons, as you may have properties that are expensive to resolve, but only used in specific scenarios.

Whilst this was good for performance, it was often confusing and contrary to expectations. Therefore, `ToProperty` is no longer lazy - it immediately subscribes to ensure the property's value reflects the given observable pipeline. However, the original lazy behavior can be obtained by passing in `true` to the `deferSubscription` parameter.

## Automation galore

A mountain of effort has gone into automating ReactiveUI's build and deployment infrastructure (thanks @ghuntley!). Using tools such as Cake, AppVeyor, and gitversion, we now have a very compelling automation story. This is no mean feat, especially considering the vast array of platforms on which ReactiveUI runs, and must therefore be built.

The end goal here is to get you, the community, new versions of ReactiveUI more rapidly and seamlessly.

# Details

As part of this release we had [113 issues](https://github.com/reactiveui/ReactiveUI/issues?milestone=2&state=closed) closed.

**All Platforms**
- [**#1189**](https://github.com/reactiveui/ReactiveUI/pull/1189) Add `WhenAnyObservable` overloads that combine latest via a given selector
- [**#1161**](https://github.com/reactiveui/ReactiveUI/pull/1161) Remove `BindCommand` implementation taking `Func<TParam>`
- [**#1158**](https://github.com/reactiveui/ReactiveUI/pull/1158) Throw `UnhandledErrorException` when a thrown exception goes unhandled (rather than just `Exception`)
- [**#1157**](https://github.com/reactiveui/ReactiveUI/pull/1157) Fix `InvokeCommand` to respect the command's execution window
- [**#1091**](https://github.com/reactiveui/ReactiveUI/pull/1091) Add `WhenActivated` overload that takes a `CompositeDisposable`, as well as a `DisposeWith` extension method
- [**#971**](https://github.com/reactiveui/ReactiveUI/pull/971) [**#1035**](https://github.com/reactiveui/ReactiveUI/pull/1035) [**#1054**](https://github.com/reactiveui/ReactiveUI/pull/1054) [**#1085**](https://github.com/reactiveui/ReactiveUI/pull/1085) [**#1088**](https://github.com/reactiveui/ReactiveUI/pull/1088) Overhaul reactive commands
- [**#1084**](https://github.com/reactiveui/ReactiveUI/pull/1084) Enhance `ToProperty` to work with indexers
- [**#1082**](https://github.com/reactiveui/ReactiveUI/pull/1082) Add scheduling support to `RoutingState`
- [**#1079**](https://github.com/reactiveui/ReactiveUI/pull/1079) Add `Activated` and `Deactivated` observables to `ViewModelActivator`
- [**#1061**](https://github.com/reactiveui/ReactiveUI/pull/1061) `ToProperty` is no longer lazy by default
- [**#964**](https://github.com/reactiveui/ReactiveUI/pull/964) [**#1055**](https://github.com/reactiveui/ReactiveUI/pull/1055) [**#1181**](https://github.com/reactiveui/ReactiveUI/pull/1181) Add interactions feature
- [**#1052**](https://github.com/reactiveui/ReactiveUI/pull/1052) Add `Bind` overloads that convert via `Func`s
- [**#1028**](https://github.com/reactiveui/ReactiveUI/pull/1028) Improve `CreateCollection` overloads
- [**#1021**](https://github.com/reactiveui/ReactiveUI/pull/1021) Generalize auto-persistence helpers to work against `IReactiveCollection<T>`
- [**#1018**](https://github.com/reactiveui/ReactiveUI/pull/1018) `BindTo` now throws a helpful exception when attempting to bind to `null`
- [**#1015**](https://github.com/reactiveui/ReactiveUI/pull/1015) Enhance the default view locator to resolve views when the VM is abstracted as an interface
- [**#1013**](https://github.com/reactiveui/ReactiveUI/pull/1013) Add auto-registration feature for views within a given assembly
- [**#1012**](https://github.com/reactiveui/ReactiveUI/pull/1012) Add scheduler parameter to `CreateCollection`
- [**#977**](https://github.com/reactiveui/ReactiveUI/pull/977) Add `WhenNavigatedToObservable` method, telling you whenever a given view model is on top of the navigation stack
- [**#962**](https://github.com/reactiveui/ReactiveUI/pull/962) Fix a race condition in `ObservableAsPropertyHelper`
- [**#938**](https://github.com/reactiveui/ReactiveUI/pull/938) Don't automatically create a `DataTemplate` if the `DisplayMemberPath` of an `ItemsControl` is set
- [**#936**](https://github.com/reactiveui/ReactiveUI/pull/936) Ensure `ObservableAsPropertyHelper` provides the initial value immediately
- [**#926**](https://github.com/reactiveui/ReactiveUI/pull/926) Remove potentially expensive hash calculation from `ReactiveList`
- [**#914**](https://github.com/reactiveui/ReactiveUI/pull/914) Remove `ViewContractAttribute`
- [**#913**](https://github.com/reactiveui/ReactiveUI/pull/913) Remove `fallbackValue` from binding methods
- [**#875**](https://github.com/reactiveui/ReactiveUI/pull/875) Relax generic constraints on `ToProperty` from `ReactiveObject` to `IReactiveObject`
- [**#943**](https://github.com/reactiveui/ReactiveUI/pull/943) Add `ReactiveUserControl` to relevant XAML platforms
- [**#935**](https://github.com/reactiveui/ReactiveUI/pull/935) Add `XmlnsDefinitionAttribute` for those XAML platforms that support it
- [**#879**](https://github.com/reactiveui/ReactiveUI/pull/879) Add `ViewContract` property to `ViewModelViewHost` for XAML platforms
- [**#1149**](https://github.com/reactiveui/ReactiveUI/pull/1149) Set nuspec dependency to == (exact) version as that is being built
- [**#1142**](https://github.com/reactiveui/ReactiveUI/pull/1142) Fix Splat dependency
- [**#1110**](https://github.com/reactiveui/ReactiveUI/pull/1110) Fix `WaitForScheduler` exception handling

**Events Generator**
- [**#1151**](https://github.com/reactiveui/ReactiveUI/pull/1151) reactiveui-events now targets UWP 10.0.14393.0 (aka anniversary edition)
- [**#1056**](https://github.com/reactiveui/ReactiveUI/pull/1056) eventbuilder.exe is now xplat and always uses the latest SDK's
- [**#1187**](https://github.com/reactiveui/ReactiveUI/pull/1187) Ignore CS[1591,0618,0105,0672] because that code is generated

**Windows Phone, Store and Universal**
- [**#1192**](https://github.com/reactiveui/ReactiveUI/pull/1192) Fixed ReactiveUI to install into a library targeting WPA81 (Profile111)
- [**#1174**](https://github.com/reactiveui/ReactiveUI/pull/1174) Retired Windows Phone Silverlight
- [**#1099**](https://github.com/reactiveui/ReactiveUI/pull/1099) Changed `LaunchActivatedEventArgs` to `IActivatedEventArgs`
- [**#1045**](https://github.com/reactiveui/ReactiveUI/pull/1045) Add Universal Windows Platform (UWP) support
- [**#940**](https://github.com/reactiveui/ReactiveUI/pull/940) Update platform UAP 10069 -> UWP 10240, add Events and Testing projects

**Xamarin Android**
- [**#1186**](https://github.com/reactiveui/ReactiveUI/pull/1186) Android timepicker now uses `Hour`/`Minute` instead of `CurrentHour`/`CurrentMinute`
- [**#1144**](https://github.com/reactiveui/ReactiveUI/pull/1144) Small bug fixes to `ReactiveRecyclerViewAdapter` and `ViewHolder`
- [**#1105**](https://github.com/reactiveui/ReactiveUI/pull/1105) Add `ReactiveAppCompatActivity`
- [**#1095**](https://github.com/reactiveui/ReactiveUI/pull/1095) Add `AsObservable` when `ISubject` is returned as `IObservable`
- [**#1067**](https://github.com/reactiveui/ReactiveUI/pull/1067) Add Android reactive preferences
- [**#1059**](https://github.com/reactiveui/ReactiveUI/pull/1059) Add Rx implementation of the Android shared preferences changed
- [**#1058**](https://github.com/reactiveui/ReactiveUI/pull/1058) Add Rx implementation of the Android USB permission request
- [**#1057**](https://github.com/reactiveui/ReactiveUI/pull/1057) Add Rx implementation of the Android service bind
- [**#1044**](https://github.com/reactiveui/ReactiveUI/pull/1044) Resolve an issue building android support project
- [**#985**](https://github.com/reactiveui/ReactiveUI/pull/985) Add `serializer.Serialize(st, state);` into `SaveState`
- [**#982**](https://github.com/reactiveui/ReactiveUI/pull/982) Add a basic reactive adapter for the Android `RecyclerView`
- [**#939**](https://github.com/reactiveui/ReactiveUI/pull/939) Add a reactive version of the `Android.Support.V4.DialogFragment` class
- [**#885**](https://github.com/reactiveui/ReactiveUI/pull/885) Add a `ControlFetcherMixin` for the Android Support library

**Xamarin Forms**
- [**#1160**](https://github.com/reactiveui/ReactiveUI/pull/1160) Use non-generic `BindableProperty.Create`, since the generic overloads are deprecated
- [**#952**](https://github.com/reactiveui/ReactiveUI/pull/952) [**#1115**](https://github.com/reactiveui/ReactiveUI/pull/1115) Add support for view activation
- [**#942**](https://github.com/reactiveui/ReactiveUI/pull/942) [**#1074**](https://github.com/reactiveui/ReactiveUI/pull/1074) [**#1071**](https://github.com/reactiveui/ReactiveUI/pull/1071) [**#986**](https://github.com/reactiveui/ReactiveUI/pull/986) Lots of routing fixes and improvements
- [**#1032**](https://github.com/reactiveui/ReactiveUI/pull/1032) Add reactive pages
- [**#921**](https://github.com/reactiveui/ReactiveUI/pull/921) Add reactive cells
- [**#953**](https://github.com/reactiveui/ReactiveUI/pull/953) Upgrade Xamarin Forms dependency
- [**#951**](https://github.com/reactiveui/ReactiveUI/pull/951) Throw a useful exception from `ViewModelViewHost` if the view is of the wrong type
- [**#950**](https://github.com/reactiveui/ReactiveUI/pull/950) Use `ContentView` as base class for `ViewModelViewHost`
- [**#919**](https://github.com/reactiveui/ReactiveUI/pull/919) Fix `ViewModelViewHost` bug where collection is modified whilst being enumerated
- [**#861**](https://github.com/reactiveui/ReactiveUI/pull/861) Retarget ReactiveUI.Xamforms to Profile259
- [**#1153**](https://github.com/reactiveui/ReactiveUI/pull/1153) Update reactiveui-xamforms nuspec dependency from v2.1.0.6529 to v2.3.1.114
- [**#1152**](https://github.com/reactiveui/ReactiveUI/pull/1152) Upgrade reactiveui-core for Xamarin.Forms from v2.2.0.31 to v2.3.1.114
- [**#1150**](https://github.com/reactiveui/ReactiveUI/pull/1150) Upgrade reactiveui-events for Xamarin.Forms from v2.2.0.31 to v2.3.1.114
- [**#1196**](https://github.com/reactiveui/ReactiveUI/pull/1196) Resolve a crash when using `ViewModelViewHost` with Xamarin Forms

**Xamarin iOS**
- [**#1182**](https://github.com/reactiveui/ReactiveUI/pull/1182) Use `ViewWillAppear` for iOS activation (not `ViewDidAppear`)
- [**#1176**](https://github.com/reactiveui/ReactiveUI/pull/1176) Migrate reactiveui-testing from Monotouch to Xamarin.iOS
- [**#1087**](https://github.com/reactiveui/ReactiveUI/pull/1087) Make `ReactiveNavigationController` activatable
- [**#1086**](https://github.com/reactiveui/ReactiveUI/pull/1086) Fix various `RoutedViewHost` issues
- [**#927**](https://github.com/reactiveui/ReactiveUI/pull/927) Rewrite `CommonReactiveSource` to be reactive and fix numerous bugs
- [**#917**](https://github.com/reactiveui/ReactiveUI/pull/917) Add `ReactiveSplitViewController`
- [**#874**](https://github.com/reactiveui/ReactiveUI/pull/874) Make iOS `ViewModelViewHost` an actual view controller
- [**#873**](https://github.com/reactiveui/ReactiveUI/pull/873) Fix a `CommonReactiveSource` race condition by ensuring that batched changes result in `BeginUpdates` call ASAP
- [**#1177**](https://github.com/reactiveui/ReactiveUI/pull/1177) Fix code generation of events with iOS 10

**Xamarin Mac**
- [**#1185**](https://github.com/reactiveui/ReactiveUI/pull/1185) Use Xamarin.Mac framework for reactiveui/reactiveui-testing/microsoft-reactive-testing
- [**#1175**](https://github.com/reactiveui/ReactiveUI/pull/1175) Xamarin.Mac (unified) now compiles on windows
- [**#1022**](https://github.com/reactiveui/ReactiveUI/pull/1022) Add `ViewAttributes` to Xamarin.Mac projects
- [**#916**](https://github.com/reactiveui/ReactiveUI/pull/916) Fix `ViewModelViewHost` on Mac
- [**#887**](https://github.com/reactiveui/ReactiveUI/pull/887) Changed output to Xamarin.Mac20 to reflect reality and added .nuspec

**Housekeeping**
- [**#1188**](https://github.com/reactiveui/ReactiveUI/pull/1188) Upload .dll artefacts to AppVeyor on successful build
- [**#1179**](https://github.com/reactiveui/ReactiveUI/pull/1179) Run unit tests as part of continuous integration pipeline
- [**#1178**](https://github.com/reactiveui/ReactiveUI/pull/1178) Resolved an issue with continuous integration pipeline
- [**#1148**](https://github.com/reactiveui/ReactiveUI/pull/1148) Bootstrapper now downloads/installs Android API level 24
- [**#1140**](https://github.com/reactiveui/ReactiveUI/pull/1140) Add GitHub issue/PR templates
- [**#1128**](https://github.com/reactiveui/ReactiveUI/pull/1128) Enable strict mode (fail the build on any powershell error)
- [**#1092**](https://github.com/reactiveui/ReactiveUI/pull/1092) Continuous integration and pre-release builds for v7
- [**#1010**](https://github.com/reactiveui/ReactiveUI/pull/1010) Compiler warnings for events disabled to reduce CI log spam

**Documentation**
- [**#1003**](https://github.com/reactiveui/ReactiveUI/pull/1003) Initial revamp of README.md
- [**#898**](https://github.com/reactiveui/ReactiveUI/pull/898) Update compelling example in README.md for v6.x

### Where to get it

You can download this release from [nuget.org](https://www.nuget.org/packages/reactiveui/7.0.0)
",https://api.github.com/users/ghuntley,127353,ghuntley,https://api.github.com/repos/reactiveui/ReactiveUI/releases/4641303/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/4641303,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/7.0.0,https://github.com/reactiveui/ReactiveUI/releases/tag/7.0.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/7.0.0,7.0.0,False,False
4046753,2015-05-11T03:02:12Z,2016-09-04T07:15:53Z,,"This release resolves a NuGet metadata defect which was preventing the installation of ReactiveUI into Windows Phone projects (issue https://github.com/reactiveui/ReactiveUI/issues/1146). The assemblies within v6.5.2 are the same as those found in v6.5.1 and v6.5.0. 

For new projects, we recommend joining us in Slack and using the v7 nightlies which are available from MyGet as we are in the final stages of preparing for the release of v7.0.0.
",https://api.github.com/users/ghuntley,127353,ghuntley,https://api.github.com/repos/reactiveui/ReactiveUI/releases/4046753/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/4046753,develop,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.5.2,https://github.com/reactiveui/ReactiveUI/releases/tag/6.5.2,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.5.2,6.5.2,False,False
3904669,2015-05-11T03:02:12Z,2016-08-17T08:40:23Z,ReactiveUI 6.5.1,"This release resolves a NuGet metadata defect which was preventing the installation of ReactiveUI into portable class libraries that targeted `Profile259`. The assemblies within v6.5.1 are the same as those found in v6.5.0.

For new projects, we recommend joining us in Slack and using the v7 nightlies which are available from MyGet as we are in the final stages of preparing for the release of v7.0.0. 
",https://api.github.com/users/ghuntley,127353,ghuntley,https://api.github.com/repos/reactiveui/ReactiveUI/releases/3904669/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/3904669,rxui7-master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.5.1,https://github.com/reactiveui/ReactiveUI/releases/tag/6.5.1,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.5.1,6.5.1,False,False
1280666,2015-05-11T03:09:18Z,2015-05-11T03:22:29Z,ReactiveUI 6.5.0,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.4.0.1...6.5.0)

### Collection View improvements (#820)

Thanks to @kentcb, our support of UITableViewController and UICollectionViewController are **much** more reliable, and will correctly animate in items. A huge thanks for an awesome PR!

![](https://cloud.githubusercontent.com/assets/1901832/6593544/761d202e-c829-11e4-8b05-52a5a630a599.gif)

### Dependency version bumps

This version of ReactiveUI requires Xamarin.Forms 1.4.2 and the latest Xamarin.Android AppCompat library. This most likely won't be a problem, but if it is you can downgrade to 6.4.x. 

### Bug fixes
- Fix issue where WhenAnyObservable doesn't protect against null (#831, thanks @kentcb)
- Improve WeakEventHandler when working with Xamarin.Forms, prevent crash (#826, thanks @nsainaney)
- Allow null property name to be used with WhenAny (#811, thanks @asarium)
- Improve binding error logging (#840, thanks @bradtwurst)
- Add constructors to ReactiveActivity and ReactiveFragment to allow them to inherit a Java reference (#841, thanks @jonfuller)
- Fix Xamarin.Forms navigation with ViewModel-first navigation (#819, thanks @bratsche)
- Cleanup to activation on WP (#825, thanks @flagbug)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/1280666/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/1280666,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.5.0,https://github.com/reactiveui/ReactiveUI/releases/tag/6.5.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.5.0,6.5.0,False,False
1280664,2015-02-12T00:04:04Z,2015-05-11T03:11:02Z,Oops Release for ReactiveUI 6.4.0,,https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/1280664/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/1280664,develop,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.4.0.1,https://github.com/reactiveui/ReactiveUI/releases/tag/6.4.0.1,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.4.0.1,6.4.0.1,False,False
931311,2015-02-09T00:08:32Z,2015-02-09T00:14:13Z,ReactiveUI 6.4.0,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.3.1...6.4.0)

### Xamarin.Mac 64-bit Support (#797)

Thanks to @mteper, ReactiveUI now has 64-bit Xamarin.Mac support

### Other Stuff
- Update constructors for Xamarin.iOS (#791, thanks @nverinaud)
- Create a ReactiveActionBarActivity class (#794, thanks @marcosbozza)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/931311/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/931311,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.4.0,https://github.com/reactiveui/ReactiveUI/releases/tag/6.4.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.4.0,6.4.0,False,False
846355,2015-01-13T04:49:49Z,2015-01-13T04:53:46Z,ReactiveUI 6.3.1,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.3.0...6.3.1)

### Bug Fixes
- Xamarin.Forms is now compatible with 64-bit iOS (#790)
- Fix a crash in TestScheduler.WithAsync (#772, thanks @flagbug)
- Add ReactiveNavigationController (#783, thanks @BrianSakhai)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/846355/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/846355,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.3.1,https://github.com/reactiveui/ReactiveUI/releases/tag/6.3.1,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.3.1,6.3.1,False,False
821992,2015-01-03T21:32:26Z,2015-01-03T21:38:00Z,ReactiveUI 6.3.0,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.2.1...6.3.0)
- Support for Xamarin.iOS 8.6 - you **must** build based on this for Xamarin.iOS
- Add a Reactive FragmentActivity (#773, thanks @michaelstonis!)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/821992/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/821992,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.3.0,https://github.com/reactiveui/ReactiveUI/releases/tag/6.3.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.3.0,6.3.0,False,False
726438,2014-11-23T01:44:42Z,2014-11-23T01:51:38Z,ReactiveUI 6.2.1,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.2.0...6.2.1)

Bug Fixes:
- Fix crash in Reactive[Table/Collection]DataSource (#755, thanks @srimoyee-factory)
- Fix an issue where Xamarin Forms routing would crash on startup #761 
- Fix issue around using `Changed` directly (#757, thanks @robhorvath)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/726438/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/726438,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.2.1,https://github.com/reactiveui/ReactiveUI/releases/tag/6.2.1,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.2.1,6.2.1,False,False
693359,2014-11-10T21:51:41Z,2014-11-10T22:01:54Z,ReactiveUI 6.2.0,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.1.0...6.2.0)

### Xamarin.iOS 64-bit support (#747)

ReactiveUI now fully supports the new 64-bit Xamarin.iOS API, if you are running Xamarin.iOS 8.4 or higher (currently in the Beta channel).

### Small Fixes
- Derived collections now have an `onRemove` method that can be used to clean up objects that are removed from the collection (#744, thanks @TheGrandUser)
- Remove opportunistic scheduling in Cocoa because of ordering issues (#745, thanks @tberman)
- Fix crashes where section changes could crash the app on iOS (#749, thanks @srimoyee-factory)
- Fix a crash when using `x => x` as your selector (#741, thanks @eggapauli)
- Propagate WhenActivated to subviews on iOS (#735, thanks @justin-factory)
- Fix issue where `INotifyPropertyChanging` was not defined on all platforms
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/693359/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/693359,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.2.0,https://github.com/reactiveui/ReactiveUI/releases/tag/6.2.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.2.0,6.2.0,False,False
599694,2014-10-02T19:01:09Z,2014-10-02T19:06:54Z,ReactiveUI 6.1.0,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.0.7...6.1.0)

### ViewModel-based Routing for Xamarin.Forms Apps (#724)

Several small fixes have come together to enable ReactiveUI ViewModel-based Routing and auto-serialization for Xamarin.Forms-based apps:

<img src=""https://camo.githubusercontent.com/d158f56ab9c22c212ff3758d1d156be12a87c2ad/687474703a2f2f636c2e6c792f696d6167652f323631333173326e336b33482f636f6e74656e7423706e67"" width=50% />

See [the PR for a sample app](https://github.com/reactiveui/ReactiveUI/pull/724), and check out the [documentation on Routing](https://github.com/reactiveui/ReactiveUI/blob/master/docs/basics/routing.md) for more information on how it works.

### Other Fixes
- Added a version of `TestScheduler.With` that is async/await aware
- Added a SupportLib version of ReactiveFragment
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/599694/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/599694,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.1.0,https://github.com/reactiveui/ReactiveUI/releases/tag/6.1.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.1.0,6.1.0,False,False
561866,2014-09-16T18:32:44Z,2014-09-16T18:55:43Z,ReactiveUI 6.0.7,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.0.6...6.0.7)

## Android Scheduler improvements

On Android, an improved Scheduler based on RxJava is now automatically configured in your application, that no longer requires setup in OnCreate. Using the main thread scheduler should now work even in contexts such as bound services or other non-Activity scenarios. (#717). 

This PR also fixes an issue where scheduling from non-UI threads in Xamarin Forms-based apps could incorrectly throw an exception. 

## Documentation Galore

This release marks the first release whose source code contains our first steps toward comprehensive documentation. This has been a multiple-month effort from several people, such as @rikbosch, @niik, @dchaib, and @npnelson. Documentation will now be stored [in the docs folder](https://github.com/reactiveui/ReactiveUI/tree/master/docs) and will be kept up-to-date as components change.

Right now while many of the docs are stubs, the ""basics"" folder is completely written, it's highly recommended to check out the documents in this folder for more information.

## WinForms Improvements

ReactiveUI now supports controls which derive from Component, such as ToolStripButton. Thanks to @vanderkleij for the patches (#720, #721)

## Other
- Add a Reactive class for UITabBarController (#723, thanks @tberman)
- Allow Commands to be used with Menu Items (#722, thanks @mteper)
- IsExecuting is now false as soon as the result from ExecuteAsync returns if awaited. (#714, thanks @Haacked)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/561866/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/561866,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.0.7,https://github.com/reactiveui/ReactiveUI/releases/tag/6.0.7,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.0.7,6.0.7,False,False
514184,2014-08-25T23:25:47Z,2014-08-25T23:28:15Z,ReactiveUI 6.0.6,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.0.5...6.0.6)
- Enable activation for NSViewControllers via hacky hax (#706, thanks @mteper)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/514184/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/514184,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.0.6,https://github.com/reactiveui/ReactiveUI/releases/tag/6.0.6,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.0.6,6.0.6,False,False
501551,2014-08-19T20:25:15Z,2014-08-19T20:31:32Z,ReactiveUI 6.0.5,"## [What's New](http://github.com/reactiveui/ReactiveUI/compare/6.0.4...6.0.5)

### ToProperty and ReactiveCommand are no longer lazy in a test runner

In certain situations, tests that appear to be reasonable would fail, due to a View not being bound to the ViewModel under test. This is due to an optimization that was added in the RxUI 6.0 era, where subscriptions would not be created until the value was requested for the first time. 

While the behavior is correct, it also resulted in tricky-to-debug test failures. Now, in the unit test runner, we disable this feature and eagerly subscribe to the source. Check out #705 for more information.

### Bug Fixes
- ReactiveUI is now built using the Xamarin Stable branch, which means that RxUI-Events for iOS is now based on iOS 7.x instead of being based on the iOS 8 Beta
- Fixed typo in error message (#704, thanks @mteper)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/501551/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/501551,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.0.5,https://github.com/reactiveui/ReactiveUI/releases/tag/6.0.5,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.0.5,6.0.5,False,False
498761,2014-08-18T18:54:47Z,2014-08-18T19:03:10Z,ReactiveUI 6.0.4,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.0.3...6.0.4)

### Bug Fixes
- Fix SupportLib NuGet package (#692, thanks @shiftkey)
- Fix bug in WhenActivated where deactivation wouldn't run (#690, thanks @jlaanstra)
- Ensure SetItem fires the correct notification (#693, thanks @TheGrandUser)
- Fix activation on NSWindowController (#696, thanks @mteper)
- Use ExecuteAsync in InvokeCommand (#700, #701, thanks @jlaanstra + @timmit93)
- Ensure ToProperty properties fire Changing notification (#703)
- Don't set the Scheduler in Xamarin.Forms in the test runner. 
- Link Xamarin.Mac to NuGet Rx binaries instead of ones shipped in the framework, since Mono no longer ships them.
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/498761/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/498761,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.0.4,https://github.com/reactiveui/ReactiveUI/releases/tag/6.0.4,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.0.4,6.0.4,False,False
467147,2014-08-02T14:48:10Z,2014-08-02T14:51:57Z,ReactiveUI 6.0.3,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.0.2...6.0.3)

### Bug Fixes
- Fixed an issue where subscribing to `Changed` could cause weird crashes (#665, thanks @sickboy + @mteper)
- Fix a bug where ReactiveCommand wouldn't correctly marshal exceptions (#686, thanks @flagbug)
- Don't leak an event to `IsHitTestVisible` when using `WhenActivated` (#689, thanks @jlaanstra)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/467147/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/467147,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.0.3,https://github.com/reactiveui/ReactiveUI/releases/tag/6.0.3,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.0.3,6.0.3,False,False
450569,2014-07-25T09:57:50Z,2014-07-25T10:09:57Z,ReactiveUI 6.0.2,"## [What's New](http://github.com/reactiveui/ReactiveUI/compare/6.0.1...6.0.2)

#### Bug Fixes
- Improvements to iOS collection views (#678, #681, thanks @tberman)
- Fix exception in WeakEventHandler when adding an element twice (#679, thanks @jlaanstra)
- Update to Rx 2.2.5 to support Universal PCL Profile259 (#676, thanks @jlaanstra)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/450569/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/450569,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.0.2,https://github.com/reactiveui/ReactiveUI/releases/tag/6.0.2,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.0.2,6.0.2,False,False
433488,2014-07-16T18:04:20Z,2014-07-16T18:10:53Z,ReactiveUI 6.0.1,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/6.0.0...6.0.1)

### Bug Fixes
- Update Xamarin Forms to have correct metadata (#662, thanks @nestalk)
- Fix issue with Android platform on startup (#659)
- Fix design-time issue on WPF with RoutedViewHost
- Fix issue with bindings disappearing on WPF (#672, thanks @jlaanstra)
- Update Android Support Library to v20
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/433488/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/433488,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.0.1,https://github.com/reactiveui/ReactiveUI/releases/tag/6.0.1,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.0.1,6.0.1,False,False
418379,2014-07-09T00:31:28Z,2014-07-09T00:33:42Z,ReactiveUI 6.0,"# Welcome to ReactiveUI 6.0

After 8 months of work, 878 commits, and 1032 files changed, ReactiveUI 6.0 is finally released, the biggest RxUI release ever! A huge thanks to our contributers for this release:
- Johan Laanstra
- Oren Novotny
- Todd Berman
- Michael Teper
- Felipe Lessa
- Amy Palamountain
- Dennis Daume
- Rik Bosch
- James Nugent
- Phil Haack
- Maratoss
- David Lechner
- Justin Manus
- Keith Dahlby
- Markus Olsson

In particular, a huge thanks goes to Johan, who has done an enormous amount of great work on this release. Thank you so much!

## Migrating from existing code

We've written [a migration guide](https://github.com/reactiveui/ReactiveUI/blob/master/docs/migrating-from-rxui5.md) to help existing application authors migrate their 5.x applications to ReactiveUI 6.0. Check out this document before updating your dependencies to get a heads-up as to what you're in for.

## What's New in ReactiveUI 6.0

Over 120 new features were merged into ReactiveUI 6.0, trying to sum them all up is a huge undertaking! Here are some of the highlights:

### Universal Windows Phone app and Xamarin Forms Support

ReactiveUI 6.0 has great support for all of the latest developer platforms, including WinRT Universal Apps as well as support for the new Xamarin Forms UI toolkit via the new `ReactiveUI-XamForms` NuGet package. Use either the updated Portable Library support, or use the new Shared Projects tooling in Visual Studio.

Existing support for Android and iOS has also been greatly improved, including support for unit test runners on those platforms, as well as creating Observable abstractions for all events via the `ReactiveUI-Events` package. Helpers for the Android Support Library are now also provided, via the `ReactiveUI-AndroidSupport` package.

ReactiveUI 6.0 supports the following platforms (In order of personal developer joy):
- Xamarin.Android
- Xamarin.iOS
- Xamarin.Mac
- Xamarin Forms (iOS + Android + WP8)
- .NET 4.5 (WPF and Windows Forms, via `ReactiveUI-WinForms`)
- Universal Windows Apps (WPA81)
- Windows Phone 8.0 Apps (Silverlight-based)
- Windows Store Apps (WinRT)

### ReactiveUI makes creating list-based views a snap

We've added great support for recycling list-based views on iOS and Android (`UICollectionView` and `UITableView` on iOS, `ListAdapter` on Android). These new adapter classes allow you to map a ReactiveList of ViewModel objects and automatically create and recycle the associated views, for high-performance lists without writing a ton of boilerplate code.

On iOS, added and removed items will even be automatically animated in and out. On Android, we help you easily implement the ViewHolder pattern to limit the amount of work done while scrolling.

### Large Application Performance

One of the focuses of this release has been performance and memory usage in large applications. ReactiveUI 6.0 is much less prone to creating memory leaks in application code via WeakEventManager, as well as more performant by eliminating scheduling latency as much as possible. Other features, such as View and ViewModel Activation, allow you to create and clean-up objects only when the View is actually visible on-screen, saving a lot of unnecessary work.

While some of these changes will require you to update your application and unit tests, the end result is an application that uses less memory and feels more responsive.

### The same Rx, Everywhere

ReactiveUI 5.x used a separate installation of the Reactive Extensions for .NET for Xamarin projects, which made creating proper Portable Libraries more difficult. RxUI 6.0 now resolves this completely, and you can now build ViewModels that work on every supported platform.

## Questions, Comments, Concerns?

There are three great venues for problems / questions related to this release:
- [The ReactiveUI mailing list](http://groups.google.com/group/reactivexaml)
- [Issues on GitHub](https://github.com/reactiveui/ReactiveUI/issues)
- The ReactiveUI Slack chat room - if you're interested in joining this chat room, please Email paul@paulbetts.org from the Email you want to use and I can add you.
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/418379/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/418379,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/6.0.0,https://github.com/reactiveui/ReactiveUI/releases/tag/6.0.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/6.0.0,6.0.0,False,False
348859,2014-05-30T18:59:50Z,2014-05-30T19:02:27Z,ReactiveUI 6.0 Preview 7,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/5.99.5...5.99.6)

This is a prerelease version of ReactiveUI 6.0 - use at your own release, we make no guarantees that this works for you or even at all.

### [Check the Ship PR](https://github.com/reactiveui/ReactiveUI/pull/434) for more info
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/348859/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/348859,rxui6-master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.99.6,https://github.com/reactiveui/ReactiveUI/releases/tag/5.99.6,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.99.6,5.99.6,False,False
264777,2014-04-09T20:25:28Z,2014-04-09T20:29:11Z,ReactiveUI 5.5.1,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/5.5.0...5.5.1)
- Fix a glitch in XAML-based apps where WhenAny'ing DependencyProperties sometimes wouldn't work (Backport of #558)
- Bump the version of Rx on MonoMac to the one currently shipping in Mono
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/264777/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/264777,develop,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.5.1,https://github.com/reactiveui/ReactiveUI/releases/tag/5.5.1,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.5.1,5.5.1,False,False
246571,2014-03-28T23:32:23Z,2014-03-28T23:36:24Z,ReactiveUI 6.0 Preview 6,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/5.99.4...5.99.5)

This is a prerelease version of ReactiveUI 6.0 - use at your own release, we make no guarantees that this works for you or even at all.

### [Check the Ship PR](https://github.com/reactiveui/ReactiveUI/pull/434) for more info
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/246571/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/246571,rxui6-master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.99.5,https://github.com/reactiveui/ReactiveUI/releases/tag/5.99.5,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.99.5,5.99.5,False,True
206803,2014-03-03T03:00:56Z,2014-03-03T03:19:27Z,ReactiveUI 5.5,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/5.4.0...5.5.0)

## Bug Fixes
- Command bindings in WinForms now affect Enabled (#443, thanks @rzhw)
- Ensure that common WinForms controls don't get trumped by WPF (#447, thanks @rzhw)
- Enable BindCommand to work with nested ViewModels (#450, thanks @onovotny!)
- Attempt to prevent the Mono linker from stripping things we need (#455, thanks @onovotny!)
- Improvements to iOS binding (#473, #496, thanks @tberman)

## Activation

Thanks to the great work by @jen20, the View / ViewModel activation from ReactiveUI 6.0 has been backported to 5.x. Normally large features aren't backported, but due to discovering that DependencyProperties leak memory in bindings without this feature, we decided to backport it. 

### What do you mean, leaks?

The following code, in a sane world, wouldn't leak:

``` cs
public MyCoolUserControl()
{
    this.OneWayBind(ViewModel, x => x.FirstName, x => x.FirstName.Text);
}
```

Normally, when both the View and the ViewModel go out of scope, the GC would clean them both up and everything would be great. However, because of the Dependency Property system, this isn't true. **Every time you WhenAny or Bind through a DependencyProperty, you must explicitly clean it up by Disposing**. To help out with this, a new method has been created on Views and ViewModels.

Consider the following ViewModel constructor:

``` cs
public MyBrokenViewModel()
{
    UserError.RegisterHandler(x => {
        // NB: Stuff
    });
}
```

This is broken because every time we create MyBrokenViewModel, we create another error handler. What Do? What we really want for certain global things like UserError, is for UserError to be subscribed only when the View associated with the ViewModel is _visible_. However, that information isn't available to ViewModels, and even if it was, it's not super obvious. Let's fix it

### How does this work:

Activation allows you, for both Views and ViewModels, to set up _the things that should be_ **active** _when the View is visible_. Here's how you do it for ViewModels:

``` cs
public class MyWorkingViewModel : ReactiveObject, ISupportsActivation
{
    public ViewModelActivator Activator { get; protected set; }

    public ActivatingViewModel()
    {
        Activator = this.WhenActivated(d => {
            // d() registers a Disposable to be cleaned up when
            // the View is deactivated / removed
            d(UserError.RegisterHandler(x => {
                // NB: Stuff
            }));
        });
    }
}
```

Here's how it works for Views:

``` cs
public class MyWorkingView : UserControl, IViewFor<MyWorkingViewModel>
{
    public ActivatingView()
    {
        this.WhenActivated(d => {
            Console.WriteLine(""Helloooooo Nurse!"")
            d(Disposable.Create(() => Console.WriteLine(""Goodbye, Cruel World"")));
        });
    }
}
```

Note that calling `WhenActivated` in a View automatically means that the associated ViewModel gets notified for activated / deactivated changes (and in fact, you _must_ call `WhenActivated` in the View to get the ViewModel to be notified).
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/206803/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/206803,rxui6-master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.5.0,https://github.com/reactiveui/ReactiveUI/releases/tag/5.5.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.5.0,5.5.0,False,False
166081,2014-01-30T04:44:08Z,2014-01-30T04:50:19Z,ReactiveUI 6.0 Preview 4,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/master...5.99.0)

This is a prerelease version of ReactiveUI 6.0 - use at your own release, we make no guarantees that this works for you or even at all.

### [Check the Ship PR](https://github.com/reactiveui/ReactiveUI/pull/434) for more info
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/166081/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/166081,rxui6-master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.99.3,https://github.com/reactiveui/ReactiveUI/releases/tag/5.99.3,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.99.3,5.99.3,False,True
131150,2013-12-24T21:42:45Z,2013-12-24T21:45:52Z,ReactiveUI 6.0 Preview 1,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/master...5.99.0)

This is a prerelease version of ReactiveUI 6.0 - use at your own release, we make no guarantees that this works for you or even at all.

### [Check the Ship PR](https://github.com/reactiveui/ReactiveUI/pull/434) for more info
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/131150/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/131150,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.99.0,https://github.com/reactiveui/ReactiveUI/releases/tag/5.99.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.99.0,5.99.0,False,True
121714,2013-12-13T22:30:13Z,2013-12-13T22:42:40Z,ReactiveUI 5.4.0,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/5.3.0...5.4.0)

Since some of these fixes change behavior (such as the NLog fix), this is a minor release - however, most of these changes _shouldn't_ affect existing programs

### Bug Fixes
- Allow binding to 3rd party control libraries in WinForms (#405, thanks @rikbosch)
- Fix F# friendly ObservableForProperty (#407, thanks @marklam)
- Clean up NuSpec files for Xamarin on Visual Studio (#410, thanks @onovotny)
- Fixes to deserializing ReactiveObjects using certain serializers (#412, thanks @meteficha)
- Small improvements to derived collections (#417, thanks @meteficha)
- Change NLog to use the full class name so it is easier to filter on (thanks @npnelson)
- Race condition and reentrancy fixes to Reactive(Table/Collection)ViewSource (#425 + #426 + #433, thanks @meteficha)
- Remove Pex from the list of test runners because it conflicts with WriteableBitmapEx (#428, thanks @tiagomargalho)
- Fix up some of the collection interfaces (#430, thanks @Haacked)
- Add Count\* observables to list interfaces (#436, thanks @onovotny)
- Disable setting up ViewHosts in design mode
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/121714/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/121714,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.4.0,https://github.com/reactiveui/ReactiveUI/releases/tag/5.4.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.4.0,5.4.0,False,False
99034,2013-11-20T19:32:30Z,2013-11-20T20:14:34Z,ReactiveUI 5.3.0,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/5.2.0...5.3.0)

### Improved iOS Table View / Collection View support

Thanks to @meteficha and @alanpog, ReactiveUI's support for UITableView and UICollectionView is now vastly improved. We now support:
- Custom Section Headers and Footers
- Support for UICollectionView via new ReactiveCollectionViewSource class, similar to ReactiveTableViewSource
- Support for adding / removing sections dynamically in a Reactive way, via the `Data` property on ReactiveTableViewSource
- Added several new IViewFor-friendly Cocoa view subclasses, such as ReactiveCollectionViewCell
- You can now easily detect when the table has finished updating to avoid making changes during a table reshuffle, via `DidPerformUpdates`

### ViewModelViewHost and RoutedViewHost for WinForms

Thanks to @rikbosch, ReactiveUI.WinForms now has support for both RoutedViewHost and ViewModelViewHost, so you can create IViewFor-based Controls. (#396) 

### Bug Fixes
- Make FuncDependencyResolver handle `GetService` correctly via returning the last item (#389), thanks @journeyman!
- Fix a race condition in ObservableAsyncMRUCache, thanks @npnelson!
- Create an overload of ObservableForProperty that's a bit more F# friendly, thanks @marklam!
- Code cleanups to our project files (#387), thanks @pH-minamo!
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/99034/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/99034,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.3.0,https://github.com/reactiveui/ReactiveUI/releases/tag/5.3.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.3.0,5.3.0,False,False
65352,2013-10-12T07:08:58Z,2013-10-12T07:24:42Z,ReactiveUI 5.2.0,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/5.1.2...5.2.0)

### iOS Improvements

This release adds Reactive versions of a number of common UIKit classes, such as UIImageView. RxUI also now comes with a new class for UITableViewSource, `ReactiveTableViewSource`. This class will wrap a `ReactiveList<ViewModel>` class and automatically animate in and out cells from the table view as they change (PR #377)

### Android improvements

This release adds basic binding support for common Android controls, thanks to #371. Thanks @oliverw!

### Combined Commands

`ReactiveCommand` now supports combining commands, so it's easy to create a command that invokes one or more ""child"" commands, check out #382 for more information.

### Modern Xamarin support

ReactiveUI is now built against the official Xamarin Rx binaries. This means that on MonoMac, you need to be up-to-date on the latest Mono install. 

### Bug Fixes
- Fixes to ViewLocator to be more helpful if registration isn't set up (#359, thanks @terenced!)
- Move RxUI.Mobile interfaces to the portable library so you can use them from PLibs (#364)
- Perf improvement when looking up interfaces (#366, thanks @2asoft!)
- Fixes to Auto Data Template (#367, thanks @chrisway!)
- Fix to AutoPersist (#383, thanks @vevix!)
- Updates to handle the latest Rx Microsoft release 
- Make sure ReactiveCommand's `IsExecuting` always comes back on the UI thread (#373)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/65352/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/65352,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.2.0,https://github.com/reactiveui/ReactiveUI/releases/tag/5.2.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.2.0,5.2.0,False,False
23692,2013-08-09T12:08:28Z,2013-08-09T12:28:13Z,ReactiveUI 5.1.0,"## [What's New](https://github.com/reactiveui/ReactiveUI/compare/5.0.1...5.1.0)

### Windows Forms Support

Thanks to the great work of @rikbosch, ReactiveUI now has initial Windows Forms support. This includes an initial hack at binding to Windows Forms properties, as well as command binding. Grab it by installing the NuGet package:

``` sh
Install-Package ReactiveUI-Winforms
```

### New APIs

``` cs
this.WhenAnyValue(x => x.Foo)  // Same as this.WhenAny(x => x.Foo, x => x.Value)
```

### Weird Version Numbers?!

Some things went wrong with NuGet with this release, so the last version number may not match (it will either be ""5.1.1"" or ""5.1.2""). Ignore the man behind this curtain.

### Other Stuff
- Bug fixes to `ReactiveList` and `CreateDerivedCollection`
- Use less internal caching when on mobile platforms (https://github.com/reactiveui/ReactiveUI/pull/346)
- Several fixes to iOS support, especially on-device
- Allow setting the initial CanExecute state of `ReactiveCommand` to be false (
- Bugfixes to OneWayBind (https://github.com/reactiveui/ReactiveUI/issues/331)
- Fix a designer crash in RoutedViewHost (https://github.com/reactiveui/ReactiveUI/issues/341)

### Greetz

Thanks to @niik, @jlaanstra, @dahlbyk, @chrisway, and @sillyotter for their help on this release!
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/23692/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/23692,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.1.0,https://github.com/reactiveui/ReactiveUI/releases/tag/5.1.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.1.0,5.1.0,False,False
1056,2013-07-02T21:29:28Z,2013-07-02T22:06:53Z,ReactiveUI 5.0.1,"After 3 months, 427 commits by 12 different contributors, and 689 total files changed, the stable release of ReactiveUI 5.0 is now live! A huge thanks to the contributors for this release:
- Markus Olsson
- Johan Laanstra
- Oliver Weichhold
- Phil Haack
- Christopher Atkins
- Brad Phelan
- Georg Rollinger
- Kent Boogaart
- Wenda Zhou

## [Check out the Ship PR](https://github.com/reactiveui/ReactiveUI/pull/219)

Here's the release highlights:

## ReactiveUI is now totally Portable-Friendly

ReactiveUI now is compatible with .NET 4.5 Portable Libraries, you can now write cross-platform ViewModels but still use almost all of the RxUI features. 

Unfortunately, to do this, we had to **drop support** for a number of older platforms. If you are using Silverlight, WP7, or .NET 4.0, you'll have to stick with ReactiveUI 4.x, which will still be maintained in a separate branch. 

ReactiveUI 5.x has full support for the following platforms:
- Xamarin.iOS
- Xamarin.Android
- Xamarin.Mac
- .NET 4.5 (WPF)
- Windows Phone 8
- Windows Store Apps (WinRT)

## ReactiveUI.Events

ReactiveUI now makes it easy to bind to UI events, without having to use `Observable.FromEventPattern`. Many UI controls and other objects now have an `Events()` extension method. For example:

``` cs
theButton.Events().Clicked.Subscribe(x => /* ... */);
```

This makes it far cleaner to compose complex UI interactions at the view level.

## A much improved API surface

This release is the ""Clean up"" breaking changes release - many deprecated methods have been removed - I'm proud to say that this release removes over 2x the number of lines that it adds, and only leaves what Should Be There. 

Many names have been changed to be more clear, methods have been removed or clarified, and in general, ReactiveUI 5.0 is a more pleasant framework to use. However, this means that moving from RxUI 4.x to 5.x can be a bit of work. Check out [the migration guide](https://github.com/reactiveui/ReactiveUI/blob/master/docs/migrating-from-rxui4.md) for more information. 

## Testable Initialization

ReactiveUI now has much more straightforward initialization - you can initialize ReactiveUI yourself in a test runner, ensure that tests won't register over other tests, and there is a new Service Locator implementation that is much more flexible with regard to object lifetimes than the old built-in service locator. RxApp itself now has much less in it, relying instead on the new `RxApp.DependencyResolver` property. 
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/1056/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/1056,master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/5.0.1,https://github.com/reactiveui/ReactiveUI/releases/tag/5.0.1,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/5.0.1,5.0.1,False,False
344,2013-06-18T22:28:06Z,2013-06-18T22:47:56Z,ReactiveUI 4.6.4,"# [What's New](https://github.com/reactiveui/reactiveui/compare/4.5.0...4.6.4)

## Notable Changes Since 4.5.0
- Improved support for ReactiveUI on iOS and Android, including Suspension Manager support
- A UINavigationController for iOS that participates in ViewModel-based view location
- `OrderedComparer`, a new way to write IComparable implementations using a LINQ'ish syntax
- Make `ReactiveDerivedCollection` read-only and fix notification bugs
- We now generate Symbol packages for ReactiveUI
- Fixes for BindCommand on WinRT, where EventArgs don't actually have to be derived from System.EventArgs
- ReactiveAsyncAction now signals completion
- Fixes bug where WP8 projects would incorrectly be flagged as running in the test runner
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/344/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/344,rxui5-master,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/4.6.4,https://github.com/reactiveui/ReactiveUI/releases/tag/4.6.4,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/4.6.4,4.6.4,False,False
177,2013-03-12T03:27:48Z,2013-03-12T03:51:41Z,ReactiveUI 4.5.0,"# [What's New](https://github.com/reactiveui/reactiveui/compare/4.4.3...4.5.0)

## Xamarin.iOS and Xamarin.Mac support

This release brings initial support for the latest Xamarin.Mac and Xamarin.iOS. Using ReactiveUI and Xamarin Studio, you can write cross-platform ViewModels and Model classes and bind them to Views using the same RxUI 4.x binding syntax.
- ReactiveUI knows how to bind to Cocoa objects using Key-Value Observing
- DeferredScheduler automatically runs code on the Cocoa main runloop
- Routing and ViewModelViewHost is supported via a class that attaches to NSView
- Command binding understands Cocoa controls via Cocoa target/action framework, including automatically disabling the control when CanExecute is false
- Many common controls have implicit binding support

## Experimental Xamarin.Android support

This release also includes very basic Xamarin.Android support, including a scheduler that will run code on the Activity's main thread.

## What do I need to run this??

You need to run [Xamarin Studio](http://xamarin.com/) and make sure to have the latest updates installed from the **Alpha Channel**. 

## What else is New?
- Bug fixes in UserError Handling
- Extra documentation (thanks @ArturPhilibin!)
- Add Debugger support for ReactiveCollection (#204, thanks @distantcam!)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/177/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/177,develop,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/4.5.0,https://github.com/reactiveui/ReactiveUI/releases/tag/4.5.0,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/4.5.0,4.5.0,False,False
147,2013-03-04T22:20:00Z,2013-03-04T22:35:21Z,ReactiveUI 4.4.3,"## [What's New](https://github.com/reactiveui/reactiveui/compare/4.4.2...4.4.3)
- Fix a bug with certain service locators on WP7 (#197)
- Fix a bug related to sorting in CreateDerivedCollection (#195)
- Allow the connection created in CreateDerivedCollection to be disconnected (#199)
- Enable Type Conversion and Binding Hooks in BindTo and correct a crashing bug in WinRT (#201)
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/147/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/147,develop,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/4.4.3,https://github.com/reactiveui/ReactiveUI/releases/tag/4.4.3,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/4.4.3,4.4.3,False,False
133,2013-02-27T04:12:14Z,2013-02-27T04:17:54Z,ReactiveUI 4.4.2,"## [What's New](https://github.com/reactiveui/reactiveui/compare/4.4.1...4.4.2)
- Improve speed of View lookup, get rid of spurious throwing
- Add documentation for RxUI View Bindings
- Fix several WinRT-only bugs, especially around the SuspensionHost scenario
",https://api.github.com/users/paulcbetts,1396,paulcbetts,https://api.github.com/repos/reactiveui/ReactiveUI/releases/133/assets,https://api.github.com/repos/reactiveui/ReactiveUI/releases/133,develop,https://api.github.com/repos/reactiveui/ReactiveUI/tarball/4.4.2,https://github.com/reactiveui/ReactiveUI/releases/tag/4.4.2,https://api.github.com/repos/reactiveui/ReactiveUI/zipball/4.4.2,4.4.2,False,False
