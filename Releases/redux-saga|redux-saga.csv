id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
8130323,2017-10-16T08:51:01Z,2017-10-16T09:07:43Z,v0.16.0,"- added `detach` helper - this is used internally now by `spawn` to mark `fork` effect as detached, got exported and might be used in userland, it's useful for creating i.e. detached `takeEvery`
```js
import { detach } from 'redux-saga'
import { takeEvery } from 'redux-saga/effects'

// ...

yield detach(takeEvery(ACTION_A, mightThrowSaga))
```
- typings for `detach` got added thanks to @aikoven 
- removed `#__PURE__` annotations from the source code, adding them automatically with [annotate-pure-calls babel's plugin](https://github.com/Andarist/babel-plugin-annotate-pure-calls)
- made `sagaStack` property non-enumerable (this is attached sometimes by `redux-saga` to the thrown Errors)
- unified internally error logging
- removed annoying ""saga has been cancelled"" logs, didn't find a valid use case for them",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/8130323/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/8130323,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.16.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.16.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.16.0,v0.16.0,False,True
8130198,2017-07-24T19:18:03Z,2017-10-16T08:59:23Z,v0.15.6,"**TS Typings**
- made `take` and `put` effects redeclarable (thanks to @Rokt33r)  
- marked overloaded `put.sync` as deprecated",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/8130198/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/8130198,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.15.6,https://github.com/redux-saga/redux-saga/releases/tag/v0.15.6,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.15.6,v0.15.6,False,True
8130157,2017-07-21T15:46:44Z,2017-10-16T08:57:40Z,v0.15.5,"**TS Typings**
- optional cancel property on `CpsCallback` (thanks to @dannsam) 
- support for non-strict effect combinators (thanks to @aikoven 
- type definitions for util's `cloneableGenerator` function (thanks to @zyml) 

",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/8130157/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/8130157,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.15.5,https://github.com/redux-saga/redux-saga/releases/tag/v0.15.5,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.15.5,v0.15.5,False,True
6814621,2017-06-23T12:18:11Z,2017-06-23T12:19:56Z,v0.15.4,"- added pure functions annotations (for few deprecation warnings) so they can be better tree-shaken now. more can be read [here](https://iamakulov.com/notes/polished-webpack/), thanks to @iamakulov",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/6814621/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/6814621,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.15.4,https://github.com/redux-saga/redux-saga/releases/tag/v0.15.4,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.15.4,v0.15.4,False,True
6288346,2017-05-05T07:14:32Z,2017-05-05T07:16:06Z,v0.15.3,- fixed middleware's `context` not being passed to the root sagas (thanks @VictorQueiroz),https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/6288346/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/6288346,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.15.3,https://github.com/redux-saga/redux-saga/releases/tag/v0.15.3,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.15.3,v0.15.3,False,True
6288156,2017-05-02T10:43:31Z,2017-05-05T06:45:33Z,v0.15.1,"- reverted using `Symbol`s for some internal properties - this caused 2 redux-saga version to be incompatible, effects from one couldnt be interpreted by the other one",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/6288156/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/6288156,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.15.1,https://github.com/redux-saga/redux-saga/releases/tag/v0.15.1,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.15.1,v0.15.1,False,True
6288140,2017-05-05T06:37:05Z,2017-05-05T06:43:41Z,v0.15.2,"- fixed problem with yielding falsy values - normally all non-interpretable yields are just injected back to your saga (`const two = yield 2`), however yielding falsy values prevented yielding saga to continue",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/6288140/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/6288140,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.15.2,https://github.com/redux-saga/redux-saga/releases/tag/v0.15.2,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.15.2,v0.15.2,False,True
6231306,2017-04-29T12:42:43Z,2017-04-29T13:25:25Z,v0.15.0,"Things published already under recent patch versions, but without public release noted:
- got `redux-saga/effects` and `redux-saga/utils` working properly for `webpack2` and `rollup` users (or any other bundle which recognizes `jsnext:main`/`module` entry). Thanks to @Ephys. How was it achieved can be seen [here](https://github.com/redux-saga/redux-saga/blob/f29fdc5d7f508512169f52bebeb983ec017fa25d/effects/package.json). Neat trick which I think is not publicly known and it was an issue for quite some time and also allowed me to help fixing this in some other libraries.
- fixed `join(...tasks)` implementation, its not accepting an array of tasks, but rather a variadic number of tasks as arguments
- implemented [`cancel(...tasks)`](https://redux-saga.js.org/docs/api/index.html#canceltasks) in similar manner 
- implemented possibility for self cancellation, this means you can now [`yield cancel()`](https://redux-saga.js.org/docs/api/index.html#cancel) inside a task and handle both `cancel(task)` + self cancellation via `cancel()` within the same `finally` block
- fixed internal scheduler and its recursive nature, now its trampolining and cannot cause stack's overflow, thanks to @pbadenski and @wilsaj
- added `getContext` and `setContext` effects (thanks for the idea to @aikoven). It's not properly documented yet, but its a feature which allows sharing context properties across tasks without need to import them in each file or passing them explicitly through arguments. The feature is implemented as [dynamic scoping](https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scoping) which should sounds familiar for JS devs. In general you cannot share a context property from a child task to the parent, its only passed 'down'. You can read more in related [issue](https://github.com/redux-saga/redux-saga/issues/713) and [PR](https://github.com/redux-saga/redux-saga/pull/735) till its not documented.
- got rid of `createSagaMiddleware({ onerror })` which got into library because of a typo and we have supported it for some time, please use `onError` instead

New in this release:
- refactored `runSaga` API, `runSaga(iterator, storeInterface)` got depreacted in favor of `runSaga(storeInterface, saga, ...args)`. It allowed us to leverage the change internally so now `sagaMiddleware.run` became partially applied `runSaga`, they wont now go out of sync (in the past changes and bug fixes had to implemented in both of them).
- [`cloneableGenerator`](https://redux-saga.js.org/docs/api/index.html#cloneablegeneratorgeneratorfunc) utils, which can ease ur unit testing when logic branching is needed, thanks to @nihaux 
- `call([obj, 'method'])` - now you can pass a string as method's name which should be called on the passed context
- `all` effect - explicit effect for parallel effects, which is exactly what we had been supporting by accepting yielded arrays, so the latter is become deprecated now in favor of this explicitness which nicely maps to the [`Promise.all`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) API. Please use this from now on
- improved TS typings, thanks to @aikoven for his continous support in this matter

Bug fixes:
- fixed issue with `eventChannel`s not closing automatically upon emitting `END`, thanks to @baldwmic

In the meantime we have also:
- got us https://redux-saga.js.org/ domain, thanks to @baldwmic
- got us a `rollup`ed UMD build, which is way smaller than the one which was produced by a webpack, thanks to the so called 'flat-bundling'
- got us a logo! Thanks to @thekarland
<img src='logo/0800/Redux-Saga-Logo-Portrait.png' alt='Redux Logo Portrait' width='260px'>

",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/6231306/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/6231306,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.15.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.15.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.15.0,v0.15.0,False,True
5908440,2017-03-29T12:55:36Z,2017-03-29T12:59:32Z,v0.14.4,"### Fixes

- `take` effect supporting `Symbol` types again - thanks to @iMoses ",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/5908440/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/5908440,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.14.4,https://github.com/redux-saga/redux-saga/releases/tag/v0.14.4,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.14.4,v0.14.4,False,True
5175916,2017-01-16T23:30:52Z,2017-01-16T23:44:09Z,v0.14.3,"This small update allows you to integrate better with some other redux libraries, like [redux-actions](https://github.com/acdlite/redux-actions) and [redux-act](https://github.com/pauldijou/redux-act).

For the users of those it is now possible to omit maintaining action constants only for the sake's of `redux-saga` and they can use created actions as patterns for the `take` effect like this:

``` javascript
import { createAction } from 'redux-actions'

const increment = createAction('INCREMENT', amount => amount) // typeof increment === 'function'

// ...
yield take(increment)
```

It means that you can pass an action creator function with custom `.toString()` method on it and it can be checked by redux-saga against dispatched actions' types.

Special thanks for this goes to @thezanke 

Also - finally the build for [`rollup`](https://github.com/rollup/rollup) should be fixed (public export of `CHANNEL_END` got fixed).
",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/5175916/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/5175916,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.14.3,https://github.com/redux-saga/redux-saga/releases/tag/v0.14.3,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.14.3,v0.14.3,False,True
5099560,2017-01-08T18:47:25Z,2017-01-08T19:05:48Z,v0.14.2,"This small update allows you to integrate better with some other redux libraries, like [redux-batched-actions](https://github.com/tshelburne/redux-batched-actions).

From now on you can intercept what's being dispatched before it's emitted into the saga, which will allow for using `take` just like everybody else, instead of playing with the `pattern` argument.

The argument you need to pass to the middleware is a higher-order function which will first take out built-in `emit` function as the argument and return a 'middleware' function to process dispatched `action`s.

Example usage:

``` javascript
createSagaMiddleware({
 emitter: emit => action => {
   if (Array.isArray(action)) {
     action.forEach(emit);
     return
   }
   emit(action)
 }
});
```

More can be read in [our docs](https://redux-saga.github.io/redux-saga/docs/api/index.html#createsagamiddlewareoptions)

Great thanks to the @pbadenski for implementing the feature.
",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/5099560/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/5099560,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.14.2,https://github.com/redux-saga/redux-saga/releases/tag/v0.14.2,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.14.2,v0.14.2,False,True
5052380,2017-01-02T22:56:17Z,2017-01-02T23:07:49Z,v0.14.1,"Just a small patch version with:
- `join(...tasks)` - this effect creator will accept array of tasks from now on, it's just a shorthand (more obvious one) for `tasks.map(join)`
- `take(array)` - array can be now of mixed types - strings and predicate functions so this is possible now `yield take(['ACTION_A', ac => ac.payload])`
- added TS typings for helpers' effect creators from the `redux-saga/effects`, that means `takeEvery`, `takeLatest`, `throttle` (thanks to @mcrawshaw)
",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/5052380/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/5052380,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.14.1,https://github.com/redux-saga/redux-saga/releases/tag/v0.14.1,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.14.1,v0.14.1,False,True
5007716,2016-12-24T23:20:44Z,2016-12-24T23:53:06Z,v0.14.0,"This release contains mostly deprecations, but only a mild ones. Mainly few things got better, more descriptive names to indicate their behaviour and helpers got their way into `effects`. Of course as those are deprecations only, we are still planning to support old APIs for a time being, but as those do not require much change in the code they old versions will get removed eventually.

New features:
- permitting saga monitors to only hook the functions they want (thanks to @skellock)

Fixes:
- refactored moment of actions emitting to saga internals, so not only standard middleware benefits from the recent (and possibly future) scheduling fixed, but also the `runSaga` API

Deprecations:
- `put.sync` got renamed to `put.resolve`
- `takem` got renamed to `take.maybe`
- `createSagaMiddleware({ onerror })` got fixed in the code (was documented as `onError`) and should be used from now on as docs suggested - `createSagaMiddleware({ onError })` (thanks to @kuy)
- all built-in helpers (`takeEvery`, `takeLatest`, `throttle`) got their respective counterparts in `redux-saga/effects` module, which should confuse people less and be more newcomers-friendly

``` javascript
import { takeEvery } from 'redux-saga/effects'
// ...
yield* takeEvery('ACTION', worker) // this WON'T work, as effect is just an object
const task = yield takeEvery('ACTION', worker) // this WILL work like charm

-----

import { takeEvery } from 'redux-saga'
// ...
yield* takeEvery('ACTION', worker) // this will continue to work for now
const task = yield takeEvery('ACTION', worker) // and so will this
```

Also few typings were fixed, thanks to @yenshih, @CarsonF and @aikoven for veryfing.

And last (but not least) great thanks and much appreciation to everyone who has contributed to improving the docs!

Happy Christmas.
",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/5007716/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/5007716,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.14.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.14.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.14.0,v0.14.0,False,True
4661196,2016-11-15T09:37:37Z,2016-11-15T09:56:20Z,,"This release includes an Improved saga monitor API (see #609). 
- notifies the monitor when root sagas are started by `sagaMiddleware.run` or `runSaga`.
- added `actionDispatched` trigger to the monitor contract. We need this in order to figure out saga/take effects that reacted to a given action. Also added a silent flag `SAGA_ACTION` (non enumerable property) added to distinguish actions dispatched by sagas from others.

Other changes
- New scheduler to handle synchronous & deeply nested forks/puts (see #622)  
- Browser build is now on cdnjs (thanks to @ian4hu & @pvnr0082t) 
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/4661196/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/4661196,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.13.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.13.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.13.0,v0.13.0,False,True
4520153,2016-10-30T12:04:39Z,2016-10-30T12:25:40Z,v0.12.1,"- fixed issue with uncaught errors in reducers/helpers/etc causing a saga to terminate if caused by a `put` effect (thanks to @michaelgilley)
- fixed issue with `race`s sometimes dropping buffered items in channels
- added a possibility to attach `cancel` callback to `cps` effect (thanks to @alxandr)
- fixed _some_ TS typings (thanks to @jupl)
- allowing sagaMonitor to be used in react-native (thanks to @benhughes)
",https://api.github.com/users/Andarist,9800850,Andarist,https://api.github.com/repos/redux-saga/redux-saga/releases/4520153/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/4520153,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.12.1,https://github.com/redux-saga/redux-saga/releases/tag/v0.12.1,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.12.1,v0.12.1,False,True
4283006,2016-10-02T13:39:36Z,2016-10-02T13:46:42Z,,"## Changes
- Added new effect `flush` ([API docs](http://yelouafi.github.io/redux-saga/docs/api/index.html#flushchannel)). It can be used to clear buffered items in the channel and geting them back in a batch in the saga (thanks to @Andarist)
- Added a new helper `throttle` ([API docs](http://yelouafi.github.io/redux-saga/docs/api/index.html#throttlems-pattern-saga-args))(thanks to @Andarist)
- Added a new buffer type `expanding` ([API docs](http://yelouafi.github.io/redux-saga/docs/api/index.html#buffers)) (thanks to @Andarist) . This new type also fixes the breaking change that was introduced by v0.11.1 with the new internal buffer implementation (see #511 [only if you need more details]).
  
  TL/DR: Use `buffer.fixed(limit)` when you need a bounded buffer (will throw an error when the untaked messages exceed the buffer limit). Use `buffer.expanding(limit)` when you need an auto expanding buffer.
- createSagaMiddleware supports a new (optional) option: `onError` [API docs](http://yelouafi.github.io/redux-saga/docs/api/index.html#createsagamiddlewareoptions) to detect uncaught exceptions from Sagas (thanks to @secobarbital)
- Saga helpers (`takeEvery`, `takeLatest`, `throttle`) are now non blocking (thanks to @Andarist).

Saga helpers return Iterator objects. In previous versions they were treated just like other Iterators and Promises in redux-saga, the Saga calling a helper (either via `yield` or `yield*`) will block until the Iterator returns. But since Saga helpers never return (because they are looping forever ) this will also cause the calling Saga to block forever. So in previous versions, if you wanted to call a helper in a non blocking way you had to use the `fork` effect

``` js
function* saga1() { ... }

function* saga2() { ... }

function* mainSaga() {
  yield fork(takeEvery, 'ACTION_1', saga1)
  yield fork(takeLatest, 'ACTION_2', saga2)
}
```

With this change, redux-saga handles the helpers like forks when used with `yield` which mean you can call them directly like this

``` js

function* mainSaga() {
  const task1 = yield takeEvery('ACTION_1', saga1)
  const task2 = yield takeLatest('ACTION_2', saga2)
}
```

**Note this will not work when used with the delegation form `yield*`: eg `yield* takeEvery(...)` will block the Generator. This is due to how `yield*` works in Generators in JavaScript and can't be handled by redux-saga.**
- Add Chinese Traditional translation (thanks to @neighborhood999)
- fixed bug log() not compatible with IE9 (thanks to @cyrilluce)
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/4283006/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/4283006,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.12.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.12.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.12.0,v0.12.0,False,True
3983153,2016-08-26T14:02:03Z,2016-08-26T14:11:41Z,,"A patch release including some fixes
- fix V8 issue when `yield*`ing saga helpers
- Fix issue with ES build (thanks @Andarist)
- Fix issues with Error handling
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/3983153/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/3983153,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.11.1,https://github.com/redux-saga/redux-saga/releases/tag/v0.11.1,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.11.1,v0.11.1,False,True
3594393,2016-07-06T02:33:55Z,2016-07-06T02:50:43Z,,"- fix #360 : added option `logger` to customize logging (see  [API docs for createSagaMiddleware](http://yelouafi.github.io/redux-saga/docs/api/index.html#createsagamiddlewareoptions))
- fix #398 : es build to properly use jsnext:main field (thanks to @mgmcdermott)

### Breaking change in the signature of [`runSaga`](http://yelouafi.github.io/redux-saga/docs/api/index.html#runsagaiterator-options)

The monitor argument is removed. Starting from this release, you must provide the monitor as a `sagaMonitor` key in the option argument. `runSaga` supports also the `logger` option

``` diff
runSaga(iterator, {
  subscribe: ...,
  dispatch: ...,
  getState: ...,
+ sagaMonitor: monitor,
+ logger: ...
},
- monitor
)
```
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/3594393/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/3594393,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.11.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.11.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.11.0,v0.11.0,False,True
3398457,2016-06-08T10:47:34Z,2016-06-08T10:57:09Z,,"- Fix Synchronous puts behaviors to be consistent with pre 0.10 releases

This restores the pre 0.10 behavior for handling `put`s whose result is a Promise (i.e. dispatch an action which will be handled by a middleware and returns a Promise). In pre 0.10 releases, the `put` doesn't wait for the returned promise to resolve; 

Starting from this release
1. `put` doesn't block waiting the returned promise to resolve
2. In order to wait for the returned Promise, use the variant `put.sync(...)` which will wait until the Promise resolve (or rejects) before resuming

For background see #336

Other changes
- fix Symbol handling in take's patterns and `takeEvery/takeLatest`  (thanks to @jscinoz)
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/3398457/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/3398457,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.10.5,https://github.com/redux-saga/redux-saga/releases/tag/v0.10.5,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.10.5,v0.10.5,False,True
3213469,2016-05-12T17:01:20Z,2016-05-12T17:06:53Z,,"Yep! Already another patch (got #314 merged just after releasing 0.10.3). Changes:
- Make `delay` cancellable (#314 thanks to @aikoven, Also thanks @itinance for issuing #327). 
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/3213469/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/3213469,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.10.4,https://github.com/redux-saga/redux-saga/releases/tag/v0.10.4,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.10.4,v0.10.4,False,True
3210352,2016-05-12T11:09:38Z,2016-05-12T11:12:53Z,,"Changes
- Enhanced sagaMonitor to work in Node environment (#317 thanks to @sompylasar)
- fix #287 weird error stack trace and error printing  
- fix #316 Compare `END` action by string `type`, not by reference, to allow middleware-transformed actions  
- fix #298 Long error messages should be cut in production
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/3210352/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/3210352,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.10.3,https://github.com/redux-saga/redux-saga/releases/tag/v0.10.3,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.10.3,v0.10.3,False,True
3137366,2016-05-02T00:43:19Z,2016-05-02T00:47:23Z,,"Fixed issue with the re-scheduling nested puts from forked childs (see #277 (comment))
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/3137366/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/3137366,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.10.2,https://github.com/redux-saga/redux-saga/releases/tag/v0.10.2,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.10.2,v0.10.2,False,True
3127860,2016-04-29T13:59:10Z,2016-04-29T14:08:55Z,,"A patch release fixing some issues
- fix Rejected Promise does not throw inside Generators if rejected with an undefined error #283
- Only check eventChannel matcher if defined #273 (thanks @secobarbital)
- Fixes issues of taking puts nested inside a fork call (forked child puts before fork Effect returns) #277
- Updated docs, added a section on channels
- Fixed cancellable-counter example
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/3127860/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/3127860,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.10.1,https://github.com/redux-saga/redux-saga/releases/tag/v0.10.1,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.10.1,v0.10.1,False,True
3081086,2016-04-22T20:17:33Z,2016-04-22T20:39:36Z,,"This is a major release. Make sure to read the following notes because there are some breaking changes

## Middleware API

It's no longer possible to start the Sagas in the `applyMiddleware` phase. Starting from this version Sagas must be started using the `sagaMiddleware.run(saga, ...args)` method. For a background see #235

Before this release, we used the following to start Sagas

``` javascript
import { createStore, applyMiddleware } from 'redux'
import createSagaMiddleware from 'redux-saga'

import reducer from './reducers'
import rootSaga from './sagas'


const store = createStore(
  reducer,
  applyMiddleware(createSagaMiddleware(rootSaga))
)
```

**This is no longer valid**. Instead you'll have to use the following

``` javascript
import { createStore, applyMiddleware } from 'redux'
import createSagaMiddleware from 'redux-saga'

import reducer from './reducers'
import rootSaga from './sagas'


const sagaMiddleware = createSagaMiddleware()
const store = createStore(
  reducer,
  applyMiddleware(sagaMiddleware)
)
sagaMiddleware.run(rootSaga)
```

Also see examples for an alternative way which enahnces the store with a `runSaga` method

#### Other changes

Removed deprecated `getState` argument passed to Sagas. You can use the `select` Effect to get the store state

## New fork model

In prior release, all forked tasks were _detached_ from their parents. The parent Saga terminates as soon as its own body of instructions is fully executed and errors from forked tasks do not propagate up to their parents which in some situations caused errors from forks to be swallowed. Also cancellation of a Parent task do not automatically propagate to child tasks, which means one have to maintain the list of running tasks manually and take care of cancelling them if the parent was cancelled

This new release includes a new fork model. By default, all forked tasks are attached to their parents. The whole parent + direct and indirect children form an _execution tree_ (vs _execution path_ in sequential programming). This implies new semantics from the prior releases
- A parent task will terminate only if : 1- it terminates its own body and 2- all forked tasks are terminated (this can be handy for Server Side rendering scenarios, see real-world example in the repo)
- Cancellation of a parent automatically propagates to child tasks, this means effectively the cancellation of the whole execution tree.
- Errors can now also bubble from forked tasks: Any uncaught error from a fork will propagate up to the parent and aborts the whole execution tree. The benefit is that errors are no longer swallowed. Also errors are now logged with entire execution tree

![error-rep](https://cloud.githubusercontent.com/assets/5453835/14753131/30f3dd10-08cb-11e6-869e-6519cd463ff7.png)

To create detached forks which follow the old model. You can use the new effect `spawn`.

## Cancellation as a 'third State' (no longer throw on the Generator)

The release introduces a new model for Cancellation propagation. In prior releases, Cancellation of a task throws a `SagaCancellationException` inside the cancelled task. Starting from this release, Cancellations no longer throw inside cancelled tasks. This means that special cancellation handling no longer interfere with Error handling. In prior release, any try/catch block needed this chek

``` javascript
function* saga() {
  try {
     yield call(someApi)
     yield put(SuccessAction())
  } catch(err) {
    // ensure this is not a Cancellation error before handling the error
    // We do not want to dispatch an Error on cancellations
    if(!isCancel(err))
      yield put(ErrorAction())
  }
}
```

Starting with this release; the check is no longer necessary. If you want to react to cancellations, you can do it inside finally block. A new effect `cancelled()` is provided to check if the Saga has been cancelled

``` javascript
function* saga() {
  try {
     yield call(someApi)
     yield put(SuccessAction())
  } catch(err) {
     yield put(ErrorAction())
  } finally {
     if(yield cancelled()) {
       // logic proper to cancellation
    }
  }
}
```

So `SagaCancellationException` class and `isCancelError` function were removed.

Also Cancellation are now simply logged using `console.info` in dev mode instead of warnings

For background see #266 

## Support for Channels and Event channels

The redux-saga concurrency model introduces a new abstraction channel. You can now use `take` and `put` with other sources than the Store actions. Esp. `eventChannel` allows sagas to take from external event sources. You can find a simple example in the cancellable-counter repo example. For more info see API docs.

## Introdcution of the special action `END` (support SSR and Universal Sagas)

This release introduces a special action `END` which can be used to notify that an event source has terminated. You can also dispatch an `END` to notify Sagas that no more Store actions will be fired. This can be handy in Server Side rendering to break the `while(true)` loop inside watchers.The real-world example in the repo shows a possible ways to implement universal Sagas and SSR.

`END` actions are automatically handled by the middleware and cause a Saga blocked on a take effect to automatically terminate (but it'll still wait for its forked tasks which provides support for SSR). To catch `END` values you can use the new Effect `takem` (aka takeMaybe). Using `takem` you get the explicit `END` so you can handle it manually. See #255 for more infos

## Changes in the Monitoring API

Monitor actions are no longer fired by default in dev mode. To activate monitoring, you'll have to pass the `{sagaMonitor}` option explicitly to the middleware factory. Also monitor events are now dispatched to the Saga monitor via direct method calls instead of dispatching actions to the Store. See repo examples for usage examples.

## Other changes
- It's now possible to have parallel takes (`yield [take(...), take(...)]`
- Added `delay(ms, [val])` function
- Fixed issue with interleaved synchronous dispatches (see #235)
- `runSaga`: remove deprecated `StoreIO`
- `Task` object gets a new property:`isCancelled`
- Fixed Regenerator runtime in lib/dist #252
- Fixed takeEvery doesn't work when action type is a Symbol #246
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/3081086/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/3081086,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.10.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.10.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.10.0,v0.10.0,False,True
2851198,2016-03-20T23:18:44Z,2016-03-20T23:36:18Z,,"A small patch with the following merges
- Fixes '`yield* takeEvery` causing 'not a function' error'. (issue #197)
- Better error printing in non-browser environments (PR #194)
- Added ""jsnext:main"" entry to package.json for ES2015 module import (PR #204)
- Improved logging in sagaMonitor for `takeEvery` and `takeLatest`. Now if you do a `yield takeEvery(...)` (instead of `yield* takeEvery(...)`). You'll get a better logging (previously sagaMonitor logged 'anonymous')

![yield-iter](https://cloud.githubusercontent.com/assets/5453835/13908125/75c397d2-eef4-11e5-8860-50d855fc3c0a.png)
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2851198/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2851198,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.9.5,https://github.com/redux-saga/redux-saga/releases/tag/v0.9.5,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.9.5,v0.9.5,False,True
2787286,2016-03-10T19:06:59Z,2016-03-10T19:10:10Z,,"This patch fixes the `createMockTask` result to be conform to the API of Task object (see #182)
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2787286/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2787286,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.9.4,https://github.com/redux-saga/redux-saga/releases/tag/v0.9.4,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.9.4,v0.9.4,False,True
2720944,2016-03-01T18:09:29Z,2016-03-01T18:15:46Z,,"This patch fixes synchronous errors handling (see #152 and #165)
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2720944/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2720944,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.9.3,https://github.com/redux-saga/redux-saga/releases/tag/v0.9.3,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.9.3,v0.9.3,False,True
2712068,2016-02-29T17:34:38Z,2016-02-29T17:38:21Z,,"This patch removes all `Symbol` references from the source code. Some reported issues were related to buggy/incomplete/absent `Symbol` support which caused subtle and hard to track bugs on  the source code.

The lib uses now simple namespaced strings to identify internal constants
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2712068/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2712068,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.9.2,https://github.com/redux-saga/redux-saga/releases/tag/v0.9.2,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.9.2,v0.9.2,False,True
2659334,2016-02-22T01:57:12Z,2016-02-22T02:09:36Z,,"Well, perhaps this is the fastest patch in the release history.

So following the advice of @gaearon. I decided to drop the `getState` effect and only keep `select`. To get the entire Store's state, simply use `yield select()` without arguments

## Before (in the previous v0.9.0) to get the entire state we used

``` javascript
import { getState } from 'redux-saga/effects'

function* saga() {
  // No longer valid with 0.9.1
  yield getState()
} 
```

## Now (with 0.9.1) to get the entire state we use

``` javascript
import { select } from 'redux-saga/effects'

function* saga() {
  // get the entire state
  yield select()
} 
```

## Other changes
- Using the `getState()` param passed to the root Sagas is now deprecated (this is the `getState` argument passed to the root Sagas started by the middleware, not to confound with the dropped `getState` effect above)
- Fixed SagaMonitor example code to support logging `select` effects
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2659334/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2659334,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.9.1,https://github.com/redux-saga/redux-saga/releases/tag/v0.9.1,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.9.1,v0.9.1,False,True
2659011,2016-02-22T00:05:48Z,2016-02-22T00:11:44Z,,"This release add support for 2 new Effects (thanks to @gaearon and @slorber)
- `yield select(selector, ...args)` allows a Saga to query some state slice using the provided `selector` function ([Api docs](http://yelouafi.github.io/redux-saga/docs/api/index.html#selectselector-args))
- `yield getState()` same as `select` but retrieves the entire state ([Api docs](http://yelouafi.github.io/redux-saga/docs/api/index.html#getstate))
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2659011/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2659011,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.9.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.9.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.9.0,v0.9.0,False,True
2625569,2016-02-16T17:41:10Z,2016-02-16T17:44:52Z,,"This patch fixes #118. The implementation of argument passing to forked tasks in `takeEvery`/`takeLatest` didn't match the specs in docs and examples
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2625569/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2625569,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/0.8.2,https://github.com/redux-saga/redux-saga/releases/tag/0.8.2,https://api.github.com/repos/redux-saga/redux-saga/zipball/0.8.2,0.8.2,False,True
2616149,2016-02-15T12:54:31Z,2016-02-15T12:59:28Z,,"And yet another patch release
- Added missed utils top level export for `utils`. So now we can do `import redux-saga/utils`
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2616149/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2616149,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.8.1,https://github.com/redux-saga/redux-saga/releases/tag/v0.8.1,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.8.1,v0.8.1,False,True
2613833,2016-02-15T03:29:46Z,2016-02-15T03:37:38Z,,"# Features

The release adds 2 helper functions `takeEvery` and `takeLatest` to handle the common case concurrency scenarios

For the reasons behind this addition see https://github.com/yelouafi/redux-saga/issues/70#issuecomment-182401477

You can find the docs of the functions here

http://yelouafi.github.io/redux-saga/docs/basics/UsingSagaHelpers.html

http://yelouafi.github.io/redux-saga/docs/advanced/Concurrency.html

http://yelouafi.github.io/redux-saga/docs/api/index.html#saga-helpers

# There is a breaking change in this release

The path import for Effects has changed from `redux-saga` to `redux-saga/effects`

## Before

``` javascript
import {  take, put, call, ... } from 'redux-saga'
```

## After

``` javascript
import {  take, put, call, ... } from 'redux-saga/effects'
```

# Other changes

added a helper function `isCancelError` to simplify test of Cancellation Exception

Instead of 

``` javascript
import { isCancelError } from 'redux-saga'

function* saga() {
  try {
     ...
  } catch(error) {
     if(isCance(error) 
        // error is an instance of SagaCancellationException
  }
}
```
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2613833/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2613833,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.8.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.8.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.8.0,v0.8.0,False,True
2569789,2016-02-08T01:45:21Z,2016-02-08T02:03:40Z,,"# Features

This release adds new support to dynamically running Sagas after the `applyMiddleware` phase.

In previous releases, the library provided the `runSaga` method to start Sagas dynamically. However, there were some issues due to how `runSaga` was implemented (related issues #48, #76)

In this release, the library provides a new method (thanks to @gaearon) to attach Sagas dynamically to the Store.

## Migration

[(see API docs for detailed infos)](http://yelouafi.github.io/redux-saga/docs/api/index.html#middlewarerunsaga-args)

### Before

In previous releases, you had to create a `storeIO` and passes it to `runSaga`

#### `configureStore.js`

``` javascript
import createSagaMiddleware from 'redux-saga'
import reducer from './path/to/reducer'
import startupSagas from './path/to/sagas'

export default function configureStore(initialState) {
  // Note: passing middleware as the last argument to createStore requires redux@>=3.1.0
  return createStore(
    reducer,
    initialState,
    applyMiddleware(/* other middleware, */createSagaMiddleware(...startupSagas ))
  )
}
```

#### `someModule.js`

``` javascript
import {runSaga, storeIO} from 'redux-saga'
import configureStore from './configureStore '

import dynamicSaga from './path/to/dynamicSaga'

const store = configureStore()
const task = runSaga(
  dynamicSaga(store.getState),
  storeIO(store)
)
```

---

## After

Starting from this release, you export the saga middleware itself and uses its `run` method

#### `configureStore.js`

``` javascript
import createSagaMiddleware from 'redux-saga'
import reducer from './path/to/reducer'
import startupSagas from './path/to/sagas'

// export the middleware
export const sagaMiddleware = createSagaMiddleware(...startupSagas)

export default function configureStore(initialState) {
  // Note: passing middleware as the last argument to createStore requires redux@>=3.1.0
  return createStore(
    reducer,
    initialState,
    applyMiddleware(/* other middleware, */ sagaMiddleware)
  )
}
```

#### `someModule.js`

``` javascript
import { sagaMiddleware } from './configureStore'
import dynamicSaga from './path/to/dynamicSaga'

sagaMiddleware.run(dynamicSaga)
```

# Other changes
- Task descriptor enhanced with a new `cancel` method
- Throw an Error if the Saga was provided an undefined action
- The documentation is now using GitBook thanks to @cef62
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2569789/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2569789,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.7.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.7.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.7.0,v0.7.0,False,True
2546475,2016-02-03T17:37:19Z,2016-02-03T17:41:37Z,,"Include fix #71 'yield [] should return immediately an empty array instead of blocking forever' (thanks to @slorber ) 
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2546475/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2546475,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.6.1,https://github.com/redux-saga/redux-saga/releases/tag/v0.6.1,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.6.1,v0.6.1,False,True
2523174,2016-01-30T20:02:12Z,2016-01-30T20:27:36Z,,"This release include a new generator driver core that doesnt rely on promises. This should get rid of annoying issues related to Saga missing events. 

The new implementation uses only callback notification to handle synchronous actions. It means now even when you dispatch multiple actions concecutively in a synchrnous way, Sagas waiting for those action wont miss anyone. It means also that Saga starts immediately and do not miss actions fired at startup (no more requestAnimationFrame tricks are required).

For more background see [the explanation on this issue](https://github.com/yelouafi/redux-saga/issues/50#issuecomment-174506477). This release should fixe #50 and #55

Other Changes
- **Uncaught SagaCancellationExceptions are no longer bubbled to parents**. This was necessary to make `yield cancel(...)` have true non blocking semantics. Once we cancel a task, we move immediately to the next step. If the cancelled task omits to catch its cancellation error, a warning message will be printed on the console (only in dev mode).
- Fixed 'Infinite loop when using take('*')'  (#61)
- Uncaught cancellation exception are logged into the console only in dev mode (`process.env.NODE_ENV` set to `'development'`)
- Monitor actions are also dispatched only in dev mode
- new function `createMockTask` to mock results of `fork` effects. With this function, it is now possible to test generators using `fork` like this

``` javascript
import test from 'tape';
import { take, fork, cancel } from 'redux-saga'
import { createMockTask } from 'redux-saga/lib/testUtils'

const types = { GET_DATA: 'GET_DATA'}

function callApi() { ... }

export function* getData () {
  let task
  while (true) {
    let { data } = yield take(types.GET_DATA)
    task && task.isRunning() ? yield cancel(task) : null
    task = yield fork(callApi, data)
  }
}

test('getData', assert => {

  const it = getData()

  assert.deepEqual( it.next().value, take(types.GET_DATA) )

  const mockData = {data: 'xyz'}
  const mockAction = {type: types.GET_DATA, data: mockData }

  // resume the generator with mockAction
  // since task is null, we expect yield null
  assert.deepEqual( it.next(mockAction).value, fork(callApi, mockData ) )

  // mock fork result
  const mockTask = createMockTask()

  // resume the generator with mock task
  assert.deepEqual( it.next(mockTask).value, take(types.GET_DATA) )

  // simulate a task ending
  mockTask.setRunning(false)

  // now expect a cancel
  assert.deepEqual( it.next(mockAction).value, cancel(mockTask) )

  assert.end()
})
```
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2523174/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2523174,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.6.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.6.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.6.0,v0.6.0,False,True
2462088,2016-01-20T18:26:39Z,2016-01-20T18:33:03Z,,"## Features
- `call`, `cps` and `fork` both support providing 'this' context for invoking instance methods

## Fixes
- `take` will now throw an error if provided with an argument and that argument is undefined. (see #35.  thanks @tgriesser) 

Also migrated examples to webpack. All build infrastructure use webpack
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2462088/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2462088,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.5.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.5.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.5.0,v0.5.0,False,True
2400329,2016-01-10T03:47:47Z,2016-01-10T03:58:36Z,,"- Fixed issue: apply not exported from the main module
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2400329/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2400329,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.4.1,https://github.com/redux-saga/redux-saga/releases/tag/v0.4.1,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.4.1,v0.4.1,False,True
2400235,2016-01-10T02:23:04Z,2016-01-10T02:36:19Z,,"## Features
- [Task cancellation support](https://github.com/yelouafi/redux-saga#task-cancellation). Thanks to @aikoven for this one. (issue #14).
- Saga monitoring support (The [sagaMonitor](https://github.com/yelouafi/redux-saga/blob/master/examples/sagaMonitor.js) in the examples folder implements a simple logger. You can print a trace of the sagas control flow in the console by dispatching a `LOG_EFFECT` action. You can play with the repo  examples by typing `store.dispatch({type: 'LOG_EFFECT'})` in the console.

Below a screenshot from the counter example.

![counter-log](https://cloud.githubusercontent.com/assets/5453835/12219590/f844bcf8-b741-11e5-82dd-dcc9bb866a5a.png)
- [Support for starting Sagas dynamically](https://github.com/yelouafi/redux-saga#dynamically-starting-sagas-with-runsaga) (issues #5 and #13)
- new `yield apply(context, fn, args)` effect for calling function with `this` context  (issue #27)
- [Support for umd builds](https://github.com/yelouafi/redux-saga#using-umd-build-in-the-browser) Thanks to @cef62 
",https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2400235/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2400235,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.4.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.4.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.4.0,v0.4.0,False,True
2315788,2015-12-19T12:20:07Z,2015-12-19T12:27:58Z,,,https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2315788/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2315788,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.3.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.3.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.3.0,v0.3.0,False,True
2279927,2015-12-13T17:51:29Z,2015-12-13T17:53:21Z,,,https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2279927/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2279927,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.2.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.2.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.2.0,v0.2.0,False,True
2221731,2015-12-02T17:06:02Z,2015-12-02T17:52:00Z,,,https://api.github.com/users/yelouafi,5453835,yelouafi,https://api.github.com/repos/redux-saga/redux-saga/releases/2221731/assets,https://api.github.com/repos/redux-saga/redux-saga/releases/2221731,master,https://api.github.com/repos/redux-saga/redux-saga/tarball/v0.1.0,https://github.com/redux-saga/redux-saga/releases/tag/v0.1.0,https://api.github.com/repos/redux-saga/redux-saga/zipball/v0.1.0,v0.1.0,False,True
