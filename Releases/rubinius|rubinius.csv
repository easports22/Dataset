id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
7913760,2017-09-27T16:58:29Z,2017-09-27T17:19:32Z,Release 3.86,"Version 3.86 (2017-09-27)

* Added stubs for remaining instruction specs. (Brian Shirai)
* Retire insns/interp machine tests. (Brian Shirai)
Since starting on the new interpreter and instruction set, WebAssembly has
been officially adopted by all major browser vendors and has become a
legitimate implementation target.

To facilitate transitioning to multiple VM targets, the instruction set needs
to be specified in a format that is target-independent. The spec/instructions
specs are a reasonable intermediate target, but are also a step towards a
language-neutral textual asm format and assembler that will provide complete
targe independence.

* Removed old interpreter. (Brian Shirai)
* fixed zsuper instruction for keyword arguments and arguments placeholder (Andrew Aladjev)
* improved specs for super arguments (Andrew Aladjev)",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/7913760/assets,https://api.github.com/repos/rubinius/rubinius/releases/7913760,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.86,https://github.com/rubinius/rubinius/releases/tag/v3.86,https://api.github.com/repos/rubinius/rubinius/zipball/v3.86,v3.86,False,False
7870265,2017-09-24T20:08:06Z,2017-09-24T20:26:53Z,Release 3.85,"Version 3.85 (2017-09-24)

* Fixed running ensure in new interpreter. (Brian Shirai)
* Fixed new interpreter for break. (Brian Shirai)
* Added interpreter spec for return in block. (Brian Shirai)
* Added logging when creating experimental interpreter. (Brian Shirai)
* Fixed raise_exc, raise_return insn interpreters. (Brian Shirai)
* Added configuration switch for experimental interpreter. (Brian Shirai)
* Reworked handling unwinds in new interpreter. (Brian Shirai)
* Updated daedalus. (Brian Shirai)
* Fixed interpreter vm tests. (Brian Shirai)
* Rename run_exception insn. (Brian Shirai)
* Updated rubinius-compiler gem. (Brian Shirai)
* Reworked run_exception instruction as unwind. (Brian Shirai)
* Add unwind check to bytecode verifier. (Brian Shirai)
* Bumped compiler and AST versions. (Brian Shirai)
* Fixes for unwind instruction. (Brian Shirai)
* Added basic UnwindSite caching. (Brian Shirai)
* Use UnwindSite for unwinding the call stack. (Brian Shirai)
* Set up CallFrame for instruction tests. (Brian Shirai)
* Updated compiler version. (Brian Shirai)
* Fixed more new interpreter insns for unwind. (Brian Shirai)
* Updated daedalus. (Brian Shirai)
* Fixed handling return value in new interpreter. (Brian Shirai)
* Fixed setting call flags in new interpreter. (Brian Shirai)
* Fixed storing literals in new interpreter. (Brian Shirai)
* Fixed unwind in new interpreter. (Brian Shirai)
* Fixed break in new interpreter. (Brian Shirai)
* Temporary fix for IP to line in new interpreter. (Brian Shirai)
* Enable experimental interpreter for CI. (Brian Shirai)
* Updated gems_list.txt. (Brian Shirai)",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/7870265/assets,https://api.github.com/repos/rubinius/rubinius/releases/7870265,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.85,https://github.com/rubinius/rubinius/releases/tag/v3.85,https://api.github.com/repos/rubinius/rubinius/zipball/v3.85,v3.85,False,False
7261274,2017-08-02T19:06:35Z,2017-08-02T19:23:34Z,Release 3.84,"Version 3.84 (2017-08-02)

* Added start of instruction specs. (Brian Shirai)
* Use new interpreter for instruction specs. (Brian Shirai)
* Add example branch instruction spec. (Brian Shirai)
* Added basic run_exception insn spec. (Brian Shirai)
* Added exception rescue spec. (Brian Shirai)
* Added rb_hash_fetch C-API. Closes #3753. (Brian Shirai)",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/7261274/assets,https://api.github.com/repos/rubinius/rubinius/releases/7261274,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.84,https://github.com/rubinius/rubinius/releases/tag/v3.84,https://api.github.com/repos/rubinius/rubinius/zipball/v3.84,v3.84,False,False
7183080,2017-07-26T23:41:14Z,2017-07-27T00:00:44Z,Release 3.83,"Version 3.83 (2017-07-26)

* Fix a typo in the GitHub issue template (#3750) (Jos Ahrens)
Corrects a typo 'issued' -> 'issue' in 8.c
* Add Random::DEFAULT as an instance of Random (#3752) (Lin Jen-Shin (godfat))
This is basically for MRI compatibility. This could be verified by:

    > ruby -ve 'p ObjectSpace.each_object(Random).to_a == [Random::DEFAULT]'
    ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
    true

Closes https://github.com/rubinius/rubinius/issues/3296",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/7183080/assets,https://api.github.com/repos/rubinius/rubinius/releases/7183080,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.83,https://github.com/rubinius/rubinius/releases/tag/v3.83,https://api.github.com/repos/rubinius/rubinius/zipball/v3.83,v3.83,False,False
6858795,2017-06-28T04:30:45Z,2017-06-28T04:49:33Z,Release 3.82,"Version 3.82 (2017-06-27)

* For rubinius/rubinius#3747 (#3748) (NightFeather)
when stop is nil or omitted,
should be set to infinity_value,
and sign would be same with step.

I don't know a better way the cover this in spec though
* Remove unneeded specs. (Brian Shirai)
Specs should positively test values or state changes. There is an infinite
number of ways code could not raise an error, so asserting a value created or
state changed is the preferred way to write specs.

* Attempt to work around broken Travis image. (Brian Shirai)
The Travis Trusty image update fails to set STDOUT as a TTY.

* Revert ""Attempt to work around broken Travis image."" (Brian Shirai)
This reverts commit 96887debc1b51ebe68fa9299577c6684858e1748.

* Guard TTY spec. (Brian Shirai)
Travis CI sporadically breaks their images such that STDOUT isn't a TTY.",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/6858795/assets,https://api.github.com/repos/rubinius/rubinius/releases/6858795,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.82,https://github.com/rubinius/rubinius/releases/tag/v3.82,https://api.github.com/repos/rubinius/rubinius/zipball/v3.82,v3.82,False,False
6669514,2017-06-10T05:12:37Z,2017-06-10T05:32:14Z,Release 3.81,"Version 3.81 (2017-06-09)

* Extract Array#{inspect, to_s} object inspect. (Brian Shirai)
* Fixed Hash#{inspect, to_s}. (Brian Shirai)",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/6669514/assets,https://api.github.com/repos/rubinius/rubinius/releases/6669514,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.81,https://github.com/rubinius/rubinius/releases/tag/v3.81,https://api.github.com/repos/rubinius/rubinius/zipball/v3.81,v3.81,False,False
6668020,2017-06-09T21:32:57Z,2017-06-09T21:51:45Z,Release 3.80,"Version 3.80 (2017-06-09)

* Fixed Array#{inspect, to_s}. Fixes #3746. (Brian Shirai)",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/6668020/assets,https://api.github.com/repos/rubinius/rubinius/releases/6668020,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.80,https://github.com/rubinius/rubinius/releases/tag/v3.80,https://api.github.com/repos/rubinius/rubinius/zipball/v3.80,v3.80,False,False
6578896,2017-06-01T21:28:14Z,2017-06-01T21:46:53Z,Release 3.79,"Version 3.79 (2017-06-01)

* Kernel: allow caller{,_locations} to accept a Range (#3745) (Tamir Duberstein)
Closes #3744.",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/6578896/assets,https://api.github.com/repos/rubinius/rubinius/releases/6578896,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.79,https://github.com/rubinius/rubinius/releases/tag/v3.79,https://api.github.com/repos/rubinius/rubinius/zipball/v3.79,v3.79,False,False
6407220,2017-05-16T19:59:05Z,2017-05-16T20:18:03Z,Release 3.78,"Version 3.78 (2017-05-16)

* Fix nil.rb. Closes #3740. (Brian Shirai)
* Added UncaughtThrowError#tag. Fixes #3742. (Brian Shirai)
* Add new GitHub token. (Brian Shirai)",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/6407220/assets,https://api.github.com/repos/rubinius/rubinius/releases/6407220,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.78,https://github.com/rubinius/rubinius/releases/tag/v3.78,https://api.github.com/repos/rubinius/rubinius/zipball/v3.78,v3.78,False,False
6301784,2017-05-06T21:06:27Z,2017-05-06T21:25:29Z,Release 3.77,"Version 3.77 (2017-05-06)

* Added basic &. specs. (Brian Shirai)
* Update Rubinius processor for a&.m = b. Fixes #3739. (Brian Shirai)",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/6301784/assets,https://api.github.com/repos/rubinius/rubinius/releases/6301784,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.77,https://github.com/rubinius/rubinius/releases/tag/v3.77,https://api.github.com/repos/rubinius/rubinius/zipball/v3.77,v3.77,False,False
6301511,2017-05-06T19:24:36Z,2017-05-06T19:42:51Z,Release 3.76,"Version 3.76 (2017-05-06)

* Fixed Fiber.yield not propagating rescued exception. Fixes #3706. (Brian Shirai)
* Tag timezone spec failing on macOS. (Brian Shirai)
* Removed rubinius::bug usage from FinalizerThread. (Brian Shirai)
* Reworked Fiber::cancel. (Brian Shirai)",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/6301511/assets,https://api.github.com/repos/rubinius/rubinius/releases/6301511,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.76,https://github.com/rubinius/rubinius/releases/tag/v3.76,https://api.github.com/repos/rubinius/rubinius/zipball/v3.76,v3.76,False,False
6158523,2017-04-22T22:59:48Z,2017-04-22T23:18:13Z,Release 3.75,"Version 3.75 (2017-04-22)

* Fixed spawning subprocess from Fiber. Fixes #3725. (Brian Shirai)
* Disallow fork() from non-root Fiber. Related to #3725. (Brian Shirai)
In Rubinius, Fiber is composed with a native OS thread. A consequence of this
is that when fork() is called, *only* the current OS thread is carried over to
the new process.

This contrasts with implementing Fiber as a user-mode ""stack"" that is
multiplexed onto a single OS thread. In this case, all the data from multiple
Fibers are carried over to the new process with the OS thread executing the
fork() system call.

The user-mode ""stack"" implementation has a significant drawback in not being
reliably portable across systems (eg porting to WebAssembly would not permit
physically modifying a ""thread"" stack). Additionally, this approach obscures
the program's operation from the OS scheduler and complicates debugging the
process.

The advantages of composing Fiber with a first-class OS thread are the
opposite. They are completely portable, they offer the OS clear visibility
into the operation of the program, they inspectable by debuggers, and the
resource overhead is as readily controllable as with user-mode ""stack"" Fibers.

The drawbacks of the user-mode ""stack"" approach are significant, so Rubinius
has chosen to implement Fiber using first-class OS threads. This makes use of
Fiber incompatible with using fork(). However, Fiber is nothing more than a
limited Thread, and since Rubinius gives full control over the resources
allocated for Thread, Fiber offers no significant advantage over Thread aside
from the abstraction of the single lock associated with all the Fibers on a
Thread that guarantees serial execution of all Fiber code. This could be
mimicked by pure Ruby code and instances of Thread.

Since the use case of Fiber and fork() are mostly distinct, the limitation of
not being able to call fork() from a non-root Fiber is considered an
acceptable trade-off for the advantages of proper OS thread support of Fiber.

* Cleaned up Thread init_lock. (Brian Shirai)
At one time, starting a Thread used a lock and this naming was a relic of
that. Now creating a Thread is properly sequenced and does not need a lock.

Also, this lock is used at execution leaf nodes around state and when no
fork() can be active, so re-init'ing the lock on process transitions is not
necessary.

* Simplify MachineThreads. (Brian Shirai)
MachineThreads was introduced when state control around fork/exec was ad hoc
and scattered. The boundaries were also not well-defined and there were
numerous race conditions.

The boundaries are now much better defined and some of the 'events' have not
been needed. There is more restructuring needed and if the removed events turn
out to be required, they can be re-added.",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/6158523/assets,https://api.github.com/repos/rubinius/rubinius/releases/6158523,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.75,https://github.com/rubinius/rubinius/releases/tag/v3.75,https://api.github.com/repos/rubinius/rubinius/zipball/v3.75,v3.75,False,False
6094788,2017-04-17T04:15:47Z,2017-04-17T04:34:14Z,Release 3.74,"Version 3.74 (2017-04-16)

* Update rake version. Closes #3704. (Brian Shirai)
* Updated gems. (Brian Shirai)
* Update Melbourne. (Brian Shirai)",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/6094788/assets,https://api.github.com/repos/rubinius/rubinius/releases/6094788,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.74,https://github.com/rubinius/rubinius/releases/tag/v3.74,https://api.github.com/repos/rubinius/rubinius/zipball/v3.74,v3.74,False,False
5943662,2017-04-01T03:12:02Z,2017-04-01T03:36:19Z,Release 3.73,"Version 3.73 (2017-03-31)

* Added deprecation for Executable#primitive. (Brian Shirai)
* Added Executable#tags. (Brian Shirai)
* Added Executable#tags. (Brian Shirai)
* Added {Bignum, Fixnum}.bit_length. Fixes #3728. (Brian Shirai)
* Fixed Math.log2 for huge Bignums. (Brian Shirai)",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/5943662/assets,https://api.github.com/repos/rubinius/rubinius/releases/5943662,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.73,https://github.com/rubinius/rubinius/releases/tag/v3.73,https://api.github.com/repos/rubinius/rubinius/zipball/v3.73,v3.73,False,False
5526267,2017-02-21T20:16:58Z,2017-02-21T20:36:06Z,Release 3.72,"Version 3.72 (2017-02-21)
- make sure errno from child process is preserved (Chuck Remes)
- preserve errno for backtick child subprocesses (Chuck Remes)
- add tests for instructions:ret (Chuck Remes)
- mock module that handles +const_missing+ call (Chuck Remes)
- add tests for instructions::find_const (Chuck Remes)
- add tests for instructions::push_const (Chuck Remes)
- use 'nation/city' format for timezone names so offsets are looked up properly (Chuck Remes)
- remove separate code branch for OpenBSD and FreeBSD Both BSDs deprecated and removed the timelocal function several releases ago. They now use mktime just like most every other UNIX OS. (Chuck Remes)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/5526267/assets,https://api.github.com/repos/rubinius/rubinius/releases/5526267,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.72,https://github.com/rubinius/rubinius/releases/tag/v3.72,https://api.github.com/repos/rubinius/rubinius/zipball/v3.72,v3.72,False,False
5414406,2017-02-09T22:40:14Z,2017-02-09T22:58:45Z,Release 3.71,"Version 3.71 (2017-02-09)
- add tests for instructions::send_method (Chuck Remes)
- add tests for instructions::send_stack (Chuck Remes)
- add test for instructions::send_stack_with_block (Chuck Remes)
- add test for instructions::rotate (Chuck Remes)
- add work in progress test for instructions::send_vcall (Chuck Remes)
- better tests for instructions::send_stack (Chuck Remes)
  The test_send_stack_execute_returns_null tests the situation where
  no value is returned from the method, e.g. nullptr.

Second test test_send_stack_method_no_method_error tests code path
where the method is not found and raises a NoMethodError. This had
the side effect of leaving arguments on the stack. This is a
problem that requires a bug fix to the instruction.
- clean up stack before trying to execute method (Chuck Remes)
- verify stack is cleaned up before NoMethodError raised (Chuck Remes)
- clean up stack before executing method in case it raises error (Chuck Remes)
- test to verify handling of method returning nullptr (Chuck Remes)
- verify stack is cleaned up when NoMethodError raised (Chuck Remes)
- clean up stack before executing method (Chuck Remes)
- handle method that returns nullptr properly (Chuck Remes)
- test for stack cleanup on instructions::send_stack_with_splat when NoMethodError raised (Chuck Remes)
- clean up stack before executing method (Chuck Remes)
- finish other tests for instructions::send_stack_with_splat (Chuck Remes)
- free allocated buffes on an early return to prevent memory leak (Chuck Remes)
- allow for scan-build to substitute CC and CXX compilers (Chuck Remes)
- fix typo (Chuck Remes)
- add tests for instructions::send_super_stack_with_block (Chuck Remes)
- clean up stack prior to calling method that may raise exception (Chuck Remes)
- add tests for instructions::send_super_stack_with_splat (Chuck Remes)
- verify stack cleared before method call that could raise exception (Chuck Remes)
- add tests for instructions::send_vcall (Chuck Remes)
- add test for instructions::set_const (Chuck Remes)
- add test for instructions::set_const_at (Chuck Remes)
- add tests for instructions::set_ivar (Chuck Remes)
- add tests for instructions:::set_local, set_stack_local, and store_my_field (Chuck Remes)
- compatible with  musl libc (SquallATF)
  Mapping unsigned to uint to compatible with musl libc
- freebsd supports birthtime so test for it (Chuck Remes)
- update US/Eastern to use modern zone terminoloy America/New_York (Chuck Remes)
- fix two small FFI bugs (Chuck Remes)
  Bug 1 was trying to find the string index of the integer 0. For this
  to work the system calls :to_str on the Fixnum which fails. The fix
  is to specify the nul string explicitly.

Bug 2 was more of an issue of convenience. The FFI.config facility
builds FFI::Struct class layouts from data in runtime/platform.conf.
Some structs have char arrays. The original code allocated the proper
space but it did not associate an array with a :char_array field.
Therefore trying to access the field to assign to it directly did
not work.
e.g.
struct = RubySL::Socket::Foreign::SockaddrUn.new
struct[:sun_path] = ""/some/path"" # failed!
This fix allows the direct assignment of string fields built using
the FFI.config convenience method.
- start work on yield_stack instruction (Chuck Remes)
- update gems list to include rubysl-socket 2.2.1 (Chuck Remes)
- rescue subprocess EPIPE so we do not see unnecessary backtrace during spec run (Chuck Remes)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/5414406/assets,https://api.github.com/repos/rubinius/rubinius/releases/5414406,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.71,https://github.com/rubinius/rubinius/releases/tag/v3.71,https://api.github.com/repos/rubinius/rubinius/zipball/v3.71,v3.71,False,False
5252708,2017-01-24T16:01:24Z,2017-01-24T16:18:45Z,Release 3.70,"Version 3.70 (2017-01-24)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/5252708/assets,https://api.github.com/repos/rubinius/rubinius/releases/5252708,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.70,https://github.com/rubinius/rubinius/releases/tag/v3.70,https://api.github.com/repos/rubinius/rubinius/zipball/v3.70,v3.70,False,False
4691793,2016-11-17T20:26:54Z,2016-11-17T20:43:37Z,Release 3.69,"Version 3.69 (2016-11-17)
- fix case where IO#gets blocks forever on read to char boundary (Chuck Remes)
  This was a tough one. WEBrick would hang when reading an HTTP
  header. The cause was that IO::EachReader#read_to_separator_with_limit
  blocked forever trying to ""peek ahead"" to ensure we are reading
  to the end of a proper character boundary. In this case the socket
  had no more data to recv but it also does not set EOF, therefore
  the read blocked indefinitely. The simple fix was to move to a
  non-blocking read and skip the read entirely if the string
  already had a valid encoding. However, this broke several specs
  for reading multi-byte chars. To resolve that problem required
  making sure that when read_nonblock returned an empty buffer that
  this buffer was set to ASCII_8BIT instead of whatever the default
  external coding was set to (usually UTF-8). The fixes are all
  relatively simple but it took many hours to chase this down and
  figure out the minimal approach to fix it.
- DRY up allocation of 8-bit string buffers (Chuck Remes)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4691793/assets,https://api.github.com/repos/rubinius/rubinius/releases/4691793,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.69,https://github.com/rubinius/rubinius/releases/tag/v3.69,https://api.github.com/repos/rubinius/rubinius/zipball/v3.69,v3.69,False,False
4641778,2016-11-12T03:20:33Z,2016-11-12T03:39:12Z,Release 3.68,"Version 3.68 (2016-11-10)
- Use llvm-config --libs instead of --libfiles. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4641778/assets,https://api.github.com/repos/rubinius/rubinius/releases/4641778,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.68,https://github.com/rubinius/rubinius/releases/tag/v3.68,https://api.github.com/repos/rubinius/rubinius/zipball/v3.68,v3.68,False,False
4598212,2016-11-08T02:51:24Z,2016-11-08T03:09:20Z,Release 3.67,"Version 3.67 (2016-11-08)
- Catch C++ exceptions sooner. (Brian Shirai)
  We attempt to catch C++ exceptions as close to where they occur as possible.
  This means at the last executed managed code (eg method) so that as much
  context as possible can be given.
- Added extra C++ exception catch to new interpreter. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4598212/assets,https://api.github.com/repos/rubinius/rubinius/releases/4598212,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.67,https://github.com/rubinius/rubinius/releases/tag/v3.67,https://api.github.com/repos/rubinius/rubinius/zipball/v3.67,v3.67,False,False
4586599,2016-11-07T03:20:09Z,2016-11-07T03:37:43Z,Release 3.66,"Version 3.66 (2016-11-07)
- Fixed Bundler, brew wars. (Brian Shirai)
- Fixed setting ThreadGroup for signal handler Thread. (Brian Shirai)
  In Rubinius, trapped signals are handled in a dedicated Thread.

In Ruby, the Thread where a signal is processed isn't defined, but the
assumption is that the signal handler runs in Thread.main (as observed in Ruby
behavior).

Also undefined in Ruby is what ThreadGroup a Thread _created in a signal
handler_ should be added to. Going with the assumption that the signal handler
proc is run in Thread.main, we assume the new Thread should be added to
Thread.main.group.

We now set the signal handler Thread's group to the same group as Thread.main,
so that threads created in a signal handler proc have a group and are added to
a group.
- Better backtrace rendering for copy-paste. (Brian Shirai)
  Rubinius renders backtraces with the receiver+method right justified and the
  source location trailing. Previously, the source location was split when
  exceeding the available terminal width to avoid cluttering the left side where
  the receiver+method was rendered to aid visibility of the most important
  backtrace information.

Unfortunately, splitting up the source location makes copy-pasting the path to
edit a source file very tedious.

Now, the source location is rendered as an unbroken sequence of characters but
starting on a new line if the total backtrace line exceeds the terminal width.
This preserves the readability of the receiver+method, while also preserving
the ability to copy-paste the source location.
- Improved backtrace rendering contrast. (Brian Shirai)
  Rubinius introduced colorized backtraces to improve readability.

Unfortunately, color is problematic due to the perception of colors and the
interaction of color with terminal colors, which something which Rubinius has
no control over.

The goal of readability in backtraces is an important one. There are two
primary pieces of information in each backtrace line: 1. receiver+method; and
2. source code location, file+line number.

The current rendering approach is to bold the receiver+method and separate the
source line on a new line when the total backtrace line exceeds the terminal
width. This provides contrast that improves scanning the backtrace on primary
information, the receiver+method, and easily selecting secondary information,
the source location, when necessary.
- Align method names in backtrace. (Brian Shirai)
  It is a very common convention (in Rubinius, at least) to fully render a
  method as 'A::B::C{#, .}name', where A::B:: is an optional namespace and C is
  the class of the receiver and # indicates an instance method, while .
  indicates a module method.

As such, this convention carries over without much question to rendering
backtraces. However, the context of consuming a backtrace requires different
conventions, but ones that are not foreign.

So, for rendering backtraces, the conventions are retained but the ordering is
changed slightly to improve processing the information. There are now four
basic components to a backtrace line (for an object-oriented method): 1. the
method name; 2. the instance/module indicator; 3. the fully-scoped receiver
name; and 4. the source code location.

The first thing that needs to be located and digested is the method name, so
the method names are right aligned allowing both easily reading the method
name and quick indexing for the second important piece of information, the
receiver name. The source location trails and may be on a new line if the
total backtrace line rendering exceeds the terminal width.

This rendering better orders information in the backtrace based on the
hierarchy of important information (method name > instance/module indicator >
receiver name > source location). It also balances the tensions between making
an individual line of a backtrace readable and making the whole thing
scannable and readable. When rendering the full method name as A::B::C#name,
the variability of the A::B::C component pushed many names too far to the
right, leaving a very jagged left edge that is more difficult to scan, as well
as burying the method name (the primary element) embedded in the middle of a
bunch of character noise.
- Fixed rendering method name. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4586599/assets,https://api.github.com/repos/rubinius/rubinius/releases/4586599,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.66,https://github.com/rubinius/rubinius/releases/tag/v3.66,https://api.github.com/repos/rubinius/rubinius/zipball/v3.66,v3.66,False,False
4537107,2016-11-01T13:56:16Z,2016-11-01T14:14:30Z,Release 3.65,"Version 3.65 (2016-11-01)
- Added C-API rb_memhash. (Brian Shirai)
- Updated rubysl-openssl version. (Brian Shirai)
- Updates to issues/PR templates. (Brian Shirai)
- Try putting README.md under .github. (Brian Shirai)
- Revert ""Try putting README.md under .github."" (Brian Shirai)
  This reverts commit 320f5045f09473125dad16091f54c15769ed2430.
- Updated README. (Brian Shirai)
- Don't use enum as last arg for varargs. /ht @heftig. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4537107/assets,https://api.github.com/repos/rubinius/rubinius/releases/4537107,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.65,https://github.com/rubinius/rubinius/releases/tag/v3.65,https://api.github.com/repos/rubinius/rubinius/zipball/v3.65,v3.65,False,False
4522424,2016-10-31T00:45:52Z,2016-10-31T01:05:42Z,Release 3.64,"Version 3.64 (2016-10-31)
- Updated daedalus-core gem. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4522424/assets,https://api.github.com/repos/rubinius/rubinius/releases/4522424,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.64,https://github.com/rubinius/rubinius/releases/tag/v3.64,https://api.github.com/repos/rubinius/rubinius/zipball/v3.64,v3.64,False,False
4509997,2016-10-28T12:39:41Z,2016-10-28T12:56:57Z,Release 3.63,"Version 3.63 (2016-10-28)
- Try re-enabling Travis OSX. (Brian Shirai)
- Re-disable Travis OSX. STDIN is not a TTY. (Brian Shirai)
  https://travis-ci.org/rubinius/rubinius/jobs/167911681#L5416
- Removed obsolete compiler define RBX_PROFILER. (Brian Shirai)
- Attempt to avoid breaking LLVM compiler flags. (Brian Shirai)
- Updated gems. (Brian Shirai)
- More instruction tests. (Brian Shirai)
- More interpreter tests. (Brian Shirai)
- Tests for check_frozen instruction. (Brian Shirai)
- Moved builtin/ to class/. (Brian Shirai)
  The name 'builtin' is not very descriptive. Now that we are going to have
  managed objects that are both object-oriented and simple data, and both are
  'built in', we need more descriptive names for the directories, so the new
  names are 'class' and 'data', which parallels the names used in the code.
- Fixed path to website releases data. (Brian Shirai)
- For Rubinius build on aarch64-linux-gnu (Raspberry Pi 3). (#3705) (medols)
- Specs for rb_obj_method_arity. (Brian Shirai)
- Added rb_obj_method_arity. Fixes #3708. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4509997/assets,https://api.github.com/repos/rubinius/rubinius/releases/4509997,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.63,https://github.com/rubinius/rubinius/releases/tag/v3.63,https://api.github.com/repos/rubinius/rubinius/zipball/v3.63,v3.63,False,False
4396569,2016-10-15T05:19:22Z,2016-10-15T05:36:48Z,Release 3.62,"Version 3.62 (2016-10-14)
- Fixed building OSX packages. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4396569/assets,https://api.github.com/repos/rubinius/rubinius/releases/4396569,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.62,https://github.com/rubinius/rubinius/releases/tag/v3.62,https://api.github.com/repos/rubinius/rubinius/zipball/v3.62,v3.62,False,False
4386911,2016-10-14T04:16:11Z,2016-10-14T04:34:15Z,Release 3.61,"Version 3.61 (2016-10-13)
- Updated website repo name. (Brian Shirai)
- Install zlib in Docker container for building Nokogiri. (Brian Shirai)
- Update README.md (#3702) (LTheGreats)
  Got rid of empty link.
- Updated README to match #3702.  (Brian Shirai)
- Updated debugger gem version. (Brian Shirai)
- Attempt to use Homebrew OpenSSL on Travis OSX. (Brian Shirai)
- Try force linking openssl on Travis OSX. (Brian Shirai)
- Revert ""Try force linking openssl on Travis OSX."" (Brian Shirai)
  This reverts commit 6a864cf60220da6c79105ca0926c6b1e44adac78.
- Updated rubysl-socket to 2.2. (Brian Shirai)
- Move deploy to Travis Linux and disable OSX. (Brian Shirai)
- Install LLVM 3.8 on Travis Linux. (Brian Shirai)
- Use bsdtar. (Brian Shirai)
  The bsdtar program supports '-s pattern' but GNU tar does not.
- Install bsdtar on Travis Linux. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4386911/assets,https://api.github.com/repos/rubinius/rubinius/releases/4386911,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.61,https://github.com/rubinius/rubinius/releases/tag/v3.61,https://api.github.com/repos/rubinius/rubinius/zipball/v3.61,v3.61,False,False
4205663,2016-09-22T16:17:16Z,2016-09-22T16:56:02Z,Release 3.60,"Version 3.60 (2016-09-21)
- Bump libsodium to 1.0.11 (#3696) (Jesse Cooke)
- Specs for reopening class/module private constant. (Brian Shirai)
- Apple 10.12 deprecates syscall(2). (Brian Shirai)
- Removed support for private constants. Closes #3697. (Brian Shirai)
  Private constants are a bad idea, and supporting them isn't necessarily a good
  idea.

Private constants do not add any capability to Ruby. They merely restrict
programs that would otherwise run. For this reason, not supporting private
constants in Rubinius doesn't prohibit any code that would otherwise run in
Ruby, except for the fruitless class of code that soley relies on accessing a
private constant to raise an exception.

The exception that is raised is a NameError, which causes confusion between a
constant not being defined at all, and therefore able to be defined or
autoloaded, etc., and the constant being defined but private, and therefore
_prohibiting_ defining the constant. To distinguish between these cases would
require parsing the exception text itself.

Despite being labeled private and superficially not accessible, it is easy to
actually access the constant. So no well-meaning code is actually inhibited by
labeling a constant private.

If code were presented that relied on private constants being private, in the
positive sense (ie _added_ capability, not merely prohibited capability), we
can revisit support for private constants.
- Guard File.setgid? spec for superuser. (Brian Shirai)
- Properly include stdint.h for uint64_t. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4205663/assets,https://api.github.com/repos/rubinius/rubinius/releases/4205663,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.60,https://github.com/rubinius/rubinius/releases/tag/v3.60,https://api.github.com/repos/rubinius/rubinius/zipball/v3.60,v3.60,False,False
4114059,2016-09-13T01:12:56Z,2016-09-13T04:45:55Z,Release 3.59,"Version 3.59 (2016-09-12)
- Don't double quote OSX configure parameters. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4114059/assets,https://api.github.com/repos/rubinius/rubinius/releases/4114059,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.59,https://github.com/rubinius/rubinius/releases/tag/v3.59,https://api.github.com/repos/rubinius/rubinius/zipball/v3.59,v3.59,False,False
4043987,2016-09-03T05:14:27Z,2016-09-03T05:43:39Z,Release 3.58,"Version 3.58 (2016-09-02)
- Disable rubygems checking missing extensions. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4043987/assets,https://api.github.com/repos/rubinius/rubinius/releases/4043987,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.58,https://github.com/rubinius/rubinius/releases/tag/v3.58,https://api.github.com/repos/rubinius/rubinius/zipball/v3.58,v3.58,False,False
4014916,2016-08-31T04:10:25Z,2016-08-31T04:54:58Z,Release 3.57,"Version 3.57 (2016-08-30)
- Clang 3.8 disallows return NULL for intptr_t function type. (Brian Shirai)
- Use -latomic if it exists. Related to #3693. (Brian Shirai)
- Use space before & after -latomic. Fixes #3693. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/4014916/assets,https://api.github.com/repos/rubinius/rubinius/releases/4014916,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.57,https://github.com/rubinius/rubinius/releases/tag/v3.57,https://api.github.com/repos/rubinius/rubinius/zipball/v3.57,v3.57,False,False
3931452,2016-08-20T05:03:59Z,2016-08-20T05:36:14Z,Release 3.56,"Version 3.56 (2016-08-19)
- Add typedef for id_t (#3691) (Chris Olstrom)
  Resolves a compilation failure under musl libc.
- Force use of llvm 3.8 for Homebrew package. (Brian Shirai)
- Force llvm 3.8 for building Travis OSX binary. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3931452/assets,https://api.github.com/repos/rubinius/rubinius/releases/3931452,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.56,https://github.com/rubinius/rubinius/releases/tag/v3.56,https://api.github.com/repos/rubinius/rubinius/zipball/v3.56,v3.56,False,False
3910192,2016-08-17T18:41:11Z,2016-08-17T19:17:55Z,Release 3.55,"Version 3.55 (2016-08-17)
- Synchronize all access to struct dirent, via @heftig. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3910192/assets,https://api.github.com/repos/rubinius/rubinius/releases/3910192,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.55,https://github.com/rubinius/rubinius/releases/tag/v3.55,https://api.github.com/repos/rubinius/rubinius/zipball/v3.55,v3.55,False,False
3901230,2016-08-16T20:29:47Z,2016-08-16T21:05:42Z,Release 3.54,"Version 3.54 (2016-08-16)
- Replace deprecated readdir_r. (Brian Shirai)
  Calls to readdir(3) are not guaranteed to be thread safe so we introduce a
  spinlock around calls. This synchronization will usually not be necessary, but
  we have to ensure correctness.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3901230/assets,https://api.github.com/repos/rubinius/rubinius/releases/3901230,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.54,https://github.com/rubinius/rubinius/releases/tag/v3.54,https://api.github.com/repos/rubinius/rubinius/zipball/v3.54,v3.54,False,False
3892587,2016-08-15T22:13:34Z,2016-08-15T22:48:43Z,Release 3.53,"Version 3.53 (2016-08-15)
- Start adding interpreter tests. (Brian Shirai)
- Added reference count bits to new memory header. (Brian Shirai)
- Updated daedalus gem. (Brian Shirai)
- Updated rubygems to 2.6.6. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3892587/assets,https://api.github.com/repos/rubinius/rubinius/releases/3892587,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.53,https://github.com/rubinius/rubinius/releases/tag/v3.53,https://api.github.com/repos/rubinius/rubinius/zipball/v3.53,v3.53,False,False
3882394,2016-08-14T00:29:07Z,2016-08-14T01:18:53Z,Release 3.52,"Version 3.52 (2016-08-13)
- Removed more legacy JIT cruft. (Brian Shirai)
- Duplicate instruction defs for new interpreter. (Brian Shirai)
- Initial work on new interpreter. (Brian Shirai)
- Try to build with clang[++]-3.8 on OSX. (Brian Shirai)
- Try full paths for clang 3.8 on OSX. (Brian Shirai)
- Try brew link llvm38 on OSX. (Brian Shirai)
- Try versioned llvm-config. (Brian Shirai)
- Try versioned clang/clang++ again. (Brian Shirai)
- Split instructions into files. (Brian Shirai)
  With the expansion of the instruction set and different types of instructions
  with expanded attributes, using a special syntax becomes much more complex.

Instead of managing special code to parse this special syntax, we convert to
standard JSON for attributes and documentation, and explicit C++ source files
and C #include statements for code.
- Updated Daedalus gem. (Brian Shirai)
- Convert instructions to inlined functions. (Brian Shirai)
  The instructions themselves are snippets of code that mutate state.

The _interpreter_ executes the functions and moves the instruction pointer
(IP) to the next instruction, essentially operating as a loop (implemented by
tail calls) over the instruction (opcode) vector.

The naive JIT _linearizes_ the sequence of function calls to the instructions
and introduces control flow directly (instead of it being an artifact of
iterating over the opcode vector).
- Sort opcodes for deterministic ordering. (Brian Shirai)
- Updated compiler version. (Brian Shirai)
- Updated compiler version. (Brian Shirai)
- Added new interpreter and more control flow work. (Brian Shirai)
- Added InstructionData. (Brian Shirai)
- Fixed ordering for generated InstructionData. (Brian Shirai)
- Updated compiler version. (Brian Shirai)
- Removed udis86 library. (Brian Shirai)
- Reordered instructions for active compiler. (Brian Shirai)
  The bytecode generated is now using the same ordering for the instructions as
  the new interpreter, making it possible to internalize methods and check the
  functioning of the new interpreter.
- Added Interpreter::prepare. (Brian Shirai)
- Cleaned up some JIT cruft. (Brian Shirai)
- Fixed stack access in new interpreter. (Brian Shirai)
- Start adding instruction tests. (Brian Shirai)
- Added Mirror#instance_fields, #instance_variables. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3882394/assets,https://api.github.com/repos/rubinius/rubinius/releases/3882394,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.52,https://github.com/rubinius/rubinius/releases/tag/v3.52,https://api.github.com/repos/rubinius/rubinius/zipball/v3.52,v3.52,False,False
3757379,2016-07-28T04:22:31Z,2016-07-28T05:26:13Z,Release 3.51,"Version 3.51 (2016-07-27)
- Moved oop.[ch]pp to memory/header.[ch]pp. (Brian Shirai)
  First, OOP is obscure to newcomers wouldn't have any basis to know what an
  object-oriented pointer (really a ""tagged pointer"") is. Second, with the
  addition of non-OO managed memory objects, the name is no longer accurate.
  MemoryHeader is both descriptive and accurate.
- More MemoryHeader, InflatedHeader work. (Brian Shirai)
- Revert ""Singleton classes can't have subclasses."" (Brian Shirai)
  While singleton classes cannot have subclasses, modules can have singleton
  classes and the inline cache invalidation critically depends on those
  singleton classes being reachable from the module.

This reverts commit 20938ee86dcb7396c4cf2d16bb89ffd9fcee9a9d.
- Downgrade Bundler due to https://github.com/bundler/bundler/issues/4750. (Brian Shirai)
- Updated rubinius-debugger version. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3757379/assets,https://api.github.com/repos/rubinius/rubinius/releases/3757379,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.51,https://github.com/rubinius/rubinius/releases/tag/v3.51,https://api.github.com/repos/rubinius/rubinius/zipball/v3.51,v3.51,False,False
3736686,2016-07-26T00:15:46Z,2016-07-26T00:56:22Z,Release 3.50,"Version 3.50 (2016-07-25)
- Ensure MemoryHeader is a POD. (Brian Shirai)
  Also get rid of the union because its sole purpose (assign one field, read
  another) is undefined behavior in C++.

We define MemoryFlags as a single machine word type instead of using a struct
of bitfields for the reasons given in the code comment.
- Module#define_method accepts attr_accessor methods. Fixes #3685. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3736686/assets,https://api.github.com/repos/rubinius/rubinius/releases/3736686,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.50,https://github.com/rubinius/rubinius/releases/tag/v3.50,https://api.github.com/repos/rubinius/rubinius/zipball/v3.50,v3.50,False,False
3722935,2016-07-22T22:28:14Z,2016-07-22T22:55:03Z,Release 3.49,"Version 3.49 (2016-07-22)
- Added Thread#name, #name=. (Brian Shirai)
- Added start of new managed memory header. (Brian Shirai)
- Add a failing spec for a case then protected method called from public_send in own method (#3681) (Kenichi Kamiya)
- Add specs to call public_send via own public method

ref: https://bugs.ruby-lang.org/issues/7499
- Add a failing tag for above
- Adjust style with classic lambda syntax

ref: https://github.com/rubinius/rubinius/pull/3681#issuecomment-234644486
- Fix sized enumerators of Numeric#step with Infinity (#3683) (Kenichi Kamiya)
- Add specs for sized enumerator of Numeric#step with infinity limit
- Fix sized enumerator of Numeric#step with Infinity
- Add error constant ENOTSUP (#3684) (Miguel Landaeta)
- Define predicates for MemoryHeader. (Brian Shirai)
- Fixed 32-bit code assumption. Fixes #3682. (Brian Shirai)
  When allocating an Array of size 2**29, Rubinius would allocate a Tuple big
  enough to hold 2**29 == 536870912 elements. On a 64bit arch, each of these
  elements require sizeof(intptr_t) == 8 bytes. A Tuple memory header is 4 *
  sizeof(intptr_t) == 32 bytes. So, we have 2*_29_8+32 == 4294967328. It's a big
  number, but not so big that the 64bit arch can't easily handle it.

Unfortunately, down in the managed memory code, there was an explicit uint32_t
data type. What happens when 4294967328 == 0x100000020 bytes get put into
32bits? 0x100000020 & 0xffffffff == 32. Those 2**29 elements were being
crammed into 32 bytes. Computers may be magic, but even they can only take so
much.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3722935/assets,https://api.github.com/repos/rubinius/rubinius/releases/3722935,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.49,https://github.com/rubinius/rubinius/releases/tag/v3.49,https://api.github.com/repos/rubinius/rubinius/zipball/v3.49,v3.49,False,False
3700638,2016-07-20T14:26:40Z,2016-07-20T14:50:24Z,Release 3.48,"Version 3.48 (2016-07-20)
- Updated deprecations for Ruby 2.2. (Brian Shirai)
- Added Exception#cause. Closes #3680. (Brian Shirai)
- Added start of DataHeader and Trie. (Brian Shirai)
- Renamed ConstantScope to LexicalScope. (Brian Shirai)
  Originally, this was called StaticScope, which was pretty accurate. It was
  renamed ConstantScope to make it more obvious that it was intimately related
  to 'constant' lookup in Ruby.

However, constants are odd things in Ruby: their values are neither constant
nor is their lookup restricted to one scope.  Instead, their values may be
reassigned and their lookup starts with the lexical scope but continues with
the inheritance chain.

With the additional of functions in Rubinius bound to lexical scope, it is
reasonable to refocus this object on its actual role: to represent a lexical
scope.
- Updated compiler version. (Brian Shirai)
- Avoid setting Exception#cause to itself. (Brian Shirai)
- move initialization of lineno to more central location (Chuck Remes)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3700638/assets,https://api.github.com/repos/rubinius/rubinius/releases/3700638,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.48,https://github.com/rubinius/rubinius/releases/tag/v3.48,https://api.github.com/repos/rubinius/rubinius/zipball/v3.48,v3.48,False,False
3672002,2016-07-16T04:27:38Z,2016-07-16T04:49:07Z,Release 3.47,"Version 3.47 (2016-07-15)
- Improved HAMT Hash. (Brian Shirai)
  The base ""table"" has been replaced by a regular Trie. Rubinius has deprecated
  support for 32-bit and that support is being removed, so the branching factor
  is currently 62 (actually 60 = 6 \* 10), but that will be extended to 64 when
- instructions are added for computing with non-mananged objects (ie not
  being limited to Fixnum); and 2. managed objects with non-managed fields are
  able to be processed by managed code instructions.

A linear scan list is still used for hash values that collide along (6 \* 10 =
60 bits), but this could be enhanced to be a binary/red-black/etc tree
instead.
- Removed 32-bit platform support. (Brian Shirai)
- Removed GCC support. (Brian Shirai)
- Updated parser gem versions. (Brian Shirai)
- Updated deprecations. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3672002/assets,https://api.github.com/repos/rubinius/rubinius/releases/3672002,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.47,https://github.com/rubinius/rubinius/releases/tag/v3.47,https://api.github.com/repos/rubinius/rubinius/zipball/v3.47,v3.47,False,False
3640741,2016-07-12T16:54:41Z,2016-07-12T17:30:09Z,Release 3.46,"Version 3.46 (2016-07-12)
- Use HAMT for Hash. (Brian Shirai)
- use rubysl-socket-2.1.2 gem (Chuck Remes)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3640741/assets,https://api.github.com/repos/rubinius/rubinius/releases/3640741,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.46,https://github.com/rubinius/rubinius/releases/tag/v3.46,https://api.github.com/repos/rubinius/rubinius/zipball/v3.46,v3.46,False,False
3630378,2016-07-11T15:04:21Z,2016-07-11T15:30:01Z,Release 3.45,"Version 3.45 (2016-07-10)
- Updated Gemfile.lock. (Brian Shirai)
- Codedb ffi io (#3619) (Chuck Remes)
- add basic support for additional IO functions
- add back dup2 function definition
- add convenience methods for errno handling
- add O_CLOEXEC to list for File IO
- add a few more functions like ftruncate to the list
- hack away and rejigger things to get IO booting using mostly FFI calls
- make some fixes to pass more specs
- passes most read specs
- add spec for negative IO#pos when 'unget'ing at start of stream
- more fixes to pass ungetc/ungetbyte/pos/read specs; all pass
- fix #getc to handle encodings properly; passes chars_spec
- fix read_to_separator to handle skipping properly
- specs for requesting a negative-sized pointer which causes SEGV
- return NULL for a MemoryPointer.new with a negative size
- add basic support for additional IO functions
- add back dup2 function definition
- add convenience methods for errno handling
- add O_CLOEXEC to list for File IO
- add a few more functions like ftruncate to the list
- hack away and rejigger things to get IO booting using mostly FFI calls
- make some fixes to pass more specs
- passes most read specs
- add spec for negative IO#pos when 'unget'ing at start of stream
- more fixes to pass ungetc/ungetbyte/pos/read specs; all pass
- fix #getc to handle encodings properly; passes chars_spec
- fix read_to_separator to handle skipping properly
- specs for requesting a negative-sized pointer which causes SEGV
- return NULL for a MemoryPointer.new with a negative size
- raise IOError on malloc failure; force returned strings to binary
- force strings to binary for handling #gets with separators and limits; remove debug prints
- remove debug prints again - ps i hate git
- cleanup var use to make specs happy
- fix initialize specs
- remove some commented out and dead code
- switch from C++-based #seek to FFI seek
- redefine STDIN/STDOUT/STDERR to use new IO obj
- switch to using FFI-bound #write command
- include sync as part of fields to move to new IO obj
- mark rubinius as non-compliant for buffering writes; impl detail anyway
- to swap in new IO we need it to happen early enough in the load order before STDIN/etc are used
- need to redefine STDIN/etc and /etc when we swap in new IO object
- begin refactoring IO internals to make support and expansion simpler hopefully
- simplify by taking advantage of existing class method
- add a convenience method for testing call failure
- add #pipe function
- continue refactoring to support pipes and reopening FDs
- baby steps toward making #dup work
- use #descriptor accessor instead of using ivar directly
- make #ensure_ methods public; buffered read should return nil when EOF
- fix error message to use proper local var
- fix #new_pipe so handle encodings correctly
- set encodings for 'left hand side' pipes
- fix #dup specs and add a debugging method
- fix #eof specs
- fix #getbyte spec
- fix several IO#reopen_path bugs particularly improper Errno usage
- use a FFI convenience method for checking call failure
- add spec to test EOF behavior with IO#reopen
- fix IO#reopen to handle EOF correctly
- fix some eof specs with just one to go
- fix setting EOF when seeking
- make any seek on a Pipe raise Errno::ESPIPE
- fix buffer issues when reading with separators and limits; fix sysread
- Multiple fixes...
- Fixed the #seek inheritance hierarchy mostly by no longer
  conflating #seek and #sysseek as the same thing.
- Rename PipeFileDescriptor to FIFOFileDescriptor since it
  can also be used for special character files.
- Fix #gets so the peek ahead for multi-byte characters is
  properly respected; refill the buffer if we don't have enough
  bytes for peek ahead.
- Fix important error in #new_open_fd which was using the wrong
  flag on an FD. When using fcntl on an FD, it is important to use
  the FD_\* flags. Was using O_CLOEXEC instead of FD_CLOEXEC and as
  a result all child processes were hanging when their read pipe
  was closed.
- Handle EPIPE in #write correctly. Also raise an error if we
  get an error instead of ignoring it.
- provide initial but broken C++ to Ruby conversion for IO.select
- Fixed FDSet to link.

This is a complex part of Rubinius and FFI where we need some primitive
code to interact with libc macros.
- converted until/end into begin/end until which fixed 4 specs
- add logic to load and detect posix_fadvise constants and enable feature detection
- add with_feature detection to skip these specs on platforms without posix_fadvise
- convert usage of posix_fadvise from C++ to Ruby code
- add select function signature; may need to change when we learn more about implementation
- continue fixup of IO.select; handle coercion and choosing max FD
- generate and save a string defining the struct timeval as a FFI struct
- add gettimeofday function for FFI access
- add FDSet::to_set to return FDSET for use by select
- finish fleshing out select support code; unfortunately SEGVs
- fix function signature for posix function #select
- fix returning pointer to descriptor_set
- pull FD_SETSIZE directly from the headers
- fix discovery of highest numbered FD; select still SEGVs
- return pointer to fd_set as a FFI pointer so we can use it from Ruby
- pass FFI Pointer to select; fixes SEGV but still does not work correctly
- fix SEGV by _correctly_ getting the address of the data member
- fix #collect_set_fds; kind of works now
- Passes all but one select spec which is related to thread sleeping

Fixed +timeout+ handling so that a nil timeout is respected.
Prior to this we were allocating timeval structs every time and
it turns out that an empty struct and a nil value are not
equivalent in behavior.

Took the opportunity to refactor and DRY up some code that
validated IO.select arguments.
- modify this ugly hack a little to put struct in proper namespace
- add helper methods for raising EAGAIN and EAGAINWaitWritable
- disable the C++ version of #readpartial
- fix readpartial and read_nonblock specs; add new behavior for read_nonblock
- disable the C++ code for write_nonblock
- write the code to support write_nonblock and clean up some style issues
- comment out all primitives that are no longer in use
- stub out a call to #pos for 2 specs
- when reopening a FD flush buffer and seek to other FDs location; fix typo
- Support File#truncate and File#ftruncate correctly

Turns out that #truncate needed to be a class method, so I moved
it to a class method of FileDescriptor.

Also added support for creating a DirectoryFileDescriptor. It
merely inherits from FileDescriptor now. We will see if it needs
any new behavior or if default behavior needs to be curtailed.
- fix bug where kernel/common/io.rb was not set to nil after #foreach call
- fix bug in spec where incorrect args were passed to test #gets with limit

Tricky one to find. The original spec used #gets(1) to read one
char. Unfortunately, this arg format ends up setting a separator
to $/ so the logic ends up calling
EachReader#read_to_separator_with_limit instead of
EachReader#read_to_limit. By passing nil, as in #gets(nil, 1),
then we force the code paths to call read_to_limit.
- fix handling of multi-byte chars when reading with char limits

This fixes several specs shared by gets, foreach, and readline.
The EachReader class needs a good refactoring at this point
but for now I just want to commit working code.
- refactor IO::EachReader, dry it up, and improve code docs
- rescue ESPIPE from seek in #reopen when reopening a Pipe FD
- fix spec to properly handle the expected returns from #readlines
- move stdin/out/err redefinition under Rubinius::IOUtility namespace to avoid collisions
- fix indentation
- remove superfluous todo comments and dead/commented-out code
- fix indentation
- verify that non-blocking writes DO NOT BLOCK when a system buffer is full
- when a write returns EAGAIN or EINTR test to see if in non-blocking mode

Also took the opportunity to refactor fcntl F_GETFL and F_SETFL
- fix misuage of F_GETFL with F_GETFD
- first attempt at getting C-API updated to use Ruby obj over C++ obj
- fix several CAPI specs by correctly getting descriptor
- rename set_blocking method to clear_nonblock which makes more sense to me
- toggle the current thread sleep state when potentially blocking on read or select
- modify exception message to match MRI test expectations
- handle case where user calls IO.allocate and close
- allow multiple successive IO#close calls without error
- second attempt at fixing io=IO.allocate; io.close
- third try is the charm for IO.allocate; io.close
- multiple calls of close, close_read, and close_write should no longer raise IOError
- no longer raise IOError on multiple calls to close, close_read, or close_write
- refactor descriptor testing to make it cleaner
- remove duplicate check of ::read return value
- verify #read raises IOError when read interrupted by another thread closing socket
- always verify file is open after a read operation
- spec limit 0 behavior for each_lines for MRI 2.3 compatibility
- support raising ArgumentError given limit 0 for each_lines
- begin work on supporting Socket
- use rb_funcall properly; fixes SEGVs
- fix typo in private method name
- define method to raise EAGAINWaitWritable
- raise EAGAINWaitWritable when nonblocking write would block
- rescue exceptions when #find_type fails in @enclosing_module

This is really weird. The code calls #find_type in the scope
of the enclosing_module, but there could be a conflict with
that method name, numbers of args it takes, its purpose, etc.
So a failure here should be rescued and allow the followup
code to call #find_type on the FFI class.

This was discovered when the ffi-io branch failed to build
a native extension. The mkmf.rb gem was doing some logging
during the build which caused some code in IO::Select to
call IO::Select.class_eval on code to instantiate the
Timeval_t struct class. Creating a struct calls #find_type
but it was calling it from the scope of mkmf.rb which had
its own (completely different!) method named #find_type
defined. It threw an ArgumentError because the arity didn't
match, but it lead me to this logic error and fix.
- only allow seeking on 'file' file descriptors and not on fifo or other

During a call to IO.reopen a file descriptor was dup2'ed. Its
ftype changed from ""file"" to ""fifo"" and as we know a fifo cannot
seek. So we were blowing up when trying to set the offset ivar.
By only allowing seek on ""file"" FDs, we'll avoid the bug.
- remove spec for an IO implementation detail that no longer holds

As far as I can tell, there is no #buffer_empty? public method on
the IO class. We had one to test this behavior. Gone!
- remove unused and unnecessary public method
- remove temp spec file that was accidently committed earlier""
- emulate blocking read behavior using #read_nonblock

We had a failing spec where a thread blocked on read was
supposed to raise IOError when _another thread_ closed
the IO. However, it didn't work. Turns out that the
low-level system read function blocks forever so the
closed IO/file descriptor didn't raise as expected.

The original C code got around this OS behavior by setting
special flags and sending signals to the blocked thread
to wake it up. This mechanism was only exposed to the
bytecode VM and wasn't available to the Ruby runtime so
I had to go this other direction. It's less than ideal
but if the long-term plan is to utilize libuv for
Rubinius IO then this is a good enough fix.
- change IO.setup to set fd accessor; fixes socket setup

I don't really like this solution very much. Ideally the
Socket classes would set @fd directly in their #initialize
methods via a call to FileDescriptor.choose_type(fd). Having
a +fd+ accessor on the IO class was intended only for
debugging purposes.

Let's go with this patch for now. If the larger refactoring
of the IO class to use a private IO::FileDescriptor class
is accepted then we can go back and change the Socket methods
to conform better and remove this accessor.
- replace calls to C++ IO obj with Ruby IO obj
- remove dead and commented-out code as part of cleanup
- spec out #ttyname behavior in Ruby
- add #ttyname function to FFI
- convert IO#ttyname from C++ to Ruby
- use Regexp to handle forward slash escaping in spec
- re-enable partial support for IO finalizer and autoclose

The IO finalizer is tricky since it also has to detect possible
modifications from C API calls. There will likely need to be
some rework done on the C API code itself to make this easier
to manage from the Ruby side since we are trying to get as much
as possible out of C/C++.
- A couple fixes for finding constants.
- Fixed accessing Stat in IO::FileDescriptor.
- make sure proper encoding set when using #read_nonblock
- first try to add finalizer support for C-extensions
- improve variable name
- if we fclose a FD then do not call close on it too
- use Ruby-based IO functions instead of C++ object
- remove unnecessary IO calls
- remove test file for dead C code
- remove dead C code for IO classes
- remove dead code
- make socket C funcs call ruby code from C; first try
- Fixed defining GC stubs for IO class.
- use calling frame when given else look it up
- Cleanup from stw branch merge.
- Revert ""use Ruby-based IO functions instead of C++ object""

This reverts commit ca755090dec70fa54ed43fbcc1585c24ff6c5522.

Re-introduced IO::open_with_cloexec to clean up this.
- Removed test_io.hpp incorrectly merged.
- Fixed IO::FileDescriptor#finalizer definition.
- Switched fork/exec lock to SpinLock.

Since a SpinLock is a simple integer on which CAS operations are performed,
there is no way to go afoul of 'ownership' during fork(). This appears to
solve a spordic issue where the child was not able to reset the fork_exec_lock_
inherited from the parent process.
- Properly assign rio_stream GC root.
- Use built-in finalizer protocol for IO-related objects.
- use files instead of pipes to test finalizers
- move fd instance alloc to IO.setup
- fix method signature; remove debug print
- call method on self via send

Before the code was looking up 'self' by getting the current
call frame and pulling self from it. This was returning a
different object than expected. So now we just call #send
against the current object; this works consistently.
- cast unsigned vals back to signed to fix compiler warnings
- modify order of operations via parens to satisfy compiler
- hack to prevent closing rio twice
- Removed .tap generating structs.
- Removed double finalization bandaid.

We need to ensure this is fixed now.
- Re-added Rubinius define_finalizer extension.
- Fixed finalizer spec to clean up temporary.
- ignore NotImplementedError for #fadvise on platforms that do not support that call
- bump ruby compatibility to 2.3.0
- rename spec file so ci run matches 2.3.0 ruby compat
- verify that infinitely looping subprocesses can be force closed
- remove special case EPIPE error handling so all write errors bubble up
- clarify intent of spec
- make sure we test for new transcoding options
- prepare to handle passing more encoding options in IO.open/File.open
- stub in an attempt at hooking up newline transcoders
- stub in attempt at accessing transcoders
- fix regex so it matches newline transcoders
- Revert ""stub in attempt at accessing transcoders""

This reverts commit 6455dc7590bbf9b0fb904846b115bb9cefb3ca01.
- Revert ""stub in an attempt at hooking up newline transcoders""

This reverts commit 39d255f5b72eadcce34f0deb2e83cd3c7254254c.
- Revert ""make sure we test for new transcoding options""

This reverts commit 679a247a3a932d3b22d8d20082b2026ea2b52cfa.
- fix encoding_options handling to pass specs
- Guard calling fclose() on NULL rio-f.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3630378/assets,https://api.github.com/repos/rubinius/rubinius/releases/3630378,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.45,https://github.com/rubinius/rubinius/releases/tag/v3.45,https://api.github.com/repos/rubinius/rubinius/zipball/v3.45,v3.45,False,False
3625344,2016-07-10T23:35:35Z,2016-07-10T23:54:09Z,Release 3.44,"Version 3.44 (2016-07-10)
- Fix by @wahjava for sem_open call on FreeBSD. Closes #3677. (Brian Shirai)
- Updated parser gems. (Brian Shirai)
- Bump Ruby version to 2.3.1. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3625344/assets,https://api.github.com/repos/rubinius/rubinius/releases/3625344,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.44,https://github.com/rubinius/rubinius/releases/tag/v3.44,https://api.github.com/repos/rubinius/rubinius/zipball/v3.44,v3.44,False,False
3572013,2016-07-01T18:51:24Z,2016-07-01T19:14:49Z,Release 3.43,"Version 3.43 (2016-07-01)
- Distinguish Data and typed Data. (Brian Shirai)
- Fix GCC issue. (Brian Shirai)
- Ensure Console listener thread exits. (Brian Shirai)
- Assume this is not NULL. Closes #3675. (Brian Shirai)
- Raise exceptions instead of abort() for interpreter errors. (Brian Shirai)
- Raise DeadlockError instead of abort(). (Brian Shirai)
- Added {i,d}registers for {Compiled,Machine}Code. (Brian Shirai)
- Reworked inline caches. (Brian Shirai)
  Under concurrent update, we need to preserve the coherence of the multiple
  values is the InlineCache object. In other words, no thread should be able to
  see values in a single InlineCache object that represent a partial update of
  the inline cache.

To meet this constraint, we pre-allocate the number of InlineCache slots
specified at process invocation for every CallSite object. Those slots point
to individual InlineCache objects as the call site is executed and the type
profile changes. The pointers are swapped atomically, and if the atomic swap
succeeds, the previous cache is retained in a 'dead list' until the next
garbage collection cycle. If the update fails, the updated cache is discarded
and the update is attempted again.

Nothing should retain the InlineCache pointers outside the CallSite object.
During execution of the CallSite, the InlineCache pointer should be on the
execution stack, so swapping the pointers should not impact code that is
already-in-progress. At a garbage collection checkpoint, no interpreter will
be in-progress, so deleting the replaced InlineCache objects should be safe.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3572013/assets,https://api.github.com/repos/rubinius/rubinius/releases/3572013,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.43,https://github.com/rubinius/rubinius/releases/tag/v3.43,https://api.github.com/repos/rubinius/rubinius/zipball/v3.43,v3.43,False,False
3532027,2016-06-27T16:48:26Z,2016-06-27T17:20:39Z,Release 3.42,"Version 3.42 (2016-06-26)
- Raise FiberError if pthread resources is unavailable. (Brian Shirai)
- Don't set os_thread to creating pthread_self. (Brian Shirai)
- Added {Thread, Fiber}.count. (Brian Shirai)
- Reworked locking around fork(). (Brian Shirai)
- Tweak ordering for releasing ThreadNexus lock. (Brian Shirai)
- Retry execvp on EAGAIN. (Brian Shirai)
- Tweak ThreadNexus unlock, fork_unlock. (Brian Shirai)
- Use non-blocking lock for managed transition & checkpointing. (Brian Shirai)
- Process Fiber finalizer. (Brian Shirai)
  We do not yet dispose of unreachable but not-yet-completed Fibers.
- Added Fiber#dispose and auto-cleanup of Fiber. (Brian Shirai)
  A Fiber is composed of both managed (ie object memory) resources and unmanaged
  (ie pthread) resources. When a Fiber completes normally, the unmanaged
  resources can be reclaimed simply.

When a Fiber that has not completed normally goes out of 'scope' (ie is no
longer reachable from any reachable object), the garbage collector cannot
simply reclaim the managed resources allocated to the Fiber because the Fiber
composes native resources (ie the pthread instance). In this case, the Fiber's
pthread invoke function needs to be forced to exit so that the pthread
instance can be reclaimed.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3532027/assets,https://api.github.com/repos/rubinius/rubinius/releases/3532027,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.42,https://github.com/rubinius/rubinius/releases/tag/v3.42,https://api.github.com/repos/rubinius/rubinius/zipball/v3.42,v3.42,False,False
3485813,2016-06-21T00:18:20Z,2016-06-21T01:11:14Z,Release 3.41,"Version 3.41 (2016-06-20)
- Updated mkmf thinks this file should exist. (Brian Shirai)
- Updated mkmf version. (Brian Shirai)
- Slightly relax logger semaphore threshold. (Brian Shirai)
  Rather than possibly deadlocking, we reset the logger semaphore if it appears
  to be in a bad state. This means it's possible that incorrect interleaving
  could occur in the log file. We accept this tradeoff for not deadlocking a
  process.

We attempt to make the threshold high enough to avoid spurious failures but
not high enough to lock up a process too long because a Thread may write to
the log when the process is trying to checkpoint for eg garbage collection.
- Fibers are always enabled. Removed configure option. (Brian Shirai)
- Removed Fiber custom stack switching. (Brian Shirai)
- A bit of Enumerator cleanup. (Brian Shirai)
- Specs for Thread#thread_variable{s, _get, _set, _key?}. (Brian Shirai)
- Added new Fiber implementation. (Brian Shirai)
  Each Fiber is composed of a native machine thread and set of synchronization
  primitives that effectively serializes the concurrency of the associated
  Thread instance and all Fiber peers (Fibers associated with the same Thread).
- Fixed Thread, Fiber locals. (Brian Shirai)
- Fixed propagating exceptions from fibers to the thread. (Brian Shirai)
- Fixed VM tests. (Brian Shirai)
- Simplify Fiber. (Brian Shirai)
- Fixed interrupting Thread with active Fiber. (Brian Shirai)
- A couple Thread, Fiber spec fixes. (Brian Shirai)
- Fixed passing arguments with Fiber.yield, Fiber#resume. (Brian Shirai)
- Reference current Fiber from Thread. (Brian Shirai)
- Fixed Thread#kill. (Brian Shirai)
- Clean up Fiber debris in VariableScope. (Brian Shirai)
- Fixed Thread#raise. (Brian Shirai)
- Clean up after some Fiber specs. (Brian Shirai)
- Added specs for Thread.fiber_list, Fiber.list, Fiber.main. (Brian Shirai)
- Added Thread.fiber_list, Fiber.list, Fiber.main. (Brian Shirai)
- Cleaned up spec tags for Thread, Fiber. (Brian Shirai)
- Store all locked objects in the Thread. (Brian Shirai)
- Reworked Fiber transitions. (Brian Shirai)
- Added Fiber#transfer spec, cleaned up Fiber#resume spec. (Brian Shirai)
- Fixed passing Fiber values. (Brian Shirai)
- Fixed Enumerator::Generator naming. (Brian Shirai)
- Only process Threads for locked objects. (Brian Shirai)
  There is still more cruft here to clean up.
- Fixed race checking fiber status. (Brian Shirai)
- Label Threads, Fibers, & MachineThreads in VM backtrace. (Brian Shirai)
- Fixed race in Thread.fiber_list spec. (Brian Shirai)
- Fixed race starting Fiber. (Brian Shirai)
- Fixed deadlock with managed phase and Fiber switching. (Brian Shirai)
- Block GC while creating Thread/Fiber structures. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3485813/assets,https://api.github.com/repos/rubinius/rubinius/releases/3485813,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.41,https://github.com/rubinius/rubinius/releases/tag/v3.41,https://api.github.com/repos/rubinius/rubinius/zipball/v3.41,v3.41,False,False
3427085,2016-06-12T16:05:55Z,2016-06-12T16:23:26Z,Release 3.40,"Version 3.40 (2016-06-12)
- Fixed concurrent process access to FileLogger. (Brian Shirai)
- Fixed compressing rotated logs. (Brian Shirai)
- Added regex configuration type and converted log filters. (Brian Shirai)
- Fixed const type. (Brian Shirai)
- Fixed -Xhelp variable type for Regexp. (Brian Shirai)
- Fixed deadlock adding finalizer. (Brian Shirai)
- Updated gems. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3427085/assets,https://api.github.com/repos/rubinius/rubinius/releases/3427085,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.40,https://github.com/rubinius/rubinius/releases/tag/v3.40,https://api.github.com/repos/rubinius/rubinius/zipball/v3.40,v3.40,False,False
3414331,2016-06-10T01:00:49Z,2016-06-10T01:46:06Z,Release 3.39,"Version 3.39 (2016-06-09)
- Added config option to filter source location. (Brian Shirai)
  Threads, Fibers, and subprocess commands, like spawn, fork, backtick and exec,
  log the source code location that invoked them. This location can now be
  filtered based on a configuration option.

The default is to filter the Ruby core library location. But when a utility
library is used, the location will always show the same utility library source
code. Adding a custom filter that excludes the library locations allows the
client source code location to be logged instead.

The following configuration options designate the source filters:

  -Xmachine.thread.log.filter (default '^core/._$')
  -Xmachine.fiber.log.filter (default '^core/._$')
  -Xsystem.log.filter (default '^core/.*$')

The filter must match the entire source code line to exclude it. The first
non-matching source code line will be logged.

The filter expression uses the C++ regex facility and ECMAScript syntax.
- Added logging for config options. (Brian Shirai)
  The configuration options can come from five different locations:
  1. The file $HOME/.rbxconfig if $HOME is defined.
  2. The file .rbxconfig in the current working directory.
  3. The RBXOPT environment variable.
  4. The command line options.
  5. The default values.

This may cause ambiguity about what configuration options are in effect when a
process runs. The -Xsystem.log.config (default: yes) option prints the
configuration options that were parsed to the log file.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3414331/assets,https://api.github.com/repos/rubinius/rubinius/releases/3414331,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.39,https://github.com/rubinius/rubinius/releases/tag/v3.39,https://api.github.com/repos/rubinius/rubinius/zipball/v3.39,v3.39,False,False
3406528,2016-06-09T07:36:50Z,2016-06-09T07:54:27Z,Release 3.38,"Version 3.38 (2016-06-09)
- Fixed explicit mutex unlock straggler. (Brian Shirai)
  This got left in when I was trying to get the mutex to properly unlock across
  fork() calls in both parent and child process.
- Fixed specs to properly wait for child processes. (Brian Shirai)
- Fixed waiting for failed spawn, backtick children. (Brian Shirai)
- Added config for logging Thread, Fiber events. (Brian Shirai)
  The follow configuration options control whether to log lifetime events (eg create, exit)
  for Thread and Fiber, and whether to log finalizer activity.
  
  -Xmachine.thread.log.lifetime (default true)
  -Xmachine.thread.log.finalizer (default false)
  -Xmachine.fiber.log.lifetime (default true)
  -Xmachine.fiber.log.finalizer (default false)
- Recreate logger instance after fork(). (Brian Shirai)
  During a fork() event, it's possible for another thread to be writing to the
  logger and the logger mutex to be in an unknown state in the child. So, we
  recreate the logger post fork() in the child. This also simplifies ensuring
  that eg the PID stamp is correct.
- Added config option for logging process lifetime events. (Brian Shirai)
  During the process lifetime, various events like spawn, fork, exec, etc may be
  logged. The following option allows turning off those events;
  
  -Xsystem.log.lifetime

This may be useful to filter information from the logs when running
particularly noisy processes that do a lot of subprocess activity. The default
state, however, is to log these events because they can be extremely helpful
when debugging issue.
- Fixed finalizer deadlock. (Brian Shirai)
  The finalizer thread is now running as unmanaged phase while doing list
  manipulations and the transition to managed phase is done by the individual
  finalizer object depending on whether it is a managed or unmanaged finalizer.
- Initialize logger lock. (Brian Shirai)
- Don't block during spawn or backtick. (Brian Shirai)
- Preserve ThreadNexus phase_flag state. (Brian Shirai)
  The ThreadNexus::phase_flag is part of the thread synchronization mechanism
  and additionally used to put the system into a sort of 'singled-threaded mode'
  that can run arbitrary code. In order to preserve this, we have to know that
  when we 'acquired' the lock whether the lock was already held by us. If it
  was, we don't want to release it.
- Don't block when locking finalizer list mutex. (Brian Shirai)
- Use spinlock_mutex for InlineCache updates. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3406528/assets,https://api.github.com/repos/rubinius/rubinius/releases/3406528,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.38,https://github.com/rubinius/rubinius/releases/tag/v3.38,https://api.github.com/repos/rubinius/rubinius/zipball/v3.38,v3.38,False,False
3386813,2016-06-07T02:44:52Z,2016-06-07T03:02:49Z,Release 3.37,"Version 3.37 (2016-06-06)
- Enable ccache for faster builds (#3660) (Omer Katz)
- Enable ccache for faster builds.
- Print cache statistics and install with 2 jobs
- Enable bundler cache as well.
- Install ccache on OSX as well.
- Export CC and CXX manually in order to use ccache.
- Cache bundler manually since in C++ environments travis doesn't recognise the bundler directive.
- Workaround ccache bug with clang

See http://petereisentraut.blogspot.co.il/2011/05/ccache-and-clang.html
- export different ccache path for OSX.
- Fix syntax error.
- Use ruby 2.2.0.
- Another fix for ccache with clang and install ruby 2.2.0 from rvm.
- Print cache statistics for debugging.
- Improved logger locking. (Brian Shirai)
  The logger is a low-level mechanism that should not depend on sophisticated
  Rubinius code, but still needs synchronization to produce intelligible results
  when any thread at any time may log some activity.

We switch to a custom spinlock mutex implemented with C++11 features
(unfortunate that C++11 didn't think it was essential to provide such a mutex
but it's trivial to create).

Since the process may log something at any time from any thread, running
managed or unmanaged, even while fork'ing, we always reset the state of the
lock after fork().
- Don't copy dead Fiber stack to heap. (Brian Shirai)
  Either status_ is wrong and the Fiber isn't dead, in which case we run the risk of
  losing its stack, or we should ignore the copy_to_heap.
- Use sequentially consistent memory order for spinlock_mutex. (Brian Shirai)
- Cleaned up passing STATE to logger. (Brian Shirai)
  The logging facility is intentially highly decoupled from Rubinius so that it
  can be used through the entire process lifetime without depending on
  structures that need to be constructed and destructed. The STATE dependency
  was added to try to synchronize logging across fork() calls, but that wasn't a
  good architecture choice.
- Only reset the logger lock in the fork child. (Brian Shirai)
- Test if Travis failure is Fiber-related. (Brian Shirai)
- Added debug logging for Data, Fiber finalize. (Brian Shirai)
- Revert ""Test if Travis failure is Fiber-related."" (Brian Shirai)
  This reverts commit 9f644d75e2662624f8787fa0a3916b10a80c283d.
- Switched Data, Fiber to normal logging. (Brian Shirai)
- Another Travis test. (Brian Shirai)
- Improved logging message format. (Brian Shirai)
  Generally, log messages for non-exceptional events should follow the format:
  
  object: operation: details

For example: 'process: fork: child: <PID, ...'

For exceptional events, the format should be:

  <strerror result>: object: details
- Added Thread#source, improved Thread#inspect. (Brian Shirai)
- Improved Fiber attributes and logging. (Brian Shirai)
  Fiber#source returns the non-core library source code line where the Fiber
  was created. Fiber#thread_name returns the name of the Thread that created the
  Fiber. Fiber#fiber_id returns a unique ID for the Fiber instance.

The Rubinius log includes entries for the Fiber create and exit events.
- Hold finalizer lock when signaling. (Brian Shirai)
- Increase Enumerator Fiber stack size. (Brian Shirai)
- Revert ""Enable ccache for faster builds (#3660)"" (Brian Shirai)
  This reverts commit 06a4629e01a42e3712e8333a4353a87faee500fa.
- Revert ""Another Travis test."" (Brian Shirai)
  This reverts commit a0a7287d1bee69013edfede1e9783d06e55963d2.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3386813/assets,https://api.github.com/repos/rubinius/rubinius/releases/3386813,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.37,https://github.com/rubinius/rubinius/releases/tag/v3.37,https://api.github.com/repos/rubinius/rubinius/zipball/v3.37,v3.37,False,False
3375436,2016-06-05T07:19:14Z,2016-06-05T07:37:38Z,Release 3.36,"Version 3.36 (2016-06-05)
- Moved CallSite finalization to CompiledCode. (Brian Shirai)
- Ensure GC.start is synchronized. (Brian Shirai)
- Re-added Rubinius define_finalizer extension. (Brian Shirai)
- Fixed removing a finalizer. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3375436/assets,https://api.github.com/repos/rubinius/rubinius/releases/3375436,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.36,https://github.com/rubinius/rubinius/releases/tag/v3.36,https://api.github.com/repos/rubinius/rubinius/zipball/v3.36,v3.36,False,False
3375091,2016-06-05T02:32:38Z,2016-06-05T02:49:25Z,Release 3.35,"Version 3.35 (2016-06-04)
- Added ObjectSpace.define_finalizer specs. (Brian Shirai)
- Reworked running finalizers. (Brian Shirai)
- add reminder to push after tagging new release (Chuck Remes)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3375091/assets,https://api.github.com/repos/rubinius/rubinius/releases/3375091,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.35,https://github.com/rubinius/rubinius/releases/tag/v3.35,https://api.github.com/repos/rubinius/rubinius/zipball/v3.35,v3.35,False,False
3374697,2016-06-04T21:57:34Z,2016-06-04T22:16:47Z,Release 3.34,"Version 3.34 (2016-06-02)
- Adjust stack size in Thread, Fiber specs. (Brian Shirai)
- Reworked ThreadNexus. (Brian Shirai)
  While halting the process, all threads except for the thread processing the
  halt request must be paused. Additionally, any threads transitioning from
  sleep or from unmanaged code must also pause.

Also, at every moment that a thread is possibly running managed code, it must
have the proper thread phase state, or it could modify code concurrently with
the garbage collector in a way that leads to corrupt objects or references
that are no longer valid.
- Slightly relax memory ordering for ThreadNexus::Phase. (Brian Shirai)
  This ordering is slightly relaxed from the default std::memory_order_seq_cst
  but may not have any impact on typical x86 hardware.
- Eliminate extra halt lock. (Brian Shirai)
  Since the phase_lock is recursive, and we _always_ need to acquire the lock
  when transitioning to managed phase, the halting thread can just holt this
  lock unconditionally while halting. That thread will then be able to run
  stop-the-world garbage collection with the normal process which acquires and
  releases the phase lock. This eliminates the second halt lock.
- Convert ThreadNexus stop flag to atomic. (Brian Shirai)
- Convert ThreadNexus threads lock to C++11. (Brian Shirai)
- Fixed Dockerfile update script. (Brian Shirai)
- Replaced ThreadNexus recursive mutex with atomic flag. (Brian Shirai)
  Recursive mutex under C++11 plays very badly with fork(), apparently. But we
  must be able to do stuff like run garbage collection and Ruby code during
  shutdown because we process Ruby finalizers, which may run pretty much
  arbitrary Ruby code.

Hence, we need a mechanism to hold all threads except the halting thread but
also allow that thread to run arbitrary managed code, one function of which is
running the garbage collection code, which needs to stop the world for some
things, which relies on the ThreadNexus synchronization code, and on and on.

So we use an atomic variable that holds the thread's id and if the variable
already has a thread's id, that thread is the one who set it, and hence can
proceed confident that no other thread is running.
- Properly wait for failed process status for #spawn, #`. (Brian Shirai)
  If #spawn or #` fail, the PID of the subprocess isn't passed back, so it
  cannot be properly reaped by the OS with a Process.waitpid call. So we have to
  do that in the VM.
- Add deprecation notice for 32-bit and GCC. (Brian Shirai)
- Reset logger lock on fork. (Brian Shirai)
  When calling fork(), we hold all running threads to keep them in known states
  across the call to fork().

In the child process, the only thread that persists is the thread that called
fork(). If another thread was about to write to the logger and got suspended
before unlocking the logger mutex, the mutex will be locked in the child and
will block any other thread that tries to lock it. The thread in the parent
that would have unlocked the lock won't exist in the child.

An alternative would be for the thread calling fork to hold all the relevant
locks before calling fork(), and then unlocking them all after fork() in the
child. Functionally, that wouldn't be any different and would impose
additional costs before the fork().

All code needs to be audited for any locks that could be held across a fork()
call and all those should be re-init'd in the child.
- Improved logging of subprocess creation. (Brian Shirai)
  The log will now reliably include the non-core method that invoked the spawn,
  backtick, fork, or exec command. This will point to the application code or
  rubygems code, rather than the Rubinius core library. The location in the app
  code is much more useful typically than the location in the Rubinius core
  library code.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3374697/assets,https://api.github.com/repos/rubinius/rubinius/releases/3374697,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.34,https://github.com/rubinius/rubinius/releases/tag/v3.34,https://api.github.com/repos/rubinius/rubinius/zipball/v3.34,v3.34,False,False
3289686,2016-05-24T04:53:52Z,2016-05-24T05:11:33Z,Release 3.33,"Version 3.33 (2016-05-23)
- Allow per-Thread, per-Fiber stack sizing. (Brian Shirai)

Thread.new, Thread.start, Thread.fork, and Fiber.new all take an optional
keyword argument of the form: 'stack_size: Fixnum', where Fixnum includes
objects that respond to #to_int. The keyword argument, if present, sets the
size of the Thread's or Fiber's stack size. If the argument is not present or
is zero, the default stack size, configured with -Xmachine.thread.stack_size
and -Xmachine.fiber.stack_size are used instead.

Added configuration for machine.thread.stack_size to set the default size of
Thread stacks. Also moved fiber.stack_size configuration under machine
section.

Also added configuration for machine.stack_cushion to set the size in bytes of
the cushion to leave at the stack end when checking for stack usage. This is
necessary because we check the stack usage before calling a method. The method
may use quite a bit of stack but we can't know this beforehand (hand-wavy
""can't"" here). If we are near the end but not yet at the end, we could easily
exhaust the stack after calling the method and then segfault.
- Fixed substitution regexp for versioned gcc/g++/clang/clang++. (Brian Shirai)
- Improved -Xhelp rendering. (Brian Shirai)
- Updated help output and cleaned up some deprecated scripts. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3289686/assets,https://api.github.com/repos/rubinius/rubinius/releases/3289686,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.33,https://github.com/rubinius/rubinius/releases/tag/v3.33,https://api.github.com/repos/rubinius/rubinius/zipball/v3.33,v3.33,False,False
3286722,2016-05-23T18:02:24Z,2016-05-23T19:04:52Z,Release 3.32,"Version 3.32 (2016-05-23)
- Fixed substituting RbConfig::CONFIG for cc, c++, cpp. (Brian Shirai)
- Use local symlinks to provide cc, c++ on PATH. (Brian Shirai)
- Build debug C-ext's if Rubinius is a debug build. (Brian Shirai)
- Archive runtime/core every successful Travis build. (Brian Shirai)
- Some configuration cleanup. (Brian Shirai)
- Added new JIT thread. (Brian Shirai)
- Renamed InternalThread to MachineThread. (Brian Shirai)
  This naming is consistent with the refactorings toward Machine being the main
  entity for executing managed code and properly contrasts with future
  refactoring to make ManagedThread the counterpart for managed code execution.
- Start to rework the last remnants of the legacy JIT. (Brian Shirai)
- Fixed stack depth checking with Fiber. (Brian Shirai)
- Added Fiber created, destroyed metrics. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3286722/assets,https://api.github.com/repos/rubinius/rubinius/releases/3286722,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.32,https://github.com/rubinius/rubinius/releases/tag/v3.32,https://api.github.com/repos/rubinius/rubinius/zipball/v3.32,v3.32,False,False
3236404,2016-05-16T19:40:34Z,2016-05-16T20:02:20Z,Release 3.31,"Version 3.31 (2016-05-16)
- Removed rbxti. (Brian Shirai)
- Removed instrumenting profiler. (Brian Shirai)
- Fixed merge from master. (Brian Shirai)
- Removed Ubuntu 12.04 from binary builds. (Brian Shirai)
- Updated profiler gems versions. (Brian Shirai)
- Updated to Bundler 1.12.3. (Brian Shirai)
- Simply track MachineCode execution. (Brian Shirai)
- Removed remnants of rbxti. (Brian Shirai)
- Removed VMJIT, added profile interval to checkpoint. (Brian Shirai)
- Added simple, per-thread, random interval sampling. (Brian Shirai)
  This is mostly a temporary experiment that will likely be replaced with a
  calling-context tree or similar structure and a separate profiler thread.
- Added profile metrics. (Brian Shirai)
- Don't block GC on profiler interval. (Brian Shirai)
- Added more profiler functionality. (Brian Shirai)
  Use -Xsystem.profiler.target=<path> to set the output path for the profiler
  report. The path can optionally contain the text $PID where desired and the
  process ID will be substituted. Quoting the option may be necessary to prevent
  the shell from expanding $PID prematurely. For example:
  
  rbx -Xsystem.profiler.target='path/to/profiler_report-$PID.txt'

The fully qualified name is implemented yet because it requires an additional
data structure to properly track the components, so only the bare method name
is displayed.
- Added config for enabling profiler in subprocesses. (Brian Shirai)
- Short circuit earlier if code is already tracked by profiler. (Brian Shirai)
- Fixed profile output to use full code description. (Brian Shirai)
- Fixed VM.backtrace API. (Brian Shirai)
  Code in the wild is using the old version of this, so we'll support it until
  we can effectively update old users.
- Try yet again to secure Gitter channel info. (Brian Shirai)
- Fixed VM.backtrace. (Brian Shirai)
- Added profiler report interval. (Brian Shirai)
- Cleanup up JSON generation in diagnostics. (Brian Shirai)
- Shuffled Profiler code. (Brian Shirai)
- Added JSON output for profiler via diagnostics. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3236404/assets,https://api.github.com/repos/rubinius/rubinius/releases/3236404,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.31,https://github.com/rubinius/rubinius/releases/tag/v3.31,https://api.github.com/repos/rubinius/rubinius/zipball/v3.31,v3.31,False,False
3177874,2016-05-07T14:38:05Z,2016-05-07T14:54:57Z,Release 3.30,"Version 3.30 (2016-05-06)
- Quarantine Thread#value spec using Thread#kill. (Brian Shirai)
  It's unclear what caused this to start failing, more debugging needed.

The vm()->thread_state()->raise_reason() == cThreadKill except when
vm_thread_state primitive is called from the Thread#**run** ensure clause.
- Revert ""Updated gems_list.txt."" (Brian Shirai)
  This reverts commit 1eb57bdc157e965bf212588886ea73775823c81c.

For some reason, these updates appear to be causing the failure of the
spec quarantined in b903c1f1989233f95d1d329eef53cd30a266ad91.
- Revert ""Quarantine Thread#value spec using Thread#kill."" (Brian Shirai)
  This reverts commit b903c1f1989233f95d1d329eef53cd30a266ad91.

See cfd672a5373e2e16a97b43f01692fe28c8a9043a
- Updated gems_list.txt. (Brian Shirai)
- Set ENV in Docker images to UTF-8. (Brian Shirai)
- Fix new_spec.rb typo. (Red54)
- Use keyword args in IO::{read,write}_nonblock instead of hash handling (Ahmad Sherif)
- Temporarily default concurrent marker to off. (Brian Shirai)
- Fixed Symbol.all_symbols spec. (Brian Shirai)
- Fixed error attempting to wake a dead Thread. (Brian Shirai)
- Fixed BlockEnvironment::of_sender. (Brian Shirai)
- Quarantine day light savings time dependent spec. (Brian Shirai)
- Disable the JIT while running specs. (Brian Shirai)
- Fix an rb_time_timespec_new spec (Ahmad Sherif)
  For time zones with daylight saving time in effect, `Time.now` has a
  DST offset, while the extension function returns a time object in
  standard time offset.
- Removed remaining CallFrame passing. (Brian Shirai)
- Removed unneeded GC inhibitors. (Brian Shirai)
- Fixed invoking the GC. (Brian Shirai)
- Fixed setting String::num_bytes_ to Fixnum. (Brian Shirai)
- Reworked starting and operating on Threads. (Brian Shirai)
- Switched fork/exec lock to SpinLock. (Brian Shirai)
  Since a SpinLock is a simple integer on which CAS operations are performed,
  there is no way to go afoul of 'ownership' during fork(). This appears to
  solve a spordic issue where the child was not able to reset the fork_exec_lock_
  inherited from the parent process.
- Updated JIT for removed CallFrame\* passing. (Brian Shirai)
- Fixed updating PID for logger. (Brian Shirai)
- Fixed setting Thread management state. (Brian Shirai)
  Before returning from Thread.new (or any similar methods), we ensure that
  all the state for tracking Thread instances and any related state are
  completely initialized. This prevents a case where the process calls fork()
  immediately after creating a Thread and the Thread's state is only partially
  initialized before the fork() call completes.
- Cleaned up creating VM instances. (Brian Shirai)
- Initialize NativeMethodEnvironment\* to NULL. (Brian Shirai)
- Fixed shift negative value warnings on clang 3.7. Closes #3535. (Brian Shirai)
  This is a mess. See https://github.com/bonzini/qemu/commit/0f087e8e822a00fdf4ec39b443ebf51a631e0adc
- More JIT fixes from removing passing CallFrame. (Brian Shirai)
- Disable JIT inlining by default temporarily. (Brian Shirai)
- Fixed argument arity for LLVM call. (Brian Shirai)
- Re-init logger lock after fork. (Brian Shirai)
- Revert ""Re-init logger lock after fork."" (Brian Shirai)
  This reverts commit 17f6450b4e0377a87f01fa79b9142c8a261e485f.
- Logging while forking considered extremely dangerous. (Brian Shirai)
- Guard against NULL being added to finalization list. (Brian Shirai)
- Better integrate logger facility. (Brian Shirai)
  Basically, almost everything that is in util/ should not be. These major
  components need to be well-integrated with the rest of Rubinius. As in the
  previous case of Immix and the present case of the logger here, that means
  things like taking STATE, VM, etc as parameters and interfacing with things
  like process locks and process phases around fork/exec, etc.
- Some cleanup creating Location objects. (Brian Shirai)
- Ensure we don't use negative skip values for backtraces. (Brian Shirai)
- Ensure the CallFrame in NULL before Mirror::Thread#finish. (Brian Shirai)
- Temporarily disable JIT on Travis. (Brian Shirai)
- Removed CallFrame checks for constant arguments. (Brian Shirai)
- Added backtrace metrics. (Brian Shirai)
- Completely disable the JIT. (Brian Shirai)
- Removed mark stack debugging. (Brian Shirai)
- Restructured layout of JIT files. (Brian Shirai)
- Begin support for LLVM 3.6+. (Brian Shirai)
- Set valid_encoding_ to nil if a String has invalid encoding and an invalid String is appended to it (Ahmad Sherif)
  Fixes #3631
- Add a spec for adding two invalid strings together that results in a valid one (Ahmad Sherif)
- Avoid leaking orphaned VM instances. (Brian Shirai)
  When starting a Thread, there is a point where resources are created but an
  exception could be raised that would result in the resources not getting
  reclaimed. At the moment, this is the VM instance. This will be refactored
  soon, but the same caution will always apply to creating Thread instances.
- Reworked concurrent mark thread. (Brian Shirai)
  The primary reason to use a concurrent marking strategy is to reduce the time
  during which the mutator threads are suspended while marking all reachable
  objects.

However, not running the GC synchronously when a memory threshold is reached
(eg when the Immix region has exhausted available chunks) means that heap
growth or spill over to another region (eg the Large Object Space) is
essential.

The growth is undesirable (because right now there is no compaction and growth
will continue unbounded) and the spill is especially undesirable because the
LOS collector is much less efficient than the Immix collector.

Since the marker thread is essentially racing the mutator threads, under high
allocation rates, the marker would be perpetually behind and a lot of growth
or spill would occur.

Eventually, we'll implement compaction, which will mitigate heap growth. But
that doesn't solve all the problems. To address these issues, we adhere to the
following constraints:
1. We don't defer collection. When the first memory threshold is reached, we
   perform synchronous GC and then create the concurrent marker thread.
2. We respect memory thresholds. We revert to a synchronous collection cycle
   when the concurrent marker cannot keep up with the mutator. Basically, this
   means finishing the GC cycle whenever the threshold is hit.
3. The concurrent marker restarts its work immediately after finishing a GC
   cycle instead of waiting for memory thresholds to be breached. The concurrent
   marker thread then sleeps for random intervals waiting for the mutators to
   produce more objects to scan.
- Added stack protection for loading CompiledCode object. (Brian Shirai)
- Added indicator to -v for concurrent GC enabled. (Brian Shirai)
- Improved bytecode verification failure messages. (Brian Shirai)
- Partially mitigate allocation spills with concurrent marker. (Brian Shirai)
  See the commit message for edd398c79c998eb05ed595a49cd1cbbc7664e8c1.
- Added specific header bit for Large memory region. (Brian Shirai)
- Added GC cycle to object header. (Brian Shirai)
  This is a temporary mechanism to help identify when objects are being created.
  It will be removed when the memory regions are reworked.
- Finish running finalizers before halting the machine. (Brian Shirai)
  During the halting process, when running finalizers, since finalizers may be
  Ruby objects and may run Ruby methods, we need to ensure the system is still
  fully operational.

During the finalizer finish process, no new finalizers may be created.
- Converted // slot annotation to attr_accessor. (Brian Shirai)
  Instead of duplicating the slot definition with the attr_{accessor, reader,
  writer} annotation, we redefine the macros to define the slots. This works for
  all but two cases, which are exceptional, and we define attr_field to define
  the accessors without defining the slot.
- Revert ""Finish running finalizers before halting the machine."" (Brian Shirai)
  This reverts commit 7d071f0cfe85d2fee6964b9292947470fbc8e40a.
- Standardized use of accessors. (Brian Shirai)
  There are two types of instance variables used in the C++ code:
1. Variables that reference managed objects and which the GC needs to know
   about to properly trace the object graph. We call these ""slots"".
2. Variables that reference native types (eg int, double, etc) that the GC
   _cannot_ trace (the GC would misunderstand numbers for memory addresses, for
   example).

Previously, we treated these to types quite differently. We used the '// slot'
notation when declaring the first type so that we could automatically generate
code to process the objects. The second type was usually somewhat consistent
but also ad hoc in many places.

Now we mostly use two macros (attr_accessor for the first type, and attr_field
for the second type) that both define the variables and define setters and
getters for them. There are still some places where this needs to be cleaned
up.

One reason that we need to be very careful about the setters for the first
type of variable (the managed object references) is that when the concurrent
GC is running, we need to know when an object reference is stored into an
object that may have already been processed by the marker. If we don't see
this, that object may be considered unreachable by the GC _even though it's
being referenced_. This results in the equivalent to a use-after-free bug in a
language with manually managed memory.

Consistently using the managed object reference accessors means that we can
layer other behavior on the access functions. For example, if we tag objects
with an identifier for the thread that created them, we can log or prevent
mutation access from a different thread.
- Fixed setting FSEvent handle on Linux. (Brian Shirai)
- Properly guard managed objects on stack while loading code. (Brian Shirai)
- Deploy Docker Hub update. (Brian Shirai)
- Removed newlines from base64 digest. (Brian Shirai)
- A bit of write_barrier cleanup. (Brian Shirai)
- minor refactoring of @mode handling (Chuck Remes)
  Doing this to ease the merging of the codedb-ffi-io branch
  later on. While fixing some code in rubysl-socket it was noted
  that it touched the @mode variable directly. To simplify
  compatibility (forward and backward) with that gem, it makes
  sense to move this @mode handling to its own methods.
- Updated gems_list.txt. (Brian Shirai)
- Updated rubygems to 2.6.2 (Brian Shirai)
  RubyGems 2.6.2 installed

=== 2.6.2 / 2016-03-12

Bug fixes:
- Fix wrong version of gem activation for bin stub. Pull request #1527 by
  Aaron Patterson.
- Speed up gem activation failures. Pull request #1539 by Aaron Patterson.
- Fix platform sorting in the resolver. Pull request #1542 by Samuel E.
  Giddins.
- Ensure we unlock the monitor even if try_activate throws. Pull request
  #1538 by Charles Oliver Nutter.

=== 2.6.1 / 2016-02-28

Bug fixes:
- Ensure `default_path` and `home` are set for paths. Pull request #1513
  by Aaron Patterson.
- Restore but deprecate support for Array values on `Gem.paths=`. Pull
  request #1514 by Aaron Patterson.
- Fix invalid gem file preventing gem install from working. Pull request
  #1499 by Luis Sagastume.

=== 2.6.0 / 2016-02-26

Minor enhancements:
- RubyGems now defaults the `gem push` to the gem's ""allowed_push_host""
  metadata setting.  Pull request #1486 by Josh Lane.
- Update bundled Molinillo to 0.4.3. Pull request #1493 by Samuel E. Giddins.
- Add version option to gem open command. Pull request #1483 by Hrvoje
  Šimić.
- Feature/add silent flag. Pull request #1455 by Luis Sagastume.
- Allow specifying gem requirements via env variables. Pull request #1472
  by Samuel E. Giddins.

Bug fixes:
- RubyGems now stores `gem push` credentials under the host you signed-in for.
  Pull request #1485 by Josh Lane.
- Move `coding` location to first line. Pull request #1471 by SHIBATA
  Hiroshi.
- [PathSupport] Handle a regexp path separator. Pull request #1469 by
  Samuel E. Giddins.
- Clean up the PathSupport object. Pull request #1094 by Aaron Patterson.
- Join with File::PATH_SEPARATOR in Gem.use_paths. Pull request #1476 by
  Samuel E. Giddins.
- Handle when the gem home and gem path arent set in the config file. Pull
  request #1478 by Samuel E. Giddins.
- Terminate TimeoutHandler. Pull request #1479 by Nobuyoshi Nakada.
- Remove redundant cache. Pull request #1482 by Eileen M. Uchitelle.
- Freeze `Gem::Version@segments` instance variable. Pull request #1487 by
  Ben Dean.
- Gem cleanup is trying to uninstall gems outside GEM_HOME and reporting
  an error after it tries. Pull request #1353 by Luis Sagastume.
- Avoid duplicated sources. Pull request #1489 by Luis Sagastume.
- Better description for quiet flag. Pull request #1491 by Luis Sagastume.
- Raise error if find_by_name returns with nil. Pull request #1494 by
  Zoltán Hegedüs.
- Find_files only from loaded_gems when using gemdeps. Pull request #1277
  by Michal Papis.

=== 2.5.2 / 2016-01-31

Bug fixes:
- Fix memoization of Gem::Version#prerelease? Pull request #1125 by Matijs van
  Zuijlen.
- Handle trailing colons in GEM_PATH, by Damien Robert.
- Improve the Gemfile `gemspec` method, fixing #1204 and #1033. Pull request
  #1276 by Michael Papis.
- Warn only once when a gemspec license is invalid. Pull request #1414 by Samuel
  E. Giddins.
- Check for exact constants before using them, fixing Ruby bug #11940. Pull
  request #1438 by Nobuyoshi Nakada.
- Fix building C extensions on Ruby 1.9.x on Windows. Pull request #1453 by Marie
  Markwell.
- Handle symlinks containing "".."" correctly. Pull request #1457 by Samuel E.
  Giddins.

Minor enhancements:
- Add `--no-rc` flag, which skips loading `.gemrc`. Pull request #1329 by Luis
  Sagastume.
- Allow basic auth to be excluded from `allowed_push_host`. By Josh Lane.
- Add `gem list --exact`, which finds gems by string match instead of regex. Pull
  request #1344 by Luis Sagastume.
- Suggest alternatives when gem license is unknown. Pull request #1443 by Samuel
  E. Giddins.
- Print a useful error if a binstub expects a newer version of a gem than is
  installed. Pull request #1407 by Samuel E. Giddins.
- Allow the (supported) s3:// scheme to be used with `--source`. Pull request
  #1416 by Dave Adams.
- Add `--[no-]post-install-message` to `install` and `update`. Pull request #1162
  by Josef Šimánek.
- Add `--host` option to `yank`, providing symmetry with `pull`. Pull request
  #1361 by Mike Virata-Stone.
- Update bundled Molinillo to 0.4.1. Pull request #1452 by Samuel E. Giddins.
- Allow calling `build` without '.gemspec'. Pull request #1454 by Stephen
  Blackstone.
- Add support for `source` option on gems in Gemfile. Pull request #1355 by
  Michael Papis.
- Function correctly when string literals are frozen on Ruby 2.3. Pull request
  #1408 by Samuel E. Giddins.

=== 2.5.1 / 2015-12-10

Bug fixes:
- Ensure platform sorting only uses strings. Affected binary installs on Windows.
  Issue #1369 reported by Ryan Atball (among others).
  Pull request #1375 by Samuel E. Giddins.
- Revert PR #1332. Unable to reproduce, and nil should be impossible.
- Gem::Specification#to_fullpath now returns .rb extensions when such a file
  exists.  Pull request #1114 by y-yagi.
- RubyGems now handles Net::HTTPFatalError instead of crashing.  Pull
  request #1314 by Samuel E. Giddins.
- Updated bundled Molinillo to 0.4.0.  Pull request #1322, #1396 by Samuel E.
  Giddins.
- Improved performance of spec loading by reducing likelihood of loading the
  complete specification.  Pull request #1373 by Aaron Patterson.
- Improved caching of requirable files  Pull request #1377 by Aaron Patterson.
- Fixed activation of gems with development dependencies.  Pull request #1388
  by Samuel E. Giddins.
- RubyGems now uses the same Molinillo vendoring strategy as Bundler.  Pull
  request #1397 by Samuel E. Giddins.
- Fixed documentation of Gem::Requirement.parse.  Pull request #1398 by
  Juanito Fatas.
- RubyGems no longer warns when a prerelease gem has prerelease dependencies.
  Pull request #1399 by Samuel E. Giddins.
- Fixed Gem::Version documentation example.  Pull request #1401 by Guilherme
  Goettems Schneider.
- Updated documentation links to https://.  Pull request #1404 by Suriyaa
  Kudo.
- Fixed double word typo.  Pull request #1411 by Jake Worth.

---
- Don't trigger docker from this repo. (Brian Shirai)
  The docker builds are triggered from the Ubuntu 12.04 and 14.04 builds in
  the rubinius-build repo.
- Show what files were built on Heroku build. (Brian Shirai)
- Some Arguments tweaks. (Brian Shirai)
- Fixed issues with concurrent marking. (Brian Shirai)
  As noted in one of the comments in this commit, there is a serious issue with
  partially initialized data when we have a concurrent marking thread running.
  When a Tuple is created, but the fields are not initialized to nil, they may
  contain random data.

When a value is stored into a managed object, we run a write barrier. This bit
of code serves two functions. First, it ""remembers"" the object being stored in
case the object it is being stored into is a mature object and the object
being stored is a young object. When the young collector runs, those
""remembered"" objects are part of the roots for the young region being
collected. Second, if the object being stored into hasn't been traced yet, we
trace it, and we add the object being stored to the stack of objects to trace.

If the Tuple fields aren't initialized, we'll hit a garbage value when we try
to trace it. If we don't run the write barrier when we assign values, we have
the chance of losing one of those references. An alternative to ""doubly
initializing"" the Tuple instance is to run two loops. One that assigns values
and one that runs the write barrier on the entries. It should be apparent that
we haven't really saved anything by using this purported ""optimization"" of
creating the Tuple uninitialized (dirty).

This is a good lesson in optimizing. The best optimization is not running any
code at all, rather than making running code faster, if that is an option. It
usually will give greater return to rework code in a way that significant code
can be eliminated vs ""optimized"". In this case, we should get rid of Array and
Tuple in the middle of stuff like calling methods.
- Add verbose logging to curl S3 uploading. (Brian Shirai)
- Use correct name for heroku S3 path. (Brian Shirai)
- A bit more CallFrame cleanup. (Brian Shirai)
  We don't have a constructor for CallFrame so it's not always clear which
  fields are initialized. In this case, VM::call_frame_ is NULL when the VM
  instance is created, so calling VM::push_call_frame sets previous to NULL when
  pushing the new frame. This is fine, but brittle.

Ultimately, CallFrame needs to be split into separate frame types for managed
code, FFI, JIT, and native methods (ie C-API), and constructors should be
defined for every type.
- Removed deprecated CompiledMethod and StaticScope. (Brian Shirai)
  Also adds deprecation for CallCustom.
- Don't start Metrics if not requested. (Brian Shirai)
  Eventually, we'll add an API to start this on demand via the Console.
- Decouple GC::Profiler from Metrics a bit. (Brian Shirai)
  Ultimately, the very simplistic utility of GC::Profiler isn't useful and
  Rubinius::Metrics should be used directly instead. We may remove support for
  GC::Profiler in the future.  For now, using it requires enabling Rubinius
  Metrics.
- A fresh start... (Brian Shirai)
- Cleaned up more JIT code. (Brian Shirai)
- Added include for RapidJSON. (Brian Shirai)
- Added RapidJSON. (Brian Shirai)
  https://github.com/miloyip/rapidjson c02d52ad56595dc70b38daf46b5f315d3a7115fa
- Added -Xsystem.diagnostics.target. (Brian Shirai)
  This specifies the location to send diagnostics data.
- Removed SystemDiagnostics object. (Brian Shirai)
  Instead of a single data object that collects all system diagnostics, this is
  the first step of using a single mechanism to emit diagnostics from a variety
  of system components, without coupling them.
- Added Diagnostics thread. (Brian Shirai)
- Fixed setting internal thread size. (Brian Shirai)
  On FreeBSD, setting the stack to 4096 bytes for threads like the Console
  Listener was not sufficient. This resulted in a SEGV while booting Rubinius,
  which happens before the signal handler has been set up, so nothing is shown
  in the logs. This also causes Rubinius to abort while trying to build
  Melbourne, leaving Rubinius in a very difficult to debug configuration.
- Added diagnostics emitter. (Brian Shirai)
- Specs for Proc#arity. The current specs cover lambdas twice. (Nathan Currier)
- Fix Proc#arity. (Nathan Currier)
- Cleaned up old Diagnostics logging. (Brian Shirai)
- Create some diagnostics reporting indirection. (Brian Shirai)
- Updated gems_list.txt. (Brian Shirai)
- A bit more diagnostics cleanup. (Brian Shirai)
- Cast cast cast your bits gently for GCC. Closes #3652. (Brian Shirai)
- Leading gcc carefully by the hand. (Brian Shirai)
- Ssssssssssize_t GCC. (Brian Shirai)
- Fixed syntax error in .travis.yml. (Brian Shirai)
- Updated version of coverage gems. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3177874/assets,https://api.github.com/repos/rubinius/rubinius/releases/3177874,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.30,https://github.com/rubinius/rubinius/releases/tag/v3.30,https://api.github.com/repos/rubinius/rubinius/zipball/v3.30,v3.30,False,False
3134465,2016-04-30T21:29:39Z,2016-04-30T21:47:41Z,Release 3.29,"Version 3.29 (2016-04-30)
- Added CallSite#reset. (Brian Shirai)
  This will enable resetting all the CallSites in a process to a known state to
  be able to eg using CallSite data for computing code coverage.
- Added missing CallSite#reset spec file. (Brian Shirai)
- Spec for a block local assigned in a nested scope before initialization. (Nathan Currier)
- Spec for not capturing a local variable in place of a block argument. (Nathan Currier)
- Reworked checking stack overflow. (Brian Shirai)
- Updated rubinius-ast version. (Brian Shirai)
- Added header file for getrlimit(). (Brian Shirai)
- Refactor zsuper instruction to handle arguments correctly (Ahmad Sherif)
  Fixes #3643
- Add a spec for zsuper passing splat and keyword arguments together (Ahmad Sherif)
- Cleaned up checking for interrupted thread. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3134465/assets,https://api.github.com/repos/rubinius/rubinius/releases/3134465,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.29,https://github.com/rubinius/rubinius/releases/tag/v3.29,https://api.github.com/repos/rubinius/rubinius/zipball/v3.29,v3.29,False,False
3088140,2016-04-25T04:40:24Z,2016-04-25T04:57:55Z,Release 3.28,"Version 3.28 (2016-04-24)
- Improved cache metrics. (Brian Shirai)
- Reworked call site, inline cache mechanism. (Brian Shirai)
  A CallSite is an abstraction of the point of call & return for another
  procedure. An InlineCache is an abstraction of a particular instance of an
  executable at a CallSite.

In a 'statically typed' (or early bound) language, the executable at the call
site is known 'statically', via textual analysis of the program text. In a
'dynamically-typed' (or late bound) language, the particular executable is not
known until the program is executed. Consequently, in a late-bound language, a
call site must permit dynamic reconfiguration based on the program's
execution.

This dynamic reconfiguration requires prediction: when this kind of object is
seen, we predict we will see it again. The cost of finding the executable in
the first place can then be reduced by caching the previous result of looking
up the executable. When we see this kind of object, we can retrieve the
executable from the cache at less cost than looking it up.

If our predictions are correct, and the mechanism of creating and retrieving
items from the cache is actually less than searching for the item, we can
execute the program more efficiently. However, predictions can be wrong. If
they are wrong, the cache mechanism can become pure overhead, work done that
produces no value. In this case, the caching mechanism will make the program
_less_ efficient rather than more efficient.

The number of cached items is typically limited because as the number grows,
the cost of retrieving items typically grows. Ideally, the first cached item
would always be the desired one. When that is not true, some (hopefully less
costly than lookup) search mechanism is required. Contiguous structures that
permit linear probing and are CPU cache-efficient usually perform very well.
If the number of entries grows, the algorithm needs to change from on O(n)
complexity to something closer to O(1), or the extra work of the caching
mechanism will be a cost increase instead of a cost reduction.

To account for our predictions being wrong, we need to be able to update,
replace, or even discard previous predictions. In same cases, we may need to
disable the caching mechanism completely. This latter case is true when the
types of objects seen at a call site vary widely.

This change also adds some new metrics for understanding how a program is
performing from the perspective of the call sites and inline caches. The next
mechanism to add is diagnostics to see the operation of individual caches
instead of the aggregate values that the metrics provide.

Another improvement that is needed is to cache `#method_missing`,
`#respond_to?` and `#send` call sites.
- Added C-API define for rb_big_pack. Closes #3637. (Brian Shirai)
- Always report build status in Gitter. (Brian Shirai)
- Compile in debug mode when in git submodule (Dylan McKay)
  We currently compile in debug mode if there is a `.git` directory in the project
  root.

This compiles Rubinius in debug mode even if `.git` is a file, so that
we compile in debug mode when rubinius is in a git submodule.
- Attempt to use secure env var for Gitter URL. (Brian Shirai)
- Revert ""Attempt to use secure env var for Gitter URL."" (Brian Shirai)
  This reverts commit a141ba02eaeefe60bfab62c7b6e3cb4f66dd6148.

This can be set directly through the Travis interface.
- Attempt to use Travis UI-set env var for Gitter. (Brian Shirai)
- Revert ""Attempt to use Travis UI-set env var for Gitter."" (Brian Shirai)
  This reverts commit dba105de28d7a5cd5344b11a29ffe330f6b79b2a.

Apparently, nope.
- Re-added caching at check_serial instruction. (Brian Shirai)
- Singleton classes can't have subclasses. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3088140/assets,https://api.github.com/repos/rubinius/rubinius/releases/3088140,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.28,https://github.com/rubinius/rubinius/releases/tag/v3.28,https://api.github.com/repos/rubinius/rubinius/zipball/v3.28,v3.28,False,False
3030721,2016-04-15T18:36:35Z,2016-04-15T19:02:59Z,Release 3.27,"Version 3.27 (2016-04-15)
- Remove tracing Symbols in MachineCode objects. (Brian Shirai)
  We need to trace Symbols for collecting unused ones, but we don't do that now
  and we can do it with the upcoming reference counting mechanism.
- Updated gems_list.txt. (Brian Shirai)
- Coalesce condition blocks so GCC _5_ can understand. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/3030721/assets,https://api.github.com/repos/rubinius/rubinius/releases/3030721,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.27,https://github.com/rubinius/rubinius/releases/tag/v3.27,https://api.github.com/repos/rubinius/rubinius/zipball/v3.27,v3.27,False,False
2996111,2016-04-11T17:50:25Z,2016-04-11T18:14:16Z,Release 3.26,"Version 3.26 (2016-04-11)
- Fixed rand() for degenerative empty range (fengb)
- Fix float ranges where diff of 0 (fengb)
- Fixed edge case where small BigDecimal ranges were erroring (fengb)
- AUTHORS vanity (fengb)
- Adds Numeric#step keyword arguments specs. (Filipe Dias)
  The implementation moves the specs that applies to all modes
  (positional arguments, keyword arguments and mixed arguments) to a
  shared spec file.
  The specific code is maintained on the main Numeric#step spec file.
- Implements keyword arguments on Numeric#step. (Filipe Dias)
- Move get_args method to a helper file. (Filipe Dias)
- Removes unneeded parenthesis from an if. (Filipe Dias)
- Switch from be_kind_of to be_an_instance_of. (Filipe Dias)
- Removes specs that only test implementation details. (Filipe Dias)
- First take at the Numeric#step spec reorganization. (Filipe Dias)
- Avoid false positive due to type conversions on Numeric types. (Filipe Dias)
- Restructure step as string specs (Filipe Dias)
- Adds more specs and fix a spec text. (Filipe Dias)
- Use value instead of self. (Filipe Dias)
  When one the params is a float, the results are floats.
- Replace Float::INFINITY value by infinity_value helper. (Filipe Dias)
- Remove ruby_bug guards (Filipe Dias)
- Apply another approach to share the specs for different argument types. (Filipe Dias)
- Adds an extra test to the keywords argument style. (Filipe Dias)
- Improve shared spec comment. (Filipe Dias)
- Improve test description to avoid misinterpretation. (Filipe Dias)
- Removed using BigDecimal in rand specs. (Brian Shirai)
- Fixed issues from merging #3182. (Brian Shirai)
- A proc call can use an implicit block. Fixes #3202. (Brian Shirai)
- Removed runtime use of CompiledCode#literals. (Brian Shirai)
- Fixed BytecodeVerifier for CompiledCode#literals change. (Brian Shirai)
- Primitive invokers aren't managed objects. (Brian Shirai)
- Updated gems. (Brian Shirai)
- Updated specs for insn changes. (Brian Shirai)
- Support push_float pseudo insn. (Brian Shirai)
  We should replace push_literal with specific instructions like push_string,
  push_symbol, push_float.
- Create call site and constant cache lists. (Brian Shirai)
- Added a few more machine metrics. (Brian Shirai)
- Untrusted status is a synonym of tainted. (Brian Shirai)
- Disable OnStack used for spawn. (Brian Shirai)
- Some cleanup internalizing CompiledCode. (Brian Shirai)
- Revert ""Disable OnStack used for spawn."" (Brian Shirai)
  This reverts commit a932b2329cfc8cab5cd2815badc92eeb04bc9817.

Until we replace this mechanism, we're going to lock operations.
- Added locking to LinkedList operations. (Brian Shirai)
  Until we remove this mechanism, we need to lock operations because somewhere
  around subprocess creation wires are getting crossed, as seen in the linked
  list assertion that randomly shows up on Travis.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2996111/assets,https://api.github.com/repos/rubinius/rubinius/releases/2996111,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.26,https://github.com/rubinius/rubinius/releases/tag/v3.26,https://api.github.com/repos/rubinius/rubinius/zipball/v3.26,v3.26,False,False
2966345,2016-04-06T17:59:50Z,2016-04-06T18:45:20Z,Release 3.25,"Version 3.25 (2016-04-06)
- Add keyword arguments support for zsuper (Ahmad Sherif)
  Fixes #3363
- Add a failing JIT spec for zsuper keyword arguments support (Ahmad Sherif)
- Use sha256 for our homebrew formula (Jason Yeo)
- Fixed a couple things from the keywords patch merge. (Brian Shirai)
- Updated Melbourne version. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2966345/assets,https://api.github.com/repos/rubinius/rubinius/releases/2966345,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.25,https://github.com/rubinius/rubinius/releases/tag/v3.25,https://api.github.com/repos/rubinius/rubinius/zipball/v3.25,v3.25,False,False
2957790,2016-04-05T17:49:06Z,2016-04-05T18:28:25Z,Release 3.24,"Version 3.24 (2016-04-05)
- Array#new_range fills unassigned slots with nil. Fixes #3634. (Brian Shirai)
  This method needs to be replaced with a Mirror method so it is not polluting
  the Array namespace.
- Actually commit fixes for #3634. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2957790/assets,https://api.github.com/repos/rubinius/rubinius/releases/2957790,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.24,https://github.com/rubinius/rubinius/releases/tag/v3.24,https://api.github.com/repos/rubinius/rubinius/zipball/v3.24,v3.24,False,False
2950126,2016-04-04T18:16:09Z,2016-04-04T20:25:20Z,Release 3.23,"Version 3.23 (2016-04-04)
- Moved jit_primitives.cpp to jit/ directory. (Brian Shirai)
- Removed CallCustom. (Brian Shirai)
  CallCustom was added to provide a mechanism for binding a call site that was
  independent of Ruby method resolution semantics.

The instruction set is being improved to, among other things, decouple method
or function resolution, caching, and invocation. This will provide arbitrary
semantics for finding the code to run, caching it, and invoking it.
- Fixed custom call site dispatch. (Brian Shirai)
  This abstruse mechanism will be cleaned up with the call site and inline cache
  rewrite.
- String#dup returns copy when no modification made. Fixes #3633. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2950126/assets,https://api.github.com/repos/rubinius/rubinius/releases/2950126,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.23,https://github.com/rubinius/rubinius/releases/tag/v3.23,https://api.github.com/repos/rubinius/rubinius/zipball/v3.23,v3.23,False,False
2931257,2016-04-01T06:49:40Z,2016-04-01T07:34:44Z,Release 3.22,"Version 3.22 (2016-03-31)
- minor refactoring of @mode handling (Chuck Remes)
  Doing this to ease the merging of the codedb-ffi-io branch
  later on. While fixing some code in rubysl-socket it was noted
  that it touched the @mode variable directly. To simplify
  compatibility (forward and backward) with that gem, it makes
  sense to move this @mode handling to its own methods.
- Updated gems_list.txt. (Brian Shirai)
- Updated rubygems to 2.6.2 (Brian Shirai)
  RubyGems 2.6.2 installed

=== 2.6.2 / 2016-03-12

Bug fixes:
- Fix wrong version of gem activation for bin stub. Pull request #1527 by
  Aaron Patterson.
- Speed up gem activation failures. Pull request #1539 by Aaron Patterson.
- Fix platform sorting in the resolver. Pull request #1542 by Samuel E.
  Giddins.
- Ensure we unlock the monitor even if try_activate throws. Pull request
  #1538 by Charles Oliver Nutter.

=== 2.6.1 / 2016-02-28

Bug fixes:
- Ensure `default_path` and `home` are set for paths. Pull request #1513
  by Aaron Patterson.
- Restore but deprecate support for Array values on `Gem.paths=`. Pull
  request #1514 by Aaron Patterson.
- Fix invalid gem file preventing gem install from working. Pull request
  #1499 by Luis Sagastume.

=== 2.6.0 / 2016-02-26

Minor enhancements:
- RubyGems now defaults the `gem push` to the gem's ""allowed_push_host""
  metadata setting.  Pull request #1486 by Josh Lane.
- Update bundled Molinillo to 0.4.3. Pull request #1493 by Samuel E. Giddins.
- Add version option to gem open command. Pull request #1483 by Hrvoje
  Šimić.
- Feature/add silent flag. Pull request #1455 by Luis Sagastume.
- Allow specifying gem requirements via env variables. Pull request #1472
  by Samuel E. Giddins.

Bug fixes:
- RubyGems now stores `gem push` credentials under the host you signed-in for.
  Pull request #1485 by Josh Lane.
- Move `coding` location to first line. Pull request #1471 by SHIBATA
  Hiroshi.
- [PathSupport] Handle a regexp path separator. Pull request #1469 by
  Samuel E. Giddins.
- Clean up the PathSupport object. Pull request #1094 by Aaron Patterson.
- Join with File::PATH_SEPARATOR in Gem.use_paths. Pull request #1476 by
  Samuel E. Giddins.
- Handle when the gem home and gem path arent set in the config file. Pull
  request #1478 by Samuel E. Giddins.
- Terminate TimeoutHandler. Pull request #1479 by Nobuyoshi Nakada.
- Remove redundant cache. Pull request #1482 by Eileen M. Uchitelle.
- Freeze `Gem::Version@segments` instance variable. Pull request #1487 by
  Ben Dean.
- Gem cleanup is trying to uninstall gems outside GEM_HOME and reporting
  an error after it tries. Pull request #1353 by Luis Sagastume.
- Avoid duplicated sources. Pull request #1489 by Luis Sagastume.
- Better description for quiet flag. Pull request #1491 by Luis Sagastume.
- Raise error if find_by_name returns with nil. Pull request #1494 by
  Zoltán Hegedüs.
- Find_files only from loaded_gems when using gemdeps. Pull request #1277
  by Michal Papis.

=== 2.5.2 / 2016-01-31

Bug fixes:
- Fix memoization of Gem::Version#prerelease? Pull request #1125 by Matijs van
  Zuijlen.
- Handle trailing colons in GEM_PATH, by Damien Robert.
- Improve the Gemfile `gemspec` method, fixing #1204 and #1033. Pull request
  #1276 by Michael Papis.
- Warn only once when a gemspec license is invalid. Pull request #1414 by Samuel
  E. Giddins.
- Check for exact constants before using them, fixing Ruby bug #11940. Pull
  request #1438 by Nobuyoshi Nakada.
- Fix building C extensions on Ruby 1.9.x on Windows. Pull request #1453 by Marie
  Markwell.
- Handle symlinks containing "".."" correctly. Pull request #1457 by Samuel E.
  Giddins.

Minor enhancements:
- Add `--no-rc` flag, which skips loading `.gemrc`. Pull request #1329 by Luis
  Sagastume.
- Allow basic auth to be excluded from `allowed_push_host`. By Josh Lane.
- Add `gem list --exact`, which finds gems by string match instead of regex. Pull
  request #1344 by Luis Sagastume.
- Suggest alternatives when gem license is unknown. Pull request #1443 by Samuel
  E. Giddins.
- Print a useful error if a binstub expects a newer version of a gem than is
  installed. Pull request #1407 by Samuel E. Giddins.
- Allow the (supported) s3:// scheme to be used with `--source`. Pull request
  #1416 by Dave Adams.
- Add `--[no-]post-install-message` to `install` and `update`. Pull request #1162
  by Josef Šimánek.
- Add `--host` option to `yank`, providing symmetry with `pull`. Pull request
  #1361 by Mike Virata-Stone.
- Update bundled Molinillo to 0.4.1. Pull request #1452 by Samuel E. Giddins.
- Allow calling `build` without '.gemspec'. Pull request #1454 by Stephen
  Blackstone.
- Add support for `source` option on gems in Gemfile. Pull request #1355 by
  Michael Papis.
- Function correctly when string literals are frozen on Ruby 2.3. Pull request
  #1408 by Samuel E. Giddins.

=== 2.5.1 / 2015-12-10

Bug fixes:
- Ensure platform sorting only uses strings. Affected binary installs on Windows.
  Issue #1369 reported by Ryan Atball (among others).
  Pull request #1375 by Samuel E. Giddins.
- Revert PR #1332. Unable to reproduce, and nil should be impossible.
- Gem::Specification#to_fullpath now returns .rb extensions when such a file
  exists.  Pull request #1114 by y-yagi.
- RubyGems now handles Net::HTTPFatalError instead of crashing.  Pull
  request #1314 by Samuel E. Giddins.
- Updated bundled Molinillo to 0.4.0.  Pull request #1322, #1396 by Samuel E.
  Giddins.
- Improved performance of spec loading by reducing likelihood of loading the
  complete specification.  Pull request #1373 by Aaron Patterson.
- Improved caching of requirable files  Pull request #1377 by Aaron Patterson.
- Fixed activation of gems with development dependencies.  Pull request #1388
  by Samuel E. Giddins.
- RubyGems now uses the same Molinillo vendoring strategy as Bundler.  Pull
  request #1397 by Samuel E. Giddins.
- Fixed documentation of Gem::Requirement.parse.  Pull request #1398 by
  Juanito Fatas.
- RubyGems no longer warns when a prerelease gem has prerelease dependencies.
  Pull request #1399 by Samuel E. Giddins.
- Fixed Gem::Version documentation example.  Pull request #1401 by Guilherme
  Goettems Schneider.
- Updated documentation links to https://.  Pull request #1404 by Suriyaa
  Kudo.
- Fixed double word typo.  Pull request #1411 by Jake Worth.

---
- Don't trigger docker from this repo. (Brian Shirai)
  The docker builds are triggered from the Ubuntu 12.04 and 14.04 builds in
  the rubinius-build repo.
- Show what files were built on Heroku build. (Brian Shirai)
- Some Arguments tweaks. (Brian Shirai)
- Fixed issues with concurrent marking. (Brian Shirai)
  As noted in one of the comments in this commit, there is a serious issue with
  partially initialized data when we have a concurrent marking thread running.
  When a Tuple is created, but the fields are not initialized to nil, they may
  contain random data.

When a value is stored into a managed object, we run a write barrier. This bit
of code serves two functions. First, it ""remembers"" the object being stored in
case the object it is being stored into is a mature object and the object
being stored is a young object. When the young collector runs, those
""remembered"" objects are part of the roots for the young region being
collected. Second, if the object being stored into hasn't been traced yet, we
trace it, and we add the object being stored to the stack of objects to trace.

If the Tuple fields aren't initialized, we'll hit a garbage value when we try
to trace it. If we don't run the write barrier when we assign values, we have
the chance of losing one of those references. An alternative to ""doubly
initializing"" the Tuple instance is to run two loops. One that assigns values
and one that runs the write barrier on the entries. It should be apparent that
we haven't really saved anything by using this purported ""optimization"" of
creating the Tuple uninitialized (dirty).

This is a good lesson in optimizing. The best optimization is not running any
code at all, rather than making running code faster, if that is an option. It
usually will give greater return to rework code in a way that significant code
can be eliminated vs ""optimized"". In this case, we should get rid of Array and
Tuple in the middle of stuff like calling methods.
- Add verbose logging to curl S3 uploading. (Brian Shirai)
- Use correct name for heroku S3 path. (Brian Shirai)
- A bit more CallFrame cleanup. (Brian Shirai)
  We don't have a constructor for CallFrame so it's not always clear which
  fields are initialized. In this case, VM::call_frame_ is NULL when the VM
  instance is created, so calling VM::push_call_frame sets previous to NULL when
  pushing the new frame. This is fine, but brittle.

Ultimately, CallFrame needs to be split into separate frame types for managed
code, FFI, JIT, and native methods (ie C-API), and constructors should be
defined for every type.
- Removed deprecated CompiledMethod and StaticScope. (Brian Shirai)
  Also adds deprecation for CallCustom.
- Don't start Metrics if not requested. (Brian Shirai)
  Eventually, we'll add an API to start this on demand via the Console.
- Decouple GC::Profiler from Metrics a bit. (Brian Shirai)
  Ultimately, the very simplistic utility of GC::Profiler isn't useful and
  Rubinius::Metrics should be used directly instead. We may remove support for
  GC::Profiler in the future.  For now, using it requires enabling Rubinius
  Metrics.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2931257/assets,https://api.github.com/repos/rubinius/rubinius/releases/2931257,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.22,https://github.com/rubinius/rubinius/releases/tag/v3.22,https://api.github.com/repos/rubinius/rubinius/zipball/v3.22,v3.22,False,False
2913141,2016-03-30T06:05:54Z,2016-03-30T07:02:27Z,Release 3.21,"Version 3.21 (2016-03-29)
- Set valid_encoding_ to nil if a String has invalid encoding and an invalid String is appended to it (Ahmad Sherif)
  Fixes #3631
- Add a spec for adding two invalid strings together that results in a valid one (Ahmad Sherif)
- Avoid leaking orphaned VM instances. (Brian Shirai)
  When starting a Thread, there is a point where resources are created but an
  exception could be raised that would result in the resources not getting
  reclaimed. At the moment, this is the VM instance. This will be refactored
  soon, but the same caution will always apply to creating Thread instances.
- Reworked concurrent mark thread. (Brian Shirai)
  The primary reason to use a concurrent marking strategy is to reduce the time
  during which the mutator threads are suspended while marking all reachable
  objects.

However, not running the GC synchronously when a memory threshold is reached
(eg when the Immix region has exhausted available chunks) means that heap
growth or spill over to another region (eg the Large Object Space) is
essential.

The growth is undesirable (because right now there is no compaction and growth
will continue unbounded) and the spill is especially undesirable because the
LOS collector is much less efficient than the Immix collector.

Since the marker thread is essentially racing the mutator threads, under high
allocation rates, the marker would be perpetually behind and a lot of growth
or spill would occur.

Eventually, we'll implement compaction, which will mitigate heap growth. But
that doesn't solve all the problems. To address these issues, we adhere to the
following constraints:
1. We don't defer collection. When the first memory threshold is reached, we
   perform synchronous GC and then create the concurrent marker thread.
2. We respect memory thresholds. We revert to a synchronous collection cycle
   when the concurrent marker cannot keep up with the mutator. Basically, this
   means finishing the GC cycle whenever the threshold is hit.
3. The concurrent marker restarts its work immediately after finishing a GC
   cycle instead of waiting for memory thresholds to be breached. The concurrent
   marker thread then sleeps for random intervals waiting for the mutators to
   produce more objects to scan.
- Added stack protection for loading CompiledCode object. (Brian Shirai)
- Added indicator to -v for concurrent GC enabled. (Brian Shirai)
- Improved bytecode verification failure messages. (Brian Shirai)
- Partially mitigate allocation spills with concurrent marker. (Brian Shirai)
  See the commit message for edd398c79c998eb05ed595a49cd1cbbc7664e8c1.
- Added specific header bit for Large memory region. (Brian Shirai)
- Added GC cycle to object header. (Brian Shirai)
  This is a temporary mechanism to help identify when objects are being created.
  It will be removed when the memory regions are reworked.
- Finish running finalizers before halting the machine. (Brian Shirai)
  During the halting process, when running finalizers, since finalizers may be
  Ruby objects and may run Ruby methods, we need to ensure the system is still
  fully operational.

During the finalizer finish process, no new finalizers may be created.
- Converted // slot annotation to attr_accessor. (Brian Shirai)
  Instead of duplicating the slot definition with the attr_{accessor, reader,
  writer} annotation, we redefine the macros to define the slots. This works for
  all but two cases, which are exceptional, and we define attr_field to define
  the accessors without defining the slot.
- Revert ""Finish running finalizers before halting the machine."" (Brian Shirai)
  This reverts commit 7d071f0cfe85d2fee6964b9292947470fbc8e40a.
- Standardized use of accessors. (Brian Shirai)
  There are two types of instance variables used in the C++ code:
1. Variables that reference managed objects and which the GC needs to know
   about to properly trace the object graph. We call these ""slots"".
2. Variables that reference native types (eg int, double, etc) that the GC
   _cannot_ trace (the GC would misunderstand numbers for memory addresses, for
   example).

Previously, we treated these to types quite differently. We used the '// slot'
notation when declaring the first type so that we could automatically generate
code to process the objects. The second type was usually somewhat consistent
but also ad hoc in many places.

Now we mostly use two macros (attr_accessor for the first type, and attr_field
for the second type) that both define the variables and define setters and
getters for them. There are still some places where this needs to be cleaned
up.

One reason that we need to be very careful about the setters for the first
type of variable (the managed object references) is that when the concurrent
GC is running, we need to know when an object reference is stored into an
object that may have already been processed by the marker. If we don't see
this, that object may be considered unreachable by the GC _even though it's
being referenced_. This results in the equivalent to a use-after-free bug in a
language with manually managed memory.

Consistently using the managed object reference accessors means that we can
layer other behavior on the access functions. For example, if we tag objects
with an identifier for the thread that created them, we can log or prevent
mutation access from a different thread.
- Fixed setting FSEvent handle on Linux. (Brian Shirai)
- Properly guard managed objects on stack while loading code. (Brian Shirai)
- Deploy Docker Hub update. (Brian Shirai)
- Removed newlines from base64 digest. (Brian Shirai)
- A bit of write_barrier cleanup. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2913141/assets,https://api.github.com/repos/rubinius/rubinius/releases/2913141,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.21,https://github.com/rubinius/rubinius/releases/tag/v3.21,https://api.github.com/repos/rubinius/rubinius/zipball/v3.21,v3.21,False,False
2893319,2016-03-26T18:32:18Z,2016-03-26T18:49:27Z,Release 3.20,"Version 3.20 (2016-03-25)
- Fixed setting large object metrics. (Brian Shirai)
- Use GC-safe allocation path in string_dup insn. (Brian Shirai)
- Fixed stop-the-world mechanism. (Brian Shirai)
- Removed GCToken. (Brian Shirai)
  This was a well-intentioned idea but not practical or useful.

The idea was to have the compiler help check where in call paths a
garbage-collection cycle could run. Unfortnately, adding this in as an
after-thought resulted in all the places where GCTokens are created from thin
air deep in some call path. It didn't change the fact that GC could happen
pretty much anywhere.

In a managed runtime, either GC can happen everywhere or it should only happen
at a very small number of extremely well-defined points.  The middle ground of
""it can happen at all these places"" is an invitation for a low budget horror
movie, dismembered objects strewn throughout the code.

Along with the rework of the stop-the-world mechanism, the removal of GCToken
and restricting the invocation of a GC cycle to a single well-defined method
call in a few well-defined locations, and finally, making all allocation paths
GC-safe (ie GC will NOT run when allocating an object), Rubinius will have much
better defined GC behavior.

The GC safe allocation path is important for cases like the string_dup
instruction, where a young GC cycle could run when allocating the dup and the
original String (eg a literal String in a method) is in the young generation
and moved. Since the original String is on the C stack and not in a GC root
object, the dup fails when copying the contents of the original String. It's
better to make allocation GC-safe than to accept the performance cost of the GC
root in these sorts of cases. Also, that case is only one well-defined instance
of the issue. There are more complicated ones.
- Reworked allocation. (Brian Shirai)
  These changes introduce a couple things:
1. All allocation paths are GC-safe.

What that means is that when requesting a new object be created, the request
will be fulfilled _unless_ the system (or process limits prevent it) _without_
GC running. In other words, there are two possible results of allocating an
object: 1) a new object, or 2) an exception because no more memory is
available to the process.

In either case, from the point the object is requested until that request
returns (or the return is bypassed by the exception unwind), the GC will not
run.

There is a trade-off here between running the GC at the instant that some
threshold is breached (eg the eden space is exhausted) and loosening some
requirements that must be maintained for a generational, moving garbage
collector (ie every object reference must be known to the GC at the time the
GC runs). Since we run GC on method entry and loop back branches, there is no
reasonable scenario in which deferring GC until allocation has completed will
result in unwanted object graph thresholds being breached pathologically (eg
an execution path where allocation can grow unbounded).
1. All objects are allocated from the various heaps _uninitialized_ and a
   protocol is established to call an initialization routine on the objects.

The initialization routine is `T::initialize(State* state, T* obj)`, where T is
the type of object being allocated. The method is a static method of the class
of the object. This breaks with the protocol that Ruby uses where `new` is a
module method and `initialize` is an instance method. The primary reason for
choosing a static (ie C++ class) is to avoid an instance method operating on
an incompletely initialized object.

One purpose of this initialization protocol is to eliminate or reduce the
double initialization that we were doing (ie setting all fields to nil and
then initializing them to other default values). The main initialization
method shown above may be an empty body, in which case the compiler will elide
it anyway and there's no overhead to the protocol. In that case, another
initialization method should be called on the newly created object. Since the
allocation method is templated and if the initialization method is visible (ie
in the header file), the compiler should be able to elide remaining double
initialization in most contexts.
- Fixed VM tests. (Brian Shirai)
- Fixed triggering GC. (Brian Shirai)
- Fixed some class creation. (Brian Shirai)
- Improved logging of Thread creation, fork, exec, spawn, backtick. (Brian Shirai)
- BasicObject::BasicObject::BasicObject::BasicObject::BasicObject (Brian Shirai)
- Delay tracking VM objects until Thread is running. (Brian Shirai)
  In the case of `Thread.new`, the OS thread will never run because a
  ThreadError exception is raised when no block is passed. If we track the VM
  object that would ultimately contain the reference to the OS thread, we either
  need a way to remove the VM object when eg `Thread.new` raises an exception or
  we will leak these objects. Instead of tracking and then untracking the VM
  object, we create the object untracked and track it if the OS thread starts
  executing.
- Added missing vm/alloc.hpp to git. (Brian Shirai)
- Added missing vm/thread_phase.hpp. (Brian Shirai)
- Fixes to build on Trusty. (Brian Shirai)
- Switch to unmanaged in FSEvent on Linux. (Brian Shirai)
- Fixed guarding references when calling methods from the VM. (Brian Shirai)
- Properly dup CompiledCode so call sites aren't shared. (Brian Shirai)
- Properly guard JIT specs. (Brian Shirai)
- Rework thread checkpointing and add deadlock logging. (Brian Shirai)
- Reworked when GC is invoked. (Brian Shirai)
- Set thread to unmanaged when making syscall. (Brian Shirai)
- Expand $PID in Metrics filename. (Brian Shirai)
- Improve triggering GC. (Brian Shirai)
- Add timer to new stop-the-world mechanism. (Brian Shirai)
- Added counters for checkpoints and stops. (Brian Shirai)
- Re-introduce checkpoint on block execution. (Brian Shirai)
- Fixed VM tests for collect flag in allocator. (Brian Shirai)
- Threads are pinned (mature). Run write barrier. (Brian Shirai)
- Immix sets collect flag. (Brian Shirai)
- Pulled check outside of loop. (Brian Shirai)
- Fixed VM tests. (Brian Shirai)
- Defer to Immix marker at checkpoints. (Brian Shirai)
- Satisfy gcc 4.8.4. (Brian Shirai)
- Fixed race when iterating thread list. (Brian Shirai)
- Start STW timer before trying to lock. (Brian Shirai)
- Fixed processing mark stack with possible exit condition. (Brian Shirai)
- Reworked ThreadNexus. (Brian Shirai)
- Set thread phase to waiting before locking. (Brian Shirai)
- Let pending young collection interrupt concurrent marker. (Brian Shirai)
- Added metrics on system bytes allocated & freed. (Brian Shirai)
- Reworked triggering GC. (Brian Shirai)
- Run write barrier in missing cases. (Brian Shirai)
- Removed BakerGC. (Brian Shirai)
- Introduce SleepPhase. (Brian Shirai)
  Thread semantics are ad hoc in Ruby so we make a best effort to mimic them
  where possible. The behavior of process exit when one or more threads are
  suspended in a sleep state is not well-defined. We assume that no sleeping
  thread should block the process from exiting. We introduce a specific ""sleep
  phase"" as one state a thread may be in. We then ignore sleeping threads when
  executing a process exit.

Unfortunately, this is more complex than it appears on its face. While
executing a process exit, we are essentially racing any sleeping threads that
may wake up and attempt to access resources that are being destroyed (something
like one of those scenes from Inception with the buildings crumbling around the
participants). We cannot waking thread proceed once process exit has started,
so we permanently lock a mutex that every waking thread must acquire before
progressing.

Ultimately, these lock resources will need to be in the program's data segment,
so they are static memory, not dynamically allocated, as they are now.
- Properly check for write errors in metrics FileEmitter. (Brian Shirai)
- Re-enable write barrier for concurrent marker. (Brian Shirai)
- Fixed CodeDB to use new allocation API. (Brian Shirai)
- Disable concurrent marker temporarily. (Brian Shirai)
- Moved vm/gc to vm/memory. (Brian Shirai)
- Moved Immix region code into vm/memory. (Brian Shirai)
- Moved memory+gc classes to 'namespace memory'. (Brian Shirai)
- Fixed FSEvent finalizer call. (Brian Shirai)
- Renamed ObjectMemory to Memory. (Brian Shirai)
  The Memory class will consolidate all aspects of managed memory in the
  Rubinius machine, not just 'Object' memory. There is a counterpart of
  Memory, as SystemMemory, to manage requesting memory from the underlying
  system (most likely the OS).
- Moved vm/ to machine/. (Brian Shirai)
  The abbreviation 'vm', usually meaning 'virtual machine', is badly overloaded
  and even inconsistent now in the code base (eg with class VM, etc). So, renaming
  the vm/ directory to machine/ and consistently using Rubinius [Mm]achine for
  both the high-level concept of the thing that encompasses the managed runtime
  (ie bytecode execution, memory management, system interface, JIT infrastructure and
  native code generation) and the code that implements it.
- Fixed namespaced references to Address. (Brian Shirai)
- Fixed triggering full collection. (Brian Shirai)
- More ObjectMemory, Memory rename cleanup. (Brian Shirai)
- Added collection logging option. (Brian Shirai)
- Removed Heap remnant of young semi-space. (Brian Shirai)
- Added malloc, calloc, realloc metrics for C-API. (Brian Shirai)
- Removed legacy reference. (Brian Shirai)
- Removed debugging. (Brian Shirai)
- Ignore all yielding threads on halt. (Brian Shirai)
- Reworked triggering mature region collection. (Brian Shirai)
- Trigger Docker Hub builds from Linux sub-builds. (Brian Shirai)
- Check if feature is already loaded when require returns false in Autoload#resolve (Ahmad Sherif)
  This solves the issue mentioned in 01a7c2f9.
- Add a spec for autoloading a constant that was already loaded by another thread (Ahmad Sherif)
  An explanation of the issue can be found in 01a7c2f9.
- Updated gems_list.txt. (Brian Shirai)
- Quarantine Thread#value spec using Thread#kill. (Brian Shirai)
  It's unclear what caused this to start failing, more debugging needed.

The vm()->thread_state()->raise_reason() == cThreadKill except when
vm_thread_state primitive is called from the Thread#**run** ensure clause.
- Revert ""Updated gems_list.txt."" (Brian Shirai)
  This reverts commit 1eb57bdc157e965bf212588886ea73775823c81c.

For some reason, these updates appear to be causing the failure of the
spec quarantined in b903c1f1989233f95d1d329eef53cd30a266ad91.
- Revert ""Quarantine Thread#value spec using Thread#kill."" (Brian Shirai)
  This reverts commit b903c1f1989233f95d1d329eef53cd30a266ad91.

See cfd672a5373e2e16a97b43f01692fe28c8a9043a
- Updated gems_list.txt. (Brian Shirai)
- Hack in new Immix allocator policy. (Brian Shirai)
  This hack introduces a heap growth policy into the allocator. Ultimately,
  the policy needs to define the allocator, or the allocator should be given
  an external policy to interact with. The existing Trigger thing may have
  been intended to do this but doesn't provide interaction (it's one-way).

The goal right now is to stabilize heap growth so that concurrent marking
can be re-introduced, then the young gen can be re-added.
- Set ENV in Docker images to UTF-8. (Brian Shirai)
- Re-enable concurrent mark thread. (Brian Shirai)
- Fixed synchronizing threads. (Brian Shirai)
- Fixed allocating GCData for concurrent marker. (Brian Shirai)
  This GCData structure needs to be removed and STATE properly passed through
  the garbage collection methods.
- Fix new_spec.rb typo. (Red54)
- Use keyword args in IO::{read,write}_nonblock instead of hash handling (Ahmad Sherif)
- Reworked tracking CallFrames. (Brian Shirai)
  CallFrame _invariants_ must be preserved under the following states:
1. calling / returning from _managed methods_;
2. calling / returning from _native methods_;
3. calling / returning from _native functions_;
4. calling / returning from _JIT functions_;
5. running a Fiber;
6. unwinding the stack due to C++ exception handling;
7. unwinding the stack by longjmp();
8. before any managed code runs in a Thread; and
9. after all managed code has run in a Thread.

CallFrame _invariants_ are:

Assume a vector of references to CallFrame instances exists
(VM::call_frames_), where n=VM::call_frames_index_ is the total number of
CallFrame instances and VM::call_frame_ refers to VM::call_frames_[n-1], and
VM::call_frame->previous refers to VM::call_frames_[n-2], etc.
1. VM::call_frames_[0] is the oldest managed frame in a Thread;
2. For all i=0...VM::call_frames_index_, VM::call_frams_[i] has 0+ live
   references to objects.
3. VM::call_frames_[VM::call_frames_index_-1] is the newest managed frame;
4. For all i=0...VM::call_frames_index_, VM::call_frames_[i+1] _follows_
   VM::call_frames_[i], also stated as lifetime(VM::call_frames_[i]) _bounds_
   lifetime(VM::call_frames_[i+1]) where lifetime(cf) returns a tuple (start,
   end) of times during which cf has live references, and for cf[i] ""start_i""
   < ""start_i+1"" and ""end_i"" > ""end_i+1"".
- Used larger stack size for finalizer thread. (Brian Shirai)
- Avoid operating on (really) dead Threads. (Brian Shirai)
  The issue here is that Thread instances may be retained by other objects (eg
  Enumerator) and when the Thread instance itself is finalized, the order of
  finalization is non-deterministic (ie there is no Ruby API to impose an
  ordering on finalization), so a Thread instance may have had its memory for
  VM\* cleaned up, and the other object referring to it may call methods on it
  when that other object is being finalized.

So, we avoid operating on _really_ dead Threads, where a Thread's lifetime
looks something like this:
1. Memory for the Thread allocated, but the Thread is not running as a
   separate thread of execution.
2. The Thread is running.
3. The Thread's separate thread of execution has exited, so it is put in a
   ""zombie"" state, but all the memory for the Thread (except it's execution
   stack) is retained.
4. The Thread itself is still allocated (ie because the Thread is in a
   finalization list so its managed memory hasn't been recycled, or it's just
   been finalized) but the Thread isn't reachable by any live objects.
5. The Thread has been finalized, so it's VM\* memory is deallocated, but the
   managed memory for the Thread itself hasn't been reclaimed.
6. The Thread's managed memory is no longer allocated and any reference to the
   Thread would be an ""access after free"" memory violation (but not necessarily
   one that would trigger a memory fault in the CPU because the region of memory
   it inhabited may still be allocated to the running program).
- Fixed assumption of Symbol table size. (Brian Shirai)
  There is no guarantee that executing some Ruby code will only create one
  new Symbol instance. Since we lazily load code with the CodeDB, we could
  be executing code at any time in any thread, for instance.
- Some fixes for Fiber. (Brian Shirai)
- More fixes for Fiber. (Brian Shirai)
- Use signed values for backtrace frames to skip. (Brian Shirai)
- Removed obsolete -X19 cruft from MSpec. (Brian Shirai)
- Run GC after native methods (C-ext functions). (Brian Shirai)
- Fixed generating backtraces. (Brian Shirai)
- Fixed finding first backtrace frame. (Brian Shirai)
- Temporarily default concurrent marker to off. (Brian Shirai)
- Fixed Symbol.all_symbols spec. (Brian Shirai)
- Fixed error attempting to wake a dead Thread. (Brian Shirai)
- Fixed BlockEnvironment::of_sender. (Brian Shirai)
- Quarantine day light savings time dependent spec. (Brian Shirai)
- Disable the JIT while running specs. (Brian Shirai)
- Fix an rb_time_timespec_new spec (Ahmad Sherif)
  For time zones with daylight saving time in effect, `Time.now` has a
  DST offset, while the extension function returns a time object in
  standard time offset.
- Removed remaining CallFrame passing. (Brian Shirai)
- Removed unneeded GC inhibitors. (Brian Shirai)
- Fixed invoking the GC. (Brian Shirai)
- Fixed setting String::num_bytes_ to Fixnum. (Brian Shirai)
- Reworked starting and operating on Threads. (Brian Shirai)
- Switched fork/exec lock to SpinLock. (Brian Shirai)
  Since a SpinLock is a simple integer on which CAS operations are performed,
  there is no way to go afoul of 'ownership' during fork(). This appears to
  solve a spordic issue where the child was not able to reset the fork_exec_lock_
  inherited from the parent process.
- Updated JIT for removed CallFrame\* passing. (Brian Shirai)
- Fixed updating PID for logger. (Brian Shirai)
- Fixed setting Thread management state. (Brian Shirai)
  Before returning from Thread.new (or any similar methods), we ensure that
  all the state for tracking Thread instances and any related state are
  completely initialized. This prevents a case where the process calls fork()
  immediately after creating a Thread and the Thread's state is only partially
  initialized before the fork() call completes.
- Cleaned up creating VM instances. (Brian Shirai)
- Initialize NativeMethodEnvironment\* to NULL. (Brian Shirai)
- Fixed shift negative value warnings on clang 3.7. Closes #3535. (Brian Shirai)
  This is a mess. See https://github.com/bonzini/qemu/commit/0f087e8e822a00fdf4ec39b443ebf51a631e0adc
- More JIT fixes from removing passing CallFrame. (Brian Shirai)
- Disable JIT inlining by default temporarily. (Brian Shirai)
- Fixed argument arity for LLVM call. (Brian Shirai)
- Re-init logger lock after fork. (Brian Shirai)
- Revert ""Re-init logger lock after fork."" (Brian Shirai)
  This reverts commit 17f6450b4e0377a87f01fa79b9142c8a261e485f.
- Logging while forking considered extremely dangerous. (Brian Shirai)
- Guard against NULL being added to finalization list. (Brian Shirai)
- Better integrate logger facility. (Brian Shirai)
  Basically, almost everything that is in util/ should not be. These major
  components need to be well-integrated with the rest of Rubinius. As in the
  previous case of Immix and the present case of the logger here, that means
  things like taking STATE, VM, etc as parameters and interfacing with things
  like process locks and process phases around fork/exec, etc.
- Some cleanup creating Location objects. (Brian Shirai)
- Ensure we don't use negative skip values for backtraces. (Brian Shirai)
- Ensure the CallFrame in NULL before Mirror::Thread#finish. (Brian Shirai)
- Temporarily disable JIT on Travis. (Brian Shirai)
- Removed CallFrame checks for constant arguments. (Brian Shirai)
- Added backtrace metrics. (Brian Shirai)
- Completely disable the JIT. (Brian Shirai)
- Removed mark stack debugging. (Brian Shirai)
- Restructured layout of JIT files. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2893319/assets,https://api.github.com/repos/rubinius/rubinius/releases/2893319,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.20,https://github.com/rubinius/rubinius/releases/tag/v3.20,https://api.github.com/repos/rubinius/rubinius/zipball/v3.20,v3.20,False,False
2704248,2016-02-28T06:29:02Z,2016-02-28T07:01:00Z,Release 3.19,"Version 3.19 (2016-02-27)
- Switch back to deploy from OSX build. (Brian Shirai)
- Fixed variable so Heroku binary gets uploaded. (Brian Shirai)
- Open core library CodeDB read-only. (Brian Shirai)
  The CodeDB open method needs to be extended to accept an argument for the mode
  to open the CodeDB, allowing for read, write, or read+write before being able
  to use a CodeDB for the runtime compiler cache. For now, we only need to read
  the core library.
- Fixed formatting for releases.yml. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2704248/assets,https://api.github.com/repos/rubinius/rubinius/releases/2704248,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.19,https://github.com/rubinius/rubinius/releases/tag/v3.19,https://api.github.com/repos/rubinius/rubinius/zipball/v3.19,v3.19,False,False
2704114,2016-02-28T05:06:09Z,2016-02-28T05:17:52Z,Release 3.18,"Version 3.18 (2016-02-27)
- Added deploy for Heroku. (Brian Shirai)
- Added deploy triggers for releases. (Brian Shirai)
- Log the CodeDB loaded on boot. (Brian Shirai)
- Switched to deploying from linux build. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2704114/assets,https://api.github.com/repos/rubinius/rubinius/releases/2704114,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.18,https://github.com/rubinius/rubinius/releases/tag/v3.18,https://api.github.com/repos/rubinius/rubinius/zipball/v3.18,v3.18,False,False
2702657,2016-02-27T15:58:01Z,2016-02-27T16:41:59Z,Release 3.17,"Version 3.17 (2016-02-26)
- Only trigger rubinius-build on linux. (Brian Shirai)
- Fixed displaying -Xhelp. (Brian Shirai)
- Show exception loading CodeDB instead of abort. (Brian Shirai)
- Added fallback if codedb.core.path doesn't exist. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2702657/assets,https://api.github.com/repos/rubinius/rubinius/releases/2702657,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.17,https://github.com/rubinius/rubinius/releases/tag/v3.17,https://api.github.com/repos/rubinius/rubinius/zipball/v3.17,v3.17,False,False
2689850,2016-02-25T16:51:43Z,2016-02-25T17:21:34Z,Release 3.16,"Version 3.16 (2016-02-25)
- Omit [ skip ci ] from GitHub release notes. (Brian Shirai)
  Odd formatting necessary to avoid getting stripped for release notes.
- Fix configure script to enable C++11 regardless of LLVM version. (Joe Eli McIlvain)
  The CodeDB work added C++11 usage into the VM source itself,
  but C++11 support was only enabled for LLVM >= 3.5,
  failing for users with lower supported LLVM versions.

Resolves #3622.
- Consider an autoload resolved if #resolve didn't return nil in Autoload#call (Ahmad Sherif)
  This fixes cases of autoload ""errors"" mentioned by @robin850 in
  https://github.com/rubinius/rubinius/issues/2934#issuecomment-76391260
  and https://gist.github.com/robin850/3eeaed2538f50a9887c2

This is an explanation of the issue:
We already have A::B been autoloaded by the main thread. When c.rb (see
any of the previous links) is being autoloaded in another thread, class
A::B is being opened using Rubinius.open_class_under (through
Rubinius.open_class).
Since module A has an Autoload entry for B in its constant_table,
open_class_under tries to call #call on this Autload object, which returns nil
because #resolve returns false (CodeLoader.require returns false
if a feature is already been loaded).
With nil returned, open_class_under decided to create a new Class object
for B, which means the autoload entry it already had for :C is lost,
resulting in constant A::B::C not being found.
- Revert ""Consider an autoload resolved if #resolve didn't return nil in Autoload#call"" (Ahmad Sherif)
  CodeLoader.require returning false doesn't necessarily mean the feature
  got loaded.

This reverts commit 01a7c2f9b91a6edf5637c6dbf0d79f4e59b560b3.
- Only build binaries for a specific Ubuntu version. (Brian Shirai)
- Use dist version for docker deploy. (Brian Shirai)
- Decouple linking for C-exts from clang/gcc. (Brian Shirai)
- Updated Dockerfile for Ubuntu to include compiler. (Brian Shirai)
- Fix a condition in utilities::logger::append_newline (Ahmad Sherif)
  The previous condition assumes enough space to append an extra newline
  followed by \0. If we already have a full message buffer, appending would
  overflow and the \0 would corrupt some adjacent variable. If this
  adjacent variable happens to be the guard from the calling function,
  it would be corrupted and fails to unlock its lock, causing other
  logging components to stuck forever waiting for that lock.
- Use a clearer condition in utilities::logger::append_newline (Ahmad Sherif)
  Credits to @brixen, follow-up on 0b4b712.
- Fixed setting release date when building from tarball. (Brian Shirai)
- Trigger rubinius-build on deploy. (Brian Shirai)
- Use a loop instead of recursion when processing a regex group (Ahmad Sherif)
  It can blow up the stack if too many characters are inside the group.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2689850/assets,https://api.github.com/repos/rubinius/rubinius/releases/2689850,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.16,https://github.com/rubinius/rubinius/releases/tag/v3.16,https://api.github.com/repos/rubinius/rubinius/zipball/v3.16,v3.16,False,False
2653224,2016-02-20T04:23:44Z,2016-02-20T04:59:37Z,Release 3.15,"Version 3.15 (2016-02-19)
- Added start of Rubinius::CodeDB. (Brian Shirai)
- Generate first cut of CodeDB for kernel. (Brian Shirai)
  This all needs to be properly extracted into a compiler facility.
- Handle m_id in create_block instruction. (Brian Shirai)
- Added CodeDB::open and ::load. (Brian Shirai)
- Added -Xcodedb.kernel.path, codedb.cache.path. (Brian Shirai)
- Added signature to CodeDB. (Brian Shirai)
- Added running CodeDB initialize. (Brian Shirai)
- Added m_id to CodeDB contents. (Brian Shirai)
- Wired method_id into MethodTable. (Brian Shirai)
- Fixed tagging custom call sites. (Brian Shirai)
- Fixed rendering ConstantTable contents. (Brian Shirai)
- Simplify alpha const_missing method. (Brian Shirai)
- Boot kernel from CodeDB. (Brian Shirai)
- Fixed store_my_field to consider frozen status. (Brian Shirai)
- Fixed String#replace. (Brian Shirai)
  The store_my_field bug hid this bug.
- Start merging kernel/ into a single directory. (Brian Shirai)
- Finished merging kernel/ into a single directory. (Brian Shirai)
  Kernel does not yet boot. Some dependencies still need to be resolved.
- Spec Enumerable#sort_by when #map does not return an array (Alastair Pharo)
  The basic example for this is a lazy enumerable.  In this case, #map
  returns another lazy enumerable, and this breaks #sort_by
- Fix for Enumerable#sort_by when #map does not return an array (Alastair Pharo)
- Updated rubinius-code gems. (Brian Shirai)
- Updated paths for rubinius-code gems. (Brian Shirai)
- Wrapped/cleaned up README.md (Yorick Peterse)
- Added RubyGems license files (Yorick Peterse)
- Added udis86 license file (Yorick Peterse)
- Added winpthreads license (Yorick Peterse)
- Added explicit license file for zlib (Yorick Peterse)
- Clarified what is covered by what license (Yorick Peterse)
  Fixes #3590
- Fix building kernel. (Brian Shirai)
- More kernel build cleanup. (Brian Shirai)
- Load kernel from a single file. (Brian Shirai)
- Cleaned up load_order.txt and building kernel. (Brian Shirai)
- Removed kernel.rake to simplify merging codedb. (Brian Shirai)
- Fixed building flattened kernel for CodeDB. (Brian Shirai)
- Reorganized kernel to improve loading order. (Brian Shirai)
  These are the desired phases for booting Rubinius:
1. boot the VM itself with the ability to load and execute bytecode;
2. create the bootstrap methods and functions to be able to define
   class/module and methods;
3. load the kernel code, only defining class/module and methods;
4. run all 'init' / setup code for the kernel, defining initial runtime data
   structures and constant values;
5. create the Loader instance and parse command line options;
6. run user code.
- Removed unneeded require for build_config. (Brian Shirai)
- Updated Melbourne to 3.1. (Brian Shirai)
- Fix a couple failing specs. (Brian Shirai)
- Renamed kernel/ to core/. (Brian Shirai)
- Fixed order of overwriting ffi_function_missing. (Brian Shirai)
- Fixed changing method visibility. (Brian Shirai)
- Some kernel -> core remnants cleanup. (Brian Shirai)
- Fixed filtering core library frames from backtrace. (Brian Shirai)
- Fixed Module#define_method. (Brian Shirai)
- Moved CodeDB to core/. (Brian Shirai)
- Fixed aliased core methods having same hash. (Brian Shirai)
- Fixed setting @exception on frozen Thread. (Brian Shirai)
- Fixed JIT loading CompiledCode from method_id. (Brian Shirai)
- Fixed rubinius-compiler gem version. (Brian Shirai)
- Fixed paths and cleaned up var warnings. (Brian Shirai)
- Try moving to Trusty and clang, llvm 3.5 on Travis. (Brian Shirai)
- Update packages on Trusty first. (Brian Shirai)
- Fixed configure command. (Brian Shirai)
- Install libedit-dev on Travis. (Brian Shirai)
- Fixed installing. (Brian Shirai)
- Moved ARGF.read encoding specs to shared spec file (Yorick Peterse)
- ARGF.read should use ASCII 8BIT, not US_ASCII (Yorick Peterse)
- Added specs for ARGF.read_nonblock (Yorick Peterse)
- Added ARGF.read_nonblock (Yorick Peterse)
  Fixes #3594
- Added local variable methods to Binding (Yorick Peterse)
  This adds the following methods:
- Binding#local_variable_set
- Binding#local_variable_get
- Binding#local_variable_defined?

Fixes #2992
Closes #3372
- Fix Module#define_method (Benny Klotz)
  When defining a method through a proc which gets created out of a method
  which is defined in a C-ext, `meth.ruby_method.executable` is a instance of
  Rubinius::NativeCode and not Rubinius::CompiledCode which does not
  respond to #scope.

This is used for example in pg gem:
https://github.com/ged/ruby-pg/blob/bb4693e811f9348f202835e701e6509d15685b0a/lib/pg/connection.rb#L187
- implement Proc#for_define_method (Benny Klotz)
- implement Method#for_define_method, add second argument klass to for_define_method which is needed by Method and UnboundMethod (Benny Klotz)
- implement UnboundMethod#for_define_method (Benny Klotz)
- raise TypeError if meth does not respond to :for_define_method (Benny Klotz)
- cleanup Method#for_define_method and UnboundMethod#for_define_method, delegate responsibility further to executables (Benny Klotz)
- implement Executable#scope, retrieving proper code part is responsibility of Method,UnboundMethod #for_define_method, add 3rd arg callabale_proc to Method,UnboundMethod #for_define_method (Benny Klotz)
- use Method,UnboundMethod #for_define_method in Proc#for_define_method (Benny Klotz)
- Proc#for_define_method get the scope through the newly created BlockEnvironment::AsMethod (Benny Klotz)
- add example which specs behavior of Proc#for_define_method when procs @ruby_method is set (Benny Klotz)
- don't use single letter variable names  (Benny Klotz)
- BlockEnvironment::AsMethod#scope should return the scope of block_env (Benny Klotz)
- Implement Proc#for_define_method when @ruby_method is nil like in the old impl to ensure the same behavior (Benny Klotz)
- Add a spec for rb_define_class_under when given a mismatched superclass (Ahmad Sherif)
- Add rb_define_class_id_under to the C API (Ahmad Sherif)
  Closes #3613
- Add specs for rb_define_class_id_under (Ahmad Sherif)
- Add rb_time_timespec_new to the C API (Ahmad Sherif)
- Add specs for rb_time_timespec_new (Ahmad Sherif)
- Added NameError#receiver (Yorick Peterse)
  MRI seems to handle this within C and doesn't define any way of setting
  the receiver from Ruby. As a result of this we'll just use a keyword
  argument.

Fixes #3607
- Added String#-@ and String#+@ (Yorick Peterse)
  Fixes #3608
- Fixed NameError#receiver for BasicObject instances (Yorick Peterse)
- ObjectSpace._id2ref raises for invalid ID values (Yorick Peterse)
  Fixes #3504
- Updated list of Gems to install (Yorick Peterse)
  In particular this includes rubysl-stringio 2.1.0
- Use ascii_only_p() instead of ascii_only_ (Ahmad Sherif)
  ascii_only_ does not usually have a correct value, so we ascii_only_p()
  to make sure it does.

Related to #3531
- Optimize String::byte_index for ASCII-only strings when passed an index (Ahmad Sherif)
  Related to #3531
- Add specs for Mirror::String#byte_index when passed index greater than string's length (Ahmad Sherif)
- Consider valid encoding if a String passes ascii_only_p() (Ahmad Sherif)
  Related to #3531
- Add issue template (jc00ke)
  Seen at https://github.com/dear-github/dear-github/issues/125
  [skip ci]
- Make repro section more prominent & detailed (jc00ke)
- Expanded the issue template (Yorick Peterse)
- Updated rubysl-pathname to 2.3 (Yorick Peterse)
- Update rubinius-melbourne to 3.3 (Ahmad Sherif)
  Closes #3600
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2653224/assets,https://api.github.com/repos/rubinius/rubinius/releases/2653224,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.15,https://github.com/rubinius/rubinius/releases/tag/v3.15,https://api.github.com/repos/rubinius/rubinius/zipball/v3.15,v3.15,False,False
2511189,2016-01-28T18:58:58Z,2016-01-28T19:43:48Z,Release 3.14,"Version 3.14 (2016-01-28)
- Add failing specs for slice_\* when iterator method is changed (Jason Yeo)
- Add another failing specs for zsuper with keyword arguments (Ahmad Sherif)
- Fix Array#product behavior when given a block (Ahmad Sherif)
  Fixes #3587
- Add a spec covering Array#product returning self when given a block (Ahmad Sherif)
- Reword spec description (Jason Yeo)
- Fix issue in slice_(after|before) when iterator method yields more than one value (Jason Yeo)
- Remove spec as slice_when does not have issues with iterators yielding > 2 values (Jason Yeo)
- Fix count when enumerable yields multiple values (Jason Yeo)
-  Use describe, rephrase spec description (Jason Yeo)
- Use rubinius-ast-2.4. (Brian Shirai)
- Use the new path of rubinius-ast gem in kernel.rake (Ahmad Sherif)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2511189/assets,https://api.github.com/repos/rubinius/rubinius/releases/2511189,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.14,https://github.com/rubinius/rubinius/releases/tag/v3.14,https://api.github.com/repos/rubinius/rubinius/zipball/v3.14,v3.14,False,False
2485954,2016-01-25T11:45:26Z,2016-01-25T12:03:19Z,Release 3.13,"Version 3.13 (2016-01-25)
- bump RUBY_VERSION to 2.2.2, rack 2.0.0.alpha requires ruby >= 2.2.2 (Benny Klotz)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2485954/assets,https://api.github.com/repos/rubinius/rubinius/releases/2485954,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.13,https://github.com/rubinius/rubinius/releases/tag/v3.13,https://api.github.com/repos/rubinius/rubinius/zipball/v3.13,v3.13,False,False
2478833,2016-01-23T05:01:25Z,2016-01-23T05:37:42Z,Release 3.12,"Version 3.12 (2016-01-22)
- Update tags/branches before untagging (Yorick Peterse)
- Clear buffer passed to ARGF.read before appending to it (Ahmad Sherif)
- Add a spec covering clearing output buffer of ARGF.read (Ahmad Sherif)
- Implement ARGF.readpartial (Ahmad Sherif)
- Add specs for ARGF.readpartial (Ahmad Sherif)
- Allow IO#{read,write}_nonblock to take an exception: false option (Ahmad Sherif)
- Add specs for IO#{read,write}_nonblock accepting exception option (Ahmad Sherif)
- Updated installed Rake version (Yorick Peterse)
- Updated list of rubysl Gems to install (Yorick Peterse)
- Added failing specs for zsuper with rest kwargs (Yorick Peterse)
- Fix Kernel#rand when given a Float exclusive range. (Joe Eli McIlvain)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2478833/assets,https://api.github.com/repos/rubinius/rubinius/releases/2478833,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.12,https://github.com/rubinius/rubinius/releases/tag/v3.12,https://api.github.com/repos/rubinius/rubinius/zipball/v3.12,v3.12,False,False
2468043,2016-01-21T14:51:57Z,2016-01-21T15:10:31Z,Release 3.11,"Version 3.11 (2016-01-21)
- Implement Hash#{>, >=, <, <=} (Ahmad Sherif)
- Add specs for Hash comparison operators (Ahmad Sherif)
- Only build Ubuntu 12.04 Docker image for now. (Brian Shirai)
- Add specs for chunk_while (Jason Yeo)
- Implement chunk_while (Jason Yeo)
- Remove chunk_while tags (Jason Yeo)
- Change error message (Jason Yeo)
- block.call->yield (Jason Yeo)
- Remove initial state from slice_before (Jason Yeo)
- Remove initial state from chunk (Jason Yeo)
- Use a better error message (Jason Yeo)
- add failing NameError#receiver spec (Benny Klotz)
- add failing spec for String.new with optional encoding argument (Benny Klotz)
- Implement String.new encoding optional argument (Benny Klotz)
- Fetch existing tags before adding a new one (Yorick Peterse)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2468043/assets,https://api.github.com/repos/rubinius/rubinius/releases/2468043,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.11,https://github.com/rubinius/rubinius/releases/tag/v3.11,https://api.github.com/repos/rubinius/rubinius/zipball/v3.11,v3.11,False,False
2442403,2016-01-17T18:39:33Z,2016-01-17T19:00:40Z,Release 3.10,"Version 3.10 (2016-01-17)
- Eliminate some duplication from Enumerator::Lazy#grep (Ahmad Sherif)
- Implement Enumerator::Lazy#grep_v (Ahmad Sherif)
- Add specs for Enumerator::Lazy#grep_v (Ahmad Sherif)
- Updated Dockerfile for 15.10 to 3.9. (Brian Shirai)
- Updated Dockerfile for 14.04 to 3.9. (Brian Shirai)
- Implement File.mkfifo (Ahmad Sherif)
- Add specs for File.mkfifo (Ahmad Sherif)
- Updated location of Dockerfiles. (Brian Shirai)
- Moved Dockerfiles to rubinius/docker repository. (Brian Shirai)
- Fix a typo in Enumerator::Lazy specs (Ahmad Sherif)
- Implement Hash#fetch_values (Ahmad Sherif)
- Add specs for Hash#fetch_values (Ahmad Sherif)
- Fixed some 64bit assumptions in specs. Closes #3560. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2442403/assets,https://api.github.com/repos/rubinius/rubinius/releases/2442403,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.10,https://github.com/rubinius/rubinius/releases/tag/v3.10,https://api.github.com/repos/rubinius/rubinius/zipball/v3.10,v3.10,False,False
2440050,2016-01-16T17:56:33Z,2016-01-16T18:13:51Z,Release 3.9,"Version 3.9 (2016-01-16)
- Use Type.object_equal in Binding.self_context (Yorick Peterse)
  Normally I'd oppose these kind of changes in favour of fixing Gems doing
  this. However, since this is literally the _only_ thing preventing
  GitLab from booting at the moment this change ensures I don't get
  blocked for days while waiting for a response from the Teaspoon
  maintainers.

This fixes #3570
- Updated Dockerfile for 15.10 to 3.8. (Brian Shirai)
- Updated Dockerfile for 14.04 to 3.8. (Brian Shirai)
- Cleaned up styling of Array#== (Yorick Peterse)
  Variables such as ""md"" and ""od"" are super confusing.
- Make Kernel#loop returns StopIteration#result when stopped by the exception (Ahmad Sherif)
- Add a spec for Kernel#loop returning StopIteration#result (Ahmad Sherif)
- Try to not use RVM on Travis. (Brian Shirai)
- Make Comparable#== no longer rescues exceptions (Ahmad Sherif)
- Update Comparable#== specs to reflect it does not rescues exceptions anymore (Ahmad Sherif)
- Eliminate some duplication from Enumerable#grep (Ahmad Sherif)
- Implement Enumerable#grep_v (Ahmad Sherif)
- Add specs for Enumerable#grep_v (Ahmad Sherif)
- Add specs for #dig with no arguments (Nikola Nenkov)
- Make #dig raise ArgumentError when invoked with no arguments (Nikola Nenkov)
- Fixed C++ exception being raised in rb_dbl2big. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2440050/assets,https://api.github.com/repos/rubinius/rubinius/releases/2440050,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.9,https://github.com/rubinius/rubinius/releases/tag/v3.9,https://api.github.com/repos/rubinius/rubinius/zipball/v3.9,v3.9,False,False
2434161,2016-01-15T11:00:19Z,2016-01-15T12:05:12Z,Release 3.8,"Version 3.8 (2016-01-15)
- Updated Dockerfile for 15.10 to 3.7. (Brian Shirai)
- Updated Dockerfile for 14.04 to 3.7. (Brian Shirai)
- Set thread's group in rb_thread_create (Ahmad Sherif)
  Fixes #3545
- Add a spec for setting thread's group in rb_thread_create (Ahmad Sherif)
- Implement Hash#to_proc (Ahmad Sherif)
- Add specs for Hash#to_proc (Ahmad Sherif)
- Removed Socketable/io_accept primitive (Yorick Peterse)
  This is no longer in use by rubysl-socket and serves no further purpose.
- Bumped rubysl-socket to 2.1.1 (Yorick Peterse)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2434161/assets,https://api.github.com/repos/rubinius/rubinius/releases/2434161,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.8,https://github.com/rubinius/rubinius/releases/tag/v3.8,https://api.github.com/repos/rubinius/rubinius/zipball/v3.8,v3.8,False,False
2424906,2016-01-14T03:19:04Z,2016-01-14T05:55:05Z,Release 3.7,"Version 3.7 (2016-01-13)
- Updated Dockerfile for 15.10 to 3.6. (Brian Shirai)
- Updated Dockerfile for 14.04 to 3.6. (Brian Shirai)
- Implement Numeric#positive? & Numeric#negative? (Kirill Nikitin)
- Added 2.3 specs for #positive? and #negative? (Kirill Nikitin)
  Added specs for #positive? and #negative? for classes Bignum, Fixnum, Float,
  Numeric and Rational classes
- Make rb_rescue returns the break value when passed function yields to a block with a break (Ahmad Sherif)
  Fixes #3546
- Add a spec covering rb_rescue returning the break value when the passed function yields to a block with a break (Ahmad Sherif)
- Implement Array#bsearch_index (Ahmad Sherif)
- Add specs for Array#bsearch_index (Ahmad Sherif)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2424906/assets,https://api.github.com/repos/rubinius/rubinius/releases/2424906,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.7,https://github.com/rubinius/rubinius/releases/tag/v3.7,https://api.github.com/repos/rubinius/rubinius/zipball/v3.7,v3.7,False,False
2416454,2016-01-12T23:11:11Z,2016-01-12T23:43:09Z,Release 3.6,"Version 3.6 (2016-01-12)
- Updated Dockerfile for 15.10 to 3.5. (Brian Shirai)
- Updated Dockerfile for 14.04 to 3.5. (Brian Shirai)
- multiple calls of close, close_read, and close_write should no longer raise IOError (Chuck Remes)
- spec 2.3 behavior where multiple calls to #close no longer raise IOError (Chuck Remes)
- implement 2.3 behavior to no longer raise IOError on multiple #close (Chuck Remes)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2416454/assets,https://api.github.com/repos/rubinius/rubinius/releases/2416454,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.6,https://github.com/rubinius/rubinius/releases/tag/v3.6,https://api.github.com/repos/rubinius/rubinius/zipball/v3.6,v3.6,False,False
2403090,2016-01-11T04:36:09Z,2016-01-11T05:26:44Z,Release 3.5,"Version 3.5 (2016-01-10)
- Updated Dockerfile for 15.10 to 3.4. (Brian Shirai)
- Updated Dockerfile for 14.04 to 3.4. (Brian Shirai)
- Updated Dockerfile for 15.10 to 3.4. (Brian Shirai)
- Updated Dockerfile for 14.04 to 3.4. (Brian Shirai)
- puts: Make it more compatible to MRI (Andre Richter)
- puts calls #to_ary on non-String objects, without checking its existance beforehand.
  This behavior is copied for cases where the receiver has a #method_missing in place that catches this call
- If puts calls #to_s, and #to_s does not return a string (e.g. some bogus override of #to_s), it outputs generic object infos (Class name and address)
- Implement #dig for Hash, Array and Struct classes (Ahmad Sherif)
- Add specs for #dig implmenetation for Hash, Array and Struct classes (Ahmad Sherif)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2403090/assets,https://api.github.com/repos/rubinius/rubinius/releases/2403090,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.5,https://github.com/rubinius/rubinius/releases/tag/v3.5,https://api.github.com/repos/rubinius/rubinius/zipball/v3.5,v3.5,False,False
2399879,2016-01-09T21:52:43Z,2016-01-09T22:12:57Z,Release 3.4,"Version 3.4 (2016-01-09)
- Updated Dockerfile for 15.10 to 3.3. (Brian Shirai)
- Updated Dockerfile for 14.04 to 3.3. (Brian Shirai)
- Generalize test for nil. (Brian Shirai)
- Added CoC to READMEs. (Brian Shirai)
- Add spec for Enumerable#first with multiple yield parameters (Kenichi Kamiya)
- Fix yield parameter of Enumerable#first (Kenichi Kamiya)
- puts: Check if argument responds to :to_ary, instead of checking its type being Array (Andre Richter)
- spec 2.2 behavior where limit 0 raises ArgumentError (Chuck Remes)
- add 2.2 behavior to #each handling of limit 0 (Chuck Remes)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2399879/assets,https://api.github.com/repos/rubinius/rubinius/releases/2399879,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.4,https://github.com/rubinius/rubinius/releases/tag/v3.4,https://api.github.com/repos/rubinius/rubinius/zipball/v3.4,v3.4,False,False
2395608,2016-01-08T16:37:35Z,2016-01-08T17:20:10Z,Release 3.3,"Version 3.3 (2016-01-08)
- Updated Dockerfile for 15.10 to 3.2. (Brian Shirai)
- Updated Dockerfile for 14.04 to 3.2. (Brian Shirai)
- Bump Psych to 2.0.17 (Yorick Peterse)
- If on OS X, check for homebrew-supplied openssl libraries (Andre Richter)
- Set platform instance variables earlier and use them instead of RUBY_PLATFORM where feasible. (Andre Richter)
- Use nil_p() instead of '== cNil'. (Brian Shirai)
- Bumped rubysl-socket version to 2.1.0 (Yorick Peterse)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2395608/assets,https://api.github.com/repos/rubinius/rubinius/releases/2395608,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.3,https://github.com/rubinius/rubinius/releases/tag/v3.3,https://api.github.com/repos/rubinius/rubinius/zipball/v3.3,v3.3,False,False
2371382,2016-01-04T22:08:26Z,2016-01-04T22:29:46Z,Release 3.2,"Version 3.2 (2016-01-04)
- Fixed deploying website and homebrew releases. (Brian Shirai)
- Version 3.1. (Brian Shirai)
- Version 3.1. (Brian Shirai)
- Added deploy for Dockerfile updates. (Brian Shirai)
- update ruby compat version from 2.1.0 to 2.2.0  (Chuck Remes)
- Added untag to scripts/tag.sh. (Brian Shirai)
- A few improvements for untag. (Brian Shirai)
- Switched to rbx-2.2.mspec. (Brian Shirai)
- Added --deprecated command line option. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2371382/assets,https://api.github.com/repos/rubinius/rubinius/releases/2371382,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.2,https://github.com/rubinius/rubinius/releases/tag/v3.2,https://api.github.com/repos/rubinius/rubinius/zipball/v3.2,v3.2,False,False
2369641,2016-01-04T17:02:49Z,2016-01-04T17:24:09Z,Release 3.1,"Version 3.1 (2016-01-04)
- Cleaned cruft replaced by diagnostics. (Brian Shirai)
- Added memory summary to diagnostics. (Brian Shirai)
- Reworked ObjectMemory diagnostics. (Brian Shirai)
- Default eden to 30mb. (Brian Shirai)
- Calculate total memory diagnostics better. (Brian Shirai)
  Approximately 20% of the process RSS is still not visible in the diagnostics
  and ~10% of that looks JIT related.
- Removed left over Bert files. (Brian Shirai)
- Remove threads from list when they finish executing. (Brian Shirai)
- Removed ""BUNDLER WITH"" crap from Gemfile.lock (Yorick Peterse)
  Bundler no longer adds this when nothing changes, thankfully.
- Default to non-zero spec process exit status. (Brian Shirai)
- Reworked halting the system. (Brian Shirai)
  This is the first step of a much refactor to introduce a proper System object
  instead of hanging all the process boot and halt logic off the Environment
  object. A lot of boot and halt code can then be cleaned up (eg creating and
  initializing the object space, loading the kernel code, etc).

The main process thread (the one the OS creates when the process is first
created) now boots the system and spawns a thread to start running Ruby code.
The main thread goes on to process signals and halting the process. This is
the only thread that processes halt code.

When the process forks, a new thread is created to process signals and
halting. In the future, fork() and exec() will be disallowed on all internal
threads and only allowed on threads running Ruby code.
- Smash another racey process spec. (Brian Shirai)
  There is no way to guarantee that the `Process.exit` from the thread completes
  before the `Process.exit` in the main thread. That's not how actual threads
  with no global interpreter lock work.
- Fixed default CI spec exit status. (Brian Shirai)
- Updated Bundler to 1.10.5. (Brian Shirai)
- Fixed setting log file access permissions. (Brian Shirai)
  Since the process umask can override our open permissions, we need to explicitly
  set the permissions.
- Hold all threads before finishing finalizers on halt. (Brian Shirai)
- Synchronize ThreadGroup#add. Closes #3467. (Brian Shirai)
  Ruby generally makes no guarantees about thread safety, however, many
  accidental ""guarantees"" are assumed by Ruby programmers because of MRI's
  global interpreter lock.

Rubinius makes internal operaions thread safe but generally does not make any
thread safety guarantees for common Ruby objects like Array or Hash instances.
It's perfectly possible to ""corrupt"" an Array by concurrently modifying it
without synchronization.

ThreadGroup presents an interesting case, however, because it is arguably a
system structure. The API of ThreadGroup is minimal, consisting of these
methods: add, enclose, enclosed?, list.

Of these, only add presents a thread safety issue from the perspective of a
potentially ""corrupted"" structure (ie the list of Threads in the group). It's
possible for one Thread to enclose the group and another to get 'false' when
calling #enclosed? ""after"" the other Thread called #enclose. That's not a case
we are concerned with. The case of calling #add (which will implicitly also
remove the Thread from another group if it is a member) should probably be
thread safe.

For this reason, we add synchronization around adding (and removing) a Thread
from a ThreadGroup.
- Switched JIT log warnings to info. (Brian Shirai)
- Rename `Float#negative?` to `Float#signbit?` (Robin Dupret)
  Ruby 2.3 ships with a new `Numeric#negative?` method. Rubinius implements
  this method since b92c84f7, for internal usage though ; it delegates to
  the signbit C++ function.

However, `signbit`'s behavior can't match MRI `Float#negative?`'s one
since the former operates on the sign while the latter operates on the
value (see http://git.io/vm1fg).
- Allow passing strings to #{private,public}_constant (Robin Dupret)
  The maintained constants table is dealing with symbols but these methods
  can take strings as arguments ; it's pretty common to pass `class.name`
  as an argument.
- Add specs for passing strings to constant visibility methods (Robin Dupret)
- Added failing Range#bsearch specs (Yorick Peterse)
  These are taken from the ones mentioned by @heftig in #3458.
- Port over jruby's Enumerable#slice_when (Benny Klotz)
- check for birthtime() function (Benny Klotz)
- Implement File#birthtime, File.birthtime and File::Stat#birthtime (Benny Klotz)
- Implement Stat#birthtime primitive (Benny Klotz)
- adapt specs for specifics platform checks, delete failing tags (Benny Klotz)
-  implement Method#curry, add comments to failing example, remove working examples from tags file (Benny Klotz)
- Only darwin supports birthtime (Benny Klotz)
  After some research only darwin seems to support birthtime via
  st_birhttimespec in the stat struct.

See https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man2/stat.2.html
and https://github.com/ruby/ruby/blob/fc7711ff17cde31aec0e2c1d29faca264b49da6b/file.c#L829 for reference.
- remove accidental commited nil#frozen spec (Benny Klotz)
- fix whitespace (Benny Klotz)
- grouped together *time methods, added documentation (Benny Klotz)
- check for struct member st_birthtimespec of struct stat instead of posix function birthtime (Benny Klotz)
- Add frozen nil/true/false specs (Rui Serra)
- Update hash spec to include quoted symbol key syntax (Rui Serra)
  In order not to break the whole hash_spec.rb, the new syntax is eval'd.
- Add spec for MRI bug #9593 (Rui Serra)
- Add block and lambda specs for MRI bug #9593 (Rui Serra)
- Update hash_spec.rb for duplicate key precedence (Rui Serra)
- Update regexp/character_classes_spec.rb since U+180E is no longer considered a whitespace character (Rui Serra)
- Add Float#next_float and Float#prev_float (Jason Yeo)
- Remove tags (Jason Yeo)
- remove comments (Benny Klotz)
- added failing spec for lambda with optional parameter (Benny Klotz)
- Implement Enumerable#min with optional arguments (Kenichi Kamiya)
- Implement Enumerable#max with optional arguments (Kenichi Kamiya)
- Implement Enumerable#min_by with optional arguments (Kenichi Kamiya)
- Implement Enumerable#max_by with optional arguments (Kenichi Kamiya)
- Add Enumerable#{min,max,min_by,max_by} specs with nil (Kenichi Kamiya)
- Adjust Enumerable#{min,max,min_by,max_by} with nil (Kenichi Kamiya)
- Standardize a block variable name in Enumerable (Kenichi Kamiya)
- Fix Stat::stat_birthtime. (Rui Serra)
  This commit fixes a build error due to a signature mismatch of the Time::at
  method and the way it was being used in Stat::stat_birthtime.
- Fix true/false frozen specs to operate on the proper values (Nathan Currier)
- Implement {Method,UnboundMethod}#super_method (Robin Dupret)
  The implementation relies on Module#direct_superclass to run through the
  whole ancestry chain as #superclass would not include the modules.

The method is about 2 times slower than the MRI implementation though.
Benchmark: http://git.io/vmhpf.
- Add some other cases for #super_method specs (Robin Dupret)
  Based on commit ruby/ruby@b4981594.
- Mark nil/true/false as frozen (Yorick Peterse)
  Interesting enough MRI still lets you define methods on these objects
  even when they're frozen. For example, this works just fine:
  
  def nil.foo
  end
  
  nil.foo
- Add a String#split spec with 0 limit (Kenichi Kamiya)
- Fix String#split with 0 limit. Fixes #3474 (Kenichi Kamiya)
- Fix Range#bsearch for matching end value in find-minimum mode (Kenichi Kamiya)
  Fixes #3458
- Add a C-API ""rb_hash_clear"" (Kenichi Kamiya)
- Log class names for invalid ivars_ references (Yorick Peterse)
  This makes it a bit easier to see what kind of objects we're dealing
  with when this occurs.
- Fixed typ in the OnStack class (Yorick Peterse)
- Fix correction to documentation for OnStack class. (Joe Eli McIlvain)
- Specify `superclass` in respect to `prepend` (Ben Lovell)
  This was unspecified/recently merged to ruby/rubyspec. Rubinius does
  the Right Thing :tm:
- Clean up log output of serial_debug/ic_debug (Yorick Peterse)
  Output is now sent to STDERR (to make it easier to redirect) and the
  actual debug messages have been trimmed a bit.
- Expand $PID in Metrics filename. (Brian Shirai)
- Contributing notes on version managers/releases (Yorick Peterse)
- Changed ""of the issue"" to ""if the issue"" (Yorick Peterse)
- Fixes to assist building Rubinius under Alpine Linux (with musl). (Nathan Sullivan)
  Not 100% building yet, but these cover some outstanding issues
- Remove converting to negative fd (Benny Klotz)
  Convert a fd to -(fd + 1) if its a Fixnum seems wrong.
  Negative fds's are mostly invalid.
- add spec for Process.spawn redirecting STDERR to child STDOUT (Benny Klotz)
- remove obsolete assignment (Benny Klotz)
- change => to is (Benny Klotz)
- allow nil,true,false to be modified when frozen (Chuck Remes)
- Check if struct stat has nanosecond resolution. (Andre Richter)
  Check for st_atim, st_mtim, st_ctim, etc. in struct stat (sys/stat.h)
- Add nanosecond support for Stat::[amc]time (Andre Richter)
- Spec: Check microsecond resolution for File#utime (Andre Richter)
- Implement microsecond resolution for File#utime (Andre Richter)
- File#utime: Don't check for usec resolution on Darwin (Andre Richter)
- Add specs for unicode_normalize (Jason Yeo)
- Add spec for unicode_normalize! (Jason Yeo)
- Add specs for exceptions (Jason Yeo)
- Add specs for unicode_normalized? (Jason Yeo)
- Add a note about where I took the unicode examples (Jason Yeo)
- Add tags for unicode_normalize (Jason Yeo)
- Remove :each (Jason Yeo)
- Wrap lines to < 80 chars (Jason Yeo)
- Added MPL-2.0. (Brian Shirai)
- Try adding Dockerfiles for ubuntu 14.04, 15.10. (Brian Shirai)
- Clarify copyright entity for license. (Brian Shirai)
- Simplify, just one Dockerfile for now. (Brian Shirai)
- Revert ""Simplify, just one Dockerfile for now."" (Brian Shirai)
  This reverts commit de7a8a1007d29700f4a1af8a0dac52de41f33f2c.
- Imported https://github.com/rubinius/rubinius-docker/pull/1. (Brian Shirai)
  Added whitespace to break up the steps and added gems/bin to PATH.
- Add BSD text to license. (Brian Shirai)
- Break up old/new license & clarify what we use (Yorick Peterse)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2369641/assets,https://api.github.com/repos/rubinius/rubinius/releases/2369641,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.1,https://github.com/rubinius/rubinius/releases/tag/v3.1,https://api.github.com/repos/rubinius/rubinius/zipball/v3.1,v3.1,False,False
2361847,2016-01-01T20:35:12Z,2016-01-01T20:55:52Z,Release 3.0,"Version 3.0 (2016-01-01)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2361847/assets,https://api.github.com/repos/rubinius/rubinius/releases/2361847,master,https://api.github.com/repos/rubinius/rubinius/tarball/v3.0,https://github.com/rubinius/rubinius/releases/tag/v3.0,https://api.github.com/repos/rubinius/rubinius/zipball/v3.0,v3.0,False,False
2360756,2016-01-01T06:18:59Z,2016-01-01T07:03:04Z,Release 2.71828182,"Version 2.71828182 (2015-12-28)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2360756/assets,https://api.github.com/repos/rubinius/rubinius/releases/2360756,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.71828182,https://github.com/rubinius/rubinius/releases/tag/v2.71828182,https://api.github.com/repos/rubinius/rubinius/zipball/v2.71828182,v2.71828182,False,False
2349054,2015-12-29T04:53:45Z,2015-12-29T05:14:32Z,Release 2.11,"Version 2.11 (2015-12-28)
- Fixed updating website versions. (Brian Shirai)
- Array#sample checks all indexes when spinning. Fixes #3506. (Brian Shirai)
- Enable building with various OpenSSL versions on OSX. (Brian Shirai)
- Guard JIT specs for JIT being enabled. (Brian Shirai)
- Try using a default openssl on Travis. (Brian Shirai)
- Updated rubysl-openssl to 2.8. (Brian Shirai)
- Use _NSGetEnviron on OSX. Fixes #3446. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2349054/assets,https://api.github.com/repos/rubinius/rubinius/releases/2349054,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.11,https://github.com/rubinius/rubinius/releases/tag/v2.11,https://api.github.com/repos/rubinius/rubinius/zipball/v2.11,v2.11,False,False
2343448,2015-12-27T07:48:46Z,2015-12-27T08:28:32Z,Release 2.10,"Version 2.10 (2015-12-26)
- Updated MSpec source to [33m4d5. (Yorick Peterse)
- Moved autorelease methods to FFI::Pointer (Yorick Peterse)
  This allows code to alter the autorelease behaviour of regular
  Rubinius::FFI::Pointer instances. As an example, rubysl-socket returns a
  bunch of ifaddr pointers which are freed using freeifaddrs(). By default
  these pointers have auto-releasing enabled which results in Rubinius
  attempting to finalize/free already free'd pointers which in turn
  segfaults Rubinius.
- Compile fails on arm because of unknown opcode. (dafoxia)
  ""stmeqia"" is an mistyped and unknown opcode.
  Replaced with ""stmiaeq"".
  Compiling on ARM now possible.
  Maybe an update do a newer version of libffi is also possible.
- Allow #instance_eval to evaluate procs originated from methods (Ahmad Sherif)
  Fixes #3539
- Add a spec covering calling #instance_eval with a proc from a method (Ahmad Sherif)
- Disable Git colours when syncing mspec (Yorick Peterse)
- Fixed updating website on deploy. (Brian Shirai)
- Fixed creating GitHub release. (Brian Shirai)
- Updated rubysl-openssl to 2.7. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2343448/assets,https://api.github.com/repos/rubinius/rubinius/releases/2343448,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.10,https://github.com/rubinius/rubinius/releases/tag/v2.10,https://api.github.com/repos/rubinius/rubinius/zipball/v2.10,v2.10,False,False
2341966,2015-12-26T05:36:44Z,2015-12-26T07:48:50Z,Release 2.9,"Version 2.9 (2015-12-25)
- Create SHA1 digests of deploy files. (Brian Shirai)
- Update website when deploying. (Brian Shirai)
- Rewrote gems:update_list in Bash. (Brian Shirai)
- Updated gems_list.txt. (Brian Shirai)
- Update Homebrew recipe when deploying. (Brian Shirai)
- Test IO#read_nonblock raising EAGAINWaitReadable (Yorick Peterse)
  IO#read_nonblock is supposed to raise IO::EAGAINWaitReadable instead of
  a regular Errno::EAGAIN error.
- Added spec for IO#write_nonblock raising (Yorick Peterse)
  This tests for IO#write_nonblock raising IO::EAGAINWaitWritable when an
  operation would block (instead of just raising Errno::EAGAIN).
- Use correct exceptions in IO#(read/write)_nonblock (Yorick Peterse)
  IO#read_nonblock should raise IO::EAGAINWaitReadable (or
  IO::EWOULDBLOCKWaitReadable) while
  IO#write_nonblock should raise IO::EAGAINWaitWritable (or
  IO::EWOULDBLOCKWaitWritable).
- Added EINPROGRESS Wait classes (Yorick Peterse)
  These will be used by rubysl-socket for connecting a socket in a
  non-blocking manner.
- Added specs for RARRAY_AREF. (Brian Shirai)
  This macro does no bounds checking on MRI. Initially added it to support
  updated code for openssl from MRI. Considered changing the use of it in
  openssl C-ext but other extensions will surely use it as well FOR SPEED.

¯_(ツ)_/¯
- Added RARRAY_AREF. (Brian Shirai)
- Updated openssl gem version. (Brian Shirai)
- Use iterative algo to parse Regexp. (Brian Shirai)
- Added io/nonblock to bootstrap gems. (Brian Shirai)
- Updated openssl gem to 2.6. (Brian Shirai)
- Ignore missing file when updating gems_list.txt. (Brian Shirai)
- Added ifa_broadaddr/ifa_dstaddr to ifaddrs struct (Yorick Peterse)
- Added commit log to release text. (Brian Shirai)
- Fixed list of files to upload for deploy. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2341966/assets,https://api.github.com/repos/rubinius/rubinius/releases/2341966,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.9,https://github.com/rubinius/rubinius/releases/tag/v2.9,https://api.github.com/repos/rubinius/rubinius/zipball/v2.9,v2.9,False,False
2335282,2015-12-23T21:04:33Z,2015-12-23T21:26:23Z,Release 2.8,"Version 2.8 (2015-12-23)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2335282/assets,https://api.github.com/repos/rubinius/rubinius/releases/2335282,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.8,https://github.com/rubinius/rubinius/releases/tag/v2.8,https://api.github.com/repos/rubinius/rubinius/zipball/v2.8,v2.8,False,False
2324028,2015-12-14T21:50:01Z,2015-12-21T21:22:59Z,Release 2.6,"Version 2.6 (2015-12-06)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2324028/assets,https://api.github.com/repos/rubinius/rubinius/releases/2324028,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.6,https://github.com/rubinius/rubinius/releases/tag/v2.6,https://api.github.com/repos/rubinius/rubinius/zipball/v2.6,v2.6,False,False
2324005,2015-12-21T01:21:13Z,2015-12-21T21:20:15Z,Release 2.7,"Version 2.7 (2015-12-20)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/2324005/assets,https://api.github.com/repos/rubinius/rubinius/releases/2324005,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.7,https://github.com/rubinius/rubinius/releases/tag/v2.7,https://api.github.com/repos/rubinius/rubinius/zipball/v2.7,v2.7,False,False
1537700,2015-07-14T22:27:25Z,2015-07-14T23:42:28Z,Release 2.5.8,"Version 2.5.8 (2015-07-14)

News:
- Array#flatten compatibility when calling #to_a on elements is improved.
- Fixed checking the return value of malloc() in case allocation fails.
- The C++ abort, bug, warn methods use the logger facility.
- Internal locking is improved.
- Rubinius::Metrics performance counters are now only counters and not gauges
  because counters preserve their characteristics under sampling.
- Parsing of configuration options containing a '.' is improved.
- Rubinius::Metrics FileEmitter writes performance counters to a specified
  file every -Xsystem.metrics.interval milliseconds.
- BasicObject#equal? is used for Symbol#==.
- The young generation garbage collector size and lifetime auto-tuning is
  removed. The size can be set with -Xgc.young_bytes, which defaults to 40mb.
  The lifetime can be set with -Xgc.young_lifetime, which defaults to 2.
- Comparable#== uses a recursion guard instead of rescuing SystemStackError.
- Marshal#load compatibility is improved for an instance of a Hash that has
  been extended.
- Configuration options are available for -Xsystem.log.limit,
  -Xsystem.log.access and -Xsystem.log.archives. This provides native log
  rotation by Rubinius that does not depend on signals. Use of signals for key
  functionality in a runtime like Rubinius is problematic because the running
  Ruby program could trap those signals and interfere with the system.
  
  The option -Xsystem.log.limit sets a limit in bytes on the size of the log
  file.
  
  The option -Xsystem.log.archives sets a limit on the number of archives that
  are retained. The active log file is zipped and the files are rotated up to
  the limit, resulting in, for example, rbx-user.log, rbx-user.log.1.Z, etc.
  
  The option -Xsystem.log.access sets the access permissions on the log file.
- Rubinius::Diagnostics are added. The diagnostics provide state-oriented
  logging, in contrast to the Rubinius::Metrics, which provide monotonic
  counters on various aspects of work performed by the program. The
  diagnostics are emitted in summary form to the log file at regular
  intervals, but only if the values have updated since the last time they were
  emitted, so they do not consume much log space.
- Threads are immediately removed from the internal list of threads when the
  thread function completes. The Thread object preserves all other state as
  long as it is reachable in the object graph. The process memory for the
  Thread is recovered by a finalizer function when the Thread object is no
  longer reachable.
- System halt is reworked to prevent race conditions on cleaning up resources
  when the process is halting. The halt code is no longer run by any Ruby
  thread executing, but instead is run on the dedicated thread that processes
  signals.
- Bundler is updated to 1.10.5.

Changelog:
- Fixed setting log file access permissions. (Brian Shirai)
- Updated Bundler to 1.10.5. (Brian Shirai)
- Fixed default CI spec exit status. (Brian Shirai)
- Smash another racey process spec. (Brian Shirai)
- Reworked halting the system. (Brian Shirai)
- Default to non-zero spec process exit status. (Brian Shirai)
- Removed ""BUNDLER WITH"" crap from Gemfile.lock (Yorick Peterse)
- Remove threads from list when they finish executing. (Brian Shirai)
- Removed left over Bert files. (Brian Shirai)
- Calculate total memory diagnostics better. (Brian Shirai)
- Default eden to 30mb. (Brian Shirai)
- Reworked ObjectMemory diagnostics. (Brian Shirai)
- Added memory summary to diagnostics. (Brian Shirai)
- Cleaned cruft replaced by diagnostics. (Brian Shirai)
- Added collection counts to Baker, Immix diagnostics. (Brian Shirai)
- Fixed CodeManager diagnostics. (Brian Shirai)
- Fixed calculating C-API handle diagnostics. (Brian Shirai)
- Fixed InflatedHeaders diagnostics. (Brian Shirai)
- Fixed BakerGC diagnostics. (Brian Shirai)
- Added config for log file access permission. (Brian Shirai)
- Added Rubinius::Diagnostics. (Brian Shirai)
- Fix lookup of respond_to_missing? method and add some specs. (Joe Eli McIlvain)
- Fixed header file for GCC. (Brian Shirai)
- Fixed include for Linux. (Brian Shirai)
- Added config items -Xsystem.log.limit, -Xsystem.log.archives. (Brian Shirai)
- Added log rotation with compression. (Brian Shirai)
- More Metrics cleanup. (Brian Shirai)
- Added Marshal#load spec for extended Array. (Brian Shirai)
- Fixed Marshal#construct_hash to handle edge case of extended Hash (sshao)
- added edge-case Marshal#load spec for extended Hashes containing user-marshaled objects (sshao)
- Merge pull request #3452 from eregon/comparable_equal_recursion (Brian Shirai)
- Added spec for Comparable#<=> with #<=> calling super. (Benoit Daloze)
- Added spec for Comparable#<=> without #<=> defined. (Benoit Daloze)
- Changed Comparable#== to use a recursion guard. (Benoit Daloze)
- Added a couple more machine metrics. (Brian Shirai)
- A few more JIT metrics. (Brian Shirai)
- Rewrote Rubinius::Metrics. (Brian Shirai)
- Removed young generation auto-tuning. (Brian Shirai)
- Merge pull request #3449 from eregon/symbol_equal (Yorick Peterse)
- Use BasicObject#equal? for Symbol#==. (Benoit Daloze)
- Added OnStack for backtrace / Location Array. (Brian Shirai)
- Fix for GCC's idiotic warn unused-result. (Brian Shirai)
- Revert ""Switched StatsD to counter."" (Brian Shirai)
- Fixed parsing StatsD config . (Brian Shirai)
- Added Metrics FileEmitter. (Brian Shirai)
- Fixed parsing config values with '.'. (Brian Shirai)
- Switched StatsD to counter. (Brian Shirai)
- Converted Metrics to only counters. (Brian Shirai)
- Added typedef for InternalThreadList. (Brian Shirai)
- Removed Thread#critical=. (Brian Shirai)
- Merge pull request #3448 from nirvdrum/fix_step_float_iterations_size (Yorick Peterse)
- Fixed return value for Rubinius::Mirror::Range#step_float_iterations_size. (Kevin Menard)
- More locking fixes. (Brian Shirai)
- Emit abort, bug, warn content with logger. (Brian Shirai)
- Added log of exit status. (Brian Shirai)
- Fixed latent SEGVs from malloc() returning NULL. (Brian Shirai)
- Fixed Array#flatten. (Brian Shirai)
- Added Array#flatten specs. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1537700/assets,https://api.github.com/repos/rubinius/rubinius/releases/1537700,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.5.8,https://github.com/rubinius/rubinius/releases/tag/v2.5.8,https://api.github.com/repos/rubinius/rubinius/zipball/v2.5.8,v2.5.8,False,False
1537122,2015-07-14T20:40:05Z,2015-07-14T21:39:30Z,Release 1.4.11,"Version 1.4.11 (2015-07-14)

News:
- Configuration options are available for -Xsystem.log.limit and
  -Xsystem.log.archives. This provides native log rotation by Rubinius that
  does not depend on signals. Use of signals for key functionality in a
  runtime like Rubinius is problematic because the running Ruby program could
  trap those signals and interfere with the system.
  
  The option -Xsystem.log.limit sets a limit in bytes on the size of the log
  file.
  
  The option -Xsystem.log.archives sets a limit on the number of archives that
  are retained. The active log file is zipped and the files are rotated up to
  the limit, resulting in, for example, rbx-user.log, rbx-user.log.1.Z, etc.
- Rubinius::Diagnostics are added. The diagnostics provide state-oriented
  logging, in contrast to the Rubinius::Metrics, which provide monotonic
  counters on various aspects of work performed by the program. The
  diagnostics are emitted in summary form to the log file at regular
  intervals, but only if the values have updated since the last time they were
  emitted, so they do not consume much log space.
- Threads are immediately removed from the internal list of threads when the
  thread function completes. The Thread object preserves all other state as
  long as it is reachable in the object graph. The process memory for the
  Thread is recovered by a finalizer function when the Thread object is no
  longer reachable.
- System halt is reworked to prevent race conditions on cleaning up resources
  when the process is halting. The halt code is no longer run by any Ruby
  thread executing, but instead is run on the dedicated thread that processes
  signals.

Changelog:
- Updated rubysl-profiler to 1.0.1. (Brian Shirai)
- Merge remote-tracking branch 'origin' into 1.8.7 (Brian Shirai)
- Fixed default CI spec exit status. (Brian Shirai)
- Smash another racey process spec. (Brian Shirai)
- Reworked halting the system. (Brian Shirai)
- Default to non-zero spec process exit status. (Brian Shirai)
- Removed ""BUNDLER WITH"" crap from Gemfile.lock (Yorick Peterse)
- Remove threads from list when they finish executing. (Brian Shirai)
- Removed left over Bert files. (Brian Shirai)
- Calculate total memory diagnostics better. (Brian Shirai)
- Default eden to 30mb. (Brian Shirai)
- Merge remote-tracking branch 'origin' into 1.8.7 (Brian Shirai)
- Reworked ObjectMemory diagnostics. (Brian Shirai)
- Merge remote-tracking branch 'origin' into 1.8.7 (Brian Shirai)
- Added memory summary to diagnostics. (Brian Shirai)
- Cleaned cruft replaced by diagnostics. (Brian Shirai)
- Merge remote-tracking branch 'origin' into 1.8.7 (Brian Shirai)
- Added collection counts to Baker, Immix diagnostics. (Brian Shirai)
- Fixed CodeManager diagnostics. (Brian Shirai)
- Fixed calculating C-API handle diagnostics. (Brian Shirai)
- Fixed InflatedHeaders diagnostics. (Brian Shirai)
- Merge remote-tracking branch 'origin' into 1.8.7 (Brian Shirai)
- Merge remote-tracking branch 'origin' into 1.8.7 (Brian Shirai)
- Fixed BakerGC diagnostics. (Brian Shirai)
- Added config for log file access permission. (Brian Shirai)
- Added Rubinius::Diagnostics. (Brian Shirai)
- Fix lookup of respond_to_missing? method and add some specs. (Joe Eli McIlvain)
- Fixed header file for GCC. (Brian Shirai)
- Fixed include for Linux. (Brian Shirai)
- Added config items -Xsystem.log.limit, -Xsystem.log.archives. (Brian Shirai)
- Added log rotation with compression. (Brian Shirai)
- More Metrics cleanup. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1537122/assets,https://api.github.com/repos/rubinius/rubinius/releases/1537122,master,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.11,https://github.com/rubinius/rubinius/releases/tag/v1.4.11,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.11,v1.4.11,False,False
1468161,2015-06-27T04:48:12Z,2015-06-27T05:23:54Z,Release 1.4.10,"Version 1.4.10 (2015-06-26)

News:
- Fixed checking the return value of malloc() in case allocation fails.
- The C++ abort, bug, warn methods use the logger facility.
- Internal locking is improved.
- Rubinius::Metrics performance counters are now only counters and not gauges
  because counters preserve their characteristics under sampling.
- Rubinius::Metrics FileEmitter writes performance counters to a specified
  file every -Xsystem.metrics.interval milliseconds.
- Object#equal? is used for Symbol#==.
- The young generation garbage collector size and lifetime auto-tuning is
  removed. The size can be set with -Xgc.young_bytes, which defaults to 40mb.
  The lifetime can be set with -Xgc.young_lifetime, which defaults to 2.
- Comparable#== uses a recursion guard instead of rescuing SystemStackError.
- Marshal#load compatibility is improved for an instance of a Hash that has
  been extended.
- Bundler is updated to 1.10.5.

Changelog:
- Updated Bundler to 1.10.5. (Brian Shirai)
- Added Marshal#load spec for extended Array. (Brian Shirai)
- Fixed Marshal#construct_hash to handle edge case of extended Hash (sshao)
- added edge-case Marshal#load spec for extended Hashes containing user-marshaled objects (sshao)
- Added spec for Comparable#<=> with #<=> calling super. (Benoit Daloze)
- Added spec for Comparable#<=> without #<=> defined. (Benoit Daloze)
- Changed Comparable#== to use a recursion guard. (Benoit Daloze)
- Added a couple more machine metrics. (Brian Shirai)
- A few more JIT metrics. (Brian Shirai)
- Rewrote Rubinius::Metrics. (Brian Shirai)
- Fixed Marshal#construct_hash to handle edge case of extended Hash (sshao)
- added edge-case Marshal#load spec for extended Hashes containing user-marshaled objects (sshao)
- Removed young generation auto-tuning. (Brian Shirai)
- Use BasicObject#equal? for Symbol#==. (Benoit Daloze)
- Added OnStack for backtrace / Location Array. (Brian Shirai)
- Fix for GCC's idiotic warn unused-result. (Brian Shirai)
- Revert ""Switched StatsD to counter."" (Brian Shirai)
- Fixed parsing StatsD config . (Brian Shirai)
- Added Metrics FileEmitter. (Brian Shirai)
- Fixed parsing config values with '.'. (Brian Shirai)
- Switched StatsD to counter. (Brian Shirai)
- Converted Metrics to only counters. (Brian Shirai)
- Added typedef for InternalThreadList. (Brian Shirai)
- Fixed return value for Rubinius::Mirror::Range#step_float_iterations_size. (Kevin Menard)
- Fixed locking for Thread#critical= lock. (Brian Shirai)
- More locking fixes. (Brian Shirai)
- Emit abort, bug, warn content with logger. (Brian Shirai)
- Added log of exit status. (Brian Shirai)
- Fixed latent SEGVs from malloc() returning NULL. (Brian Shirai)
- Fixed latent SEGVs from malloc() returning NULL. (Brian Shirai)
- Updated bundler to 1.10.4. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1468161/assets,https://api.github.com/repos/rubinius/rubinius/releases/1468161,master,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.10,https://github.com/rubinius/rubinius/releases/tag/v1.4.10,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.10,v1.4.10,False,False
1428518,2015-06-16T23:47:57Z,2015-06-17T16:22:49Z,Release 1.4.9,"Version 1.4.9 (2015-06-16)

News:
- Thread synchronization accessing an internal data structure is improved.
- Trapped signal procs are processed on a dedicated thread rather than being
  interleaved with a program threads.
- Array#zip compatibility is improved.
- The C-API prototype for rb_ary_entry is fixed.
- Marshal correctly unmarshals an object that was a Bignum on 32bit and is a
  Fixnum on 64bit.
- Rubinius::Thunk#value accessor is added.
- Struct#each_pair compatibility is improved.
- Pre-installed gems are updated:
  - bundler 1.9.9 -> 1.10.4
  - json 1.8.2 -> 1.8.3
  - rb-readline 0.5.2 -> 0.5.3
  - rubysl-base64 1.0.0 -> 1.0.1
  - rubysl-digest 1.0.1 -> 1.2.0
- RubyGems is updated to 2.4.8. See CVE-2015-3900.

Changelog:
- Updated gems_list.txt. (Brian Shirai)
- Removed SYNC_TL and other threading fixes. (Brian Shirai)
- Fix some sharing specs for Kernel#{send|**send**|public_send} (Kenichi Kamiya)
- Fix some sharing specs for Marshal.#{load|restore} (Kenichi Kamiya)
- Fix some sharing specs for Hash#{store|[]=} (Kenichi Kamiya)
- Fix some sharing specs for Enumerable#{collect_concat|flat_map} (Kenichi Kamiya)
- Fix some sharing specs for Dir.{exist?|exists?} (Kenichi Kamiya)
- Fix some sharing specs for Array#{slice|[]} (Kenichi Kamiya)
- Fix some sharing specs for Array#{inspect|to_s} (Kenichi Kamiya)
- Delegate Proc#source_location to Method#source_location when the proc was created from a method (Rui Serra)
- Updated pre-installed gems. (Brian Shirai)
- Update LICENSE year range to 2015. (Joe Eli McIlvain)
- Fixed broken SignalException spec. (Brian Shirai)
- Reworked signal handling. Closes #3418. (Brian Shirai)
- Fix Array#zip for enumerator arguments. Fixes #3436 (Kenichi Kamiya)
- Add Array#zip specs for enumerator arguments (Kenichi Kamiya)
- Updated rubygems to 2.4.8. Closes #3435 (Brian Shirai)
- Unspecify OSX image (Tamir Duberstein)
- Add some capi hash functions (Tamir Duberstein)
- Correct rb_ary_entry declaration (Tamir Duberstein)
- Fix OSX build to use llvm35 (Tamir Duberstein)
- fixed construct_bignum to always add object to lookup table (sshao)
- Added Bignum specs for unmarshaling 32-bit Bignums on 64-bit platforms (sshao)
- Initialize FinalizeObject::kind to a known value. (Joe Eli McIlvain)
- Add specs for Rubinius::Thunk#value accessors. (Joe Eli McIlvain)
- Add Rubinius::Thunk#value accessors. (Joe Eli McIlvain)
- Fix Struct#each_pair for block variable (Kenichi Kamiya)
- Add a Struct#each_pair spec to check block variable (Kenichi Kamiya)
- Fix a matcher of Struct#each_pair spec (Kenichi Kamiya)
- Use before in Struct#each_pair specs (Kenichi Kamiya)
- Fixed copy-paste error in libsodium build. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1428518/assets,https://api.github.com/repos/rubinius/rubinius/releases/1428518,master,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.9,https://github.com/rubinius/rubinius/releases/tag/v1.4.9,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.9,v1.4.9,False,False
1428504,2015-06-16T23:32:05Z,2015-06-17T16:20:47Z,Release 2.5.7,"Version 2.5.7 (2015-06-16)

News:
- Thread synchronization accessing an internal data structure is improved.
- The C-API defines macros for HAVE_RB_HASH_DUP and HAVE_RB_HASH_FREEZE.
- Bundler is updated to 1.10.4.

Changelog:
- Updated bundler to 1.10.4. (Brian Shirai)
- Removed SYNC_TL and other threading fixes. (Brian Shirai)
- Announces new capi hash functions. (Filipe Dias)
- Fix some sharing specs for Kernel#{send|**send**|public_send} (Kenichi Kamiya)
- Fix some sharing specs for Marshal.#{load|restore} (Kenichi Kamiya)
- Fix some sharing specs for Hash#{store|[]=} (Kenichi Kamiya)
- Fix some sharing specs for Enumerable#{collect_concat|flat_map} (Kenichi Kamiya)
- Fix some sharing specs for Dir.{exist?|exists?} (Kenichi Kamiya)
- Fix some sharing specs for Array#{slice|[]} (Kenichi Kamiya)
- Fix some sharing specs for Array#{inspect|to_s} (Kenichi Kamiya)
- Delegate Proc#source_location to Method#source_location when the proc was created from a method (Rui Serra)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1428504/assets,https://api.github.com/repos/rubinius/rubinius/releases/1428504,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.5.7,https://github.com/rubinius/rubinius/releases/tag/v2.5.7,https://api.github.com/repos/rubinius/rubinius/zipball/v2.5.7,v2.5.7,False,False
1411045,2015-06-10T05:53:01Z,2015-06-12T22:01:22Z,Release 1.4.8,"Version 1.4.8 (2015-06-09)

News:
- Marshal correctly unmarshals an object that was a Bignum on 32bit and is a
  Fixnum on 64bit.
- Regexp.new compatibility is improved.
- Thread#pid is added. It returns a process-unique number for each Thread
  instance.
- All threads are not forced to checkpoint when checking if the garbage
  collector should run.
- Pre-installed gems are updated:
  - json 1.8.2 -> 1.8.3
  - rb-readline 0.5.2 -> 0.5.3
  - rubysl-base64 1.0.0 -> 1.0.1
  - rubysl-digest 1.0.1 -> 1.2.0
  - bundler 1.9.9 -> 1.10.3

Changelog:
- Updated gems_list.txt. (Brian Shirai)
- fixed construct_bignum to always add object to lookup table (sshao)
- Added Bignum specs for unmarshaling 32-bit Bignums on 64-bit platforms (sshao)
- removed ruby_version_is 1.8 guard for bignum in dump_spec (sshao)
- add missing macports? and macports_llvm_config methods to configure (sshao)
- Fixed copy-paste error in libsodium build. (Brian Shirai)
- add 2.2 branch to ci (Benny Klotz)
- Fix a **GNUC** check to work with GCC 5 (Jan Alexander Steffens (heftig))
- Build libsodium. (Brian Shirai)
- Vendored libsodium 1.0.3. (Brian Shirai)
- Reintroduce TypeError raising for Regexp.new (Benny Klotz)
- Reintroduce Number arg specs for Regexp.new (Benny Klotz)
- use already defined methods from the fixture class (Benny Klotz)
- Fix Method#== (Benny Klotz)
- implement specs for comparing a method defined via define_method and a method defined via def (Benny Klotz)
- Updated .gitignore. (Brian Shirai)
- Updated daedalus and rubysl-digest. Closes #3312. (Brian Shirai)
- Check for pending GC request without STW. (Brian Shirai)
- Platform-specific gettid. Closes #3404, #3405. (Brian Shirai)
- Clean bundler environment before running Homebrew during configuration (Michał Matyas)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1411045/assets,https://api.github.com/repos/rubinius/rubinius/releases/1411045,master,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.8,https://github.com/rubinius/rubinius/releases/tag/v1.4.8,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.8,v1.4.8,False,False
1411040,2015-06-12T17:35:13Z,2015-06-12T22:00:03Z,Release 2.5.6,"Version 2.5.6 (2015-06-12)

News:
- Trapped signal procs are processed on a dedicated thread rather than being
  interleaved with a program threads.
- Array#zip compatibility is improved.
- The C-API provides rb_hash_dup and rb_hash_freeze.
- The C-API prototype for rb_ary_entry is fixed.
- Marshal correctly unmarshals an object that was a Bignum on 32bit and is a
  Fixnum on 64bit.
- Rubinius::Thunk#value accessor is added.
- Enumerable#each_cons and Enumerator#size compatibility is improved.
- Enumerator::Lazy compatibility is improved.
- Struct#each_pair compatibility is improved.
- Proc#curry compatibility is improved.
- Regexp.new compatibility is improved.
- Method#== compatibility is improved.
- All threads are not forced to checkpoint when checking if the garbage
  collector should run.
- Thread#stop? access to internal state is synchronized.
- Unmanaged resources are finalized immediately.
- ThreadGroup implementation is improved.
- Pre-installed gems are updated:
  - daedalus-core 0.3.0 -> 0.5.0
  - json 1.8.2 -> 1.8.3
  - rb-readline 0.5.2 -> 0.5.3
  - rubysl-digest 2.0.7 -> 2.0.8
  - bundler 1.9.8 -> 1.10.3
- RubyGems is updated to 2.4.8. See CVE-2015-3900.

Changelog:
- Updated pre-installed gems. (Brian Shirai)
- Update LICENSE year range to 2015. (Joe Eli McIlvain)
- Fixed broken SignalException spec. (Brian Shirai)
- Reworked signal handling. Closes #3418. (Brian Shirai)
- Fix Array#zip for enumerator arguments. Fixes #3436 (Kenichi Kamiya)
- Add Array#zip specs for enumerator arguments (Kenichi Kamiya)
- Updated rubygems to 2.4.8. Closes #3435 (Brian Shirai)
- Unspecify OSX image (Tamir Duberstein)
- Add some capi hash functions (Tamir Duberstein)
- Correct rb_ary_entry declaration (Tamir Duberstein)
- Fix OSX build to use llvm35 (Tamir Duberstein)
- fixed construct_bignum to always add object to lookup table (sshao)
- Added Bignum specs for unmarshaling 32-bit Bignums on 64-bit platforms (sshao)
- Initialize FinalizeObject::kind to a known value. (Joe Eli McIlvain)
- Add specs for Rubinius::Thunk#value accessors. (Joe Eli McIlvain)
- Add Rubinius::Thunk#value accessors. (Joe Eli McIlvain)
- Fix Enumerable#each_cons for Enumerator#size with larger argument (Kenichi Kamiya)
- Add an Enumerable#each_cons spec for Enumerator#size (Kenichi Kamiya)
- Fix Enumerator#size for callable Non-Proc size (Kenichi Kamiya)
- Add an Enumerator#size spec for callable Non-Proc size (Kenichi Kamiya)
- Fix Enumerator::Lazy#take with 0 argument (Kenichi Kamiya)
- Add Enumerator::Lazy#take specs with 0 argument (Kenichi Kamiya)
- Fix stop iteration point of Enumerator::Lazy#take (Kenichi Kamiya)
- Fix Enumerator::Lazy#take to switch size with Infinity (Kenichi Kamiya)
- Add an Enumerator::Lazy#take spec to switch size with Infinity (Kenichi Kamiya)
- Fix Struct#each_pair for block variable (Kenichi Kamiya)
- Add a Struct#each_pair spec to check block variable (Kenichi Kamiya)
- Fix a matcher of Struct#each_pair spec (Kenichi Kamiya)
- Use before in Struct#each_pair specs (Kenichi Kamiya)
- Fixed copy-paste error in libsodium build. (Brian Shirai)
- add 2.2 branch to ci (Benny Klotz)
- Added mirror for Proc.**from_block**. (Brian Shirai)
- Use Module#thunk_method in Proc#curry. (Brian Shirai)
- Added mirror for Proc#curry. Improves #3406. (Brian Shirai)
- Fix a **GNUC** check to work with GCC 5 (Jan Alexander Steffens (heftig))
- Build libsodium. (Brian Shirai)
- Vendored libsodium 1.0.3. (Brian Shirai)
- Reintroduce TypeError raising for Regexp.new (Benny Klotz)
- Reintroduce Number arg specs for Regexp.new (Benny Klotz)
- use already defined methods from the fixture class (Benny Klotz)
- Fix Method#== (Benny Klotz)
- implement specs for comparing a method defined via define_method and a method defined via def (Benny Klotz)
- ported over jruby's fix for Proc#curry, this closes #2951 (Benny Klotz)
- Updated .gitignore. (Brian Shirai)
- Updated daedalus and rubysl-digest. Closes #3312. (Brian Shirai)
- Check for pending GC request without STW. (Brian Shirai)
- Platform-specific gettid. Closes #3404, #3405. (Brian Shirai)
- Updated daedalus-core to 0.5.0. (Brian Shirai)
- Use sychronized check for sleep in Thread#stop?. (Brian Shirai)
- Updated daedalus-core to 0.4.0. (Brian Shirai)
- Clean up a small bit of SharedState cruft. (Brian Shirai)
- Match only v2.x tags. (Brian Shirai)
- Quotes inline code/shell elements (Ben Lovell)
- Wraps CONTRIBUTING at 80 columns (Ben Lovell)
- Finalize unmanaged resources immediately. (Brian Shirai)
- Cleaned up ThreadGroup. (Brian Shirai)
- Clean bundler environment before running Homebrew during configuration (Michał Matyas)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1411040/assets,https://api.github.com/repos/rubinius/rubinius/releases/1411040,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.5.6,https://github.com/rubinius/rubinius/releases/tag/v2.5.6,https://api.github.com/repos/rubinius/rubinius/zipball/v2.5.6,v2.5.6,False,False
1320863,2015-05-20T23:36:16Z,2015-05-21T04:00:26Z,Release 1.4.7,"Version 1.4.7 (2015-05-20)

News:
- Array#concat performance is improved.
- Struct performance is improved.
- A deadlock with synchronous JIT compiled is fixed.
- The Console connection mechanism is reworked to avoid littering the file
  system with temporary files when the process is killed.
- The std{in, out, err} file descriptors cannot be closed. If Rubinius is
  exec'd from a process that has closed these file descriptors, new file
  descriptors pointing to temporary files are opened.
- C-API functions and macros are added to support current MRI openssl C-ext.
- System resource finalization does not set up C-API native method mechanisms
  when it is not needed.
- A deadlock updating the internal Metrics data structures is fixed.
- The stack size for internal threads is lowered where appropriate.
- The C-API provides rb_struct_s_members.
- Array#concat is fixed when the array being added to has a shifted start
  index.
- The -Xjit.profile option emits profiling instrumentation in methods compiled
  by the JIT. Also, the JIT is not disabled during profiling when this option
  is specified.
- Thread#pid returns the PID of the thread on Linux and some platform-specific
  integer value on OS X.
- Bundler is updated to 1.9.9.

Changelog:
- Updated bundler to 1.9.9. (Brian Shirai)
- Updated gems_list.txt. (Brian Shirai)
- Updated daedalus-core to 0.5.0. (Brian Shirai)
- Use sychronized check for sleep in Thread#stop?. (Brian Shirai)
- Updated daedalus-core to 0.4.0. (Brian Shirai)
- Clean up a small bit of SharedState cruft. (Brian Shirai)
- Match only v1.x tags. (Brian Shirai)
- Match only v2.x tags. (Brian Shirai)
- Quotes inline code/shell elements (Ben Lovell)
- Wraps CONTRIBUTING at 80 columns (Ben Lovell)
- Finalize unmanaged resources immediately. (Brian Shirai)
- Cleaned up ThreadGroup. (Brian Shirai)
- Updated bundler to 1.9.8. (Brian Shirai)
- Use rubysl-digest 2.0.7 (Yorick Peterse)
- Added RbConfig::CONFIG['THREAD_MODEL'](Yorick Peterse)
- Added Thread#pid. Closes #3365. (Brian Shirai)
- Removed timeout from Process.detach specs. (Brian Shirai)
- Updated rubinius-profiler. (Brian Shirai)
- Don't disable the JIT if -Xjit.profile. (Brian Shirai)
- Fixed -Xjit.profile. Closes #3212. (Brian Shirai)
- Fixed Array::concat, again. (Brian Shirai)
- Added spec for Array#concat with shifted start. (Brian Shirai)
- Added rb_struct_s_members() (Yorick Peterse)
- Added stdarg.h include to ruby.h. (Brian Shirai)
- Update bundler to 1.9.7. (Brian Shirai)
- Updated rubysl-openssl to 2.3.0. (Brian Shirai)
- Added rb_absint_size. (Brian Shirai)
- Added rb_vsprintf. (Brian Shirai)
- Added C-API specs for rb_vsprintf. (Brian Shirai)
- Added rb_{alloc,free}_tmp_buffer. (Brian Shirai)
- Added C-API specs for rb_{alloc,free}_tmp_buffer. (Brian Shirai)
- Fixed Array#concat. (Brian Shirai)
- Fixed deadlock in Metrics. Possibly related to #3366. (Brian Shirai)
- Disable OS X on Travis awaiting LLVM 3.6 support. (Brian Shirai)
- Simplified node, process info logging format. (Brian Shirai)
- Set stack size for internal threads. (Brian Shirai)
- Introduce unmanaged finalizer kind. (Brian Shirai)
- Added RHASH_SET_IFNONE/rb_hash_set_ifnone (Yorick Peterse)
- Alias rb_funcallv to rb_funcall2 (Yorick Peterse)
- Added macro RSTRING_GETMEM (Yorick Peterse)
- Added rb_sym2str() (Yorick Peterse)
- Added rb_hash_lookup2() (Yorick Peterse)
- Imported ALLOCV macros from MRI (Yorick Peterse)
- Imported ZALLOC/ZALLOC_N from MRI (Yorick Peterse)
- Imported PRI\* macros from MRI (Yorick Peterse)
- Fixed Thread#join(timeout). Closes #3390. (Brian Shirai)
- Don't allow closing std{in, out, err}. (Brian Shirai)
- Fill in standard IO file descriptors on startup. (Brian Shirai)
- Reworked Console connection mechanism. (Brian Shirai)
- Fixed deadlock with synchronous JIT. (Brian Shirai)
- Don't allow closing std{in, out, err}. (Brian Shirai)
- Fill in standard IO file descriptors on startup. (Brian Shirai)
- Switch config to .rbxconfig. (Brian Shirai)
- Updated daedalus-core. (Brian Shirai)
- Don't call looping Module#constants from loop in Type.include_modules_from. (Joe Eli McIlvain)
- Better fix for optimized specialization for Struct. (Joe Eli McIlvain)
- Fix optimized specialization for Struct. (Joe Eli McIlvain)
- Improved Array#sample. (Brian Shirai)
- In Array::concat, avoid creating a tuple if the current is large enough. (Joe Eli McIlvain)
- In Array::concat, use Tuple::create_dirty instead of create. (Joe Eli McIlvain)
- Add specs for cases where timezone used was changed. (Filipe Dias)
- Include configuration.hpp from builtin/jit.cpp. Patch by @ff2000. (Joe Eli McIlvain)
- Add guard around reference to RBX_LLVM_VERSION. Patch by @ff2000. (Joe Eli McIlvain)
- Expose logger::write to Ruby. (Brian Shirai)
- Fixed testing Symbol is a valid constant. (Brian Shirai)
- Fix Module::find_method for prepended modules. (Joe Eli McIlvain)
- Add some specs for JIT'd call sites (one failing). (Joe Eli McIlvain)
- Fix method aliasing with prepended modules. (Joe Eli McIlvain)
- Add failing spec for prepended module method aliasing. (Joe Eli McIlvain)
- Fix Module#public_instance_method for prepended modules. (Joe Eli McIlvain)
- Fix Module#instance_method for prepended modules. (Joe Eli McIlvain)
- Use consistent style in prepend specs. (Joe Eli McIlvain)
- Add specs for prepended module method ownership (one failing). (Joe Eli McIlvain)
- Added Rubinius.primitive :variable_scope_allocate. (Joe Eli McIlvain)
- Ruby spec for multibyte constant names (Yorick Peterse)
- Fix detecting of constants with Unicode (Yorick Peterse)
- Updated gems_list.txt. (Brian Shirai)
- Mark RuntimeData correctly. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1320863/assets,https://api.github.com/repos/rubinius/rubinius/releases/1320863,master,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.7,https://github.com/rubinius/rubinius/releases/tag/v1.4.7,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.7,v1.4.7,False,False
1302184,2015-05-15T18:41:25Z,2015-05-15T19:47:02Z,Release 2.5.5,"Version 2.5.5 (2015-05-15)

News:
- The C-API provides rb_struct_s_members.
- Array#concat is fixed when the array being added to has a shifted start
  index.
- The -Xjit.profile option emits profiling instrumentation in methods compiled
  by the JIT. Also, the JIT is not disabled during profiling when this option
  is specified.
- Thread#pid returns the PID of the thread on Linux and some platform-specific
  integer value on OS X.
- The rubysl-digest gem is updated to 2.0.7.
- Bundler is updated to 1.9.8.

Changelog:
- Updated bundler to 1.9.8. (Brian Shirai)
- Use rubysl-digest 2.0.7 (Yorick Peterse)
- Added `RbConfig::CONFIG['THREAD_MODEL']` (Yorick Peterse)
- Added Thread#pid. Closes #3365. (Brian Shirai)
- Removed timeout from Process.detach specs. (Brian Shirai)
- Updated rubinius-profiler. (Brian Shirai)
- Don't disable the JIT if -Xjit.profile. (Brian Shirai)
- Fixed -Xjit.profile. Closes #3212. (Brian Shirai)
- Fixed Array::concat, again. (Brian Shirai)
- Added spec for Array#concat with shifted start. (Brian Shirai)
- Added rb_struct_s_members() (Yorick Peterse)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1302184/assets,https://api.github.com/repos/rubinius/rubinius/releases/1302184,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.5.5,https://github.com/rubinius/rubinius/releases/tag/v2.5.5,https://api.github.com/repos/rubinius/rubinius/zipball/v2.5.5,v2.5.5,False,False
1293465,2015-05-13T19:00:42Z,2015-05-13T19:22:03Z,Release 2.5.4,"Version 2.5.4 (2015-05-13)

News:
- Module#prepend compatibility has been improved.
- Checking if a Symbol is a valid constant is fixed.
- Array#concat and Array#sample performance is improved.
- Struct performance is improved.
- A deadlock with synchronous JIT compiled is fixed.
- The Console connection mechanism is reworked to avoid littering the file
  system with temporary files when the process is killed.
- The std{in, out, err} file descriptors cannot be closed. If Rubinius is
  exec'd from a process that has closed these file descriptors, new file
  descriptors pointing to temporary files are opened.
- C-API functions and macros are added to support current MRI openssl C-ext.
- System resource finalization does not set up C-API native method mechanisms
  when it is not needed.
- A deadlock updating the internal Metrics data structures is fixed.
- The stack size for internal threads is lowered where appropriate.
- The rubysl-openssl version is updated to 2.3.0.
- Bundler is updated to 1.9.7.

Changelog:
- Added stdarg.h include to ruby.h. (Brian Shirai)
- Update bundler to 1.9.7. (Brian Shirai)
- Updated rubysl-openssl to 2.3.0. (Brian Shirai)
- Added rb_absint_size. (Brian Shirai)
- Added rb_vsprintf. (Brian Shirai)
- Added C-API specs for rb_vsprintf. (Brian Shirai)
- Added rb_{alloc,free}_tmp_buffer. (Brian Shirai)
- Added C-API specs for rb_{alloc,free}_tmp_buffer. (Brian Shirai)
- Fixed Array#concat. (Brian Shirai)
- Fixed deadlock in Metrics. Possibly related to #3366. (Brian Shirai)
- Disable OS X on Travis awaiting LLVM 3.6 support. (Brian Shirai)
- Simplified node, process info logging format. (Brian Shirai)
- Set stack size for internal threads. (Brian Shirai)
- Introduce unmanaged finalizer kind. (Brian Shirai)
- Added RHASH_SET_IFNONE/rb_hash_set_ifnone (Yorick Peterse)
- Alias rb_funcallv to rb_funcall2 (Yorick Peterse)
- Added macro RSTRING_GETMEM (Yorick Peterse)
- Added rb_sym2str() (Yorick Peterse)
- Added rb_hash_lookup2() (Yorick Peterse)
- Imported ALLOCV macros from MRI (Yorick Peterse)
- Imported ZALLOC/ZALLOC_N from MRI (Yorick Peterse)
- Imported PRI\* macros from MRI (Yorick Peterse)
- Fixed Thread#join(timeout). Closes #3390. (Brian Shirai)
- Don't allow closing std{in, out, err}. (Brian Shirai)
- Fill in standard IO file descriptors on startup. (Brian Shirai)
- Reworked Console connection mechanism. (Brian Shirai)
- Fixed deadlock with synchronous JIT. (Brian Shirai)
- Switch config to .rbxconfig. (Brian Shirai)
- Updated daedalus-core. (Brian Shirai)
- Don't call looping Module#constants from loop in Type.include_modules_from. (Joe Eli McIlvain)
- Better fix for optimized specialization for Struct. (Joe Eli McIlvain)
- Fix optimized specialization for Struct. (Joe Eli McIlvain)
- Improved Array#sample. (Brian Shirai)
- Merge pull request #3386 from fmfdias/add_specs_for_special_timezone_changes (Jesse Cooke)
- In Array::concat, avoid creating a tuple if the current is large enough. (Joe Eli McIlvain)
- In Array::concat, use Tuple::create_dirty instead of create. (Joe Eli McIlvain)
- Add specs for cases where timezone used was changed. (Filipe Dias)
- Include configuration.hpp from builtin/jit.cpp. Patch by @ff2000. (Joe Eli McIlvain)
- Add guard around reference to RBX_LLVM_VERSION. Patch by @ff2000. (Joe Eli McIlvain)
- Expose logger::write to Ruby. (Brian Shirai)
- Fixed testing Symbol is a valid constant. (Brian Shirai)
- Fix Module::find_method for prepended modules. (Joe Eli McIlvain)
- Add some specs for JIT'd call sites (one failing). (Joe Eli McIlvain)
- Fix method aliasing with prepended modules. (Joe Eli McIlvain)
- Add failing spec for prepended module method aliasing. (Joe Eli McIlvain)
- Fix Module#public_instance_method for prepended modules. (Joe Eli McIlvain)
- Fix Module#instance_method for prepended modules. (Joe Eli McIlvain)
- Use consistent style in prepend specs. (Joe Eli McIlvain)
- Add specs for prepended module method ownership (one failing). (Joe Eli McIlvain)
- Added Rubinius.primitive :variable_scope_allocate. (Joe Eli McIlvain)
- Ruby spec for multibyte constant names (Yorick Peterse)
- Fix detecting of constants with Unicode (Yorick Peterse)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1293465/assets,https://api.github.com/repos/rubinius/rubinius/releases/1293465,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.5.4,https://github.com/rubinius/rubinius/releases/tag/v2.5.4,https://api.github.com/repos/rubinius/rubinius/zipball/v2.5.4,v2.5.4,False,False
1229931,2015-04-28T20:55:35Z,2015-04-28T23:20:14Z,Release 2.5.3,"Version 2.5.3 (2015-04-28)

News:
- The default log file location is changed to $TMPDIR or /tmp. The default
  name is changed to $program_name-$user.log, where $program name is the
  configured executable name and $user is the user running the process. The
  default permissions are changed to 0644.
- Logging output now includes system and process information, for example, the
  user executing the process, the JIT status, version and commit hash, etc.
- The internal thread infrastructure has been improved around fork(), exec()
  and shutdown.
- The process will abort if resources are not available for spawning internal
  threads.
- Thread#join has been reworked to use a thread-specific condition variable
  and mutex.
- An unconditional (non-level specific) logging method has been added.
- Logging has been added for the command line arguments, fork child PID, and
  exec arguments.
- Immediate JIT requests are synchronized.
- Calls to Autoload#resolve are synchronized.
- Various compatibility improvements to Enumerable, Enumerator, and String.
- RubyGems is updated to 2.4.6.
- Bundler is updated to 1.9.4.

Changelog:
- Forking from multiple threads is synchronized. (Brian Shirai)
- Kernel#inspect does not dispatch to Kernel#to_s. (Brian Shirai)
- The process state is re-initialized after fork(). (Brian Shirai)
- ConstantTable storage is created lazily. (Brian Shirai)
- Thread::Backtrace::Location#path compatibility is improved. (Yorick Peterse)
- InternalThread infrastructure is rewritten. (Brian Shirai)
- Added RUBY_ENGINE_VERSION. (Brian Shirai)
- JIT compiler thread coordination is improved. (Brian Shirai)
- Enumerator#each_slice, #each_with_index are improved. (Brandon Fish)
- Lazy enumerator compatibility is improved. (Yorick Peterse)
- Marshal support is improved. (Sophia Shao)
- Enumerable#size, #each_cons, #each_slide is improved. (Filipe Dias)
- Enumerator#size is improved. (Filipe Dias)
- String#sub, #sub! is improved. (Filipe Dias)
- Rubinius::Mirror.subject= is improved. (thedarkone, Filipe Dias)
- Proc#curry is improved. (Rui Serra)
- Default log location and permissions are changed. (Brian Shirai)
- Process user name is added to fatal log output. (Brian Shirai)
- FS-API paths are changed. (Brian Shirai)
- InternalThread::shutdown is improved. (Brian Shirai)
- Rubinius::Console request processing is improved. (Brian Shirai)
- Runinius::Console input/output is updated ofter fork(). (Brian Shirai)
- The rubysl-fcntl gem is updated to 1.0.2. (Sophia Shao)
- Rubinius vm_global_serial primitive is added. (Joe Eli McIlvain)
- Thread#join is reworked to use mutex and condition variable. (Brian Shirai)
- Unconditional log function logger::write is added. (Brian Shirai)
- RubyGems is updated to 2.4.6. (Brian Shirai)
- Logging is added for fork, exec, spawn, and backtick. (Brian Shirai)
- Immediate JIT requests are synchronized. (Brian Shirai)
- Object#inspect is not used in Kernel#method. (Yorick Peterse)
- Machine and process info is logged on startup. (Brian Shirai)
- Calls to Autoload#resolve are synchronized. (Yorick Peterse)
- Process aborts if resources are not available for internal threads. (Brian Shirai)
- Bundler is updated to 1.9.4. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1229931/assets,https://api.github.com/repos/rubinius/rubinius/releases/1229931,master,https://api.github.com/repos/rubinius/rubinius/tarball/v2.5.3,https://github.com/rubinius/rubinius/releases/tag/v2.5.3,https://api.github.com/repos/rubinius/rubinius/zipball/v2.5.3,v2.5.3,False,False
1225891,2015-04-28T06:01:03Z,2015-04-28T06:33:30Z,Release 1.4.6,"Version 1.4.6 (2015-04-28)

News:
- JIT runtime data is processed by the garbage collector correctly.

Changelog:
- Mark RuntimeData correctly. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1225891/assets,https://api.github.com/repos/rubinius/rubinius/releases/1225891,master,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.6,https://github.com/rubinius/rubinius/releases/tag/v1.4.6,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.6,v1.4.6,False,False
1225843,2015-04-27T21:29:09Z,2015-04-28T06:07:08Z,Release 1.4.5,"Version 1.4.5 (2015-04-27)

News:
- The default log file location is changed to $TMPDIR or /tmp. The default
  name is changed to $program_name-$user.log, where $program name is the
  configured executable name and $user is the user running the process. The
  default permissions are changed to 0644.
- Logging output now includes system and process information, for example, the
  user executing the process, the JIT status, version and commit hash, etc.
- The internal thread infrastructure has been improved around fork(), exec()
  and shutdown.
- The process will abort if resources are not available for spawning internal
  threads.
- Thread#join has been reworked to use a thread-specific condition variable
  and mutex.
- An unconditional (non-level specific) logging method has been added.
- Logging has been added for the command line arguments, fork child PID, and
  exec arguments.
- Immediate JIT requests are synchronized.
- Calls to Autoload#resolve are synchronized.
- RubyGems is updated to 2.4.6.
- Bundler is updated to 1.9.4.

Changelog:
- Default log location and permissions are changed. (Brian Shirai)
- Process user name is added to fatal log output. (Brian Shirai)
- FS-API paths are changed. (Brian Shirai)
- InternalThread::shutdown is improved. (Brian Shirai)
- Rubinius::Console request processing is improved. (Brian Shirai)
- Runinius::Console input/output is updated ofter fork(). (Brian Shirai)
- The rubysl-fcntl gem is updated to 1.0.2. (Sophia Shao)
- Rubinius vm_global_serial primitive is added. (Joe Eli McIlvain)
- Thread#join is reworked to use mutex and condition variable. (Brian Shirai)
- Unconditional log function logger::write is added. (Brian Shirai)
- RubyGems is updated to 2.4.6. (Brian Shirai)
- Logging is added for fork, exec, spawn, and backtick. (Brian Shirai)
- Immediate JIT requests are synchronized. (Brian Shirai)
- Object#inspect is not used in Kernel#method. (Yorick Peterse)
- Machine and process info is logged on startup. (Brian Shirai)
- Calls to Autoload#resolve are synchronized. (Brian Shirai)
- Process aborts if resources are not available for internal threads. (Brian Shirai)
- Bundler is updated to 1.9.4. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/1225843/assets,https://api.github.com/repos/rubinius/rubinius/releases/1225843,master,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.5,https://github.com/rubinius/rubinius/releases/tag/v1.4.5,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.5,v1.4.5,False,False
1070918,2015-03-19T23:07:06Z,2015-03-19T23:14:00Z,Release 1.4.4,"Version 1.4.4 (2015-03-19)
News:
- Marshal edge cases involving custom-defined methods have been fixed.
- rubysl and rubysl-irb version has been bumped to fix the readline dependency.
- Bundler updated to 1.8.5.
- Changes from master for 2.5.2 that are not language version dependent are merged into 1.8.7 branch.

Changelog:
- Updated gems_list.txt (to bump rubysl-irb version). (sshao)
- More master branch changes from 2.5.2 are included. (Brian Shirai)
- Fix Marshal for objects whose _dump returns an immediate. (sshao)
- Fixed Marshal again for objects whose _dump returns an immediate. (sshao)
- Updated gems_list.txt (to bump rubysl version). (sshao)
- Updated bundler in gems_list.txt. (Brian Shirai)
",https://api.github.com/users/sshao,1361309,sshao,https://api.github.com/repos/rubinius/rubinius/releases/1070918/assets,https://api.github.com/repos/rubinius/rubinius/releases/1070918,master,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.4,https://github.com/rubinius/rubinius/releases/tag/v1.4.4,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.4,v1.4.4,False,False
962365,2015-02-16T16:31:41Z,2015-02-18T05:10:36Z,Release 1.4.3,"Version 1.4.3

News:
- Additional improvements have been made for the VM state after fork().
- The internal thread mechanism (eg JIT, signal handling, concurrent GC, etc.)
  has been improved.
- The Rubinius build system will prefer clang if it is available.
- Bundler is updated to 1.8.2.

Changelog:
- Kernel#inspect does not dispatch to Kernel#to_s for MRI compatibility. (Brian Shirai)
- Build process prefers clang if it is available. (Brian Shirai)
- The VM state is reset after fork(). (Brian Shirai)
- The constant tables for class and modules is created lazily. (Brian Shirai)
- Internal threads are improved. (Brian Shirai)
- The crash handler includes the process PID in its output. (Brian Shirai)
- Bundler is updated to 1.8.2. (Brian Shirai)
- The C-API exception handling mechanism is enabled for Data finalizers. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/962365/assets,https://api.github.com/repos/rubinius/rubinius/releases/962365,master,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.3,https://github.com/rubinius/rubinius/releases/tag/v1.4.3,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.3,v1.4.3,False,False
902999,2015-01-30T21:24:17Z,2015-01-30T21:37:18Z,Release 1.4.2,"Version 1.4.2 (2015-01-30)

News:
- The semanics of Kernel#require are changed to match those of Ruby 1.9+ where
  a file is only required one time regardless of the path passed to #require
  when that path refers to the same file.
- Enumerable#enum_with_index is provided.
- The HAMT implementation of Hash#select hondles frozen instances.
- All changes from master for 2.5.2 that are not language version dependent are
  merged into 1.8.7 branch.

Changelog:
- Enumerable#enum_with_index is provided. (Sophia Shao)
- Kernel#require stores absolute paths preventing multiple requires of a
  single file based on different require paths. (Sophia Shao)
- HAMT Hash#select handles frozen instances. (Sophia Shao)
- All master branch changes for 2.5.2 are included. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/902999/assets,https://api.github.com/repos/rubinius/rubinius/releases/902999,1.8.7,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.2,https://github.com/rubinius/rubinius/releases/tag/v1.4.2,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.2,v1.4.2,False,False
902124,2015-01-30T16:20:34Z,2015-01-30T16:51:58Z,Release 2.5.2,"Version: 2.5.2 (2015-01-30)

News:
- Thread handling has been improved based on analysis by Joe Eli McIlvain
  using valgrind:
  1. Metrics counts for threads are updated before destructing thread state.
  2. Threads sleeping when fork() is called are cleaned up in the child.
  3. Thread state is destructed after joining the system thread.
  4. Stopping internal threads uses a timeout to avoid system hangs.
  5. The system checkpoints before fork().
- Configure finds LLVM if it is available via MacPorts.
- The StatsD emmiter for Metrics includes PID in the key prefix to improve
  support for systems using multiple processes or forking subprocesses.
- Process.groups used to return a maximum of 32 groups unless the
  Process.maxgroups= accessor was called to increase the maximum. This created
  an issue installing the rubysl-openssl gem for users with more than 32
  groups. The default value of 32 is specified in MRI documentation. The
  default value is retained for compatibility but Process.groups first
  queries the total number of groups then returns an Array of all groups.

Changelog:
- Metrics tracking of Thread count is improved. (Joe Eli McIlvain)
- HAMT Hash#select handles frozen instances. (Sophia Shao)
- LLVM is detected from MacPorts. (Todd A. Jacobs)
- Thread cleanup is improved. (Brian Shirai, Joe Eli McIlvain)
- Thread handling around fork() is improved. (Brian Shirai)
- StatsD tag prefix includes PID by default. (Brian Shirai)
- Process.groups returns all groups on the system. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/902124/assets,https://api.github.com/repos/rubinius/rubinius/releases/902124,7a5b05b1a9aca87703ceb0bafe00b916b9510285,https://api.github.com/repos/rubinius/rubinius/tarball/v2.5.2,https://github.com/rubinius/rubinius/releases/tag/v2.5.2,https://api.github.com/repos/rubinius/rubinius/zipball/v2.5.2,v2.5.2,False,False
886424,2015-01-26T18:46:30Z,2015-01-26T19:08:41Z,Release 1.4.1,"Version 1.4.1 (2015-01-26)

News:

The developer tools and IRB are included in the release builds again.

All changes from master for 2.5.1 that are not language version dependent are
merged into 1.8.7 branch.

Changelog:
- The developer tool gems are installed. (Brian Shirai)
- All master branch changes for 2.5.1 are included. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/886424/assets,https://api.github.com/repos/rubinius/rubinius/releases/886424,1.8.7,https://api.github.com/repos/rubinius/rubinius/tarball/v1.4.1,https://github.com/rubinius/rubinius/releases/tag/v1.4.1,https://api.github.com/repos/rubinius/rubinius/zipball/v1.4.1,v1.4.1,False,False
886290,2015-01-26T17:27:46Z,2015-01-26T18:21:40Z,Release 2.5.1,"Version: 2.5.1 (2015-01-26)

News:
- The locking in the virtual machine around fork and fork/exec (e.g. for
  Process.spawn or Kernel#`) has been improved.
- When executing, for example, Process.spawn or Kernel#`, the subprocess
  status is read from a pipe in the parent process. This read could get
  interrupted by the system. The interrupted reads are now handled properly.
- On FreeBSD, the Readline C-ext (rubysl-readline) is used in place of the
  pure Ruby rb-readline because the latter depends on commands that are not
  available on FreeBSD.
- Enumerable#flat_map compatibility is improved.
- Command line option help and -Xhelp is improved.

Changelog:
- The -Xhelp output is improved. (John Muhl)
- Command help explains RBXOPT. (Jason R. Clark)
- Enumerable#flat_map compatibility is improved. (Brian Shirai)
- Rubinius::Metrics timer is canceled properly on FreeBSD. (Brian Shirai)
- Reading subprocess status when spawning handles EINTR. (Brian Shirai)
- The readline C-ext is used on FreeBSD. (Brian Shirai)
- Locking for fork and fork/exec is improved. (Brian Shirai)
- Rubinius::Metrics are free'd on process halt. (Joe Eli McIlvain)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/886290/assets,https://api.github.com/repos/rubinius/rubinius/releases/886290,8fd046f32b0f25295b596f467f5f80442163aefd,https://api.github.com/repos/rubinius/rubinius/tarball/v2.5.1,https://github.com/rubinius/rubinius/releases/tag/v2.5.1,https://api.github.com/repos/rubinius/rubinius/zipball/v2.5.1,v2.5.1,False,False
860982,2015-01-17T17:09:47Z,2015-01-17T19:16:12Z,Release 2.5.0,"Version: 2.5.0 (2015-01-17)

News:
- Process.spawn has been improved by not relying on the virtual machine to be
  in a partially functioning state after fork() is called and before exec() is
  called. All the subprocess state setup is done in the VM itself now, rather
  than calling back to Ruby. This significantly improves reliability.
- The JIT has been improved to be more transparent. Previously, JIT failures
  could impact the semantics of running Ruby code. This is contrary to the
  purpose of a JIT, which is to provide exactly the same Ruby semantics while
  optimizing the execution of the Ruby code.
- The JIT metrics are now emitted correctly. See the following blog post about
  using the Rubinius Metrics with InfluxDB and Grafana:
  
    http://rubini.us/2015/01/05/rubinius-metrics-meets-influxdb-part2/
- The Psych gem is now pre-installed to provide YAML functionality. This
  replaces the previous use of Syck to bootstrap YAML for RubyGems.
- RubyGems is updated to 2.4.5.
- Bundler is updated to 1.7.12.

Changelog:
- The JIT emits correct code for goto_if_nil, goto_if_not_nil. (Brian Shirai)
- RubyGems is updated to 2.4.5. (Brian Shirai)
- Building with GCC 4.6.3 is fixed. (Brian Shirai)
- SystemCallError.new compatibility is improved. (Joe Eli McIlvain)
- Thread#join timeout value is coerced to Float and nil values are handled
  correctly. (Joe Eli McIlvain)
- File#reopen with a path closes the previous file descriptor. (Brian Shirai)
- The C-API function rb_ary_new_from_args aliases rb_ary_new3. (Yorick Peterse)
- The C-API function rb_ary_plus is added. (Yorick Peterse)
- The C-API function rb_cloexec_open is added. (Sophia Shao)
- Process.spawn is more robust. (Brian Shirai)
- Enumerable#flat_map is improved. (Erik Michaels-Ober)
- Block keyword parsing is updated to Ruby 2.2.0 behavior. (Brian Shirai)
- Keyword argument objects that include both Symbol keys and other keys are
  now split into two separate Hash instances. (Brian Shirai)
- String#scrub with BINARY input is fixed. (Yorick Peterse)
- String#scrub is fixed with custom block encodings. (Yorick Peterse)
- FFI::MemoryPointer#autorelease= is fixed. (Joe Eli McIlvain)
- FFI::MemoryPointer#autorelease? is added. (Joe Eli McIlvain)
- A missing method raises NoMethodError, a missing variable reference raises
  NameError. (Joe Eli McIlvain)
- String ascii_only cache is reset when calling String#replace. (Yorick Peterse)
- Process::Status creation is fixed. (Yorick Peterse)
- String#include? does not accept a Fixnum. (Chris Seaton)
- The fallback path for SHELL in configure is fixed. (Lars Kanis)
- The C-API rb_data_type_struct matches Ruby 2.2.0. (Brian Shirai)
- The included Bundler version is 1.7.12. (Brian Shirai)
- The JIT internalizes a CompiledCode instance before processing. (Yorick Peterse)
- The Psych gem version 2.0.10 is pre-installed. (Brian Shirai)
- The JIT metrics are emitted correctly. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/860982/assets,https://api.github.com/repos/rubinius/rubinius/releases/860982,50777f410ae938be5a9fa4a0b9ba37709fbdbc72,https://api.github.com/repos/rubinius/rubinius/tarball/v2.5.0,https://github.com/rubinius/rubinius/releases/tag/v2.5.0,https://api.github.com/repos/rubinius/rubinius/zipball/v2.5.0,v2.5.0,False,False
757661,2014-12-05T02:20:21Z,2014-12-05T03:52:12Z,Release 2.4.1,"Version: 2.4.1 (2014-12-04)

News:
- Several C-API now resolve autoloads when looking up a constant:
  
  o rb_path2class
  o rb_path_to_class
  o rb_const_get
  o rb_const_get_at
  o rb_const_get_from
- The MRI C-API defines a number of constants that are specific to MRI's
  garbage collector and should never be used outside of MRI itself.
  Unfortunately, gems like Psych do use them, so we are forced to define them.
  
  o RUBY_DEFAULT_FREE
  o RUBY_NEVER_FREE
  o RUBY_TYPED_DEFAULT_FREE
  o RUBY_TYPEED_NEVER_FREE
  o RUBY_TYPED_FREE_IMMEDIATELY
  o RUBY_TYPED_WB_PROTECTED
- The C-API defines the Check_TypedStruct constant.
- Kernel#require_relative uses the current working directory when called in
  contexts like IRB or -e where a file does not define the relative path.
- File.fnmatch support for FNM_EXTGLOB and FNM_PATHNAME is improved.

Changelog:
- C-API rb_path2class, rb_path_to_class, rb_const_get, rb_const_get_at,
  rb_const_get_from resolve autoloads. (Brian Shirai)
- C-API defines are added for RUBY_DEFAULT_FREE, RUBY_NEVER_FREE,
  RUBY_TYPED_DEFAULT_FREE, RUBY_TYPEED_NEVER_FREE, RUBY_TYPED_FREE_IMMEDIATELY,
  RUBY_TYPED_WB_PROTECTED. These defines are specific to MRI's garbage
    collector and should never be used outside of MRI itself, but gems like
    Psych do use them, so we are forced to define them. (Brian Shirai)
- The C-API defines the Check_TypedStruct constant. (Brian Shirai)
- Kernel#require_relative is improved for IRB and -e. (Brian Shirai)
- File.fnmatch support for FNM_EXTGLOB and FNM_PATHNAME is improved.
  (Jesse Cooke)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/757661/assets,https://api.github.com/repos/rubinius/rubinius/releases/757661,b332f133ed2d1943a469ba105cd57bf207478832,https://api.github.com/repos/rubinius/rubinius/tarball/v2.4.1,https://github.com/rubinius/rubinius/releases/tag/v2.4.1,https://api.github.com/repos/rubinius/rubinius/zipball/v2.4.1,v2.4.1,False,False
747074,2014-12-01T16:56:18Z,2014-12-01T22:08:20Z,Release 2.4.0,"Version: 2.4.0 (2014-12-01)

This release is dedicated to the memory of Ezra Zygmuntowicz, a very good
friend to Rubinius, Ruby, and Rails. Thank you, Ez.

News:
- File.fnmatch support for FNM_EXTGLOB has been added.
- Marshal handles immediate values returned by custom _dump methods.
- Kernel#caller_locations has been added. Kernel#caller now supports a limit
  argument.
- Errno classes can be subclassed.
- An issue caused by the god monitoring facility, where god would forcefully
  close all file descriptors in the process from 3 to 256, has been mitigated.
  Previously, this issue could cause Rubinius to hang when running god and
  exec'ing a subprocess.
- Rubinius::Metrics.data.to_hash now re-uses a Hash instance instead of
  creating a new one on every call.

Changelog:
- File defines FNM_EXTGLOB constant. (Jesse Cooke)
- File.fnmatch supports FNM_EXTGLOB feature. (Jesse Cooke)
- DTrace pre-linking enabled on Linux. (Yorick Peterse)
- The double-conversion vendored library is updated to 1.1.5.
  (Gustavo Frederico Temple Pedrosa)
- The libffi vendored library is updated to 3.2.
  (Gustavo Frederico Temple Pedrosa)
- IO.write is improved for FIFOs. (skliew)
- Marshal handles immediate values returned by custom _dump methods.
  (Sophia Shao)
- Kernel#caller_locations is provided. (Yorick Peterse)
- Kernel#caller supports a limit argument. (Yorick Peterse)
- Errno classes can be subclassed. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/747074/assets,https://api.github.com/repos/rubinius/rubinius/releases/747074,7a231cbf391b1f8f14849b8e3ac37a1cb48d37f8,https://api.github.com/repos/rubinius/rubinius/tarball/v2.4.0,https://github.com/rubinius/rubinius/releases/tag/v2.4.0,https://api.github.com/repos/rubinius/rubinius/zipball/v2.4.0,v2.4.0,False,False
669392,2014-10-31T15:56:58Z,2014-10-31T18:17:40Z,Release 2.3.0,"Version: 2.3.0 (2014-10-31)

News:
- Keyword arguments (both optional and required) are supported. Other syntax
  changes in MRI 2.1, like Complex and Rational literal suffixes and symbol
  list literals, are also supported.
- Rubinius will read -X configuration options from CWD/.rbxrc. The format of
  the file is one -X configuration option per line. The available -X
  configuration options are listed by the -Xhelp option.
- The basic infrastructure has been added for always-on metrics of Rubinius
  subsystems. The metrics are 64bit monotonic counters. The data is accessible
  with 'Rubinius::Metrics.data'. The object returned provides the following
  methods:
  - keys: return a list of symbol keys that name available metrics.
  - values: return the values of the available metrics.
  - []: return the value of the metric specified by the given key.
  - to_hash: return a Hash instance of the available metrics.
  
  The metrics can be emitted to StatsD at a regular interval. See the
  following -X configuration options:
  - system.metrics.interval
  - system.metrics.target
  - system.metrics.statsd.server
  - system.metrics.statsd.prefix
  
  The available metrics will be refined over time. Check the values returned
  by the 'Rubinius::Metrics.data.keys' method to determine which metrics are
  available.
- Rubinius provides an interface to the syslog facility. This is used
  internally in Rubinius subsystems to standardize logging. Since the syslog
  interface available through libc only allows syslog to be opened once in a
  process, Rubinius provides the Rubinius::Logger class as a way for
  applications to use the same handle to syslog but provide a specific prefix
  for the application (or application components).
  - Logger.system: return new logger using the ""system"" prefix.
  - Logger.log_exception(message, exc): write a rendered exception with the
    system logger prefix.
  - Logger.new(name): return a new logger using the specified prefix.
  - Logger#fatal(message): write message to both STDERR and the log with a
    level of Fatal.
  - Logger#error(message): write message to the log with level of Error.
  - Logger#warn(message): write message to the log with level of Warn.
  - Logger#info(message): write message to the log with level of Info.
  - Logger#debug(message): write message to the log with level of Debug.
  
  The default level that will be written to the log is Warn or higher. To
  change the log level, use the system.log.level -X configuration option.
  
  The system.log -X configuration variable controls which logger is used. The
  available loggers are syslog, console, or path. The default logger is the
  file /var/log/$PROGRAM_NAME.log, where $PROGRAM_NAME is replaced by the
  value of Rubinius::PROGRAM_NAME. If this file is not writable,
  $TMPDIR/$PROGRAM_NAME.log (where TMPDIR is an environment variable) or
  /tmp/$PROGRAM_NAME.log will be used, if writable.
  
  If using another application component that opens syslog, this will
  interfere with Rubinius using syslog. In this scenario, consider using the
  Rubinius::Logger class in your application.
- The infrastructure for Rubinius::Console has been added. Rubinius::Console
  will eventually replace IRB, the Rubinius debugger and profiler, and all the
  Rubinius::Agent features, including heap dump. Many of the Rubinius::Console
  features have not yet been implemented.
  
  The Rubinius::Console supports attaching to any running Rubinius instance as
  long as read/write access is available to the file system path specified by
  the system.fsapi.path -X configuration option. Accordingly, Console relies
  on the OS process and file system permissions to provide security and access
  control. With a utility like sshfs, Console can connect to a running
  Rubinius instance over the network.
  
  The goal of Console is to provide a single, comprehensive, integrated, and
  powerful interface to the behavior of the Rubinius system and applications
  running on it.
- Support for automatically building LLVM from source, or accessing a
  pre-built binary of LLVM has been removed. Effort is being focused on
  supporting LLVM packages provided by the system. This is a better use of
  time and allows Rubinius to better integrate with existing systems. For
  example, many Linux distributions strenuously discourage alternately
  packaging system libraries to reduce security risks when defects in the
  libraries are detected and fixed.

Changelog:
- Compatibility of INT2NUM is improved. (Yorick Peterse)
- Compatibility of -c is improved. (Yorick Peterse)
- Keyword arguments are supported. (Brian Shirai)
- Encoding::Convert#inspect is improved. (Robin Dupret)
- ObjectSpace.define_finalizer raises RuntimeError. (Joe McIlvain)
- The C-API provides rb_rational_num, rb_rational_den, rb_big_cmp,
  rb_big_pack, rb_dbl2big, rb_thread_check_ints, rb_intern_const.
  (Yorick Peterse)
- Compatibility of HAMT Hash is improved. (Brian Shirai)
- The C-API rb_funcall3 disallows private methods. (Ryohei Ikegami)
- The String#scrub! method is implemented. (Robin Dupret)
- The Kernel#singleton_class? method is implemented. (Robin Dupret)
- Enumerable#sort handles #to_a returning a frozen Array. (Alex Dowad)
- Keyword coercion is improved. (Ryo Onodera)
- JIT support for cast_for_multi_block_arg is fixed. (Sophia Shao)
- Infrastructure for Rubinius::Console is added. (Brian Shirai)
- Support for parsing -X options from CWD/.rbxrc is added. (Brian Shirai)
- Support for aggregating internal metrics with optional export to StatsD is
  added. (Brian Shirai)
- Support for Rubinius::Agent is removed as all functionality will be provided
  through the Rubinius::Console. (Brian Shirai)
- Support for logging to syslog and file is added. (Brian Shirai)
- Kernel.Float() raises RangeError with Complex argument. (Jesse Cooke)
- Suppport for LLVM shard libraries is added. (Jan Alexander Steffens)
- Kernel.Float() ignores trailing whitespace. (Jesse Cooke)
- The C-API rb_Array compatibility is improved. (Sophia Shao)
- PowerPC64 support for LLVM and Atomic is added.
  (Gustavo Frederico Temple Pedrosa)
- Array#count specialization is added. (Joe McIlvain)
- Kernel#itself is added. (Benny)
- Support for LLVM 3.5 is added. (Yorick Peterse)
- IO.new handles closed streams (Sophia Shao)
- Compatibility of C-API functions rb_stdin, rb_stdout, rb_stderr, rb_defout
  is improved.  (Sophia Shao)
- Kernel.Float() coerces a Complex with only real part. (Benny)
- The C-API provides rb_funcall_with_block. (Ryohei Ikegami)
- Rubinius::FFI::Library#attach_function is improved. (Joe McIlvain)
- IO.popen is improved. (Brian Shirai)
- The C-API provides rb_class_path. (Brian Shirai)
- Array#bsearch is implemented. (Brian Shirai)
- Range#bsearch is implemented. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/669392/assets,https://api.github.com/repos/rubinius/rubinius/releases/669392,9d61df5d827b069c6bf2ad20eb18d13082101cd3,https://api.github.com/repos/rubinius/rubinius/tarball/v2.3.0,https://github.com/rubinius/rubinius/releases/tag/v2.3.0,https://api.github.com/repos/rubinius/rubinius/zipball/v2.3.0,v2.3.0,False,False
399611,2014-06-27T18:36:39Z,2014-06-27T21:18:07Z,Release 2.2.10,"Version: 2.2.10 (2014-06-27)
- Process.spawn and Process.exec duplicate file descriptors when mapping a
  parent file descriptor to a new child file descriptor. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/399611/assets,https://api.github.com/repos/rubinius/rubinius/releases/399611,2.2.9,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.10,https://github.com/rubinius/rubinius/releases/tag/v2.2.10,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.10,v2.2.10,False,False
388690,2014-06-23T03:14:07Z,2014-06-23T03:48:31Z,Release 1.3.3,"Version 1.3.3 (2014-06-22)
- The C-API supports rb_std{in,out,err}, rb_defout. (Brian Shirai)
- Multiple assignment compatibility is improved. (Brian Shirai)
- Melbourne respects $KCODE setting when parsing. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/388690/assets,https://api.github.com/repos/rubinius/rubinius/releases/388690,1.8.7,https://api.github.com/repos/rubinius/rubinius/tarball/v1.3.3,https://github.com/rubinius/rubinius/releases/tag/v1.3.3,https://api.github.com/repos/rubinius/rubinius/zipball/v1.3.3,v1.3.3,False,False
380309,2014-06-17T17:50:55Z,2014-06-17T22:45:27Z,Release 1.3.2,"Version 1.3.2 (2014-06-17)
- Updated versions for installed gems. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/380309/assets,https://api.github.com/repos/rubinius/rubinius/releases/380309,1.8.7,https://api.github.com/repos/rubinius/rubinius/tarball/v1.3.2,https://github.com/rubinius/rubinius/releases/tag/v1.3.2,https://api.github.com/repos/rubinius/rubinius/zipball/v1.3.2,v1.3.2,False,False
367682,2014-06-11T03:27:20Z,2014-06-11T04:19:05Z,Release 2.2.9,"Version: 2.2.9 (2014-06-10)
- Pre-installed gem binary wrappers are executable files. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/367682/assets,https://api.github.com/repos/rubinius/rubinius/releases/367682,8694b613fb41a8391f8ddbd473e1f050d6349514,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.9,https://github.com/rubinius/rubinius/releases/tag/v2.2.9,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.9,v2.2.9,False,False
367350,2014-06-10T20:47:51Z,2014-06-10T22:33:03Z,Release 2.2.8,"Version: 2.2.8 (2014-06-10)
- Module#ancestors includes singleton classes for singleton classes. (Jesse Cooke)
- String#encode supports :universal_newline. (Yorick Peterse)
- Agent works across fork(). (Brian Shirai)
- GC.stat performance improved. (Brian Shirai)
- Lock inflation deadlock is fixed. (Dirkjan Bussink)
- C-API system calls for IO are interruptable. (Dirkjan Bussink)
- RbConfig::CONFIG['NULLCMD'] is set to ':'. (Yorick Peterse)
- Gem binary wrappers for pre-installed gems are executable. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/367350/assets,https://api.github.com/repos/rubinius/rubinius/releases/367350,f1475ee1670b775a11280195f3684591b29767eb,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.8,https://github.com/rubinius/rubinius/releases/tag/v2.2.8,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.8,v2.2.8,False,False
330783,2014-05-20T16:13:54Z,2014-05-20T16:53:17Z,Release 2.2.7,"Version: 2.2.7 (2014-05-20)
- Dir[] and Dir.glob call #to_path on multiple patterns. (Brian Shirai)
- The JIT does not elide Fixnum#hash calculation. (Brian Shirai)
- Enumerator#feed is implemented. (John DeSilva)
- Module#{*}_method_defined? compatibility improved. (Brian Shirai)
- ENV handles non-ASCII values. (Miguel Herranz)
- Improved support for packaging Rubinius. (Jan Alexander Steffens)
- The gems cache directory for building is configurable. (Yorick Peterse)
- Configure checks readline availability. (Sam Kottler)
- Hash#compare_by_identity does not copy String keys. (Lin Jen-Shin)
- Module#const_defined? compatibility is improved. (Brian Shirai)
- Setting a module name is improved. (Kenichi Kamiya, Brian Shirai)
- The C-API provides rb_class_real. (Brian Shirai)
- Special operator symbols are removed. (Kenichi Kamiya)
- Use of -> {} in BasicObject dispatches to Kernel::lambda. (Brian Shirai)
- Marshal.dump of Symbol includes its encoding. (Brian Shirai)
- Marshal.dump of negative Float includes its sign. (Brian Shirai)
- C-API rb_check_convert_type, rb_convert_type, rb_to_integer,
  rb_check_to_integer, rb_to_int, rb_Float, rb_Integer  compatibility is
  improved.  (Brian Shirai)
- Dir returns values encoded to ASCII_8BIT if the filename is invalid
  US_ASCII. (Dirkjan Bussink)
- Multiple assignment arguments following a splat argument are assigned in the
  proper order. (Federico Ravasio)
- STDOUT and STDERR are flushed on process exit. (Federico Ravasio)
- Time#strftime with ""%L"" is improved. (Federico Ravasio)
- Rational#round is improved. (Federico Ravasio)
- Binding UnboundMethods is improved. (Jesse Cooke, Jacob Rothstein)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/330783/assets,https://api.github.com/repos/rubinius/rubinius/releases/330783,93261a299c4b327abe543782eac0e1bf09aa04ae,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.7,https://github.com/rubinius/rubinius/releases/tag/v2.2.7,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.7,v2.2.7,False,False
218106,2014-03-10T22:51:51Z,2014-03-11T00:53:21Z,Release 2.2.6,"Version: 2.2.6 (2014-03-10)
- Kernel#to_enum uses block as Enumerable#size. (Federico Ravasio)
- Time#zone only encodes a non-nil zone. (Federico Ravasio)
- Kernel.binding returns a Binding for the caller. (Robert Gleeson)
- Failures in readdir_r() are handled. (Dirkjan Bussink)
- Various VM objects are properly (de)constructed. (Dirkjan Bussink)
- The JIT converts splatted nil to []. (Federico Ravasio, Dirkjan Bussink)
- The reference_p() VM predicate returns false for NULL. (Brian Shirai)
- The configure script uses ENV[""SHELL""] to find libc.so. (Brian Shirai)
- Dir.glob matches non-ASCII paths. (Federico Ravasio)
- Dir.entries returns paths with encoding. (Federico Ravasio)
- Array#drop accounts for shifted start from Array#shift. (Federico Ravasio)
- Dir.open respects :encoding option. (Brian Shirai)
- String::from_cstr C++ method checks bounds. (Yorick Peterse)
- Compiling with clang++ using -std=c++11 is supported. (Gabriel Southern)
- Basic String#scrub is supported. (Yorick Peterse)
- Signals like SIGSEGV will cause additional logging information to be printed
  and then allow default system proccesing (e.g. core dumps). (Brian Shirai)
- The C-API supports rb_integer_pack with basic flags. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/218106/assets,https://api.github.com/repos/rubinius/rubinius/releases/218106,68d916a5632387608dac74858a5249ac8b2a6150,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.6,https://github.com/rubinius/rubinius/releases/tag/v2.2.6,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.6,v2.2.6,False,False
178885,2014-02-09T03:20:32Z,2014-02-09T15:33:43Z,Release 2.2.5,"Version: 2.2.5 (2014-02-08)
- The 'main' object defines define_method. (Federico Ravasio)
- When passed a name with no file extension, #require will search all load
  paths for a file with a '.rb' extension before loading a file with the
  platform's dynamic library extension. (Brian Shirai)
- BasicObject can refer to BasicObject. (Federico Ravasio, Yorick Peterse)
- Standard library gems 'racc', 'minitest', and 'rubysl-test-unit' are now
  pre-installed, in addition to json and the RubySL gems. (Brian Shirai)
- RubyGems is updated to 2.2.2. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/178885/assets,https://api.github.com/repos/rubinius/rubinius/releases/178885,e543ba32bd9c636ecf0b369c11f33b0c063b47ab,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.5,https://github.com/rubinius/rubinius/releases/tag/v2.2.5,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.5,v2.2.5,False,False
170190,2014-02-02T14:24:31Z,2014-02-02T18:24:18Z,Release 2.2.4,"Version: 2.2.4
- The erb command is available by default. (Brian Shirai)
- ARGF.set_encoding is supported. (Brian Shirai)
- Dir.glob handles infinite wildcards. (Yorick Peterse)
- Process.setproctitle is supported. (Yorick Peterse)
- The C-API provides the rb_io_check_io function. (Yorick Peterse)
- The method name as Symbol is returned from def. (Joe Eli Mac, Brian Shirai)
- Symbol is comparable. (Erik Michaels-Ober)
- RubyGems is updated to 2.2.1. (Brian Shirai)
- String#encode! with options compatibility is improved. (Sylvester Keil)
- LLVM 3.4 is supported. (Jan Alexander Steffens)
- Compiling with clang 3.4 is fixed. (Yorick Peterse)
- Linking with other than libstdc++ is supported. (Dirkjan Bussink)
- A GC issue overwriting field values is fixed. (Dirkjan Bussink)
- A memory leak in IO#sysread is fixed. (Dirkjan Bussink)
- String#count is fixed for multi-byte strings. (Federico Ravasio)
- String#replace is fixed for strings with invalid encodings.
  (Federico Ravasio)
- Performance of String#each_char is improved. (Federico Ravasio)
- String#split is improved for multi-byte patterns. (Dirkjan Bussink)
- Thread status is updated after fork(). (Dirkjan Bussink)
- Time handling of zone and encoding is improved. (Dirkjan Bussink)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/170190/assets,https://api.github.com/repos/rubinius/rubinius/releases/170190,fd07f67058445e206b0843ab2770fe43d8cdb2c5,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.4,https://github.com/rubinius/rubinius/releases/tag/v2.2.4,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.4,v2.2.4,False,False
133756,2013-12-29T18:35:19Z,2013-12-29T22:48:14Z,Release 2.2.3,"Version: 2.2.3
- Use the configured program name in build scripts. (Chad Slaughter)
- Require 'find' for the utility script listing TODOs. (Benny Klotz)
- Use File.exist? in build scripts. (Mike Dorst)
- Provide logger library for bootstrapping Bundler 1.5+. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/133756/assets,https://api.github.com/repos/rubinius/rubinius/releases/133756,4792e746cd5557e62b9c91467d9afb452c1f4f03,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.3,https://github.com/rubinius/rubinius/releases/tag/v2.2.3,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.3,v2.2.3,False,False
129475,2013-12-22T06:08:48Z,2013-12-22T06:45:02Z,Release 2.2.2,"Download the [release tarball](http://releases.rubini.us/rubinius-2.2.2.tar.bz2).

Version: 2.2.2
- The --llvm-path configure option checks llvm version. (Gabriel Southern)
- Module#const_get resolves qualified names like '::A::B' (Brian Shirai)
- Bootstrap gem dependencies are included for mini_portile. (Brian Shirai)
- The close_on_exec state is set for new file descriptors. (Dirkjan Bussink)
- The C-API provides the rb_fix_fd_cloexec function. (Dirkjan Bussink)
- The 't' modifier is supported in file modes. (Dirkjan Bussink)
- A deadlock in thread startup is fixed. (Dirkjan Bussink)
- The configured 'make' program is used building llvm. (Dirkjan Bussink)
- A race condition on thread shutdown is fixed. (Dirkjan Bussink)
- An issue is fixed handling memory when parsing a Bignum. (Dirkjan Bussink)
- Improved parsing a Bignum. (Brian Shirai)
- The C-API provides the rb_intern_str function. (Dirkjan Bussink)
- The C-API provides the rb_int_positive_pow function. (Dirkjan Bussink)
- An issue is fixed with Kernel.local_variables and eval. (Kenichi Kamiya)
- An issue is fixed with File.realdirpath. (Kenichi Kamiya)
- Kernel#**dir** is implemented. (Kenichi Kamiya)
- An issue is fixed allocating Thread objects. (Dirkjan Bussink)
- An issue is fixed locking objects. (Dirkjan Bussink)
- An encoding issue is fixed with IO#gets(limit). (Ryo Onodera)
- The README is updated with a list of unimplemented standard library gems. (Erik Michaels-Ober)
- Removed use of lchmod on Linux. (r-stu31)
- The C-API provides rb_pid_t. (Yorick Peterse)
- The Rubinius::PROGRAM_NAME constant is the name of the Rubinius executable set by configure. (Brian Shirai)
- The config.rb.in file is used by the --release-build configure option. (Brian Shirai)
- The --stagingdir configure option enables setting the directory used to prepare all files for installation. (Brian Shirai)
- Ruby 1.8.7+ is supported for building Rubinius. (Brian Shirai)
- A Changelog file is added. (Brian Shirai)
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/129475/assets,https://api.github.com/repos/rubinius/rubinius/releases/129475,40836a402d125307c1f185c7889566bb431946a2,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.2,https://github.com/rubinius/rubinius/releases/tag/v2.2.2,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.2,v2.2.2,False,False
96757,2013-11-17T22:14:41Z,2013-11-18T19:34:22Z,Release 2.2.1,"Download the [release tarball](http://releases.rubini.us/rubinius-2.2.1.tar.bz2).
- Added missing bootstrap dep.
- Added bootstrap gems to CodeLoader whitelist.
- Added gems for bootstrapping bundler.
- Merge pull request #2786 from kachick/clean_unsued_spec_tags
- Remove unsued spec tags
- Merge pull request #2784 from kachick/exception-set_backtrace
- Merge pull request #2785 from kachick/update_module-visibility_setters
- Untag passing Module#{module_function,private,protected,public} specs
- Update Module#{module_function,private,protected,public} for eval
- Fix a sharing spec for Module#public with eval
- Remove unused spec tags
- Untag passing Exception#set_backtrace specs
- Fix Exception#set_backtrace for variety of arguments
- Add Exception#set_backtrace specs for weird arguments
- Fix a spec typo for Exception#set_backtrace
- Update CI tags.
- Updated CI specs to RubySpec c48d28a4.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/96757/assets,https://api.github.com/repos/rubinius/rubinius/releases/96757,3ed43137d1725127789c1d4422d099e83a25a561,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.1,https://github.com/rubinius/rubinius/releases/tag/v2.2.1,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.1,v2.2.1,False,False
95082,2013-11-15T23:09:27Z,2013-11-16T00:07:43Z,Release 2.2.0,"Download the [release tarball](http://releases.rubini.us/rubinius-2.2.0.tar.bz2).
- Added rubysl-digest dep for building with rbx.
- Added simple release task.
- Switched C-API to default to safe RSTRING.
- Fixed using previous gems configuration.
- Bump configure version because of added Rubygems dependencies
- Merge pull request #2773 from ryoqun/rubygems-without-stdlib
- Fix install error of rubygems without stdlib
- Add implementation for rb_ary_subseq
- Add specs for rb_ary_subseq
- Fix range check for rb_fix2uint
- Fix spec to actually use maximum uint value
- Updated RubyGems to 2.1.10.
- Fixed bundle --path.
- Removed extra check for bootstrap libraries.
- Fixed finding some bootstrap code.
- Added method for loading files required by rubygems.
- Adjusted some gem requirements.
- Fixed handling C++ exception unwinding through NativeMethod call.
- Removed stdlib stubs.
- Ensure that String#match calls Regexp#match
- Add spec for String#match calling Regexp#match
- Don't call IO#pos if no offset is given
- Add spec for not seeking when no offset is given
- Make sure to use a method send and not call a send() method
- Add raising send() method to specs
- Check open state on IO retry
- Fix typo in capi num2int for too-big integers.
- Pass specs for rb_num2uint
- Add specs for negative values and rb_num2uint
- Improve performance for rb_thread_local_\* methods
- Fix rb_class2name and rb_class_name for anonymous classes
- Add spec for rb_class2name and rb_class_name for an anonymous class
- Add explicit define for rb_ary_subseq
- Added Gemfile deps for building with rbx.
- Merge pull request #2748 from razielgn/range-improvements
- Improved readability of Range methods.
- Improved readability and performance of Range#step.
- Added benchmark on Range#step.
- Improved specs on Range#initialize.
- Improved specs on Range#exclude_end?
- Merge pull request #2747 from caarlos0/fixes-configure-proxy
- Fixed download of https urls under proxy
- Merge pull request #2745 from anupnivargi/array_shuffle
- Added self to AUTHORS
- Array#shuffle exceptions for invalid range
- Remove all Array#shuffle tags
- Fix the name returned for the current and last method id's
- Use more specific symbol name for ceil macro
- Remove GC attempt when no more fd's are available
- Remove unneccessary gc token tracking in GCData
- Ensure we ceil RBIGNUM_LEN for correct rounding
- Add spec for RBIGNUM_LEN and rounding up
- Merge pull request #2743 from kerchanin/patch-2
- Fix ""undefined method `expand' for main:Object"" in rakelib/vm.rake.
- Re-add missing . separator in version string.
- Merge pull request #2738 from rubinius/fix-array-slice-with-ranges
- Added self to AUTHORS
- Test Array#slice! on end-exclusive ranges
- Fix Array#slice! when given an end-exclusive range
- Merge pull request #2736 from carlosbrando/add-socket-constants
- Updated all socket constants to be compatible with Ruby 2.1
- Merge pull request #2726 from razielgn/block-argument-destructuring-failing-test
- Used simpler code in named captures.
- Merge pull request #2723 from Mange/named-captures-fix
- Move new MatchData specs to a better location
- Merge pull request #2725 from razielgn/racc-stub
- Make usage of rpath optional
- Updated the version of ./configure.
- Tag failing spec from 37f95dd.
- Add additional spec on block arguments with ""_"".
- Added standard library racc stub.
- BUG: Return last _matching_ named capture instead
- Add spec for MatchData named capture behaviors in Ruby 1.9-2.1
- Use configured 'make' building runtime gems.
- Added --make option to configure.
- Removed version directory from CI tags.
- Updated MSpec config.
- Update CI tags.
- Fixed Module#define_method spec failing on 2.1.
- Return method name from Module#define_method.
- Removed obsolete deviates block.
- Fail if gem unpack fails.
- Fixed Thread#priority, #priority=.
- Updated MSpec source to 439b4fa1.
- Updated CI specs to RubySpec 47a1fc63.
- Fixed rubinius metagem description.
- Remove now unneeded instance variable from JIT visitor
- Add rb_cDir to C-API
- Add spec for rb_cDir
- Fix building a Range with comparable but no <=> defined
- Add spec for comparable with Range and no <=> method defined
- Cleanup unused function from JIT
- Ensure to run return checks when NULL is returned
- Improve naming for integer conversion methods
- Remove unused method from heap dump
- Small cleanup for method with same functionality
- Free trampoline from fiber stacks when allocated
- Packaging fixes.
",https://api.github.com/users/brixen,85,brixen,https://api.github.com/repos/rubinius/rubinius/releases/95082/assets,https://api.github.com/repos/rubinius/rubinius/releases/95082,f66ada699d263dc9a2cf081e71f296f4e9413bcc,https://api.github.com/repos/rubinius/rubinius/tarball/v2.2.0,https://github.com/rubinius/rubinius/releases/tag/v2.2.0,https://api.github.com/repos/rubinius/rubinius/zipball/v2.2.0,v2.2.0,False,False
