id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
8189780,2017-10-17T22:05:18Z,2017-10-19T22:54:12Z,Scala 2.12.4,"Our [benchmarks](https://scala-ci.typesafe.com/grafana/dashboard/db/scala-benchmark?var-branch=2.12.x&from=1501580691158&to=1507711932006) show a further 5–10% reduction in compile times since 2.12.3.

Improved Java 9 friendliness, with more to come!
  - #6097 Fix runtime reflection of empty package members under Java 9
  - #6098 Adapt to change in Java 9 classloader hierarchy

We'd like to highlight a few of the excellent contributions by @hrhino and @TomasMikula, previewing 2.13 improvements (available now under `-Xsource:2.13`):
  - #5867 Include the parts of a compound/refinement type in implicit scope
  - #6074 Resolve implicit instances for abstract types, according to the spec
  - #6069 Higher-kinded type variable unification

For Spark, with love:
  - #6101 Make Lazy* classes serializable 

Preparing for simplification of named arguments in 2.13:
  - #6089 Deprecate assignments in argument position

Rather than pollute `/tmp`,
  - #6120 Move compilation daemon portfile under `~/.scalac/`

For more details, check out [all closed bugs](https://github.com/scala/bug/issues?q=is%3Aclosed%20milestone%3A2.12.4) and [merged PRs](https://github.com/scala/scala/pulls?q=is%3Amerged%20milestone%3A2.12.4).

As usual for minor releases, Scala 2.12.4 is binary compatible with the whole Scala 2.12 series.

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in discussions around Scala, and submitting and reviewing pull requests! You are all magnificent.

This release was brought to you by 24 contributors, according to `git shortlog -sn --no-merges v2.12.3..v2.12.4`. Thank you, Jason Zaugg, Lukas Rytz, jvican, Adriaan Moors, A. P. Marki, Harrison Houghton, Tomas Mikula, Philippus Baalman, Miles Sabin, Seth Tisue, Dhirendra Kumar Kashyap, Martijn Hoekstra, Martin Grotzke, Martynas Mickevičius, Matt Sicker, Mike, Mike Skells, Rex Kerr, cong, Allison H, Janek Bogucki, Edmund Noble, Jasper Moeys, Kenji Yoshida!

## Scala 2.12 Notes

The [release notes for Scala 2.12.0](https://github.com/scala/scala/releases/v2.12.0) have important information applicable to the whole 2.12 series.

## Obtaining Scala

Scala releases are available through a variety of channels, including (but not limited to):

* Bump the `scalaVersion` setting in your sbt-based project
* Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.12.4.html)
* Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.12.4%22)",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/8189780/assets,https://api.github.com/repos/scala/scala/releases/8189780,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.4,https://github.com/scala/scala/releases/tag/v2.12.4,https://api.github.com/repos/scala/scala/zipball/v2.12.4,v2.12.4,False,False
7138827,2017-07-26T04:10:11Z,2017-07-27T22:45:02Z,Scala 2.12.3,"## Changes

- Compiler performance has [improved significantly](https://developer.lightbend.com/blog/2017-06-12-faster-scala-compiler/) and is now [automatically benchmarked](https://scala-ci.typesafe.com/grafana/) after each change.
- A new [optimizer setting](https://github.com/scala/scala/pull/5964) `-opt-inline-from` limits the classes from which the inliner will copy code. `scalac -opt-inline-from:help` provides [detailed help](https://gist.github.com/retronym/29932ea76712ff374d1363c9eda6eabe).
- The presentation compiler has [improved support for implicit macros](https://github.com/scala/scala/pull/5929), which should improve the experience with libraries based on Shapeless. It also has [better support](https://github.com/scala/scala/pull/5927) for code completion for dependently typed methods.

Further [significant changes](https://github.com/scala/scala/pulls?q=is%3Amerged%20milestone%3A2.12.3%20label%3Arelease-notes) since 2.12.2 include:

- [#5978](https://github.com/scala/scala/pull/5978) Avoid calling static initializers when reflecting on Java classes
- [#5964](https://github.com/scala/scala/pull/5589) New setting `-opt-inline-from` to control where to inline from
- [#5931](https://github.com/scala/scala/pull/5931) Upgrade to jline 2.14.4
- [#5880](https://github.com/scala/scala/pull/5880) bundle newer scala-parser-combinators (1.0.5->1.0.6)
- [#5879](https://github.com/scala/scala/pull/5879) -Xlint:unused -Ywarn-unused is intuitive
- [#5848](https://github.com/scala/scala/pull/5848) add per-phase profiling to scalac

For more information, check out [all closed bugs](https://github.com/scala/bug/issues?q=is%3Aclosed%20milestone%3A2.12.3) and [merged PRs](https://github.com/scala/scala/pulls?q=is%3Amerged%20milestone%3A2.12.3).

As usual for minor releases, Scala 2.12.3 is binary compatible with the whole Scala 2.12 series.

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in discussions around Scala, and submitting and reviewing pull requests! You are all magnificent.

This release was brought to you by 49 contributors, according to `git shortlog -sn --no-merges v2.12.2..v2.12.3`. Thank you, Jason Zaugg, Lukas Rytz, Som Snytt, Dale Wijnand, Janek Bogucki, Adriaan Moors, Seth Tisue, Earl St Sauver, Eugene Yokota, Mike Skells, Miles Sabin, Iulian Dragos, 杨博 (Yang Bo), Cody Allen, Harrison Houghton, Jasper Moeys, xuwei-k, Ganesh Prasad Kumble, Rory Graves, Rui Gonçalves, Sayyed, Atiq (Agoda), BrianLondon, Arnout Engelen, chengpohi, joymufeng, kenji yoshida, Adrien Suree, Edmund Noble!

## Scala 2.12 Notes

The [release notes for Scala 2.12.0](https://github.com/scala/scala/releases/v2.12.0) have important information applicable to the whole 2.12 series.

## Obtaining Scala

Scala releases are available through a variety of channels, including (but not limited to):

* Bump the `scalaVersion` setting in your sbt-based project
* Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.12.3.html)
* Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.12.3%22)",https://api.github.com/users/retronym,65551,retronym,https://api.github.com/repos/scala/scala/releases/7138827/assets,https://api.github.com/repos/scala/scala/releases/7138827,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.3,https://github.com/scala/scala/releases/tag/v2.12.3,https://api.github.com/repos/scala/scala/zipball/v2.12.3,v2.12.3,False,False
7122676,2017-07-21T15:17:32Z,2017-07-29T01:13:22Z,Scala 2.13.0-M2,"This Scala 2.13 milestone contains only a few big changes. The main goal is to catch up with the changes in [2.12.3](https://github.com/scala/scala/milestone/61?closed=1).

### Release highlights

[Significant changes](https://github.com/scala/scala/pulls?q=is%3Apr+milestone%3A2.13.0-M2+is%3Amerged+label%3Arelease-notes) since 2.13.0-M1:

* #5903: The REPL is undergoing renovations in 2.13 for better positioning of errors, a cleaner internal implementation, multi-line editing and syntax highlighting. Some parts of this are available in M1.

Note that the planned and previously announced changes to the handling of [lazy right-associative operators](https://github.com/scala/scala/pull/5969) have been postponed to 2.13.0-M3, pending SIP approval.

For more information, check out [all closed bugs](https://github.com/scala/bug/issues?q=is%3Aclosed%20milestone%3A2.13.0-M2) and [merged PRs](https://github.com/scala/scala/pulls?q=is%3Amerged%20milestone%3A2.13.0-M2).

2.13.0-M2 also includes [all the 2.12.3 changes](https://github.com/scala/scala/releases/tag/v2.12.3).

### Overview of the 2.13 series

Scala 2.13 will focus on cleaning up and improving the standard library, and on improving the performance of the compiler. The [Scala 2.13 roadmap](https://github.com/scala/scala-dev/issues/324) is available on GitHub for review.

An overhaul of the collections library is being worked on in a [separate repository](https://github.com/scala/collection-strawman).

Like Scala 2.12, the 2.13 series targets Java 8.

This release is not binary compatible with the 2.12.x series, to allow us to keep improving the Scala standard library.

### Libraries

We are working with the community to ensure availability of core projects for the Scala 2.13 ecosystem. We maintain an up-to-date [list of available libraries](https://github.com/scala/make-release-notes/blob/2.13.x/projects-2.13.md).

### Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in discussions around Scala, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges v2.13.0-M1..v2.13.0-M2`, 32 people contributed to this release: Jason Zaugg, Lukas Rytz, Adriaan Moors, A. P. Marki, Janek Bogucki, Dale Wijnand, Seth Tisue,  Kenji Yoshida, Earl St Sauver, Eugene Yokota, Miles Sabin, Jasper Moeys, Iulian Dragos, Mike Skells, Stefan Zeiger, 杨博 (Yang Bo), Rui Gonçalves, Cody Allen, Harrison Houghton, Adrien Suree, Vladimir Parfinenko, chengpohi, joymufeng, NthPortal, Edmund Noble, BrianLondon, Arnout Engelen, Masaru Nomura, Ganesh Prasad Kumble, Oscar Boykin, Rory Graves, Sayyed, Atiq (Agoda). Thank you!

### Reporting bugs

Please file any bugs you encounter on [our issue tracker](https://github.com/scala/bug/issues).

### Obtaining Scala

Scala releases are available through a variety of channels, including (but not limited to):

- Bump the `scalaVersion` setting in your sbt-based project
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.13.0-M2.html)
- Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.13.0-M2%22)",https://api.github.com/users/szeiger,54262,szeiger,https://api.github.com/repos/scala/scala/releases/7122676/assets,https://api.github.com/repos/scala/scala/releases/7122676,2.13.x,https://api.github.com/repos/scala/scala/tarball/v2.13.0-M2,https://github.com/scala/scala/releases/tag/v2.13.0-M2,https://api.github.com/repos/scala/scala/zipball/v2.13.0-M2,v2.13.0-M2,False,True
6110279,2017-04-18T14:31:38Z,2017-04-18T14:49:39Z,Scala 2.13.0-M1,"This first Scala 2.13 milestone contains only a few changes. Its main goal is to bootstrap the 2.13 release infrastructure. It also begins further modularization of the standard library.

### Release highlights

[Significant changes](https://github.com/scala/scala/pulls?q=is%3Amerged%20milestone%3A2.13.0-M1%20label%3Arelease-notes) since 2.12.2 include:

* #5603: The parallel collections are now a [separate module](https://github.com/scala/scala-parallel-collections). There are instructions on the linked page for adding the dependency to your build.
* #5790: The following modules are no longer included in the distribution: scala-swing, scala-parser-combinators. (They remain available from Maven Central.) We also no longer build or publish scala-library-all.jar.
* #5683: Remove deprecated stuff from `Predef`, `scala._`, `scala.runtime`
* #5698: Eliminate non-matching overloads early for partial function literals
* #5548: Added Java 1.6. and 1.8 `java.lang.Math` methods into `scala.math` package (scala/bug#9813)
* #5830: A number of internal dependencies were cut to prepare for the creation of additional modules. (see also scala/scala-dev#323)

For more information, check out [all closed bugs](https://github.com/scala/bug/issues?q=is%3Aclosed%20milestone%3A2.13.0-M1) and [merged PRs](https://github.com/scala/scala/pulls?q=is%3Amerged%20milestone%3A2.13.0-M1).

2.13.0-M1 also includes [all the 2.11.11 changes](https://github.com/scala/scala/releases/tag/v2.11.11) and [all the 2.12.2 changes](https://github.com/scala/scala/releases/tag/v2.12.2).

### Overview of the 2.13 series

Scala 2.13 will focus on cleaning up and improving the standard library, and on improving the performance of the compiler. The [Scala 2.13 roadmap](https://github.com/scala/scala-dev/issues/324) is available on GitHub for review.

An overhaul of the collections library is being worked on in a [separate repository](https://github.com/scala/collection-strawman).

Like Scala 2.12, the 2.13 series targets Java 8.

This release is not binary compatible with the 2.12.x series, to allow us to keep improving the Scala standard library.

### Libraries

We are working with the community to ensure availability of core projects for the Scala 2.13 ecosystem. We maintain an up-to-date [list of available libraries](https://github.com/scala/make-release-notes/blob/2.13.x/projects-2.13.md).

### Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in discussions around Scala, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges 2.12.x..v2.13.0-M1`, 13 people contributed to this release: Seth Tisue, Adriaan Moors, Lukas Rytz, Janek Bogucki, Stefan Zeiger, Kenji Yoshida, A. P. Marki, Zizheng Tai, Faiz Halde, Masaru Nomura, Pap Lőrinc, Pavel Petlinsky, Sébastien Doeraene. Thank you!

### Reporting bugs

Please file any bugs you encounter on [our issue tracker](https://github.com/scala/bug/issues).

### Obtaining Scala

Scala releases are available through a variety of channels, including (but not limited to):

- Bump the `scalaVersion` setting in your sbt-based project
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.13.0-M1.html)
- Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.13.0-M1%22)",https://api.github.com/users/lrytz,119636,lrytz,https://api.github.com/repos/scala/scala/releases/6110279/assets,https://api.github.com/repos/scala/scala/releases/6110279,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.13.0-M1,https://github.com/scala/scala/releases/tag/v2.13.0-M1,https://api.github.com/repos/scala/scala/zipball/v2.13.0-M1,v2.13.0-M1,False,True
6078854,2017-04-18T06:24:30Z,2017-04-18T14:32:08Z,Scala 2.11.11: all the way to eleven!,"The 2.11.11 release concludes the 2.11.x series, with no further releases planned. Please consider upgrading to 2.12!

**Do not use 2.11.9 or 2.11.10**, which introduced significant regressions (see below). This also means this series [goes to eleven](https://www.youtube.com/watch?v=KOO5S4vxi0o). (No further, though.)

## Changes

[Significant changes](https://github.com/scala/scala/pulls?q=is%3Amerged%20milestone%3A2.11.11%20label%3Arelease-notes) since 2.11.8 include:

  - #5730, #5846 Allow custom `apply` and `unapply` methods in case class companions. Also allows case class constructors and apply methods to be private. (In 2.11.11, `-Xsource:2.12` is needed to enable these changes. In [Scala 2.12.2](https://github.com/scala/scala/releases/tag/v2.12.2), they are on by default.)
  - #5343 Add support for higher order unification under `-Ypartial-unification` (SI-2712)
  - #5341 Fix for higher-kinded GADT refinement
  - #5061 JMH-based benchmark framework for contributors
  - #5026 Upgrade to newer scala-xml ([1.0.5](https://github.com/scala/scala-xml/releases/v1.0.5))

2.11.11 resolves regressions introduced in 2.11.9 and 2.11.10: #5730 (fixed by #5828 and #5846), #5664 (fixed by #5821). Special thanks to @xuwei-k and @sjrd for reporting and helping diagnose these.

For more information, check out [all closed bugs](https://github.com/scala/bug/issues?utf8=%E2%9C%93&q=is%3Aclosed%20milestone%3A2.11.11) and [merged PRs](https://github.com/scala/scala/pulls?q=is%3Amerged%20milestone%3A2.11.11).

As usual for minor releases, Scala 2.11.11 is binary compatible with the whole Scala 2.11 series (with the exception of 2.11.9, which should not be used to publish artifacts, see #5821).

To share your feedback on this release, please use our new GitHub-based [bug tracker](https://github.com/scala/bug) and Discourse-based [contributors forum](https://contributors.scala-lang.org).

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in discussions around Scala, and submitting and reviewing pull requests! You are all magnificent.

This release was brought to you by 33 contributors, according to `git shortlog -sn --no-merges v2.11.8..v2.11.11`. Thank you Adriaan Moors, A. P. Marki, Jason Zaugg, Seth Tisue, Lukas Rytz, Performant Data LLC, Stefan Zeiger, Pap Lőrinc, Iulian Dragos, Rory Graves, Miles Sabin, Martijn Hoekstra, Mike Skells, Sébastien Doeraene, Dale Wijnand, Raphael Jolly, ptrcarta, Łukasz Gieroń, Carsten Varming, CodingTwinky, Jasper-M, Johannes Rudolph, Krzysztof Romanowski, Martynas Mickevičius, Masaru Nomura, Nicolas Stucki, Oscar Boykin, Paul Kernfeld, Philippus Baalman, Tobias Schlatter, Viktor Klang, af, and jvican!


## Scala 2.11 Notes

The [release notes for Scala 2.11.0](https://github.com/scala/scala/releases/v2.11.0) have important information applicable to the whole 2.11 series.

## Obtaining Scala

Scala releases are available through a variety of channels, including (but not limited to):

* Bump the `scalaVersion` setting in your sbt-based project
* Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.11.11.html)
* Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.11%22)",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/6078854/assets,https://api.github.com/repos/scala/scala/releases/6078854,v2.11.11,https://api.github.com/repos/scala/scala/tarball/v2.11.11,https://github.com/scala/scala/releases/tag/v2.11.11,https://api.github.com/repos/scala/scala/zipball/v2.11.11,v2.11.11,False,False
6078757,2017-04-18T06:24:19Z,2017-04-18T14:32:27Z,Scala 2.12.2,"Scala 2.12.2 includes support for trailing commas, the first proposal ([SIP-27](http://docs.scala-lang.org/sips/completed/trailing-commas.html)) to make it all the way through the revived [Scala Improvement Process](http://docs.scala-lang.org/sips/index.html). Congratulations, @dwijnand!

## Changes

[Significant changes](https://github.com/scala/scala/pulls?q=is%3Amerged%20milestone%3A2.12.2%20label%3Arelease-notes) since 2.12.1 include:

  - [#5245](https://github.com/scala/scala/pull/5245) Allow trailing commas before newlines ([SIP-27](http://docs.scala-lang.org/sips/completed/trailing-commas.html))
  - [#5402](https://github.com/scala/scala/pull/5402) Improve unused warnings
    - note: these changes are included under `-Xlint` unless explicitly excluded with `-Xlint:-unused,_`
  - [#5589](https://github.com/scala/scala/pull/5589) Types with symbolic names print in infix by default
  - [#5724](https://github.com/scala/scala/pull/5724) Support direct-dependency-only compilation ([Scala Center Proposal SCP-009](https://github.com/scalacenter/advisoryboard/blob/master/proposals/009-improve-direct-dependency-experience.md))
  - [#5816](https://github.com/scala/scala/pull/5816) Allow user-defined `[un]apply` in case companion
  - [#5667](https://github.com/scala/scala/pull/5667) `-Xmaxerrs` to limit compiler messages
  - [#5592](https://github.com/scala/scala/pull/5592) Don't keep JarFile open in ZipArchive (with `-Dscala.classpath.closeZip=true`)
  - [#5659](https://github.com/scala/scala/pull/5659) Fix endless cycle in runtime reflection
  - [#5602](https://github.com/scala/scala/pull/5602) Modules w. serializable type alias ""companions"" are not serializable
  - [#5550](https://github.com/scala/scala/pull/5550) Fix detection of term-owned companions
  - [#5663](https://github.com/scala/scala/pull/5663) Enable colored output by default on Unix
  - [#5625](https://github.com/scala/scala/pull/5625) Bundle newer scala-parser-combinators ([1.0.5](https://github.com/scala/scala-parser-combinators/releases/tag/v1.0.5))

For more information, check out [all closed bugs](https://github.com/scala/bug/issues?q=is%3Aclosed%20milestone%3A2.12.2) and [merged PRs](https://github.com/scala/scala/pulls?q=is%3Amerged%20milestone%3A2.12.2).

2.12.2 also includes [all the 2.11.11 changes](https://github.com/scala/scala/releases/tag/v2.11.11), including these especially notable ones:

  - #5730, #5846 Allow custom `apply` and `unapply` methods in case class companions. Also allows case class constructors and apply methods to be private.
  - #5343 Add support for higher order unification under `-Ypartial-unification` (SI-2712)
  - #5341 Fix for higher-kinded GADT refinement

As usual for minor releases, Scala 2.12.2 is binary compatible with the whole Scala 2.12 series.

To share your feedback on this release, please use our new GitHub-based [bug tracker](https://github.com/scala/bug) and Discourse-based [contributors forum](https://contributors.scala-lang.org).

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in discussions around Scala, and submitting and reviewing pull requests! You are all magnificent.

This release was brought to you by 48 contributors, according to `git shortlog -sn --no-merges v2.12.1..v2.12.2`. Thank you A. P. Marki, Jason Zaugg, Adriaan Moors, Seth Tisue, Lukas Rytz, Pap Lőrinc, Philippus Baalman, Rory Graves, Dale Wijnand, Janek Bogucki, Iulian Dragos, Stefan Zeiger, Johannes Rudolph, Edmund Noble, Lars Hupel, Masaru Nomura, allisonhb, jvican, Sébastien Doeraene, Mike Skells, Antoine Gourlay, Aaron S. Hawley, Viktor Klang, Vlad Ureche, piyush-jaiswal, ptrcarta, teldosas, wpopielarski, Alessandro Cifani, Alexey Romanov, Ben Hutchison, Carsten Varming, Evgeny Slutsky, Hao Xia, Jasper-M, Jon Pretty, Kenji Yoshida, Markus Jura, Martijn Hoekstra, Martynas Mickevičius, Miles Sabin, Oscar Boykin, Pablo Fco. Pérez Hidalgo, Paul Phillips, Rui Gonçalves, Sam Halliday, Tamer Mohammed Abdul-Radi, and Tobias Schlatter!

## Scala 2.12 Notes

The [release notes for Scala 2.12.0](https://github.com/scala/scala/releases/v2.12.0) have important information applicable to the whole 2.12 series.

## Obtaining Scala

Scala releases are available through a variety of channels, including (but not limited to):

* Bump the `scalaVersion` setting in your sbt-based project
* Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.12.2.html)
* Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.12.2%22)",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/6078757/assets,https://api.github.com/repos/scala/scala/releases/6078757,v2.12.2,https://api.github.com/repos/scala/scala/tarball/v2.12.2,https://github.com/scala/scala/releases/tag/v2.12.2,https://api.github.com/repos/scala/scala/zipball/v2.12.2,v2.12.2,False,False
6066840,2017-04-07T22:47:56Z,2017-04-13T00:17:11Z,"[Do not use] Scala 2.11.10, please upgrade to 2.11.11","Not suitable for use due to a regression caused by #5730, fixed in 2.11.11 by #5846.
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/6066840/assets,https://api.github.com/repos/scala/scala/releases/6066840,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.10,https://github.com/scala/scala/releases/tag/v2.11.10,https://api.github.com/repos/scala/scala/zipball/v2.11.10,v2.11.10,False,True
6066834,2017-03-28T16:04:59Z,2017-04-13T00:16:21Z,"[Do not use] Scala 2.11.9, please upgrade to 2.11.11","This release contains a binary incompatible change introduce by #5664 and fixed by the reversion in #5821, which is available in **2.11.11** (yes, 2.11.10 was also flawed).",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/6066834/assets,https://api.github.com/repos/scala/scala/releases/6066834,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.9,https://github.com/scala/scala/releases/tag/v2.11.9,https://api.github.com/repos/scala/scala/zipball/v2.11.9,v2.11.9,False,True
4837451,2016-12-05T17:13:33Z,2016-12-05T20:29:38Z,Scala 2.12.1,"We are pleased to announce the availability of Scala 2.12.1!

## Changes

Significant changes since 2.12.0 include:
- [#5516](https://github.com/scala/scala/pull/5516) Improved runtime speed for Vector, restoring previous performance
- [#5509](https://github.com/scala/scala/pull/5509) SI-10032 Fix code gen with returns in nested try-finally blocks
- [#5482](https://github.com/scala/scala/pull/5482) Fix 2.12 regression, backend crash: Cannot create ClassBType from non-class symbol; also fix SI-7139
- [#5469](https://github.com/scala/scala/pull/5469) SI-10020 SI-10027 Scaladoc: keep Java comment scanning stack-friendly
- [#5376](https://github.com/scala/scala/pull/5376) Make -Xexperimental features available separately
- [#5284](https://github.com/scala/scala/pull/5284) SI-7046 partial fix to knownDirectSubclasses for reflection users and macro authors
- [#5410](https://github.com/scala/scala/pull/5410) Upgrade to scala-xml 1.0.6
  - see [1.0.6 release notes](https://github.com/scala/scala-xml/releases/tag/v1.0.6)

In total, this release resolves [28 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20in%20%28%22Scala%202.12.1%22%29%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC).  We merged [88 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.12.1).

As usual for minor releases, Scala 2.12.1 is binary compatible with the whole Scala 2.12 series.

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in discussions around Scala, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges v2.12.0..v2.12.1`, 28 people contributed to this minor release: A. P. Marki, Jason Zaugg, Lukas Rytz, Seth Tisue, Adriaan Moors, Stefan Zeiger, Dale Wijnand, Miles Sabin, Daniel Barclay, Pap Lőrinc, Iulian Dragos, Rex Kerr, Sakthipriyan Vairamani, Kenji Yoshida, Jakob Odersky, Mohit Agarwal, Paul Kernfeld, Pavel Petlinsky, Boris Korogvich, Sébastien Doeraene, Tim Spence, Viktor Klang, Vladimir Glushak, Chris Okasaki, Lifu Huang, Janek Bogucki, Martijn Hoekstra, Masaru Nomura.

## Scala 2.12 Notes

The [release notes for Scala 2.12.0](http://scala-lang.org/news/2.12.0) have important information applicable to the whole 2.12 series.

## Obtaining Scala

Scala releases are available through a variety of channels, including (but not limited to):
- Bump the `scalaVersion` setting in your sbt-based project
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.12.1.html)
- Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.12.1%22)
",https://api.github.com/users/SethTisue,161079,SethTisue,https://api.github.com/repos/scala/scala/releases/4837451/assets,https://api.github.com/repos/scala/scala/releases/4837451,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.1,https://github.com/scala/scala/releases/tag/v2.12.1,https://api.github.com/repos/scala/scala/zipball/v2.12.1,v2.12.1,False,False
4554383,2016-10-28T21:46:08Z,2016-11-03T00:33:37Z,Scala 2.12.0,"## Headline features

The Scala 2.12 compiler has been completely overhauled to make use of the new VM features available in Java 8:
- A trait [compiles directly to an interface](#traits-compile-to-interfaces) with default methods. This improves binary compatibility and Java interoperability.
- Scala and Java 8 interop is also improved for functional code, as methods that take functions can easily be called in both directions using lambda syntax. The  `FunctionN` classes in Scala's standard library are now Single Abstract Method (SAM) types, and all [SAM types](#lambda-syntax-for-sam-types) are treated uniformly -- from type checking through code generation. No class file is generated for a lambda; `invokedynamic` is used instead.

This release ships with a powerful [new optimizer](#new-optimizer):
- Inlining: many more (effectively) final methods, including those defined in objects and traits, are now inlined.
- Closure allocations, dead code, and box/unbox pairs are eliminated more often.

For additional features, read on.

## Compatibility

Although Scala 2.11 and 2.12 are mostly source compatible to facilitate cross-building, they are not _binary_ compatible.  This allows us to keep improving the Scala compiler and standard library.

All 2.12.x releases will be fully binary compatible with 2.12.0, in according with [the policy](http://docs.scala-lang.org/overviews/core/binary-compatibility-of-scala-releases.html) we have followed since 2.10.

The [list of open-source libraries](https://github.com/scala/make-release-notes/blob/2.12.x/projects-2.12.md) released for Scala 2.12 is growing quickly!

This release is identical to 2.12.0-RC2.

## Coming soon

Our [roadmap](https://github.com/scala/scala/milestones) lists the following upcoming releases for 2016:
- 2.12.1 will be out shortly (by the end of November) to address some known (but rare) issues in 2.12.0.
- 2.11.9 will be the last planned 2.11.x release (due by mid December)

In the next few weeks, we at Lightbend will share our plans for Scala 2.13.

## Known issues

There are some [known issues](https://issues.scala-lang.org/browse/SI-10009?jql=project%20%3D%20SI%20AND%20affectedVersion%20%3D%20%22Scala%202.12.0%22) with this release that [will be resolved](https://github.com/scala/scala/pulls?q=is%3Apr+milestone%3A2.12.1+label%3Arelease-notes) in 2.12.1, due later in November.

The heavy use of default methods for compiling traits caused some performance regressions in the startup time of Scala applications. Note that steady-state performance is not affected according to our measurements.

The regression was mitigated 2.12.0-RC2 (and the final release) by generating forwarder methods in classes that inherit concrete methods from traits, which unfortunately [increases bytecode size](https://github.com/scala/scala/pull/5429) while improving JVM startup performance.

Please let us know if you notice any performance regressions. We will continue to tweak the bytecode during the 2.12.x cycle to get the best performance out of the JVM.

We hope to address the following in a later 2.12.x release:
- [SI-9824](https://issues.scala-lang.org/browse/SI-9824): Parallel collections are prone to deadlock in the REPL and in object initializers.

## Obtaining Scala

### Java 8 runtime

Install a recent build of the Java 8 Platform, such as [OpenJDK](http://openjdk.java.net/install/) or [Oracle Java](http://www.oracle.com/technetwork/java/javase/downloads/index.html). Any Java 8 compliant runtime will do (but note that Oracle versions before 8u102 have a known issue that [affects Scala](https://issues.scala-lang.org/browse/SI-9828)).

We are planning to add (some) support for Java 9 in the near future. Full Java 9 support will be part of the 2.13 roadmap discussions.

### Build tool

We recommend using [sbt 0.13.13](http://www.scala-sbt.org/download.html). Simply bump the `scalaVersion` setting in your existing project, or start a new project using `sbt new scala/scala-seed.g8`. We strongly recommend upgrading to sbt 0.13.13 for [templating support using the new command](https://github.com/sbt/sbt/pull/2705), [faster compilation](https://github.com/sbt/sbt/pull/2754), and [much more](http://www.scala-sbt.org/0.13/docs/sbt-0.13-Tech-Previews.html#sbt+0.13.13).

Please head over to the [scala-seed repo](https://github.com/scala/scala-seed.g8) to extend this [giter8 template](https://github.com/foundweekends/giter8) with an example of your favorite 2.12 feature!

Scala also works with [Maven](http://docs.scala-lang.org/tutorials/scala-with-maven.html), [Gradle](https://docs.gradle.org/current/userguide/scala_plugin.html), and Ant.

You can also download a distribution from [scala-lang.org](http://scala-lang.org/download/2.12.0.html), or obtain the JARs yourself from [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.12.0%22).

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, kindly helping others on forums and at meetups, and submitting and reviewing pull requests! You are all magnificent.

Scala 2.12.0 is the result of merging over [500 pull requests](https://github.com/scala/scala/pulls?utf8=%E2%9C%93&q=is%3Amerged%20label%3A2.12%20) out of about [600 received PRs](https://github.com/scala/scala/pulls?utf8=%E2%9C%93&q=is%3Apr%20label%3A2.12%20). The [contributions to 2.12.x](https://github.com/scala/scala/graphs/contributors?from=2014-11-01&to=2016-10-29&type=c) over the last 2 years [were split](https://docs.google.com/spreadsheets/d/16zVViCpJEZn_x2RlYFh-xAOiHJG3SrYYpfetRr5cu_Y/edit#gid=912693440) 64/32/4 between the Scala team at Lightbend ([lrytz](https://github.com/lrytz), [retronym](https://github.com/retronym), [adriaanm](https://github.com/adriaanm), [SethTisue](https://github.com/SethTisue), [szeiger](https://github.com/szeiger)), the community, and EPFL.

The new encodings of traits, lambdas, and lazy vals were developed in fruitful collaboration with the Dotty team at EPFL.

The new compiler back end and the new optimizer are based on earlier work by Miguel Garcia at EPFL.

## Scala 2.12 overview

Scala 2.12 is all about making optimal use of Java 8's new features. Thus, it generates code that requires a Java 8 runtime.
- Traits ([#5003](https://github.com/scala/scala/pull/5003)) and functions are compiled to their Java 8 equivalents. The compiler no longer generates trait implementation classes (`T$class.class`) and anonymous function classes (`C$$anonfun$1.class`).
- We treat Single Abstract Method types and Scala's built-in function types uniformly from type checking to the back end ([#4971](https://github.com/scala/scala/pull/4971)).
- We use `invokedynamic` for compiling functions. It also now provides a more natural encoding of other language features ([#4896](https://github.com/scala/scala/pull/4896)).
- We've standardized on the GenBCode back end ([#4814](https://github.com/scala/scala/pull/4814), [#4838](https://github.com/scala/scala/pull/4838)) and the flat classpath implementation is now the default ([#5057](https://github.com/scala/scala/pull/5057)).
- The optimizer has been completely overhauled for 2.12.

The new encodings for traits and lambdas lead to significantly smaller JAR files. For example, for ScalaTest 3.0.0, the jar size dropped from 9.9M to 6.7M.

Except for the breaking changes listed below, code that compiles on 2.11.x without deprecation warnings should compile on 2.12.x, unless you use experimental APIs such as reflection.  If you find incompatibilities that are not [listed below](#breaking-changes), please [file an issue](https://issues.scala-lang.org).

Thanks to source compatibility, cross-building is a one-line change to most sbt builds. Where needed, sbt provides support for [version-specific source folders](http://www.scala-sbt.org/0.13/docs/sbt-0.13-Tech-Previews.html#Cross-version+support+for+Scala+sources) out of the box.

### New language features

The next sections introduce new features and breaking changes in Scala 2.12 in more detail. To understand more technicalities and review past discussions, you can also take a look at the full list of [noteworthy pull request](https://github.com/scala/scala/pulls?utf8=%E2%9C%93&q=%20is%3Amerged%20label%3A2.12%20label%3Arelease-notes%20) that went into this release.

#### Traits compile to interfaces

Because Java 8 allows concrete methods in interfaces, Scala 2.12 is able to compile a trait to a single interface classfile. Before, a trait was represented as an interface and a class that held the method implementations (`T$class.class`).

Additional magic is still involved, so care must be taken if a trait is meant to be implemented in Java. Briefly, if a trait does any of the following, its subclasses require synthetic code:
- defining fields (`val` or `var`, but a constant is ok -- `final val` without result type)
- calling super
- initializer statements in the body
- extending a class
- relying on linearization to find implementations in the right supertrait

#### Lambda syntax for SAM types

The Scala 2.12 type checker accepts a function literal as a valid expression for any Single Abstract Method (SAM) type, in addition to the `FunctionN` types from standard library. This improves the experience of using libraries written for Java 8 from Scala code. Here is a REPL example using `java.lang.Runnable`:

```
scala> val r: Runnable = () => println(""Run!"")
r: Runnable = $$Lambda$1073/754978432@7cf283e1

scala> r.run()
Run!
```

Note that only lambda expressions are converted to SAM type instances, not arbitrary expressions of `FunctionN` type:

```
scala> val f = () => println(""Faster!"")

scala> val fasterRunnable: Runnable = f
<console>:12: error: type mismatch;
 found   : () => Unit
 required: Runnable
```

The language specification has the [full list of requirements for SAM conversion](http://www.scala-lang.org/files/archive/spec/2.12/06-expressions.html#sam-conversion).

With the use of default methods, Scala's built-in `FunctionN` traits are compiled to SAM interfaces. This allows creating Scala functions from Java using Java's own lambda syntax:

```
public class A {
  scala.Function1<String, String> f = s -> s.trim();
}
```

Specialized function classes are also SAM interfaces and can be found in the package `scala.runtime.java8`.

Thanks to an improvement in type checking, the parameter type in a lambda expression can be omitted even when the invoked method is overloaded.  See [#5307](https://github.com/scala/scala/pull/5307) for details. In the following example, the compiler infers parameter type `Int` for the lambda:

```
scala> trait MyFun { def apply(x: Int): String }

scala> object T {
     |   def m(f: Int => String) = 0
     |   def m(f: MyFun) = 1
     | }

scala> T.m(x => x.toString)
res0: Int = 0
```

Note that though both methods are applicable, overloading resolution selects the one with the `Function1` argument type, as [explained in more detail below](#sam-conversion-in-overloading-resolution).

#### Java 8-style bytecode for lambdas

Scala 2.12 emits bytecode for functions in the same style as Java 8, whether they target a `FunctionN` class from the standard library or a user-defined Single Abstract Method (SAM) type.

For each lambda the compiler generates a method containing the lambda body, and emits an `invokedynamic` that will spin up a lightweight class for this closure using the JDK's `LambdaMetaFactory`. Note that in the following situations, an anonymous function class is still synthesized at compile time:
- If the SAM type is not a simple interface, for example an abstract class or a trait with a field definition (see [#4971](https://github.com/scala/scala/pull/4971))
- If the abstract method is specialized -- except for `scala.FunctionN`, whose specialized variants can be instantiated using `LambdaMetaFactory` (see [#4971](https://github.com/scala/scala/pull/4971))
- If the function literal is defined in a constructor or super call ([#3616](https://github.com/scala/scala/pull/3616))

Compared to Scala 2.11, the new scheme has the advantage that, in most cases, the compiler does not need to generate an anonymous class for each closure.

Our backend support for `invokedynamic` is also available to macro authors, as shown in [this test case](https://github.com/scala/scala/blob/v2.12.0/test/files/run/indy-via-macro-with-dynamic-args/macro_1.scala).

#### Partial unification for type constructor inference

Compiling with `-Ypartial-unification` improves type constructor inference with support for partial unification, fixing the notorious [SI-2712](https://issues.scala-lang.org/browse/SI-2712). Thank you, [Miles Sabin](https://github.com/milessabin) for contributing [your implementation](https://github.com/scala/scala/pull/5102) (and [backporting to 2.11.9](https://github.com/scala/scala/pull/5343))!

Also, hat tip to Daniel Spiewak for [a great explanation of this feature](https://gist.github.com/djspiewak/7a81a395c461fd3a09a6941d4cd040f2).

We recommend enabling this with `-Ypartial-unification` rather than `-Xexperimental`, as the latter enables some surprising features that will not ship with a future release of Scala.

#### New representation and locking scope for local lazy vals

Local lazy vals and objects, i.e., those defined in methods, now use a more efficient representation (implemented in [#5294](https://github.com/scala/scala/pull/5294) and [#5374](https://github.com/scala/scala/pull/5374)).

In Scala 2.11, a local lazy val was encoded using two heap-allocated objects (one for the value, a second for the initialized flag). Initialization was synchronized on the enclosing class instance.

In 2.12, with the new [representation for lambdas](#java-8-style-bytecode-for-lambdas), which emits the lambda body as a method in the enclosing class, new deadlocks can arise for lazy vals or objects defined in the lambda body.

This has been fixed by creating a single heap-allocated object that is used for init locking and holds both the value and the initialized flag. (A similar implementation already existed in Dotty.)

#### Better type inference for Scala.js

The [improved type inference for lambda parameters](#lambda-syntax-for-sam-types) also benefits `js.Function`s. For example, you can now write:

```
dom.window.requestAnimationFrame { now => // inferred as Double
  ...
}
```

without having to specify `(now: Double)` explicitly.

In a similar spirit, the [new inference for overriding `val`s](#inferred-types-for-fields) allows to more easily implement Scala.js-defined JS traits with anonymous objects. For example:

```
@ScalaJSDefined
trait SomeOptions extends js.Object {
  val width: Double | String // e.g., ""300px""
}
val options = new SomeOptions {
  // implicitly converted from Int to the inferred Double | String
  val width = 200
}
```

### Tooling improvements

#### New back end

Scala 2.12 standardizes on the ""GenBCode"" back end, which emits code more quickly because it directly generates bytecode from Scala compiler trees. (The old back end used an intermediate representation.) The old back ends (GenASM and GenIcode) have been removed ([#4814](https://github.com/scala/scala/pull/4814), [#4838](https://github.com/scala/scala/pull/4838)).

#### New optimizer

The GenBCode back end includes a new inliner and bytecode optimizer. The optimizer is configured using the `-opt` compiler option. By default it only removes unreachable code within a method. Check `-opt:help` to see the list of available options for the optimizer.

The following optimizations are available:
- Inlining final methods, including methods defined in objects and final methods defined in traits
- If a closure is allocated and invoked within the same method, the closure invocation is replaced by an invocations of the corresponding lambda body method
- Dead code elimination and a small number of cleanup optimizations
- Box/unbox elimination [#4858](https://github.com/scala/scala/pull/4858): primitive boxes and tuples that are created and used within some method without escaping are eliminated.

For example, the following code

```
def f(a: Int, b: Boolean) = (a, b) match {
  case (0, true) => -1
  case _ if a < 0 => -a
  case _ => a
}
```

produces, when compiled with `-opt:l:method`, the following bytecode (decompiled using [cfr](http://www.benf.org/other/cfr/)):

```
public int f(int a, boolean b) {
  int n = 0 == a && true == b ? -1 : (a < 0 ? - a : a);
  return n;
}
```

The optimizer supports inlining (disabled by default). With `-opt:l:project` code from source files currently being compiled is inlined, while `-opt:l:classpath` enables inlining code from libraries on the compiler's classpath. Other than methods marked [`@inline`](http://www.scala-lang.org/files/archive/api/2.12.0/scala/inline.html), higher-order methods are inlined if the function argument is a lambda, or a parameter of the caller.

Note that:
- We recommend enabling inlining only in production builds, as sbt's incremental compilation does not track dependencies introduced by inlining.
- When inlining code from the classpath, you must ensure that all dependencies have exactly the same versions at compile time and run time.
- If you are building a library to publish on Maven Central, you should not inline code from dependencies. Users of your library might have different versions of those dependencies on the classpath, which breaks binary compatibility.

The Scala distribution is built using `-opt:l:classpath`, which improves the performance of the Scala compiler by roughly 5% (hot and cold, measured using our [JMH-based benchmark suite](https://github.com/scala/compiler-benchmark/blob/master/compilation/src/main/scala/scala/tools/nsc/ScalacBenchmark.scala)) compared to a non-optimized build.

#### Scaladoc look-and-feel overhauled

Scaladoc's output is now more attractive, more modern, and easier to use. Take a look at the [Scala Standard Library API](http://www.scala-lang.org/api/2.12.0).

Thanks, [Felix Mulder](https://github.com/felixmulder), for leading this effort.

#### Scaladoc can be used to document Java sources

This fix for [SI-4826](https://issues.scala-lang.org/browse/SI-4826) simplifies generating comprehensive documentation for projects with both Scala and Java sources. Thank you for your contribution, [Jakob Odersky](https://github.com/jodersky)!

This feature is enabled by default, but can be disabled with:

```
scalacOptions in (Compile, doc) += ""-no-java-comments""
```

Some projects with very large Javadoc comments may run into a stack overflow in the Javadoc scanner, which [will be fixed in 2.12.1](https://github.com/scala/scala/pull/5469).

#### Scala shell ([REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop))

Scala's interactive shell ships with several spiffy improvements. To try it out, launch it from the command line with the `scala` script or in sbt using the `console` task. If you like color (who doesn't!), use `scala -Dscala.color` instead, until [it's turned on by default](https://github.com/scala/scala-dev/issues/256).

Since 2.11.8, the REPL uses the same tab completion logic as ScalaIDE and ENSIME, which greatly improves the experience. Check out [PR 4725](https://github.com/scala/scala/pull/4725) for some tips and tricks.

#### sbt builds Scala

Scala itself is now completely built, tested and published with sbt!

This makes it easier to get started hacking on the compiler and standard library. All you need on your machine is JDK 8 and sbt - no ant, no environment variables to set, no shell scripts to run. You can [build, use, test and publish](https://github.com/scala/scala/blob/2.12.x/README.md#using-the-sbt-build) Scala like any other sbt-based project.

Due to Scala's bootstrapped nature, IntelliJ cannot yet import our sbt build directly. Use the `intellij` task instead to generate suitable project files.

### Library improvements

#### Either is now right-biased

`Either` now supports operations like `map`, `flatMap`, `contains`, `toOption`, and so forth, which operate on the right-hand side. The `.left` and `.right` methods may be deprecated in favor of `.swap` in a later release.
The changes are source-compatible with existing code (except in the presence of conflicting extension methods).

This change has allowed other libraries, such as [cats](http://typelevel.org/cats/) to standardize on `Either`.

Thanks, [Simon Ochsenreither](https://github.com/soc), for this contribution.

#### Futures improved

A number of improvements to `scala.concurrent.Future` were made for Scala 2.12. This [blog post series](https://github.com/viktorklang/blog) by Viktor Klang explores them in detail.

#### scala-java8-compat

The [Java 8 compatibility module for Scala](https://github.com/scala/scala-java8-compat) has received an overhaul for Scala 2.12. Even though interoperability of Java 8 SAMs and Scala functions is now baked into the language, this module provides additional convenience for working with Java 8 SAMs. Java 8 streams support was also added during the development cycle of Scala 2.12. Releases are available for both Scala 2.11 and Scala 2.12.

### Other changes and deprecations
- For comprehension desugaring requires `withFilter` now, never falls back to `filter` ([#5252](https://github.com/scala/scala/pull/5252))
- A [mutable TreeMap](http://www.scala-lang.org/files/archive/api/2.12.0/scala/collection/mutable/TreeMap.html) implementation was added ([#4504](https://github.com/scala/scala/pull/4504)).
- [ListSet](http://www.scala-lang.org/files/archive/api/2.12.0/scala/collection/immutable/ListSet.html) and [ListMap](http://www.scala-lang.org/files/archive/api/2.12.0/scala/collection/immutable/ListMap.html) now ensure insertion-order traversal (in 2.11.x, traversal was in reverse order), and their performance has been improved ([#5103](https://github.com/scala/scala/pull/5103)).
- The [`@deprecatedInheritance`](http://www.scala-lang.org/files/archive/api/2.12.0/scala/deprecatedInheritance.html) and [`@deprecatedOverriding`](http://www.scala-lang.org/files/archive/api/2.12.0/scala/deprecatedOverriding.html) are now public and available to library authors.
- The `@hideImplicitConversion` Scaladoc annotation allows customizing which implicit conversions are hidden ([#4952](https://github.com/scala/scala/pull/4952)).
- The `@shortDescription` Scaladoc annotation customizes the method summary on entity pages ([#4991](https://github.com/scala/scala/pull/4991)).
- JavaConversions, providing implicit conversions between Scala and Java collection types, has been deprecated. We recommend using [JavaConverters](http://www.scala-lang.org/files/archive/api/2.12.0/scala/collection/JavaConverters$.html) and explicit `.asJava` / `.asScala` conversions.
- Eta-expansion (conversion of a method to a function value) of zero-args methods has been deprecated, as this can lead to surprising behavior ([#5327](https://github.com/scala/scala/pull/5327)).
- The Scala library is now [free](https://github.com/scala/scala/pull/4443) of [references](https://github.com/scala/scala/pull/4712) to `sun.misc.Unsafe`, and [no longer ships](https://github.com/scala/scala/pull/4629) with a fork of the forkjoin library.
- Exhaustiveness analysis in the pattern matcher has been improved ([#4919](https://github.com/scala/scala/pull/4919)).
- We emit parameter names according to [JEP-118](http://openjdk.java.net/jeps/118), which makes them available to Java tools and exposes them through Java reflection.

## Breaking changes

### Object initialization locks and lambdas

In Scala 2.11, the body of a lambda was in the `apply` method of the anonymous function class generated at compile time. The new lambda encoding in 2.12 lifts the lambda body into a method in the enclosing class. An invocation of the lambda therefore involves the enclosing class, which can cause deadlocks that did not happen before.

For example, the following code

```
import scala.concurrent._
import scala.concurrent.duration._
import ExecutionContext.Implicits.global
object O { Await.result(Future(1), 5.seconds) }
```

compiles to (simplified):

```
public final class O$ {
  public static O$ MODULE$;
  public static final int $anonfun$new$1() { return 1; }
  public static { new O$(); }
  private O$() {
    MODULE$ = this;
    Await.result(Future.apply(LambdaMetaFactory(Function0, $anonfun$new$1)), DurationInt(5).seconds);
  }
}
```

Accessing `O` for the first time initializes the `O$` class and executes the static initializer (which invokes the instance constructor). Class initialization is guarded by an initialization lock ([Chapter 5.5 in the JVM specification](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.5)).

The main thread locks class initialization and spawns the Future. The Future, executed on a different thread, attempts to execute the static lambda body method `$anonfun$new$1`, which also requires initialization of the class `O$`. Because initialization is locked by the main thread, the thread running the future will block. In the meantime, the main thread continues to run `Await.result`, which will block until the future completes, causing the deadlock.

One example of this [surprised the authors of ScalaCheck](https://github.com/rickynils/scalacheck/issues/290) -- now [fixed](https://github.com/rickynils/scalacheck/pull/294) in version 1.13.4.

### Lambdas capturing outer instances

Because lambda bodies are emitted as methods in the enclosing class, a lambda can capture the outer instance in cases where this did not happen in 2.11. This can affect serialization.

The Scala compiler analyzes classes and methods to prevent unnecessary outer captures: unused outer parameters are removed from classes ([#4652](https://github.com/scala/scala/pull/4652)), and methods not accessing any instance members are made static ([#5099](https://github.com/scala/scala/pull/5099)). One known limitation is that the analysis is local to a class and does not cover subclasses.

```
class C {
  def f = () => {
    class A extends Serializable
    class B extends A
    serialize(new A)
  }
}
```

In this example, the classes `A` and `B` are first lifted into `C`. When flattening the classes to the package level, the `A` obtains an outer pointer to capture the `A` instance. Because `A` has a subclass `B`, the class-level analysis of `A` cannot conclude that the outer parameter is unused (it might be used in `B`).

Serializing the `A` instance attempts to serialize the outer field, which causes a `NotSerializableException: C`.

### SAM conversion precedes implicits

The [SAM conversion](http://www.scala-lang.org/files/archive/spec/2.12/06-expressions.html#sam-conversion) built into the type system takes priority over implicit conversion of function types to SAM types. This can change the semantics of existing code relying on implicit conversion to SAM types:

```
trait MySam { def i(): Int }
implicit def convert(fun: () => Int): MySam = new MySam { def i() = 1 }
val sam1: MySam = () => 2 // Uses SAM conversion, not the implicit
sam1.i()                  // Returns 2
```

To retain the old behavior, your choices are:
- compile under `-Xsource:2.11`
- use an explicit call to the conversion method
- disqualify the type from being a SAM (e.g. by adding a second abstract method).

Note that SAM conversion only applies to lambda expressions, not to arbitrary expressions with Scala `FunctionN` types:

```
val fun = () => 2     // Type Function0[Int]
val sam2: MySam = fun // Uses implicit conversion
sam2.i()              // Returns 1
```

### SAM conversion in overloading resolution

In order to improve source compatibility, overloading resolution has been adapted to prefer methods with `Function`-typed arguments over methods with parameters of SAM types. The following example is identical in Scala 2.11 and 2.12:

```
scala> object T {
     |   def m(f: () => Unit) = 0
     |   def m(r: Runnable) = 1
     | }

scala> val f = () => ()

scala> T.m(f)
res0: Int = 0
```

In Scala 2.11, the first alternative was chosen because it is the only applicable method. In Scala 2.12, both methods are applicable, therefore [overloading resolution](http://www.scala-lang.org/files/archive/spec/2.12/06-expressions.html#overloading-resolution) needs to pick the most specific alternative. The specification for [type compatibility](http://www.scala-lang.org/files/archive/spec/2.12/03-types.html#compatibility) has been updated to consider SAM conversion, so that the first alternative is more specific.

Note that SAM conversion in overloading resolution is always considered, also if the argument expression is not a function literal (like in the example). This is unlike SAM conversions of expressions themselves; see the previous section. See also the discussion in [scala-dev#158](https://github.com/scala/scala-dev/issues/158).

While the adjustment to overloading resolution improves compatibility overall, code does exist that compiles in 2.11 but is ambiguous in 2.12, for example:

```
scala> object T {
     |   def m(f: () => Unit, o: Object) = 0
     |   def m(r: Runnable, s: String) = 1
     | }
defined object T

scala> T.m(() => (), """")
<console>:13: error: ambiguous reference to overloaded definition
```

### Inferred types for fields

Type inference for `val`, and `lazy val` has been aligned with `def`, fixing assorted corner cases and inconsistencies ([#5141](https://github.com/scala/scala/pull/5141) and [#5294](https://github.com/scala/scala/pull/5294)). Concretely, when computing the type of an overriding field, the type of the overridden field is used as the expected type. As a result, the inferred type of a `val` or `lazy val` may change in Scala 2.12.

In particular, an `implicit val` that did not need an explicitly declared type in 2.11 may need one now. (Type-annotating implicits is always good practice anyway.)

You can get the old behavior with `-Xsource:2.11`. This may be useful for testing whether these changes are responsible if your code fails to compile.

### Changed syntax trees (affects macro and compiler plugin authors)

PR [#4794](https://github.com/scala/scala/pull/4749) changed the syntax trees for selections of statically accessible symbols. For example, a selection of `Predef` no longer has the shape `q""scala.this.Predef""` but simply `q""scala.Predef""`. Macros and compiler plugins matching on the old tree shape need to be adjusted.

## Improving these notes

Improvements to these release notes [are welcome!](https://github.com/scala/make-release-notes/blob/2.12.x/hand-written.md)
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/4554383/assets,https://api.github.com/repos/scala/scala/releases/4554383,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.0,https://github.com/scala/scala/releases/tag/v2.12.0,https://api.github.com/repos/scala/scala/zipball/v2.12.0,v2.12.0,False,False
4421911,2016-10-15T02:32:38Z,2016-10-18T19:00:27Z,Scala 2.12.0-RC2,"We are happy to announce the availability of Scala 2.12.0-RC2!

This RC fixes all reported regressions since 2.11.
It will become the final by October 28th, unless we hear of any issues that block your upgrade to 2.12 before then!

Here are the [most noteworthy fixes](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.12.0-RC2+label%3Arelease-notes) since RC1:
- [#5429](https://github.com/scala/scala/pull/5429) Default `-Xmixin-force-forwarders` to `true` (regression in performance of generated code);
- [#5398](https://github.com/scala/scala/pull/5398) [SD-225](https://github.com/scala/scala-dev/issues/225) Use a `lzycompute` method for module initialization. Address a performance regression;
- [#5417](https://github.com/scala/scala/pull/5417) [SD-233](https://github.com/scala/scala-dev/issues/233) `synchronized` blocks are JIT-friendly again;
- [#5433](https://github.com/scala/scala/pull/5433) Don't deprecate `Either.left` and `Either.right` yet;
- [#5392](https://github.com/scala/scala/pull/5392) [SI-9918](https://issues.scala-lang.org/browse/SI-9918) Don't crash on `object` in `trait` mixed into package object;
- [#5397](https://github.com/scala/scala/pull/5397) [SI-9920](https://issues.scala-lang.org/browse/SI-9920) Avoid linkage errors with captured local objects + self types;
- [#5430](https://github.com/scala/scala/pull/5430) Emit `object` in method like `lazy val`;
- [#5442](https://github.com/scala/scala/pull/5442) [SI-9943](https://issues.scala-lang.org/browse/SI-9943) `sealed` class does not yield SAM type;

The [RC1 release notes](http://scala-lang.org/news/2.12.0-RC1) have a list of important changes since M5.

In total, we merged [29 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.12.0-RC2).
This milestone resolves [6 JIRA tickets](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%20%3D%20CLOSED%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20%3D%20%22Scala%202.12.0-RC2%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC) and [9 scala-dev issues](https://github.com/scala/scala-dev/milestone/9?closed=1).

As usual for Scala pre-releases, 2.12.0-RC2 is not guaranteed to be binary compatible with any other Scala version, including any 2.12 milestones  and release candidates.

### Known issues

As with previous 2.12 builds, the new trait encoding may make some trait-based code run slower. We've investigated this issue in depth, and have implemented important improvements in RC2. Compile times may still be longer in 2.12 than 2.11. Please let us know if you notice any performance regressions. We will continue to tweak the bytecode we emit during the 2.12.x cycle to get the best performance out of the JVM.

We welcome feedback from the Scala community helping to isolate unusual slowdowns.

We hope to address the following in a future 2.12.x release:
- [SI-9824](https://issues.scala-lang.org/browse/SI-9824):
  Parallel collections are prone to deadlock in the REPL and in object initializers.

## Scala 2.12

Scala 2.12 requires a Java 8 runtime.

Scala 2.12 is all about making optimal use of Java 8's new features. Traits ([#5003](https://github.com/scala/scala/pull/5003)) and functions are compiled to their Java 8 equivalents, and we treat Single Abstract Method types and Scala's builtin function types uniformly from type checking to the back end ([#4971](https://github.com/scala/scala/pull/4971)). We also use `invokedynamic` for a more natural encoding of other language features ([#4896](https://github.com/scala/scala/pull/4896)). We've standardized on the GenBCode back end ([#4814](https://github.com/scala/scala/pull/4814), [#4838](https://github.com/scala/scala/pull/4838)) and the flat classpath implementation is now the default ([#5057](https://github.com/scala/scala/pull/5057)). The optimizer has been completely overhauled for 2.12.

Except for the breaking changes listed below, code that compiles on 2.11.x without deprecation warnings should compile on 2.12.x too, unless you use experimental APIs such as reflection.  If you find incompatibilities, please [file an issue](https://issues.scala-lang.org).

### New features

With this release candidate, we consider 2.12.x to be feature complete.

For 2.12.0, we will try to remain binary compatible with RC1, and we won't risk regressions except for the most critical bugs.

#### Trait compiles to an interface

With Java 8 allowing concrete methods in interfaces, Scala 2.12 is able to compile a trait to a single interface. Before, a trait was represented as a class that held the method implementations and an interface. Note that the compiler still has quite a bit of magic to perform behind the scenes, so that care must be taken if a trait is meant to be implemented in Java. (Briefly, if a trait does any of the following its subclasses require synthetic code: defining fields, calling super, initializer statements in the body, extending a class, relying on linearization to find implementations in the right super trait.)

#### Java 8-style lambdas

Scala 2.12 emits closures in the same style as Java 8, whether they target a `FunctionN` class from the standard library or a user-defined Single Abstract Method (SAM) type. The type checker accepts a function literal as a valid expression for either kind of ""function-like"" type (built-in or SAM). This improves the experience of using libraries written for Java 8 in Scala.

For each lambda the compiler generates a method containing the lambda body, and emits an `invokedynamic` that will spin up a lightweight class for this closure using the JDK's `LambdaMetaFactory`.

Compared to Scala 2.11, the new scheme has the advantage that, in most cases, the compiler does not need to generate an anonymous class for each closure. This leads to significantly smaller JAR files.

#### New back end

Scala 2.12 standardizes on the ""GenBCode"" back end, which emits code more quickly because it directly generates ASM bytecode from Scala compiler trees, while the previous back end used an intermediate representation called ""ICode"". The old back ends (GenASM and GenIcode) have been removed ([#4814](https://github.com/scala/scala/pull/4814), [#4838](https://github.com/scala/scala/pull/4838)).

#### New optimizer

The GenBCode back end includes a new inliner and bytecode optimizer. The optimizer is enabled using `-opt` compiler option, which defaults to `-opt:l:classpath`.  Check `-opt:help` to see the full list of available options for the optimizer.

The following optimizations are available:
- Inlining final methods, including methods defined in objects and final methods defined in traits
- If a closure is allocated and invoked within the same method, the closure invocation is replaced by an invocations of the corresponding lambda body method
- Dead code elimination and a small number of cleanup optimizations
- Box/unbox elimination [#4858](https://github.com/scala/scala/pull/4858)

#### Either is now right-biased

`Either` now supports operations like `map`, `flatMap`, `contains`,
`toOption`, and so forth, which operate on the right-hand side. (`.left` and `.right` may be deprecated in favor of `.swap` in a later release.)

The changes are source-compatible with old code (except in the presence of conflicting extension methods). Thanks, [Simon Ochsenreither](https://github.com/soc), for this contribution.

#### Futures improved

This [blog post series](https://github.com/viktorklang/blog) by Viktor Klang explores the diverse improvements made to `scala.concurrent.Future` for 2.12.

#### Scaladoc now supports doc comments in Java sources

Thanks, [Jakob Odersky](https://github.com/jodersky), for this fix to [SI-4826](https://issues.scala-lang.org/browse/SI-4826).

#### Partial unification of type constructors (SI-2712)

Compiling with `-Ypartial-unification` adds partial unification of type constructors, fixing the notorious [SI-2712](https://issues.scala-lang.org/browse/SI-2712), thanks to [Miles Sabin](https://github.com/milessabin).

### Breaking changes

#### SAM types

Implicit conversion of function types to SAM types won't kick in as often now, since the compiler's own SAM conversion takes priority:

```
trait MySam { def apply(x: Int): String }
implicit def unused(fun: Int => String): MySam =
  new MySam { def apply(x: Int) = fun(x) }
// uses SAM conversion, not the `unused` implicit
val sammy: MySam = (_: Int).toString
```

To retain the old behavior, you may compile under `-Xsource:2.11`, or disqualify the type from being a SAM (e.g. by adding a second abstract method).

#### Inferred types for `val` (and `lazy val`)

[#5141](https://github.com/scala/scala/pull/5141) and [#5294](https://github.com/scala/scala/pull/5294) align type inference for `def`, `val`, and `lazy val`, fixing assorted corner cases and inconsistencies.  As a result, the inferred type of a `val` or `lazy val` may change.

In particular, `implicit val`s that didn't need explicitly declared types before may need them now.  (This is always good practice anyway.)

You can get the old behavior with `-Xsource:2.11`.  This may be useful for testing whether these changes are responsible if your code fails to compile.

#### Changed syntax trees (affects macro and compiler plugin authors)

PR [#4794](https://github.com/scala/scala/pull/4749) changed the syntax trees for selections of statically accessible symbols. For example, a selection of `Predef` no longer has the shape `q""scala.this.Predef""` but simply `q""scala.Predef""`. Macros and compiler plugins matching on the old tree shape need to be adjusted.

## Binary compatibility

Since Scala 2.11, minor releases of Scala are binary compatible with each other.
Scala 2.12 will continue this tradition: every 2.12.x release will be binary compatible with 2.12.0.
Milestones and release candidates, however, are **not** binary compatible with any other release.

Scala 2.12 is not and will not be binary compatible with the 2.11.x series.  This allows us to keep improving the Scala compiler and standard library.  We are working with the community to ensure that core projects in the Scala eco-system become available for 2.12.  Please refer to this growing [list of libraries and frameworks](https://github.com/scala/make-release-notes/blob/2.12.x/projects-2.12.md).

The [Scala 2.11.1 release notes](http://scala-lang.org/news/2.11.1) explain in more detail on how binary compatibility works in Scala.  The same policies apply to 2.12 as well.

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in mailing lists and other public fora, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges v2.12.0-RC1..v2.12.0-RC2`, the following contributors helped to realize this release candidate: Adriaan Moors, Jason Zaugg, Lukas Rytz, Seth Tisue, Stefan Zeiger, Antoine Gourlay, Raphael Jolly. Thank you!

## Release notes

Improvements to these release notes [are welcome!](https://github.com/scala/make-release-notes/blob/2.12.x/hand-written.md)

## Obtaining Scala
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.12.0-RC2.html)
- Bump the `scalaVersion` setting in your sbt-based project
- Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.12.0-RC2%22)
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/4421911/assets,https://api.github.com/repos/scala/scala/releases/4421911,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.0-RC2,https://github.com/scala/scala/releases/tag/v2.12.0-RC2,https://api.github.com/repos/scala/scala/zipball/v2.12.0-RC2,v2.12.0-RC2,False,True
4123962,2016-09-06T14:49:48Z,2016-09-13T23:36:18Z,Scala 2.12.0-RC1,"We are happy to announce the availability of Scala 2.12.0-RC1!

Note, however, that Scala 2.12.0-RC2 will follow, due to known regressions detailed below.

The most notable changes since M5 are:
- [#5135](https://github.com/scala/scala/pull/5135): Either is now right-biased
- [SI-4826](https://issues.scala-lang.org/browse/SI-4826): Scaladoc now supports doc comments in Java sources
- [SI-7187](https://issues.scala-lang.org/browse/SI-7187): Eta-expansion of zero-argument method values is now deprecated
- [#5307](https://github.com/scala/scala/pull/5307): Reduced interference from SAMs when inferring function types in the presence of overload
- [#5141](https://github.com/scala/scala/pull/5141) / [#5294](https://github.com/scala/scala/pull/5294): Refactoring of `def`, `val`, and `lazy val` handling, fixing assorted corner cases and inconsistencies
- [#5311](https://github.com/scala/scala/pull/5311): Scala is now built with sbt instead of Ant (affects only contributors, not users)

In total, we merged [82 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.12.0-RC1), of which [6 are by new contributors](https://github.com/scala/scala/pulls?utf8=%E2%9C%93&q=is%3Apr%20is%3Amerged%20milestone%3A2.12.0-RC1%20label%3Awelcome) -- welcome! This milestone resolves [25 JIRA tickets](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%20%3D%20CLOSED%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20%3D%20%22Scala%202.12.0-RC1%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC).

As usual for Scala pre-releases, 2.12.0-RC1 is not binary compatible with any other Scala version, including any 2.12 milestones.

### Known issues

As with previous 2.12 builds, the new trait encoding may make some trait-based code run slower. As a result, compile times may also be longer in 2.12 than 2.11.  We welcome feedback from the Scala community helping to isolate unusual slowdowns.

The following known regressions will be fixed in 2.12.0-RC2:
- [SD-225](https://github.com/scala/scala-dev/issues/225) may cause drastically longer compile times for certain kinds of code.
- [SI-9918](https://issues.scala-lang.org/browse/SI-9918) may cause `scala.reflect.internal.Types$TypeError`s in code involving package objects.
- [SI-9920](https://issues.scala-lang.org/browse/SI-9920) may cause `java.lang.NoSuchMethodError`s at runtime.
- A regression may cause `java.util.NoSuchElementException`s in `scala.tools.nsc.backend.jvm.BCodeSkelBuilder`; see [#5395](https://github.com/scala/scala/pull/5395).

Because of the last-mentioned regression, [Shapeless](https://github.com/milessabin/shapeless) will not be
published for 2.12.0-RC1.

We hope to address the following in a future 2.12.x release:
- [SI-9824](https://issues.scala-lang.org/browse/SI-9824): Parallel collections are prone to deadlock in the REPL and in object initializers.

## Scala 2.12

Scala 2.12 requires a Java 8 runtime.

Scala 2.12 is all about making optimal use of Java 8's new features. Traits ([#5003](https://github.com/scala/scala/pull/5003)) and functions are compiled to their Java 8 equivalents, and we treat Single Abstract Method types and Scala's builtin function types uniformly from type checking to the back end ([#4971](https://github.com/scala/scala/pull/4971)). We also use `invokedynamic` for a more natural encoding of other language features ([#4896](https://github.com/scala/scala/pull/4896)). We've standardized on the GenBCode back end ([#4814](https://github.com/scala/scala/pull/4814), [#4838](https://github.com/scala/scala/pull/4838)) and the flat classpath implementation is now the default ([#5057](https://github.com/scala/scala/pull/5057)). The optimizer has been completely overhauled for 2.12.

Except for the breaking changes listed below, code that compiles on 2.11.x without deprecation warnings should compile on 2.12.x too, unless you use experimental APIs such as reflection.  If you find incompatibilities, please [file an issue](https://issues.scala-lang.org).

### New features

With this release candidate, we consider 2.12.x to be feature complete.

For 2.12.0, we will try to remain binary compatible with RC1, and we won't risk regressions except for the most critical bugs.

#### Trait compiles to an interface

With Java 8 allowing concrete methods in interfaces, Scala 2.12 is able to compile a trait to a single interface. Before, a trait was represented as a class that held the method implementations and an interface. Note that the compiler still has quite a bit of magic to perform behind the scenes, so that care must be taken if a trait is meant to be implemented in Java. (Briefly, if a trait does any of the following its subclasses require synthetic code: defining fields, calling super, initializer statements in the body, extending a class, relying on linearization to find implementations in the right super trait.)

#### Java 8-style lambdas

Scala 2.12 emits closures in the same style as Java 8, whether they target a FunctionN class from the standard library or a user-defined Single Abstract Method type. The type checker accepts a function literal as a valid expression for either kind of ""function-like"" type (built-in or SAM). This improves the experience of using libraries written for Java 8 in Scala.

For each lambda the compiler generates a method containing the lambda body, and emits an `invokedynamic` that will spin up a lightweight class for this closure using the JDK's `LambdaMetaFactory`.

Compared to Scala 2.11, the new scheme has the advantage that, in most cases, the compiler does not need to generate an anonymous class for each closure. This leads to significantly smaller JAR files.

#### New back end

Scala 2.12 standardizes on the ""GenBCode"" back end, which emits code more quickly because it directly generates ASM bytecode from Scala compiler trees, while the previous back end used an intermediate representation called ""ICode"". The old back ends (GenASM and GenIcode) have been removed ([#4814](https://github.com/scala/scala/pull/4814), [#4838](https://github.com/scala/scala/pull/4838)).

#### New optimizer

The GenBCode back end includes a new inliner and bytecode optimizer. The optimizer is enabled using `-opt` compiler option, which defaults to `-opt:l:classpath`.  Check `-opt:help` to see the full list of available options for the optimizer.

The following optimizations are available:
- Inlining final methods, including methods defined in objects and final methods defined in traits
- If a closure is allocated and invoked within the same method, the closure invocation is replaced by an invocations of the corresponding lambda body method
- Dead code elimination and a small number of cleanup optimizations
- Box/unbox elimination [#4858](https://github.com/scala/scala/pull/4858)

#### Either is now right-biased

`Either` now supports operations like `map`, `flatMap`, `contains`, `toOption`, and so forth, which operate on the right-hand side.

`.left` and `.right` are deprecated in favor of `.swap`.

The changes are source-compatible with old code (except in the presence of conflicting extension methods).

Thanks, [Simon Ochsenreither](https://github.com/soc), for this contribution.

#### Futures improved

This [blog post series](https://github.com/viktorklang/blog) by Viktor Klang explores the diverse improvements made to `scala.concurrent.Future` for 2.12.

#### Scaladoc now supports doc comments in Java sources

Thanks, [Jakob Odersky](https://github.com/jodersky), for this fix to [SI-4826](https://issues.scala-lang.org/browse/SI-4826).

#### Partial unification of type constructors (SI-2712)

Compiling with `-Ypartial-unification` adds partial unification of type constructors, fixing the notorious [SI-2712](https://issues.scala-lang.org/browse/SI-2712), thanks to [Miles Sabin](https://github.com/milessabin).

### Breaking changes

#### SAM types

As of [#4971](https://github.com/scala/scala/pull/4971), we treat Single Abstract Method types in the same way as our built-in FunctionN classes. This means overloading resolution has more contenders to choose from, making type inference less effective. Here's an example:

```
class C[V] {
  def sort(cmp: java.util.Comparator[V]): C[V] = ???
  def sort(cmp: (V, V) => Int): C[V] = sort(
    new java.util.Comparator[V] {
      def compare(a: V, b: V): Int = cmp(a, b)
    })
}

(new C[Int]) sort (_ - _) // error
(new C[Int]) sort ((_ - _): java.util.Comparator[Int]) // ok
(new C[Int]) sort ((a: Int, b: Int) => a - b)  // ok
```

The first attempt fails because the type checker cannot infer the types for `_ - _`'s arguments anymore.
Type inference in this scenario only works when we can narrow the overloads down to one before type checking the arguments the methods are applied to. When a function is passed as an argument to an overloaded method, we do this by considering the ""shape"" of the function (essentially, its arity). Now that `Comparator[?]` and `(?, ?) => ?` are both considered functions of arity two, our clever scheme breaks down and the programmer must either select an overload (second application) or make the argument types explicit (last application, which resolves to the `Function2` overload).

Finally, implicit conversion of SAM types to Function types won't kick in anymore, since the compiler does this conversion itself first:

```
trait MySam { def apply(x: Int): String }

implicit def unused(fun: Int => String): MySam
  = new MySam { def apply(x: Int) = fun(x) }

// uses sam conversion, not the `unused` implicit
val sammy: MySam = _.toString
```

#### Inferred types for `val` (and `lazy val`)

[#5141](https://github.com/scala/scala/pull/5141) and [#5294](https://github.com/scala/scala/pull/5294) align type inference for `def`, `val`, and `lazy val`, fixing assorted corner cases and inconsistencies.  As a result, the inferred type of a `val` or `lazy val` may change.

In particular, `implicit val`s that didn't need explicitly declared types before may need them now.  (This is always good practice anyway.)

You can get the old behavior with `-Xsource:2.11`.  This may be useful for testing whether these changes are responsible if your code fails to compile.

#### Changed syntax trees (affects macro and compiler plugin authors)

PR [#4794](https://github.com/scala/scala/pull/4749) changed the syntax trees for selections of statically accessible symbols. For example, a selection of `Predef` no longer has the shape `q""scala.this.Predef""` but simply `q""scala.Predef""`. Macros and compiler plugins matching on the old tree shape need to be adjusted.

## Binary compatibility

Since Scala 2.11, minor releases of Scala are binary compatible with each other. Scala 2.12 will continue this tradition: every 2.12.x release will be binary compatible with 2.12.0. Milestones and release candidates, however, are **not** binary compatible with any other release.

Scala 2.12 is not and will not be binary compatible with the 2.11.x series.  This allows us to keep improving the Scala compiler and standard library.  We are working with the community to ensure that core projects in the Scala eco-system become available for 2.12.  Please refer to this growing [list of libraries and frameworks](https://github.com/scala/make-release-notes/blob/2.12.x/projects-2.12.md).

The [Scala 2.11.1 release notes](http://scala-lang.org/news/2.11.1) explain in more detail on how binary compatibility works in Scala.  The same policies apply to 2.12 as well.

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in mailing lists and other public fora, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges v2.12.0-M5..v2.12.0-RC1`, the following contributors helped to realize this milestone: Adriaan Moors, Jason Zaugg, Lukas Rytz, Stefan Zeiger, A. P. Marki, Simon Ochsenreither, Seth Tisue, Jakob Odersky, Dale Wijnand, Dima Tkach, Janek Bogucki, Michał Pociecha, Christopher Davenport, Martin Olsson, tomjridge, Miles Sabin, Oscar Boykin, Raul Bache, Rex Kerr, Dmitriy Pogretskiy, Daniel Barclay, Antoine Gourlay, Steven Mitchell, Carsten Varming. Thank you!

## Release notes

Improvements to these release notes [are welcome!](https://github.com/scala/make-release-notes/blob/2.12.x/hand-written.md)

## Obtaining Scala
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.12.0-RC1.html)
- Bump the `scalaVersion` setting in your sbt-based project
- Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.12.0-M5%22)
",https://api.github.com/users/SethTisue,161079,SethTisue,https://api.github.com/repos/scala/scala/releases/4123962/assets,https://api.github.com/repos/scala/scala/releases/4123962,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.0-RC1,https://github.com/scala/scala/releases/tag/v2.12.0-RC1,https://api.github.com/repos/scala/scala/zipball/v2.12.0-RC1,v2.12.0-RC1,False,True
3554796,2016-06-29T18:55:55Z,2016-06-29T23:29:38Z,Scala 2.12.0-M5,"The Scala team at Lightbend is proud to announce the-milestone-also-known-as-RC0! 🎈 

Here are the highlights for Scala 2.12.0-M5:
- #5251: concrete trait methods are compiled to a static method (in the interface classfile) containing the actual implementation, and a default method forwards that to the static one.
- #5085: classes extending traits no longer get mixin forwarders (in most cases), the JVM picks the correct default method.
- #5102 adds partial unification of type constructors (behind `-Ypartial-unification`) and fixes SI-2712. Thanks @milessabin!
- The optimizer now listens to `-opt` (instead of `-Yopt`)
- [SI-9390](https://issues.scala-lang.org/browse/SI-9390): local methods that don't capture `this`
  are emitted as static to prevent capturing the outer instance in lambdas.

Check out the [release-note worthy PRs](https://github.com/scala/scala/pulls?utf8=%E2%9C%93&q=milestone%3A2.12.0-M5%20label%3Arelease-notes) for more details!

In total, we merged [96 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.12.0-M5), of which [9 are by new contributors](https://github.com/scala/scala/pulls?utf8=%E2%9C%93&q=is%3Apr%20is%3Amerged%20milestone%3A2.12.0-M5%20label%3Awelcome) -- welcome!

This milestone resolves [49 JIRA tickets](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%20%3D%20CLOSED%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20%3D%20%22Scala%202.12.0-M5%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC).

_Note_: #5085 introduces a performance regression, it causes the Scala compiler to run 20% slower. Any Scala program that uses concrete trait methods might see a slowdown. The most likely cause is that the JVM does not perform ""class hierarchy analysis"" (CHA) for methods defined in interfaces, including default methods, as noted in [JDK bug 8036580](https://bugs.openjdk.java.net/browse/JDK-8036580). This prevents the JIT from performing certain (important) optimizations. Most likely we will have to revert the change to fix the issue, but we are still investigating the details. The 2.12 release notes will clarify the impact of changes to traits on binary compatibility.

As usual for milestones, 2.12.0-M5 is not binary compatible with any other Scala release, including other 2.12 milestones. Scala 2.12 requires a Java 8 runtime.

To ensure a short RC cycle, only pull requests that could not ship in 2.12.1 will be considered for 2.12.0 (i.e., showstopper bugs or those that may affect binary compatibility).

## Scala 2.12

Scala 2.12 is all about making optimal use of Java 8's new features. Traits ([#5003](https://github.com/scala/scala/pull/5003)) and functions are compiled to their Java 8 equivalents, and we treat Single Abstract Method types and Scala's builtin function types uniformly from type checking to the back end ([#4971](https://github.com/scala/scala/pull/4971)). We also use `invokedynamic` for a more natural encoding of other language features ([#4896](https://github.com/scala/scala/pull/4896)). We've standardized on the GenBCode back end ([#4814](https://github.com/scala/scala/pull/4814), [#4838](https://github.com/scala/scala/pull/4838)) and the flat classpath implementation is now the default ([#5057](https://github.com/scala/scala/pull/5057)). The optimizer has been completely overhauled for 2.12.

Except for the breaking changes listed below, code that compiles on 2.11.x without deprecation warnings should compile on 2.12.x too, unless you use experimental APIs such as reflection.  If you find incompatibilities, please [file an issue](https://issues.scala-lang.org).

### New features

#### Trait compiles to an interface

With Java 8 allowing concrete methods in interfaces, Scala 2.12 is able to compile a trait to a single interface. Before, a trait was represented as a class that held the method implementations and an interface. Note that the compiler still has quite a bit of magic to perform behind the scenes, so that care must be taken if a trait is meant to be implemented in Java. (Briefly, if a trait does any of the following its subclasses require synthetic code: defining fields, calling super, initializer statements in the body, extending a class, relying on linearization to find implementations in the right super trait.)

#### Java 8-style lambdas

Scala 2.12 unifies Scala's notion of a function (or ""lambda"", or ""closure"") with Java 8's approach to lambdas. We compile lambdas to the same byte code as the Java 8 compiler, regardless of whether they target a `FunctionN` class from the Scala standard library or a Java 8 functional interface (a Single Abstract Method type). Furthermore, the type checker accepts a function literal as a valid expression for either kind of ""function-like"" type (e.g., the built-in `Int => Int` or [`IntUnaryOperator`](https://docs.oracle.com/javase/8/docs/api/java/util/function/IntUnaryOperator.html)).

``` scala
Welcome to Scala 2.12.0-M5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_92).
Type in expressions for evaluation. Or try :help.

scala> (x => x + 1) : java.util.function.IntUnaryOperator
res0: java.util.function.IntUnaryOperator = $$Lambda$1093/1901700557@4f966719

scala> (x => x + 1) : Function1[Int, Int]
res1: Int => Int = $$Lambda$1116/1609038183@59e43e8c
```

For each lambda the compiler generates a method containing the lambda body, and emits an `invokedynamic` that will spin up a lightweight class for this closure using the JDK's `LambdaMetaFactory`.

Compared to Scala 2.11, the new scheme has the advantage that, in most cases, the compiler does not need to generate an anonymous class for each closure. This leads to significantly smaller JAR files.

#### New back end

Scala 2.12 standardizes on the ""GenBCode"" back end, which emits code more quickly because it directly generates ASM bytecode from Scala compiler trees, while the previous back end used an intermediate representation called ""ICode"". The old back ends (GenASM and GenIcode) have been removed ([#4814](https://github.com/scala/scala/pull/4814), [#4838](https://github.com/scala/scala/pull/4838)).

#### New bytecode optimizer

The GenBCode back end includes a new inliner and bytecode optimizer.
The optimizer is enabled using the `-opt:l:classpath` compiler option.
Check `-opt:help` to see the full list of available options for the optimizer.

The following optimizations are available:
- Inlining final methods, including methods defined in objects and final methods defined in traits
- If a closure is allocated and invoked within the same method, the closure invocation is replaced by an invocations of the corresponding lambda body method
- Dead code elimination and a small number of cleanup optimizations
- Box/unbox elimination [#4858](https://github.com/scala/scala/pull/4858)

The work on the new optimizer is still ongoing.  You can track it in the [scala-dev repository issue tracker](https://github.com/scala/scala-dev/labels/t%3Aoptimizer).

### Breaking changes

#### SAM types

As of [#4971](https://github.com/scala/scala/pull/4971), we treat Single Abstract Method types in the same way as our built-in FunctionN classes. This means overloading resolution has more contenders to choose from, making type inference less effective. Here's an example:

``` scala
class C[V] {
  def sort(cmp: java.util.Comparator[V]): C[V] = ???
  def sort(cmp: (V, V) => Int): C[V] = sort(
    new java.util.Comparator[V] {
      def compare(a: V, b: V): Int = cmp(a, b)
    })
}

(new C[Int]) sort (_ - _) // error
(new C[Int]) sort ((_ - _): java.util.Comparator[Int]) // ok
(new C[Int]) sort ((a: Int, b: Int) => a - b)  // ok
```

The first attempt fails because the type checker cannot infer the types for `_ - _`'s arguments anymore.
Type inference in this scenario only works when we can narrow the overloads down to one before type checking the arguments the methods are applied to. When a function is passed as an argument to an overloaded method, we do this by considering the ""shape"" of the function (essentially, its arity). Now that `Comparator[?]` and `(?, ?) => ?` are both considered functions of arity two, our clever scheme breaks down and the programmer must either select an overload (second application) or make the argument types explicit (last application, which resolves to the `Function2` overload).

Finally, implicit conversion of SAM types to Function types won't kick in anymore, since the compiler does this conversion itself first:

``` scala
trait MySam { def apply(x: Int): String }

implicit def unused(fun: Int => String): MySam
  = new MySam { def apply(x: Int) = fun(x) }

// uses sam conversion, not the `unused` implicit
val sammy: MySam = _.toString
```

#### Changed syntax trees (affects macro and compiler plugin authors)

PR [#4794](https://github.com/scala/scala/pull/4749) changed the syntax trees for selections of statically accessible symbols. For example, a selection of `Predef` no longer has the shape `q""scala.this.Predef""` but simply `q""scala.Predef""`. Macros and compiler plugins matching on the old tree shape need to be adjusted.

## Binary compatibility

Since Scala 2.11, minor releases of Scala are binary compatible with each other.
Scala 2.12 will continue this tradition: every 2.12.x release will be binary compatible with 2.12.0.
Milestone releases and release candidates, however, are **not** binary compatible with any other release.

Scala 2.12 is not and will not be binary compatible with the 2.11.x series.  This allows us to keep improving the Scala compiler and standard library.  We are working with the community to ensure that core projects in the Scala eco-system become available for 2.12.  Please refer to this growing [list of libraries and frameworks](https://github.com/scala/make-release-notes/blob/2.12.x/projects-2.12.md).

The [Scala 2.11.1 release notes](http://scala-lang.org/news/2.11.1) explain in more detail on how binary compatibility works in Scala.  The same policies apply to 2.12 as well.

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in mailing lists and other public fora, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges v2.12.0-M4..v2.12.0-M5`, the following contributors helped to realize this milestone: Lukas Rytz, A. P. Marki, Jason Zaugg, Sébastien Doeraene, Adriaan Moors, Performant Data LLC, Simon Ochsenreither, Janek Bogucki, Miles Sabin, Felix Mulder, Stefan Zeiger, Rui Gonçalves, Raphael Jolly, Arno den Hartog, Viktor Klang, Olli Helenius, Kenji Yoshida, Steve Robinson, Taras Boiko, af, chrisokasaki, peterz, sh0hei, Łukasz Gieroń, Antoine Gourlay, Ben Hutchison, CodingTwinky, Dale Wijnand, Iulian Dragos, Jakob Odersky, Jens, Krzysztof Romanowski, Martijn Hoekstra, Mike Pheasant, Nafer Sanabria, Nicolas Stucki, Performant Data, Ruslan Sennov, Seth Tisue, Shixiong Zhu. Thank you!

## Release notes

Improvements to these release notes [are welcome!](https://github.com/scala/make-release-notes/blob/2.12.x/hand-written.md)
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/3554796/assets,https://api.github.com/repos/scala/scala/releases/3554796,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.0-M5,https://github.com/scala/scala/releases/tag/v2.12.0-M5,https://api.github.com/repos/scala/scala/zipball/v2.12.0-M5,v2.12.0-M5,False,True
2951290,2016-04-04T17:32:32Z,2016-04-04T23:33:58Z,Scala 2.12.0-M4,"This milestone marks feature completeness for 2.12! Traits (#5003) and functions are compiled to their Java 8 equivalents, and we treat Single Abstract Method types and Scala's builtin function types uniformly from type checking to the backend (#4971). We also use invokedynamic for a more natural encoding of other language features (#4896). We've standardized on the GenBCode back-end (#4814, #4838) and the flat classpath implementation is now the default (#5057). The optimizer has been completely overhauled for 2.12. This milestone adds box/unbox optimization (#4858).

For more details about what's new in this milestone, including some breaking changes, please take a look at [these 14 noteworthy PRs](https://github.com/scala/scala/pulls?q=is%3Apr+label%3Arelease-notes+milestone%3A2.12.0-M4+is%3Amerged).

In total, we merged [135 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.12.0-M4), of which [16 PRs by new contributors](https://github.com/scala/scala/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Amerged+author%3Afelixmulder++milestone%3A2.12.0-M4) -- welcome! This milestone resolves [49 JIRA tickets](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%20%3D%20CLOSED%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20%3D%20%22Scala%202.12.0-M4%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC). 

We'd especially like to thank Felix Mulder for his [excellent work on the new Scaladoc interface](https://github.com/scala/scala/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Amerged+author%3Afelixmulder++milestone%3A2.12.0-M4)! [Check it out!](http://www.scala-lang.org/files/archive/api/2.12.0-M4/)

As usual for milestones, 2.12.0-M4 is not binary compatible with any other Scala release, including other 2.12 milestones. Scala 2.12 requires a Java 8 runtime.
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/2951290/assets,https://api.github.com/repos/scala/scala/releases/2951290,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.0-M4,https://github.com/scala/scala/releases/tag/v2.12.0-M4,https://api.github.com/repos/scala/scala/zipball/v2.12.0-M4,v2.12.0-M4,False,True
2838244,2016-03-18T07:18:10Z,2016-03-18T07:21:17Z,Scala 2.12.0-M3-dc9effe,"This is an internal release, to serve as a new STARR ahead of 2.12.0-M4.

The release is bootstrapped through the new trait encoding in #5003
",https://api.github.com/users/retronym,65551,retronym,https://api.github.com/repos/scala/scala/releases/2838244/assets,https://api.github.com/repos/scala/scala/releases/2838244,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.0-M3-dc9effe,https://github.com/scala/scala/releases/tag/v2.12.0-M3-dc9effe,https://api.github.com/repos/scala/scala/zipball/v2.12.0-M3-dc9effe,v2.12.0-M3-dc9effe,False,True
2773090,2016-03-09T03:01:23Z,2016-03-09T03:27:30Z,Scala 2.11.8,"We are pleased to announce the availability of Scala 2.11.8!

Significant changes since 2.11.7 include:
- The Scala REPL now has robust and flexible tab-completion (details below)
- An assortment of bugs have been fixed

Compared to 2.11.7, this release resolves [44 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20in%20%28%22Scala%202.11.8%22%29%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC).  We merged [175 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.11.8).

As usual for minor releases, Scala 2.11.8 is binary compatible with other releases in the Scala 2.11 series.

The last planned 2.11.x release will be 2.11.9 in late 2016.

### New tab-completion in the Scala REPL

The implementation of tab-completion in the Scala REPL has been rewritten and now uses the same infrastructure as for example Scala IDE and ENSIME.

There are a number of improvements:
- Reliable completion, also in partial expressions and syntactically incorrect programs: try `class C { def f(l: List[Int]) = l.<TAB>`
- CamelCase completion: try `(l: List[Int]).rro<TAB>`, it expands to `(l: List[Int]).reduceRightOption`
- Show desugarings performed by the compiler by adding `//print`: try `for (x <- 1 to 10) println(x) //print<TAB>`
- Complete bean getters without typing `get`: try `(d: java.util.Date).day<TAB>`
- Find members by typing any CamelCased part of the name: try `classOf[String].typ<TAB>` to get `getAnnotationsByType`, `getComponentType` and others
- Complete non-qualified names, including types: try `def f(s: Str<TAB>`
- Press tab twice to see the method signature: try `List(1,2,3).part<TAB>`, which completes to `List(1,2,3).partition`; press tab again to display `def partition(p: Int => Boolean): (List[Int], List[Int])`

Thanks to @retronym and @som-snytt for their fruitful collaboration on this work!

### Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in mailing lists and other public fora, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges v2.11.7..v2.11.8`, 44 people contributed to this minor release: Seth Tisue, Jason Zaugg, Janek Bogucki, Lukas Rytz, Stefan Zeiger, A. P. Marki, Rex Kerr, Performant Data LLC, wpopielarski, Adriaan Moors, Vlad Ureche, Rui Gonçalves, vsalvis, martijnhoekstra, todesking, Li Yao, Frank S. Thomas, Igor Racic, Michał Pociecha, Kenji Yoshida, Tomas Janousek, dk14, jvican, stusmall, kirillkh, Alexey Romanov, Antoine Gourlay, Arnout Engelen, Eitan Adler, Felix Mulder, Gerard Basler, Jan Bessai, JoeRatt, Kirill Khazan, Linas Medziunas, Marconi Lanna, Mariot Chauvin, Michael, Parambir Singh, Paul Draper, Ryan Zhang, Simon Schäfer, Sébastien Doeraene, Tim Vergenz.

### Obtaining Scala

Scala releases are available through a variety of channels, including (but not limited to):
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.11.8.html)
- Bump the `scalaVersion` setting in your SBT-based project
- Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.8%22)
- Try the [Hello Scala 2.11 template](https://www.lightbend.com/activator/template/hello-scala-2_11) in [Lightbend Activator](https://www.lightbend.com/activator/download)

### Scala 2.11 Notes

The [release notes for Scala 2.11.1](http://scala-lang.org/news/2.11.1) have important information applicable to the whole 2.11 series, such as:
- Details on new features, important changes and deprecations since Scala 2.10.
- The specification of binary compatibility between minor releases.
",https://api.github.com/users/SethTisue,161079,SethTisue,https://api.github.com/repos/scala/scala/releases/2773090/assets,https://api.github.com/repos/scala/scala/releases/2773090,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.8,https://github.com/scala/scala/releases/tag/v2.11.8,https://api.github.com/repos/scala/scala/zipball/v2.11.8,v2.11.8,False,False
1918367,2015-10-06T14:06:55Z,2015-10-06T14:55:20Z,Scala 2.12.0-M3,"We are pleased to announce the availability of Scala 2.12.0-M3!

Significant changes since M2 include:
- The REPL received a robust and flexible implementation of tab-completion (details below) - a fruitful collaboration between @som-snytt and @retronym
- The `@implicitAmbiguous` annotation allows customizing the error message when an implicit search finds multiple ambiguous values (details below) - thanks @puffnfresh!
- Enabling `-Ywarn-unused-import` now correctly warns about unused imports that were considered but discarded during an implicit search - thanks @som-snytt!
- The optimizer now attempts to inline invocations of higher-order methods if the argument function is statically known, eliminating polymorphic callsites. (This work will be refined further in later milestones.)
- The standard library no longer contains a clone of Java's fork/join library, but uses the one bundled in Java 8

Compared to M2, this release resolves [21 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%20%3D%20CLOSED%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20%3D%20%22Scala%202.12.0-M3%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC). We merged [49 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.12.0-M3).

<!-- Before upgrading, please also check the [known issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%3Dopen%20AND%20affectedVersion%20%3D%20%22Scala%202.11.7%22%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.7%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC) for this release.-->

As usual for milestones, 2.12.0-M3 is not binary compatible with any other Scala release, including other 2.12 milestones.

## About Scala 2.12

The Scala 2.12 series targets Java 8. Programs written in Scala 2.12 must be compiled and run on Java 8 or newer.

### Source compatibility

Scala 2.12 is mostly source compatible with 2.11.  Code that compiles on 2.11.x without deprecation warnings should compile on 2.12.x too, unless you use experimental APIs such as reflection.  If you find incompatibilities, please [file an issue](https://issues.scala-lang.org).

### Binary compatibility

Since Scala 2.11, minor releases of Scala are binary compatible with each other.
Scala 2.12 will continue this tradition: every 2.12.x release will be binary compatible with 2.12.0.
Milestone releases and release candidates, however, are **not** binary compatible with any other release.

Scala 2.12 is not and will not be binary compatible with the 2.11.x series.  This allows us to keep improving the Scala compiler and standard library.  We are working with the community to ensure that core projects in the Scala eco-system become available for 2.12.  Please refer to this growing [list of libraries and frameworks](https://github.com/scala/make-release-notes/blob/2.12.x/projects-2.12.md).

The [Scala 2.11.1 release notes](http://scala-lang.org/news/2.11.1) explain in more detail on how binary compatibility works in Scala.  The same policies apply to 2.12 as well.

### New features

Future 2.12 milestones will include additional new features. For now, M3 includes the following major changes:

#### New backend

Scala 2.12 enables the ""GenBCode"" backend by default.

The new backend is more efficient than the default backend of Scala 2.11, because it directly generates ASM bytecode from Scala compiler trees, while the previous backend used an intermediate representation called ""ICode"".

#### Java 8 style closure classes

Scala 2.12 emits closures in the same style as Java 8.

For each lambda the compiler generates a method containing the lambda body.
At runtime, this method is passed as an argument to the LambdaMetaFactory provided by the JDK, which creates a closure object.

Compared to Scala 2.11, the new scheme has the advantage that the compiler does not generate an anonymous class for each lambda anymore.
This leads to significantly smaller JAR files.

#### Lambda syntax for SAM types (experimental)

As of M3, this feature is not yet on by default.  You can enable it with the `-Xexperimental` compiler option.

When the option is enabled, then similar to Java 8, Scala 2.12 allows instantiating any type with one single abstract method by passing a lambda.  This improves the experience of using libraries written for Java 8 in Scala.

This feature was also available in Scala 2.11, also via `-Xexperimental`.

#### New tab-completion in the Scala REPL

The implementation of tab-completion in the Scala REPL has been rewritten and now uses the same infrastruture as for example the Scala IDE or Ensime. Note that this feature will also be available in 2.11.8.

There are a number of improvements:
- Reliable completion, also in partial expressions and syntactically incorrect programs: try `class C { def f(l: List[Int]) = l.<TAB>`
- CamelCase completion: try `(l: List[Int]).rro<TAB>`, it expands to `(l: List[Int]).reduceRightOption`
- Show desugarings performed by the compiler by adding `//print`: try `for (x <- 1 to 10) println(x) //print<TAB>`
- Complete bean getters without typing `get`: try `(d: java.util.Date).day<TAB>`
- Find members by typing any CamelCased part of the name: try `classOf[String].typ<TAB>` to get `getAnnotationsByType`, `getComponentType` and others
- Complete non-qualified names, including types: try `def f(s: Str<TAB>`
- Press tab twice to see the method signature: try `List(1,2,3).part<TAB>`, which completes to `List(1,2,3).partition`; press tab again to display `def partition(p: Int => Boolean): (List[Int], List[Int])`

Thanks to @som-snytt for helping out with this work!

#### New bytecode optimizer

The GenBCode backend includes a new inliner and bytecode optimizer.
The optimizer is enabled using the `-Yopt:l:classpath` compiler option.
Check `-Yopt:help` to see the full list of available options for the optimizer.

As of M3, the following optimizations are available:
- Inlining final methods, including methods defined in objects and final methods defined in traits
- If a closure is allocated and invoked within the same method, the closure invocation is replaced by an invocations of the corresponding lambda body method
- Dead code elimination and a small number of cleanup optimizations

The work on the new optimizer is still ongoing.  You can track it in the [scala-dev repository issue tracker](https://github.com/scala/scala-dev/labels/t%3Aoptimizer).

#### The `@implicitAmbiguous` annotation

The `@implicitAmbiguous` annotation allows customizing the error message when an implicit search finds multiple ambiguous values. Refer to the [Scaladoc of the annotation class](http://www.scala-lang.org/api/2.12.x/#scala.annotation.implicitAmbiguous) for an example.

Thanks to @puffnfresh for this contribution!

### Unbundled features

The following modules have been removed from the Scala 2.12 distribution:
- Scala standard library actors.
  We recommend [Akka actors](http://akka.io/) instead.
  See the [Scala actors migration guide](http://docs.scala-lang.org/overviews/core/actors-migration-guide.html).
- Akka actors.
  The Scala distribution and the `scala-library-all` dependency no longer include Akka actors.
  To use Akka, [add it as a dependency](http://doc.akka.io/docs/akka/2.4.0/intro/getting-started.html).
- Continuations plugin.
  ([Community maintainers sought](https://github.com/scala/scala-continuations).)

### Breaking changes

#### Changed syntax trees (affects macro and compiler plugin authors)

PR [#4794](https://github.com/scala/scala/pull/4749) changed the syntax trees for selections of statically accessible symbols. For example, a selection of `Predef` no longer has the shape `q""scala.this.Predef""` but simply `q""scala.Predef""`. Macros and compiler plugins matching on the old tree shape need to be adjusted.

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in mailing lists and other public fora, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges 2.11.x..v2.12.0-M3`, 44 people have contributed to Scala 2.12 so far: Lukas Rytz, Jason Zaugg, A. P. Marki, Rex Kerr, Adriaan Moors, Seth Tisue, Kato Kazuyoshi, Rui Gonçalves, Simon Ochsenreither, Max Bileschi, François Garillot, qilab gamma, jxcoder, Masato Sogame, Dominik Gruntz, Simon Schäfer, Kenji Yoshida, Todd Vierling, Viktor Klang, Alexey Romanov, Evgeny Vereshchagin, rubyu, Marc Siegel, dgruntz, Aleksandar Prokopec, Antoine Gourlay, Brian McKenna, Denis Rosset, Denton Cockburn, Erlend Hamnaberg, Eugene Dzhurinsky, Janek Bogucki, Lukas Elmer, Maks Atygaev, Malte Isberner, Nicolas Stucki, Paolo Giarrusso, Roman Hargrave, Shadaj, Steven Scott, Vojin Jovanovic, cchantep, harryhuk, martijnhoekstra. Thank you!

Thanks also to Miguel Garcia and James Iry for their substantial prior work on the new compiler backend.

## Release notes

You can propose edits to these release notes [on GitHub](https://github.com/scala/make-release-notes/blob/2.12.x/hand-written.md).

## Obtaining Scala

Scala releases are available various ways, such as:

<!-- re-add for 2.12.0 final?
* Get started with the [Hello Scala 2.12 template](https://typesafe.com/activator/template/hello-scala-2_12) in [Typesafe Activator](https://typesafe.com/platform/getstarted)
-->
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.12.0-M3.html)
- Bump the `scalaVersion` setting in your SBT-based project
- Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.12.0-M3%22)
",https://api.github.com/users/lrytz,119636,lrytz,https://api.github.com/repos/scala/scala/releases/1918367/assets,https://api.github.com/repos/scala/scala/releases/1918367,2.11.x,https://api.github.com/repos/scala/scala/tarball/v2.12.0-M3,https://github.com/scala/scala/releases/tag/v2.12.0-M3,https://api.github.com/repos/scala/scala/zipball/v2.12.0-M3,v2.12.0-M3,False,True
1835687,2015-09-18T17:42:33Z,2015-09-18T17:45:51Z,Scala 2.10.6,"Scala 2.10.6 [resolves a license incompatibility in scala.util.Sorting](https://github.com/scala/scala/pull/4557), but is otherwise identical to Scala 2.10.5. A total of [three pending backports](https://github.com/scala/scala/pulls?q=milestone%3A2.10.6+is%3Aclosed) were merged.

We strongly encourage you to upgrade to the latest stable version of Scala 2.11.x, as the 2.10.x series is no longer actively maintained.

### Scala IDE

The current release of Scala IDE supports any 2.10.x release, and is available on the [download site](http://scala-ide.org/download/sdk.html).

### Release Notes for the Scala 2.10 Series

The release notes for the Scala 2.10 series, which also apply to the current minor release, are available in the [release notes for Scala 2.10.4](http://scala-lang.org/news/2.10.4). They contain important information such as:
- The specification of binary compatibility between minor releases.
- Details on new features, important changes and deprecations in Scala 2.10.
",https://api.github.com/users/lrytz,119636,lrytz,https://api.github.com/repos/scala/scala/releases/1835687/assets,https://api.github.com/repos/scala/scala/releases/1835687,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.10.6,https://github.com/scala/scala/releases/tag/v2.10.6,https://api.github.com/repos/scala/scala/zipball/v2.10.6,v2.10.6,False,False
1542818,2015-07-15T20:11:02Z,2015-07-15T20:52:42Z,Scala 2.12.0-M2,"We are pleased to announce the availability of Scala 2.12.0-M2!

We would like to highlight the following changes since M1:
- Java 8 is now required.
- Lambdas are compiled to Java 8 style closures.

Compared to M1, this release resolves [9 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20%3D%20%22Scala%202.12.0-M2%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC).  We [merged 29 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.12.0-M2).

<!-- Before upgrading, please also check the [known issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%3Dopen%20AND%20affectedVersion%20%3D%20%22Scala%202.11.7%22%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.7%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC) for this release.-->

As usual for milestones, 2.12.0-M2 is not binary compatible with any other Scala release, including other 2.12 milestones.

## About Scala 2.12

Beginning with 2.12.0-M2, the Scala 2.12 series targets Java 8. Programs written in Scala 2.12, including the Scala 2.12 compiler, can only be executed on Java 8 or newer.

### Source compatibility

2.12 is mostly source compatible with 2.11.  Code that compiles on 2.11.x without deprecation warnings should compile on 2.12.x too, unless you use experimental APIs such as reflection.  If you find incompatibilities, please [file an issue](https://issues.scala-lang.org).

### Binary compatibility

Since Scala 2.11, minor releases of Scala are binary compatible with each other.
Scala 2.12 will continue this tradition: every 2.12.x release will be binary compatible with 2.12.0.
Milestone releases and release candidates, however, are **not** binary compatible with any other release.

2.12 is not and will not be binary compatible with the 2.11.x series.  This allows us to keep improving the Scala compiler and standard library.  We are working with the community to ensure that core projects in the Scala eco-system become available for 2.12.  Please refer to this growing [list of libraries and frameworks](https://github.com/scala/make-release-notes/blob/2.12.x/projects-2.12.md).

The [Scala 2.11.1 release notes](http://scala-lang.org/news/2.11.1) explain in more detail on how binary compatibility works in Scala.  The same policies that applied to 2.11 will apply to 2.12 as well.

### New features

Future 2.12 milestones will include additional new features. For now, M2 includes the following major changes:

#### New backend

Scala 2.12 enables the ""GenBCode"" backend by default.

The new backend is more efficient than the default backend of Scala 2.11, because it directly generates ASM bytecode from Scala compiler trees, while the previous backend used an intermediate representation called ""ICode"".

#### Java 8 style closure classes

Scala 2.12 emits closures in the same style as Java 8.

For each lambda the compiler generates a method containing the lambda body.
At runtime, this method is passed as an argument to the LambdaMetaFactory provided by the JDK, which creates a closure object.

Compared to Scala 2.11, the new scheme has the advantage that the compiler does not generate an anonymous class for each lambda anymore.
This leads to significantly smaller JAR files.

#### Lambda syntax for SAM types (experimental)

As of M2, this feature is not yet on by default.  You can enable it with the `-Xexperimental` compiler option.

When the option is enabled, then similar to Java 8, Scala 2.12 allows instantiating any type with one single abstract method by passing a lambda.  This improves the experience of using libraries written for Java 8 in Scala.

This feature was also available in Scala 2.11, also via `-Xexperimental`.

#### New Bytecode Optimizer

The GenBCode backend includes a new inliner and bytecode optimizer.
The optimizer is enabled using the `-Yopt:l:classpath` compiler option.
Check `-Yopt:help` to see the full list of available options for the optimizer.

As of M2, the following optimizations are available:
- Inlining final methods, including methods defined in objects and final methods defined in traits
- If a closure is allocated and invoked within the same method, the closure invocation is replaced by an invocations of the corresponding lambda body method
- Dead code elimination and a small number of cleanup optimizations

The work on the new optimizer is still ongoing.  You can track it in the [scala-opt repository issue tracker](https://github.com/scala-opt/scala/issues).

### Unbundled features

The following modules have been removed from the Scala 2.12 distribution:
- Scala standard library actors.
  We recommend [Akka actors](http://akka.io/) instead.
  See the [Scala actors migration guide](http://docs.scala-lang.org/overviews/core/actors-migration-guide.html).
- Akka actors.
  The Scala distribution and the `scala-library-all` dependency no longer include Akka actors.
  To use Akka, [add it as a dependency](http://doc.akka.io/docs/akka/2.3.11/intro/getting-started.html).
- Continuations plugin.
  ([Community maintainers sought](https://github.com/scala/scala-continuations).)

## Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in mailing lists and other public fora, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges 2.11.x..v2.12.0-M2`, 40 people have contributed to Scala 2.12 so far: Lukas Rytz, Jason Zaugg, A. P. Marki, Rex Kerr, Adriaan Moors, Kato Kazuyoshi, Max Bileschi, Rui Gonçalves, jxcoder, François Garillot, rubyu, Dominik Gruntz, Evgeny Vereshchagin, Kenji Yoshida, Marc Siegel, Masato Sogame, Simon Ochsenreither, Todd Vierling, Viktor Klang, Maks Atygaev, dgruntz, harryhuk, Denton Cockburn, Paolo Giarrusso, Denis Rosset, Roman Hargrave, Antoine Gourlay, Seth Tisue, Shadaj, Alexey Romanov, Steven Scott, Tim Vergenz, martijnhoekstra, Aleksandar Prokopec, Janek Bogucki, Eugene Dzhurinsky, cchantep, Lukas Elmer, Erlend Hamnaberg, Malte Isberner. Thank you!

Thanks also to Miguel Garcia and James Iry for their substantial prior work on the new compiler backend.

## Release notes

You can propose edits to these release notes [on GitHub](https://github.com/scala/make-release-notes/blob/2.12.x/hand-written.md).

## Obtaining Scala

Scala releases are available various ways, such as:

<!-- re-add for 2.12.0 final?
* Get started with the [Hello Scala 2.12 template](https://typesafe.com/activator/template/hello-scala-2_12) in [Typesafe Activator](https://typesafe.com/platform/getstarted)
-->
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.12.0-M2.html)
- Bump the `scalaVersion` setting in your SBT-based project
- Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.12.0-M2%22)
",https://api.github.com/users/SethTisue,161079,SethTisue,https://api.github.com/repos/scala/scala/releases/1542818/assets,https://api.github.com/repos/scala/scala/releases/1542818,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.0-M2,https://github.com/scala/scala/releases/tag/v2.12.0-M2,https://api.github.com/repos/scala/scala/zipball/v2.12.0-M2,v2.12.0-M2,False,True
1446898,2015-06-23T20:53:25Z,2015-06-23T22:28:24Z,Scala 2.11.7,"We are very pleased to announce the availability of Scala 2.11.7!

We would like to highlight the following changes:
- Exhaustivity checking for pattern matching is now much snappier -- thank you @gbasler! ([SI-9181](https://issues.scala-lang.org/browse/SI-9181))
- A 300x more embeddable Scala REPL, brought to you by a team effort with Apache Spark. Thank you @ScrapCodes, @retronym & co! ([#4548](https://github.com/scala/scala/pull/4548), [#4563](https://github.com/scala/scala/pull/4563))
- Scala also &lt;3 INDYs -- experiment with all our favorite new Java 8 features [as follows](https://github.com/scala/make-release-notes/blob/2.11.x/experimental-backend.md) and get an exclusive sneak preview of 2.12.0-M2!
- Oh, and [the spec](http://www.scala-lang.org/files/archive/spec/2.11/) is now much spiffier! Thanks, @soc!

Compared to 2.11.6, this release resolves [53 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20in%20%28%22Scala%202.11.7%22%29%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC).  We [merged 124 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.11.7) (out of 157).  Before upgrading, please also check the [known issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%3Dopen%20AND%20affectedVersion%20%3D%20%22Scala%202.11.7%22%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.7%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC) for this release.

As usual for minor releases, Scala 2.11.7 is binary compatible with other releases in the Scala 2.11 series.

The quarterly release schedule will continue for 2.11.x until the end of this year, and a few more quarters into 2016.

### Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in mailing lists and other public fora, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges v2.11.6..v2.11.7`, 36 people contributed to this minor release: Lukas Rytz, Jason Zaugg, A. P. Marki, Grzegorz Kossakowski, Adriaan Moors, Rex Kerr, Simon Ochsenreither, Antoine Gourlay, Gérard Basler, Zhong Sheng, Kato Kazuyoshi, Michał Pociecha, Janek Bogucki, vsalvis, Prashant Sharma, Daniel Dietrich, Kenji Yoshida, YawarRaza7349, Simon Schäfer, Eugene Burmako, Guillaume Martres, Sean Riggin, Christoph Neijenhuis, Szabolcs Berecz, Bruno Bieth, dumpstate, esfandiar amirrahimi, nafg, swaldman, Alessandro Lacava, Geoffrey Knauth, Jean-Rémi Desjardins, EECOLOR, Niko Vuokko, Cody Allen, RobertZK. Thank you!

### Obtaining Scala

Scala releases are available through a variety of channels, including (but not limited to):
- Get started with the [Hello Scala 2.11 template](https://typesafe.com/activator/template/hello-scala-2_11) in [Typesafe Activator](https://typesafe.com/platform/getstarted)
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.11.7.html)
- Bump the `scalaVersion` setting in your SBT-based project
- Obtain JARs via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.7%22)

### Scala 2.11 Notes

The [release notes for Scala 2.11.1](http://scala-lang.org/news/2.11.1) have important information applicable to the whole 2.11 series, such as:
- Details on new features, important changes and deprecations since Scala 2.10.
- The specification of binary compatibility between minor releases.
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/1446898/assets,https://api.github.com/repos/scala/scala/releases/1446898,2.11.x,https://api.github.com/repos/scala/scala/tarball/v2.11.7,https://github.com/scala/scala/releases/tag/v2.11.7,https://api.github.com/repos/scala/scala/zipball/v2.11.7,v2.11.7,False,False
1258982,2015-05-04T12:16:19Z,2015-05-05T14:03:11Z,Scala 2.12.0-M1,"We are very pleased to announce the release of Scala 2.12.0-M1!
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.12.0-M1.html)
- Obtain it via [Maven Central](http://search.maven.org/?search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.0%22#search%7Cga%7C1%7Cg%3Aorg.scala-lang%20AND%20v%3A2.12.0-M1)

Code that compiles on 2.11.x without deprecation warnings should compile on 2.12.x (we do not guarantee this for experimental APIs, such as reflection). If not, [please file an issue](https://issues.scala-lang.org).

We are working with the community to ensure availability of the core projects of the Scala 2.12 eco-system. This release is _not_ binary compatible with the 2.11.x series, to allow us to keep improving the Scala standard library.

The Scala 2.12 series targets Java 8. Programs written in Scala 2.12, including the Scala 2.12 compiler, can only be executed on Java 8 or newer. Note that the current milestone release (2.12.0-M1) still targets Java 6.

### New Features in the 2.12 Series

Scala 2.12 contains all of the bug fixes and improvements made in the 2.11 series.

At the current stage in the milestone cycle, Scala 2.12 is still very similar to Scala 2.11.

The following changes are planned for Scala 2.12:
- Java 8 style closures.
  The Scala compiler will emit closure classes (lambdas) in the same manner as Java 8.
  The design notes for this feature are available in [this gist](https://gist.github.com/retronym/0178c212e4bacffed568).
- Lambda syntax for SAM types.
  Similar to Java 8, Scala 2.12 allows instantiating any type with one single abstract method by passing a lambda.
  This feature is already avalable in Scala 2.11 using the `-Xexperimental` compiler option.
  It improves the experience of using libraries written for Java 8 in Scala.
- New backend and optimizer.
  The ""GenBCode"" backend, which is already available in Scala 2.11 using the `-Ybackend:GenBCode` compiler option, will be enabled by default.
  Scala 2.12 will also ship with a new inliner and bytecode optimizer.
  We keep track of issues and work items for the new optimizer on the [scala-opt repostiory issue tracker](https://github.com/scala-opt/scala/issues).

The above list is incomplete and will be extendend during the Scala 2.12 milestone cycle.

Up the current milestone, the Scala team and contributors [fixed 47 bugs](https://issues.scala-lang.org/browse/SI-9200?jql=project%20%3D%20SI%20and%20fixVersion%20%3E%3D%20%222.12.0-M1%22%20and%20fixVersion%20%3C%3D%20%222.12.0%22%20and%20resolution%20%3D%20fixed) that are exclusive to Scala 2.12.0. During the development cycle of Scala 2.12, we will continue to backport issues to 2.11 whenever feasible. With the release of 2.12.0, backports to 2.11 will be dialed back.

#### Removed Modules

The following modules have been removed from the Scala 2.12 distribution:
- The Scala actors library is no longer released with Scala 2.12.
  We recommend that you use the [Akka actors library](http://akka.io/) instead.
  To migrate your code, follow the [Scala actors migration guide](http://docs.scala-lang.org/overviews/core/actors-migration-guide.html) before upgrading your project to Scala 2.12.
- The Scala distribution archives and the `scala-library-all` maven dependency no longer inlcude Akka actors.
  To use the Akka actors library, add it to your project [as a dependency](http://doc.akka.io/docs/akka/2.3.10/intro/getting-started.html).
- The continuations plugin is no longer shipped with the Scala 2.12 distribution.

#### Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in mailing lists and other public fora, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges 2.11.x..v2.12.0-M1`, 33 people contributed to this major release: Jason Zaugg, Lukas Rytz, A. P. Marki, Rex Kerr, Kato Kazuyoshi, Max Bileschi, jxcoder, François Garillot, rubyu, Adriaan Moors, Dominik Gruntz, Evgeny Vereshchagin, Marc Siegel, Masato Sogame, Simon Ochsenreither, Todd Vierling, Viktor Klang, cchantep, Denton Cockburn, Paolo Giarrusso, Denis Rosset, Roman Hargrave, Rui Gonçalves, Shadaj, harryhuk, Steven Scott, Antoine Gourlay, Aleksandar Prokopec, Lukas Elmer, Erlend Hamnaberg, Maks Atygaev, Malte Isberner, dgruntz. Thank you!

These release notes are [hosted on GitHub](https://github.com/scala/make-release-notes/blob/2.12.x/hand-written.md) and are continuously updated during the Scala 2.12.0 release cycle. You are kindly invited to contribute!

### Reporting Bugs

Please file any bugs you encounter on [our issue tracker](https://issues.scala-lang.org). If you're unsure whether something is a bug, please contact the [scala-user](https://groups.google.com/forum/?fromgroups#!forum/scala-user) mailing list. Before creating a new issue, search search the issue tracker to see if your bug has already been reported.

### Scala IDE for Eclipse

A release of the Scala IDE for Eclipse for Scala 2.12 will be available together with the release.

Note that for the current milestone (2.12.0-M1), the Scala IDE is not yet available.

### Available Projects

Please refer to the list of [libraries and frameworks available for Scala 2.12](https://github.com/scala/make-release-notes/blob/2.12.x/projects-2.12.md).

### Binary Compatibility

Since Sala 2.11, minor releases of Scala are binary compatible. Scala 2.12 continues this tradition: every 2.12.x release will be binary compatible with 2.12.0. Note that milestone releases and release candidates are **not** binary compatible with any other release.

#### Definition

When two versions of Scala are binary compatible, it is safe to compile your project on one Scala version and link against another Scala version at run time. Safe run-time linkage (only!) means that the JVM does not throw a (subclass of) [`LinkageError`](http://docs.oracle.com/javase/7/docs/api/java/lang/LinkageError.html) when executing your program in the mixed scenario, assuming that none arise when compiling and running on the same version of Scala. Concretely, this means you may have external dependencies on your run-time classpath that use a different version of Scala than the one you're compiling with, as long as they're binary compatibile. In other words, separate compilation on different binary compatible versions does not introduce problems compared to compiling and running everything on the same version of Scala.

We check binary compatibility automatically with [MiMa](https://github.com/typesafehub/migration-manager).

#### Forwards and Back

We distinguish forwards and backwards compatibility (think of these as properties of a sequence of versions, not of an individual version). Maintaining backwards compatibility means code compiled on an older version will link with code compiled with newer ones. Forwards compatibility allows you to compile on new versions and run on older ones.

Thus, backwards compatibility precludes the removal of (non-private) methods, as older versions could call them, not knowing they would be removed, whereas forwards compatibility disallows adding new (non-private) methods, because newer programs may come to depend on them, which would prevent them from running on older versions (private methods are exempted here as well, as their definition and call sites must be in the same compilation unit).

#### Meta

Note that so far we've only talked about the jars generated by scalac for the standard library and reflection.
Our policies do not extend to the meta-issue: ensuring binary compatibility for bytecode generated from identical sources, by different version of scalac? (The same problem exists for compiling on different JDKs.) While we strive to achieve this, it's not something we can test in general. Notable examples where we know meta-binary compatibility is hard to achieve: specialisation and the optimizer.

In short, if binary compatibility of your library is important to you, use [MiMa](https://github.com/typesafehub/migration-manager) to verify compatibility before releasing. Compiling identical sources with different versions of the Scala compiler (or on different JVM versions!) could result in binary incompatible bytecode. This is rare, and we try to avoid it, but we can't guarantee it will never happen.

#### Concretely

We guarantee forwards and backwards compatibility of the `""org.scala-lang"" % ""scala-library"" % ""2.12.x""` and `""org.scala-lang"" % ""scala-reflect"" % ""2.12.x""` artifacts, except for anything under the `scala.reflect.internal` package, as scala-reflect is still experimental. We also strongly discourage relying on the stability of `scala.concurrent.impl` and `scala.reflect.runtime`, though we will only break compatibility for severe bugs here.
",https://api.github.com/users/lrytz,119636,lrytz,https://api.github.com/repos/scala/scala/releases/1258982/assets,https://api.github.com/repos/scala/scala/releases/1258982,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.12.0-M1,https://github.com/scala/scala/releases/tag/v2.12.0-M1,https://api.github.com/repos/scala/scala/zipball/v2.12.0-M1,v2.12.0-M1,False,True
1015455,2015-03-05T00:14:31Z,2015-03-05T02:05:40Z,The Last 2.10.x Release: 2.10.5,"With pride and a pang of nostalgia, we announce the availability of Scala 2.10.5 -- the last release in the 2.10.x series.

We'd like to encourage you to upgrade to 2.11.6 as soon as possible. (Please note that this announcement does not affect Typesafe's commercial support offering.)

Scala 2.10.5 is the final maintenance release in this series, and is binary compatible with previous releases in the Scala 2.10 series. We would like to highlight the following change:
- We [fixed a cross-site scripting vulnerability](https://github.com/scala/scala/pull/4351) in Scaladoc's JavaScript. Many thanks to @todesking for discovering this, suggesting a fix, and for delaying disclosure until this release! This bug could be used to access sensitive information on sites hosted on the same domain as Scaladoc-generated documentation. All previous versions of Scaladoc are affected (Scala 2.11.6 includes the fix as well). We do recommend, as a general precaution, to host Scaladoc documentation on its own domain.

Compared to 2.10.4, this release resolves [10 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20in%20%28%22Scala%202.10.5%22%29%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC). Out of 23, we [merged 18 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.10.5). Before upgrading, please also check the [known issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%3Dopen%20AND%20affectedVersion%20%3D%20%22Scala%202.10.5%22%20and%20fixVersion%20%3E%3D%20%22Scala%202.10.5%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC) for this release.

### Scala IDE

The current release of Scala IDE supports any 2.10.x release, and is available on the [download site](http://scala-ide.org/download/sdk.html).

### Changes since 2.10.4

#### Library
- [SI-7710](https://issues.scala-lang.org/browse/SI-7710) fix memory performance of RegexParsers in jdk7u6+  ([fceae7084c](https://github.com/scala/scala/commit/fceae7084c))
- [SI-8589](https://issues.scala-lang.org/browse/SI-8589) Performance improvement for ArrayCharSequence.toString  ([099a426dd6](https://github.com/scala/scala/commit/099a426dd6))
- [SI-8689](https://issues.scala-lang.org/browse/SI-8689) Avoid internal error in Promise after sequence of completions  ([bf20737faa](https://github.com/scala/scala/commit/bf20737faa))
- [SI-8787](https://issues.scala-lang.org/browse/SI-8787) Backport Regex doc  ([887622759d](https://github.com/scala/scala/commit/887622759d))

#### XML Support
- [SI-4339](https://issues.scala-lang.org/browse/SI-4339) Event errors and attribute fix ([fe7867f8a7](https://github.com/scala/scala/commit/fe7867f8a7))
- [SI-9027](https://issues.scala-lang.org/browse/SI-9027) xml parser fix ([736293ab09](https://github.com/scala/scala/commit/736293ab09))
- [SI-9060](https://issues.scala-lang.org/browse/SI-9060) Backpatch fifth-edition names ([b4e3becbf3](https://github.com/scala/scala/commit/b4e3becbf3))

#### Compiler
- [SI-7753](https://issues.scala-lang.org/browse/SI-7753) substitution broken for dependent types ([2f5ff595fd](https://github.com/scala/scala/commit/2f5ff595fd))
- [SI-7756](https://issues.scala-lang.org/browse/SI-7756) Uncripple refchecks in case bodies ([0022dccfde](https://github.com/scala/scala/commit/0022dccfde))
- [SI-8442](https://issues.scala-lang.org/browse/SI-8442) Ignore stub annotation symbols in `AnnotationInfo#matches` ([8262ed2fc6](https://github.com/scala/scala/commit/8262ed2fc6))
- [SI-8596](https://issues.scala-lang.org/browse/SI-8596) Fix rangepos crasher with defaults, poly methods ([d288790429](https://github.com/scala/scala/commit/d288790429))

#### Scaladoc
- [SI-8479](https://issues.scala-lang.org/browse/SI-8479) Fix constructor default args under scaladoc ([c4561c1d49](https://github.com/scala/scala/commit/c4561c1d49))
- Scaladoc js location synch more robust ([f95b5b9b80](https://github.com/scala/scala/commit/f95b5b9b80))

#### Macros/Reflection
- [SI-7470](https://issues.scala-lang.org/browse/SI-7470) implements fundep materialization ([0c5dd9e02f](https://github.com/scala/scala/commit/0c5dd9e02f))
- [SI-8196](https://issues.scala-lang.org/browse/SI-8196) Runtime reflection robustness for STATIC impl details ([7b72f95a9e](https://github.com/scala/scala/commit/7b72f95a9e))
- -Xfundep-materialization => -Yfundep-materialization ([5966a11ae1](https://github.com/scala/scala/commit/5966a11ae1))
- transformers no longer ignore UnApply.fun ([36379cf8af](https://github.com/scala/scala/commit/36379cf8af))
- no longer warns on calls to vampire macros ([db300d4d9e](https://github.com/scala/scala/commit/db300d4d9e))
- typecheck(q""class C"") no longer crashes ([3314d76ceb](https://github.com/scala/scala/commit/3314d76ceb))

### Release Notes for the Scala 2.10 Series

The release notes for the Scala 2.10 series, which also apply to the current minor release, are available in the [release notes for Scala 2.10.4](http://scala-lang.org/news/2.10.4). They contain important information such as:
- The specification of binary compatibility between minor releases.
- Details on new features, important changes and deprecations in Scala 2.10.

### Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in mailing lists and other public fora, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges v2.10.4..v2.10.5`, the following people contributed to this minor release:
Jason Zaugg, Eugene Burmako, A. P. Marki, Adriaan Moors, Grzegorz Kossakowski, Antoine Gourlay, Jeroen ter Voorde, Kato Kazuyoshi, Miles Sabin, and Viktor Klang. Thank you!
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/1015455/assets,https://api.github.com/repos/scala/scala/releases/1015455,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.10.5,https://github.com/scala/scala/releases/tag/v2.10.5,https://api.github.com/repos/scala/scala/zipball/v2.10.5,v2.10.5,False,False
1015399,2015-03-02T19:46:37Z,2015-03-05T01:29:49Z,Scala 2.11.6 is now available!,"We are very pleased to announce the availability of Scala 2.11.6!
- Get started with the [Hello Scala 2.11 template](https://typesafe.com/activator/template/hello-scala-2_11) in [Typesafe Activator](https://typesafe.com/platform/getstarted)
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.11.6.html)
- Obtain it via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.6%22)

Scala 2.11.6 is a bugfix release that is binary compatible with previous releases in the Scala 2.11 series. We would like to highlight the following changes:
- We [fixed a cross-site scripting vulnerability](https://github.com/scala/scala/pull/4350) in Scaladoc's JavaScript. Many thanks to @todesking for discovering this, suggesting a fix, and for delaying disclosure until this release! This bug could be used to access sensitive information on sites hosted on the same domain as Scaladoc-generated documentation. All previous versions of Scaladoc are affected (Scala 2.10.5 includes the fix as well). We do recommend, as a general precaution, to host Scaladoc documentation on its own domain.
- [SI-9089](https://issues.scala-lang.org/browse/SI-9089) repl is now much less crash-and-burny when calling a function (which turns out to be a common thing people do in a REPL). Also, apologies to the author of [SI-9022](https://issues.scala-lang.org/browse/SI-9022), who [reported this before the bug was discovered and you had to wait in line for like three hours on a Tuesday afternoon](https://issues.scala-lang.org/browse/SI-9022#comment-71996). Or, maybe, that honor should go to the enigmatic [dk14](http://stackoverflow.com/questions/27213616/why-specialized-annotation-doesnt-work-for-asinstanceof/27221875).
- [SI-8759](https://issues.scala-lang.org/browse/SI-8759) no need to enter almost half the konami code to enter a right square bracket in the REPL (via [jline 2.12.1](https://github.com/jline/jline2/pull/175)). Thank you for implementing the jline fix, @michael72, and kudos to @jdillon and @trptcolin for cutting a new jline release just for us!

Compared to 2.11.5, this release resolves [38 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20in%20%28%22Scala%202.11.6%22%29%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC). Out of 100, we [merged 58 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.11.6). Before upgrading, please also check the [known issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%3Dopen%20AND%20affectedVersion%20%3D%20%22Scala%202.11.6%22%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.6%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC) for this release.

In 2015, 2.11 minor releases will be released quarterly, or sooner if prompted by a serious issue.

### Scala IDE

The current release of Scala IDE includes Scala 2.11.6 is available on the [download site](http://scala-ide.org/download/sdk.html) (or as an update to version 4.0 of the plugin).

### Available Libraries and Frameworks

A large number of Scala projects have been released against Scala 2.11. Please refer to the list of [libraries and frameworks available for Scala 2.11](https://github.com/scala/make-release-notes/blob/2.11.x/projects-2.11.md).

### Reminder: Do Not Use Scala 2.11.3

Due to a [binary incompatibility](https://issues.scala-lang.org/browse/SI-8899) in Scala 2.11.3, we recommend upgrading to Scala 2.11.6, which resolves the incompatibility, as well as another [blocker issue](https://issues.scala-lang.org/browse/SI-8900) that was discovered in the days after the 2.11.3 release.

We have [analyzed](https://groups.google.com/d/msg/scala-internals/SSD9BNJaFbU/rACBkHrs2JEJ) the mistakes that lead to the breakage (human error), and are taking measures to prevent this from happening again. We apologize for the inconvenience, and thank everyone who was involved in reporting and diagnosing these critical issues.

### Release Notes for the Scala 2.11 Series

The release notes for the Scala 2.11 series, which also apply to the current minor release, are available in the [release notes for Scala 2.11.1](http://scala-lang.org/news/2.11.1). They contain important information such as:
- The specification of binary compatibility between minor releases.
- Details on new features, important changes and deprecations in Scala 2.11.

### Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, spreading kindness in mailing lists and other public fora, and submitting and reviewing pull requests! You are all magnificent.

According to `git shortlog -sn --no-merges v2.11.5..v2.11.6`, 25 people contributed to this minor release:
Jason Zaugg, Adriaan Moors, Lukas Rytz, A. P. Marki, Denton Cockburn, Rex Kerr, mpociecha, Aleksandar Prokopec, Jan Bessai, Eugene Burmako, JustinPihony, Kornel Kielczewski, Krzysztof Romanowski, Eric Peters, Lyle Kopnicky, Mark Zitnik, Michael Pigg, Miles Sabin, BartekJanota, Simon Ochsenreither, Sébastien Doeraene, Viktor Klang, dickwall, jhegedus42, and Ikumi Shimizu. Thank you!
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/1015399/assets,https://api.github.com/repos/scala/scala/releases/1015399,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.6,https://github.com/scala/scala/releases/tag/v2.11.6,https://api.github.com/repos/scala/scala/zipball/v2.11.6,v2.11.6,False,False
852063,2015-01-08T02:14:35Z,2015-01-14T18:44:09Z,Scala 2.11.5 is now available!,"We are very pleased to announce the release of Scala 2.11.5!
- Get started with the [Hello Scala 2.11 template](https://typesafe.com/activator/template/hello-scala-2_11) in [Typesafe Activator](https://typesafe.com/platform/getstarted)
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.11.5.html)
- Obtain it via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.5%22)

Scala 2.11.5 is a bugfix release that is binary compatible with previous releases in the Scala 2.11 series. We would like to highlight the following changes:
- @heathermiller's [SI-6502 Reenables loading jars into the running REPL](https://github.com/scala/scala/pull/4051)
- @mpociecha's [The alternative, flat representation of classpath elements](https://github.com/scala/scala/pull/4176)
- @gbasler's [Avoid the 'CNF budget exceeded' exception via smarter translation into CNF](https://github.com/scala/scala/pull/4078)
- @adriaanm's [SAMmy: eta-expansion, overloading, existentials](https://github.com/scala/scala/pull/4101)
- A great number of documentation improvements -- thank you (and, to those appearing for the first time in our release notes, welcome!): @kanielc, @lymia, @stevegury, @vigdorchik, @gourlaysama, @ichoran, @retronym, @xuwei-k, @dickwall, @phaller.

Compared to 2.11.4, this release resolves [74 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20in%20%28%22Scala%202.11.5%22%29%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC). Out of 132, we [merged 110 pull requests](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.11.5). Before upgrading, please also check the [known issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20status%3Dopen%20AND%20affectedVersion%20%3D%20%22Scala%202.11.5%22%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.5%22%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC) for this release.

In 2015, 2.11 minor releases will be released quarterly, or sooner if prompted by a serious issue.

### Scala IDE

The current release of Scala IDE includes Scala 2.11.5 is available on the [download site](http://scala-ide.org/download/sdk.html) (or as an update to version 4.0 of the plugin).

### Available Libraries and Frameworks

A large number of Scala projects have been released against Scala 2.11. Please refer to the list of [libraries and frameworks available for Scala 2.11](https://github.com/scala/make-release-notes/blob/2.11.x/projects-2.11.md).

### Reminder: Do Not Use Scala 2.11.3

Due to a [binary incompatibility](https://issues.scala-lang.org/browse/SI-8899) in Scala 2.11.3, we recommend upgrading to Scala 2.11.5, which resolves the incompatibility, as well as another [blocker issue](https://issues.scala-lang.org/browse/SI-8900) that was discovered in the days after the 2.11.3 release.

We have [analyzed](https://groups.google.com/d/msg/scala-internals/SSD9BNJaFbU/rACBkHrs2JEJ) the mistakes that lead to the breakage (human error), and are taking measures to prevent this from happening again. We apologize for the inconvenience, and thank everyone who was involved in reporting and diagnosing these critical issues.

### Release Notes for the Scala 2.11 Series

The release notes for the Scala 2.11 series, which also apply to the current minor release, are available in the [release notes for Scala 2.11.1](http://scala-lang.org/news/2.11.1). They contain important information such as:
- The specification of binary compatibility between minor releases.
- Details on new features, important changes and deprecations in Scala 2.11.

### Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, participating in mailing lists and other public fora, and submitting and reviewing pull requests! You are all awesome.

According to `git shortlog -sn --no-merges v2.11.4..v2.11.5`, 30 people contributed to this minor release:
Jason Zaugg, Lukas Rytz, Michał Pociecha, A. P. Marki, Antoine Gourlay, Heather Miller, Adriaan Moors, Rex Kerr, Simon Ochsenreither, Gerard Basler, Denton Cockburn, Kenji Yoshida, Ye Xianjin, Guy Dickinson, Jean-Remi Desjardins, Alissa Rao, Lukasz Piepiora, Maxim Valyanskiy, Paolo Giarrusso, Philipp Haller, Rafał Krzewski, Eugene Vigdorchik, Rui Gonçalves, Erik Erlandson, Steve Gury, Teemu Lehtinen, Tim Harper, Dick Wall, Guillaume Martres, Grzegorz Kossakowski.
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/852063/assets,https://api.github.com/repos/scala/scala/releases/852063,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.5,https://github.com/scala/scala/releases/tag/v2.11.5,https://api.github.com/repos/scala/scala/zipball/v2.11.5,v2.11.5,False,False
668235,2014-10-27T17:39:32Z,2014-10-31T11:44:26Z,Scala 2.11.4,"We are very pleased to announce the release of Scala 2.11.4!
- Get started with the [Hello Scala 2.11 template](https://typesafe.com/activator/template/hello-scala-2_11) in [Typesafe Activator](https://typesafe.com/platform/getstarted)
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.11.4.html)
- Obtain it via [Maven Central](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.4%22)

Scala 2.11.4 is a bugfix release that is binary compatible with previous releases in the Scala 2.11 series.
The changes include:
- Scala shell (REPL) is more friendly to Crtl+D. It leaves your terminal in a clean state and suggests using `:quit` the next
  time (see [#3902](https://github.com/scala/scala/pull/3902). Kudos to [@gourlaysama](https://github.com/gourlaysama)!
- REPL uses different colors when printing references to vals and types. Pass `-Dscala.color` to enable that behavior (see [#3993](https://github.com/scala/scala/pull/3993)). Thanks to [@puffnfresh](https://github.com/puffnfresh)!
- [The Scala specification](http://www.scala-lang.org/files/archive/spec/2.11/) received a fair amount of love and became much more beatiful.  It has got syntax highlighting ([#3984](https://github.com/scala/scala/pull/3984)), linkable headers, and a side bar with TOC ([#3996](https://github.com/scala/scala/pull/3996)). A few final touches has been merged that fix typos and mistakes stemming from automatic Latex to Markdown conversion we've done a while ago. Thanks attention for details [@gourlaysama](https://github.com/gourlaysama), [@som-snytt](https://github.com/som-snytt) and [roberthoedicke](https://github.com/roberthoedicke)!
- Non-deterministic pattern matching warnings has been fixed ([SI-7746](https://issues.scala-lang.org/browse/SI-7746)). Many thanks to [@gbasler](https://github.com/gbasler) for diving deep ([#3954](https://github.com/scala/scala/pull/3954])) into logical formulas constructed by our pattern matcher implementation!

Compared to 2.11.2, this release resolves [54 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20in%20%28%22Scala%202.11.3%22%2C%20%22Scala%202.11.4%22%29%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC). Out of 120, we merged 95 pull requests: [90 for 2.11.3](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.11.3), and [5 for 2.11.4](https://github.com/scala/scala/pulls?q=is%3Apr+is%3Amerged+milestone%3A2.11.4).

The next minor Scala 2.11 release will be available before the end of the year, or sooner if prompted by a serious issue.

### Do Not Use Scala 2.11.3

Due to a [binary incompatibility](https://issues.scala-lang.org/browse/SI-8899) in Scala 2.11.3, we recommend upgrading to Scala 2.11.4, which resolves the incompatibility, as well as another [blocker issue](https://issues.scala-lang.org/browse/SI-8900) that was discovered in the days after the 2.11.3 release.

We have [analyzed](https://groups.google.com/d/msg/scala-internals/SSD9BNJaFbU/rACBkHrs2JEJ) the mistakes that lead to the breakage (human error), and are taking measures to prevent this from happening again. We apologize for the inconvenience, and thank everyone who was involved in reporting and diagnosing these critical issues.

### Available Libraries and Frameworks

A large number of Scala projects have been released against Scala 2.11. Please refer to the list of [libraries and frameworks available for Scala 2.11](https://github.com/scala/make-release-notes/blob/2.11.x/projects-2.11.md).

A release of the Scala IDE that includes Scala 2.11.4 is available [on their download site](http://scala-ide.org/download/milestone.html).

### Release Notes for the Scala 2.11 Series

The release notes for the Scala 2.11 series, which also apply to the current minor release, are available in the [release notes for Scala 2.11.1](http://scala-lang.org/news/2.11.1). They contain important information such as:
- The specification of binary compatibility between minor releases.
- Details on new features, important changes and deprecations in Scala 2.11.

### Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, participating in mailing lists and other public fora, and submitting and reviewing pull requests! You are all awesome.

According to `git shortlog -sn --no-merges v2.11.2..v2.11.4`, 35 people contributed to this minor release:
Lukas Rytz, Adriaan Moors, Antoine Gourlay, A. P. Marki, Jason Zaugg, Robert Hoedicke, Eugene Burmako, Rex Kerr, Max Bileschi, Brian McKenna, Grzegorz Kossakowski, Maks Atygaev, Evgeny Vereshchagin, Simon Ochsenreither, Dominik Gruntz, Masato Sogame, Gerard Basler, Dan Garrette, Artem Stasuk, David Turner, Iulian Dragos, Jeroen ter Voorde, Kato Kazuyoshi, Konstantin Fedorov, Krystian Nowak, Lukas Elmer, Malte Isberner, Paolo Giarrusso, Paweł Wiejacha, Robert Hoedicke, dgruntz, Roman Janusz, harryhuk, Michał Pociecha.
",https://api.github.com/users/gkossakowski,4217,gkossakowski,https://api.github.com/repos/scala/scala/releases/668235/assets,https://api.github.com/repos/scala/scala/releases/668235,2.11.x,https://api.github.com/repos/scala/scala/tarball/v2.11.4,https://github.com/scala/scala/releases/tag/v2.11.4,https://api.github.com/repos/scala/scala/zipball/v2.11.4,v2.11.4,False,False
446167,2014-07-22T17:23:34Z,2014-07-23T13:27:59Z,Scala 2.11.2,"We are very pleased to announce the release of Scala 2.11.2!
- Get started with the [Hello Scala 2.11 template](https://typesafe.com/activator/template/hello-scala-2_11) in [Typesafe Activator](https://typesafe.com/platform/getstarted)
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.11.2.html)
- Obtain it via [Maven Central](http://search.maven.org/?search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.2%22#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.2%22)

Scala 2.11.2 is a bugfix release that is binary compatible with previous releases in the Scala 2.11 series.
The changes include:
- Several [issues in the collections library](https://issues.scala-lang.org/browse/SI-8738?jql=project%20%3D%20SI%20AND%20resolution%20%3D%20Fixed%20AND%20fixVersion%20%3D%20%22Scala%202.11.2%22%20AND%20component%20%3D%20Collections%20ORDER%20BY%20priority%20DESC) were resolved, most notably equality on ranges ([SI-8738](https://issues.scala-lang.org/browse/SI-8738)).
- The optimizer no longer eliminates division instructions that may throw an `ArithmeticException` ([SI-7607](https://issues.scala-lang.org/browse/SI-7607)).
- The `-Xlint` compiler flag is now parameterized by individual warnings. This is intended to replace the `-Ywarn-...` options, for instance, `-Xlint:nullary-unit` is equivalent to `-Ywarn-nullary-unit`. Run `scalac -Xlint:help` to see all available options. Kudos to [@som-snytt](https://github.com/som-snytt)!
- TypeTags and Exprs are now serializable ([SI-5919](https://issues.scala-lang.org/browse/SI-5919)).

Compared to 2.11.1, this release resolves [49 issues](https://issues.scala-lang.org/browse/SI-8738?jql=project%20%3D%20SI%20AND%20fixVersion%20%3D%20%22Scala%202.11.2%22%20AND%20resolution%20%3D%20fixed%20ORDER%20BY%20component%20ASC%2C%20priority%20DESC). We reviewed and merged [70 pull requests](https://github.com/scala/scala/issues?milestone=38&state=closed).

The next minor Scala 2.11 release will be available in 2 months, or sooner if prompted by a serious issue.

### Available Libraries and Frameworks

A large number of Scala projects have been released against Scala 2.11. Please refer to the list of [libraries and frameworks available for Scala 2.11](https://github.com/scala/make-release-notes/blob/2.11.x/projects-2.11.md).

A release of the Scala IDE that includes Scala 2.11.2 will be available shortly [on their download site](http://scala-ide.org/download/sdk.html).

### Release Notes for the Scala 2.11 Series

The release notes for the Scala 2.11 series, which also apply to the current minor release, are available in the [release notes for Scala 2.11.1](http://scala-lang.org/news/2.11.1). They contain important information such as:
- The specification of binary compatibility between minor releases.
- Details on new features, important changes and deprecations in Scala 2.11.

### Contributors

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, participating in mailing lists and other public fora, and submitting and reviewing pull requests!
You are all awesome.

According to `git shortlog -sn --no-merges v2.11.1..v2.11.2`, 21 people contributed code to this minor release:
Jason Zaugg, A. P. Marki, Lukas Rytz, Adriaan Moors, Rex Kerr, Eugene Burmako, Antoine Gourlay, Tobias Roeser, Denys Shabalin, Philipp Haller, Chris Hodapp, Todd Vierling, Vladimir Nikolaev, François Garillot, Jean-Remi Desjardins, Johannes Rudolph, Marcin Kubala, Martin Odersky, Paolo Giarrusso, Rui Gonçalves, Stephen Compall.
",https://api.github.com/users/lrytz,119636,lrytz,https://api.github.com/repos/scala/scala/releases/446167/assets,https://api.github.com/repos/scala/scala/releases/446167,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.2,https://github.com/scala/scala/releases/tag/v2.11.2,https://api.github.com/repos/scala/scala/zipball/v2.11.2,v2.11.2,False,False
332625,2014-05-20T08:32:30Z,2014-05-21T14:20:30Z,Scala 2.11.1 is now available!,"- Get started with the [Hello Scala 2.11 template](https://typesafe.com/activator/template/hello-scala-2_11) in [Typesafe Activator](https://typesafe.com/platform/getstarted)
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.11.1.html)
- Obtain it via [Maven Central](http://search.maven.org/?search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.1%22#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.1%22)

This release contains [an important fix](https://github.com/scala/scala/pull/3711) for serialization, which was broken in Scala 2.11.0 ([SI-8549](https://issues.scala-lang.org/browse/SI-8549)).
The fix necessarily breaks serialization compatibility between 2.11.0 and 2.11.1 (this is separate from binary compatibility, which is maintained).

Users of distributed systems that rely on serialization to exchange objects (such as akka) should upgrade to Scala 2.11.1 (and akka 2.3.3) immediately.
We also strongly recommend that libraries that themselves declare classes with [@SerialVersionUID](http://www.scala-lang.org/api/2.11.1/index.html#scala.SerialVersionUID) annotations release a new version and ask their Scala 2.11 users to upgrade.

We apologize for the breakage. We have included a new suite of tests that will ensure stability of serialization for the remainder of the 2.11.x series.

<!--break-->

Compared to 2.11.0, this release fixes [26 issues](https://issues.scala-lang.org/browse/SI-8549?jql=project%20%3D%20SI%20AND%20fixVersion%20%3D%20%22Scala%202.11.1%22%20AND%20resolution%20%3D%20fixed%20ORDER%20BY%20priority%20DESC). We reviewed and merged [51 pull requests](https://github.com/scala/scala/issues?milestone=34&state=closed).

The next minor Scala 2.11 release will be available in at most 2 months, or sooner if prompted by a serious issue.

The remainder of these release notes summarizes the 2.11.x series, and as such is not specific to this minor release.

### Upgrading

Code that compiled on 2.10.x without deprecation warnings should compile on 2.11.x (we do not guarantee this for experimental APIs, such as reflection). If not, [please file a regression](https://issues.scala-lang.org/secure/CreateIssueDetails!init.jspa?pid=10005&issuetype=1&versions=11808&labels=regression). We are working with the community to ensure availability of the core projects of the Scala 2.11.x eco-system, please see below for a list. This release is _not_ binary compatible with the 2.10.x series, to allow us to keep improving the Scala standard library.

### Required Java Version

The Scala 2.11.x series targets Java 6, with (evolving) experimental support for Java 8. In 2.11.1, Java 8 support is mostly limited to reading Java 8 bytecode and parsing Java 8 source. Stay tuned for more complete (experimental) Java 8 support. The next major release, 2.12, will most likely target Java 8 by default.

### New features in the 2.11 series

This release contains all of the bug fixes and improvements made in the 2.10 series, as well as:
- Collections
  - Immutable `HashMap`s and `HashSet`s perform faster filters, unions, and the like, with improved structural sharing (lower memory usage or churn).
  - Mutable `LongMap` and `AnyRefMap` have been added to provide improved performance when keys are `Long` or `AnyRef` (performance enhancement of up to 4x or 2x respectively).
  - `BigDecimal` is more explicit about rounding and numeric representations, and better handles very large values without exhausting memory (by avoiding unnecessary conversions to `BigInt`).
  - `List` has improved performance on `map`, `flatMap`, and `collect`.
  - See also Deprecation above: we have slated many classes and methods to become final, to clarify which classes are not meant to be subclassed and to facilitate future maintenance and performance improvements.
- Modularization
  - The core Scala standard library jar has shed 20% of its bytecode. The modules for xml, parsing, swing as well as the (unsupported) continuations plugin and library are available individually or via [scala-library-all](http://search.maven.org/#artifactdetails%7Corg.scala-lang%7Cscala-library-all%7C2.11.1%7Cpom). Note that this artifact has weaker binary compatibility guarantees than `scala-library` -- as explained above.
  - The compiler has been modularized internally, to separate the presentation compiler, scaladoc and the REPL. We hope this will make it easier to contribute. In this release, all of these modules are still packaged in scala-compiler.jar. We plan to ship them in separate JARs in 2.12.x.
- Reflection, macros and quasiquotes
  - Please see [this detailed changelog](http://docs.scala-lang.org/overviews/macros/changelog211.html) that lists all significant changes and provides advice on forward and backward compatibility.
  - See also this [summary](http://scalamacros.org/news/index.html) of the experimental side of the 2.11 development cycle.
  - [#3321](https://github.com/scala/scala/pull/3321) introduced [Sprinter](http://vladimirnik.github.io/sprinter/), a new AST pretty-printing library! Very useful for tools that deal with source code.
- Back-end
  - The [GenBCode back-end](https://github.com/scala/scala/pull/2620) (experimental in 2.11). See [@magarciaepfl's extensive documentation](http://magarciaepfl.github.io/scala/).
  - A new experimental way of compiling closures, implemented by [@JamesIry](https://github.com/JamesIry). With `-Ydelambdafy:method` anonymous functions are compiled faster, with a smaller bytecode footprint. This works by keeping the function body as a private (static, if no `this` reference is needed) method of the enclosing class, and at the last moment during compilation emitting a small anonymous class that `extends FunctionN` and delegates to it. This sets the scene for a smooth migration to Java 8-style lambdas (not yet implemented).
  - Branch elimination through constant analysis [#2214](https://github.com/scala/scala/pull/2214)
  - [Scala.js](http://www.scala-js.org/), a separate project, provides an experimental JavaScript back-end for Scala 2.11. Note that it is not part of the standard Scala distribution.
  - Be more [Avian](http://oss.readytalk.com/avian/)\- [friendly](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.0-M1%22%20and%20fixVersion%20%3C%3D%20%22Scala%202.11.1%22%20and%20resolution%20%3D%20fixed%20and%20text%20~%20%22avian%22).
- Compiler Performance
  - Incremental compilation has been improved significantly. To try it out, upgrade to sbt 0.13.2 and add `incOptions := incOptions.value.withNameHashing(true)` to your build! Other build tools are also supported. More info at [this sbt issue](https://github.com/sbt/sbt/issues/1010) -- that's where most of the work happened. More features are planned, e.g. [class-based tracking](https://github.com/sbt/sbt/issues/1104).
  - We've been optimizing the batch compiler's performance as well, and will continue to work on this during the 2.11.x cycle.
  - Improve performance of reflection [SI-6638](https://issues.scala-lang.org/browse/SI-6638)
- The IDE received [numerous bug fixes and improvements!](https://issues.scala-lang.org/browse/SI-8085?jql=component%20%3D%20%22Presentation%20Compiler%22%20AND%20project%20%3D%20SI%20AND%20resolution%20%3D%20fixed%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.0-M1%22%20and%20fixVersion%20%3C%3D%20%20%22Scala%202.11.1%22%20ORDER%20BY%20updated%20DESC)
- REPL
  - The bytecode decompiler command, :javap, now works with Java 7 [SI-4936](https://issues.scala-lang.org/browse/SI-4936) and has sprouted new options [SI-6894](https://issues.scala-lang.org/browse/SI-6894) (Thanks, [@som-snytt](https://github.com/som-snytt)!)
  - Added command :kind to help to tell ground types from type constructors. [#2340](https://github.com/scala/scala/pull/2340) (Thanks, [George Leontiev](https://github.com/folone) and [Eugene Yokota](https://github.com/eed3si9n)!)
  - The interpreter can now be embedded as a JSR-223 Scripting Engine [SI-874](https://issues.scala-lang.org/browse/SI-874). (Thanks, [Raphael Jolly](https://github.com/rjolly)!)
- Improved `-Xlint` warnings
  - Warn about unused private / local terms and types, and unused imports.
  - This will even tell you when a local `var` could be a `val`.
- Slimming down the compiler
  - The experimental .NET backend has been removed from the compiler.
  - Scala 2.10 shipped with new implementations of the Pattern Matcher and the Bytecode Emitter. We have removed the old implementations.
  - Search and destroy mission for ~5000 chunks of dead code. [#1648](https://github.com/scala/scala/pull/1648/files)

The Scala team and contributors [fixed 655 bugs](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20and%20fixVersion%20>%3D%20""Scala%202.11.0-M1""%20and%20fixVersion%20<%3D%20""Scala%202.11.1""%20and%20resolution%20%3D%20fixed) that are exclusive to Scala 2.11! We also backported as many as possible. With the release of 2.11, 2.10 backports will be dialed back.

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, participating in mailing lists and other public fora, and -- of course -- submitting and reviewing pull requests! You are all awesome.

Concretely, according to `git log --no-merges --oneline 2.11.x --not 2.10.x --format='%aN'  | sort | uniq -c | sort -rn`, 115 people contributed code, tests, and/or documentation to Scala 2.11.x: Paul Phillips, Jason Zaugg, Eugene Burmako, Adriaan Moors, A. P. Marki, Simon Ochsenreither, Den Shabalin, Miguel Garcia, James Iry, Iain McGinniss, Grzegorz Kossakowski, Rex Kerr, François Garillot, Vladimir Nikolaev, Eugene Vigdorchik, Lukas Rytz, Mirco Dotta, Rüdiger Klaehn, Antoine Gourlay, Raphael Jolly, Simon Schaefer, Kenji Yoshida, Paolo Giarrusso, Luc Bourlier, Hubert Plociniczak, Aleksandar Prokopec, Vlad Ureche, Lex Spoon, Andrew Phillips, Sébastien Doeraene, Josh Suereth, Jean-Remi Desjardins, Vojin Jovanovic, Viktor Klang, Valerian, Prashant Sharma, Pavel Pavlov, Michael Thorpe, Jan Niehusmann, Iulian Dragos, Heejong Lee, George Leontiev, Daniel C. Sobral, Christoffer Sawicki, yllan, rjfwhite, Volkan Yazıcı, Ruslan Shevchenko, Robin Green, Roberto Tyley, Olivier Blanvillain, Mark Harrah, James Ward, Ilya Maykov, Eugene Yokota, Erik Osheim, Dan Hopkins, Chris Hodapp, Antonio Cunei, Andriy Polishchuk, Alexander Clare, 杨博, srinivasreddy, secwall, nermin, martijnhoekstra, kurnevsky, jinfu-leng, folone, Yaroslav Klymko, Xusen Yin, Trent Ogren, Tobias Schlatter, Thomas Geier, Stuart Golodetz, Stefan Zeiger, Scott Carey, Samy Dindane, Sagie Davidovich, Runar Bjarnason, Roland Kuhn, Robert Nix, Robert Ladstätter, Rike-Benjamin Schuppner, Rajiv, Philipp Haller, Nada Amin, Mike Morearty, Michael Bayne, Marcin Kubala, Luke Cycon, Lee Mighdoll, Konstantin Fedorov, Julio Santos, Julien Richard-Foy, Juha Heljoranta, Johannes Rudolph, Jiawei Li, Jentsch, Jason Swartz, James Roper, Heather Miller, Havoc Pennington, Guillaume Martres, Evgeny Kotelnikov, Dmitry Petrashko, Dmitry Bushev, David Hall, Daniel Darabos, Dan Rosen, Cody Allen, Carlo Dapor, Brian McKenna, Andrey Kutejko, Alden Torres.

Thank you all very much.

If you find any errors or omissions in these relates notes, [please submit a PR](https://github.com/scala/make-release-notes/blob/master/hand-written.md)!

### Reporting Bugs / Known Issues

Please [file any bugs you encounter](https://issues.scala-lang.org/secure/CreateIssueDetails!init.jspa?pid=10005&issuetype=1&versions=11311). If you're unsure whether something is a bug, please contact the [scala-user](https://groups.google.com/forum/?fromgroups#!forum/scala-user) mailing list.

Before reporting a bug, please have a look at these [known issues](https://issues.scala-lang.org/browse/SI-6267?jql=project%20%3D%20SI%20AND%20%28fixVersion%20is%20empty%20or%20fixVersion%20%3E%20%22Scala%202.11.1%22%29%20AND%20affectedVersion%20in%20%28%22Scala%202.11.0%22%2C%20%22Scala%202.11.1%22%29%20%20and%20resolution%20%3D%20unresolved%20ORDER%20BY%20priority%20DESC).

### Scala IDE for Eclipse

The Scala IDE with this release built in is [available from this update site](http://download.scala-ide.org/ecosystem/helium/e38/scala211/stable/site/) for [Eclipse 4.2/4.3 (Juno/Kepler)](http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr2). Please have a look at the [getting started guide](http://scala-ide.org/docs/user/gettingstarted.html) for more info.

### Available projects

The following Scala projects have already been released against 2.11! See also [@jrudolph's analysis](https://gist.github.com/jrudolph/7a323f5e2820d8479b18) of the availability of 2.11 builds of popular libraries (as well as which ones are missing); updated regularly.

We'd love to include your release in this list as soon as it's available -- please submit a PR to update [these release notes](https://github.com/scala/make-release-notes/blob/master/hand-written.md).

```
""org.scalacheck""                   %% ""scalacheck""                % ""1.11.4""
""org.scalatest""                    %% ""scalatest""                 % ""2.1.7""
""org.scalautils""                   %% ""scalautils""                % ""2.1.3""
""com.typesafe.akka""                %% ""akka-actor""                % ""2.3.2""
""com.typesafe.scala-logging""       %% ""scala-logging-slf4j""       % ""2.1.2""
""org.scala-lang.modules""           %% ""scala-async""               % ""0.9.1""
""org.scalikejdbc""                  %% ""scalikejdbc-interpolation"" % ""2.0.0-beta1""
""com.softwaremill.scalamacrodebug"" %% ""macros""                    % ""0.4""
""com.softwaremill.macwire""         %% ""macros""                    % ""0.6""
""com.chuusai""                      %% ""shapeless""                 % ""1.2.4""
""com.chuusai""                      %% ""shapeless""                 % ""2.0.0""
""org.nalloc""                       %% ""optional""                  % ""0.1.0""
""org.scalaz""                       %% ""scalaz-core""               % ""7.0.6""
""com.assembla.scala-incubator""     %% ""graph-core""                % ""1.8.1""
""com.nocandysw""                    %% ""platform-executing""        % ""0.5.0""
""com.qifun""                        %% ""stateless-future""          % ""0.1.1""
""com.github.scopt""                 %% ""scopt""                     % ""3.2.0""
""com.dongxiguo""                    %% ""commons-continuations""     % ""0.2.2""
""com.dongxiguo""                    %% ""memcontinuationed""         % ""0.3.2""
""com.dongxiguo""                    %% ""fastring""                  % ""0.2.4""
""com.dongxiguo""                    %% ""zero-log""                  % ""0.3.5""
""com.github.seratch""               %% ""ltsv4s""                    % ""1.0.0""
""com.googlecode.kiama""             %% ""kiama""                     % ""1.5.3""
""org.scalamock""                    %% ""scalamock-scalatest-support"" % ""3.0.1""
""org.scalamock""                    %% ""scalamock-specs2-support""  % ""3.0.1""
""com.github.nscala-time""           %% ""nscala-time""               % ""1.0.0""
""com.github.xuwei-k""               %% ""applybuilder70""            % ""0.1.2""
""com.github.xuwei-k""               %% ""nobox""                     % ""0.1.9""
""org.typelevel""                    %% ""scodec-bits""               % ""1.0.0""
""org.typelevel""                    %% ""scodec-core""               % ""1.0.0""
""com.sksamuel.scrimage""            %% ""scrimage""                  % ""1.3.20""
""net.databinder""                   %% ""dispatch-http""             % ""0.8.10""
""net.databinder""                   %% ""unfiltered""                % ""0.8.0""
""net.databinder""                   %% ""unfiltered""                % ""0.7.1""
""io.argonaut""                      %% ""argonaut""                  % ""6.0.4""
""org.specs2""                       %% ""specs2""                    % ""2.3.12""
""com.propensive""                   %% ""rapture-core""              % ""0.9.0""
""com.propensive""                   %% ""rapture-json""              % ""0.9.1""
""com.propensive""                   %% ""rapture-io""                % ""0.9.1""
""org.scala-stm""                    %% ""scala-stm""                 % ""0.7""
""org.parboiled""                    %% ""parboiled-scala""           % ""1.1.6""
""io.spray""                         %% ""spray-json""                % ""1.2.6""
""org.scala-libs""                   %% ""scalajpa""                  % ""1.5""
""com.casualmiracles""               %% ""treelog""                   % ""1.2.3""
""org.monifu""                       %% ""monifu""                    % ""0.6.1""
""org.mongodb""                      %% ""casbah""                    % ""2.7.1""
""com.clarifi""                      %% ""f0""                        % ""1.1.2""
""org.scalaj""                       %% ""scalaj-http""               % ""0.3.15""
```

The following libraries are specific to the 2.11.x minor release you're using. If you depend on them, you should also cross-version fully!

```
""org.scalamacros""                   % ""paradise""                  % ""2.0.0"" cross CrossVersion.full
```

### Cross-building with sbt 0.13

When cross-building between Scala versions, you often need to vary the versions of your dependencies. In particular, the new scala modules (such as scala-xml) are no longer included in scala-library, so you'll have to add an explicit dependency on it to use Scala's xml support.

Here's how we recommend handling this in sbt 0.13. For the full build and Maven build, see [example](https://github.com/scala/scala-module-dependency-sample).

```
scalaVersion        := ""2.11.1""

crossScalaVersions  := Seq(""2.11.1"", ""2.10.3"")

// add scala-xml dependency when needed (for Scala 2.11 and newer)
// this mechanism supports cross-version publishing
libraryDependencies := {
  CrossVersion.partialVersion(scalaVersion.value) match {
    case Some((2, scalaMajor)) if scalaMajor >= 11 =>
      libraryDependencies.value :+ ""org.scala-lang.modules"" %% ""scala-xml"" % ""1.0.1""
    case _ =>
      libraryDependencies.value
  }
}
```

### Important changes

For most cases, code that compiled under 2.10.x without deprecation warnings should not be affected. We've verified this by [compiling](https://jenkins-dbuild.typesafe.com:8499/job/Community-2.11.x) a [sizeable number of open source projects](https://github.com/typesafehub/community-builds/blob/master/common-2.11.x.conf#L43). 

Changes to the reflection API may cause breakages, but these breakages can be easily fixed in a manner that is source-compatible with Scala 2.10.x. Follow our reflection/macro changelog for [detailed instructions](http://docs.scala-lang.org/overviews/macros/changelog211.html#how_to_make_your_210x_macros_work_in_2110).

We've decided to fix the following more obscure deviations from specified behavior without deprecating them first.
- [SI-4577](https://issues.scala-lang.org/browse/SI-4577) Compile `x match { case _ : Foo.type => }` to `Foo eq x`, as specified. It used to be `Foo == x` (without warning). If that's what you meant, write `case Foo =>`.
- [SI-7475](https://issues.scala-lang.org/browse/SI-7475) Improvements to access checks, aligned with the spec (see also the linked issues). Most importantly, private members are no longer inherited. Thus, this does not type check: `class Foo[T] { private val bar: T = ???; new Foo[String] { bar: String } }`, as the `bar` in `bar: String` refers to the `bar` with type `T`. The `Foo[String]`'s `bar` is not inherited, and thus not in scope, in the refinement. (Example from [SI-8371](https://issues.scala-lang.org/browse/SI-8371), see also [SI-8426](https://issues.scala-lang.org/browse/SI-8426).)

The following changes were made after a deprecation cycle (Thank you, [@soc](https://github.com/soc), for leading the deprecation effort!)
- [SI-6809](https://issues.scala-lang.org/browse/SI-6809) Case classes without a parameter list are no longer allowed.
- [SI-7618](https://issues.scala-lang.org/browse/SI-7618) Octal number literals no longer supported.

Finally, some notable improvements and bug fixes:
- [SI-8549](https://issues.scala-lang.org/browse/SI-8549) Fix bad regression: no `serialVersionUID` field for classes annotated with [@SerialVersionUID](http://www.scala-lang.org/api/2.11.1/index.html#scala.SerialVersionUID). The Scala standard library itself was a victim of this bug. As such, collections serialized in 2.11.0 will not be able to be deserialized in 2.11.1. This regression occurred in a failed [attempt](https://github.com/scala/scala/pull/1673) to fix a related bug in 2.10.x, [SI-6988](https://issues.scala-lang.org/browse/SI-6988), whereby classes annotated with non literal UIDS, e.g. `0L - 123L`, had no field generated. 
- [SI-7296](https://issues.scala-lang.org/browse/SI-7296) Case classes with > 22 parameters are now allowed.
- [SI-3346](https://issues.scala-lang.org/browse/SI-3346) Implicit arguments of implicit conversions now guide type inference.
- [SI-6240](https://issues.scala-lang.org/browse/SI-6240) Thread safety of reflection API.
- [#3037](https://github.com/scala/scala/pull/3037) Experimental support for SAM synthesis.
- [#2848](https://github.com/scala/scala/pull/2848) Name-based pattern-matching.
- [SI-6169](https://issues.scala-lang.org/browse/SI-6169) Infer bounds of Java-defined existential types.
- [SI-6566](https://issues.scala-lang.org/browse/SI-6566) Right-hand sides of type aliases are now considered invariant for variance checking.
- [SI-5917](https://issues.scala-lang.org/browse/SI-5917) Improve public AST creation facilities.
- [SI-8063](https://issues.scala-lang.org/browse/SI-8063) Expose much needed methods in public reflection/macro API.
- [SI-8126](https://issues.scala-lang.org/browse/SI-8126) Add -Xsource option (make 2.11 type checker behave like 2.10 where possible).
- [SI-8157](https://issues.scala-lang.org/browse/SI-8157) Polymorphic methods also subject to restriction: only one overload may define default arguments

To catch future changes like this early, you can run the compiler under -Xfuture, which makes it behave like the next major version, where possible, to alert you to upcoming breaking changes.

### Deprecations

Deprecation is essential to two of the 2.11.x series' three themes ([faster/smaller/stabler](http://java.dzone.com/articles/state-scala-2013)). They make the language and the libraries smaller, and thus easier to use and maintain, which ultimately improves stability. We are very proud of Scala's first decade, which brought us to where we are, and we are actively working on minimizing the downsides of this legacy, as exemplified by 2.11.x's focus on deprecation, modularization and infrastructure work.

The following language ""warts"" have been deprecated:
- [SI-7605](https://issues.scala-lang.org/browse/SI-7605) Procedure syntax (only under -Xfuture).
- [SI-5479](https://issues.scala-lang.org/browse/SI-5479) DelayedInit. We will continue support for the important `extends App` idiom. We won't drop `DelayedInit` until there's a replacement for important use cases. ([More details and a proposed alternative.](https://issues.scala-lang.org/browse/SI-4330?jql=labels%20%3D%20delayedinit%20AND%20resolution%20%3D%20unresolved))
- [SI-6455](https://issues.scala-lang.org/browse/SI-6455) Rewrite of `.withFilter` to `.filter`: you must implement `withFilter` to be compatible with for-comprehensions.
- [SI-8035](https://issues.scala-lang.org/browse/SI-8035) Automatic insertion of `()` on missing argument lists.
- [SI-6675](https://issues.scala-lang.org/browse/SI-6675) Auto-tupling in patterns.
- [SI-7247](https://issues.scala-lang.org/browse/SI-7247) NotNull, which was never fully implemented -- slated for removal in 2.12.
- [SI-1503](https://issues.scala-lang.org/browse/SI-1503) Unsound type assumption for stable identifier and literal patterns.
- [SI-7629](https://issues.scala-lang.org/browse/SI-7629) View bounds (_under -Xfuture_).

We'd like to emphasize the following library deprecations:
- [#3103](https://github.com/scala/scala/pull/3103), [#3191](https://github.com/scala/scala/pull/3191), [#3582](https://github.com/scala/scala/pull/3582) Collection classes and methods that are (very) difficult to extend safely have been slated for being marked `final`. Proxies and wrappers that were not adequately implemented or kept up-to-date have been deprecated, along with other minor inconsistencies.
- scala-actors is now deprecated and will be removed in 2.12; please follow the steps in the [Actors Migration Guide](http://docs.scala-lang.org/overviews/core/actors-migration-guide.html) to port to Akka Actors
- [SI-7958](https://issues.scala-lang.org/browse/SI-7958) Deprecate `scala.concurrent.future` and `scala.concurrent.promise`
- [SI-3235](https://issues.scala-lang.org/browse/SI-3235) Deprecate `round` on `Int` and `Long` ([#3581](https://github.com/scala/scala/pull/3581)).
- We are looking for maintainers to take over the following modules: [scala-swing](https://github.com/scala/scala-swing), [scala-continuations](https://github.com/scala/scala-continuations). 2.12 will not include them if no new maintainer is found.
  We will likely keep maintaining the other modules (scala-xml, scala-parser-combinators), but help is still greatly appreciated.

Deprecation is closely linked to source and binary compatibility. We say two versions are source compatible when they compile the same programs with the same results. Deprecation requires qualifying this statement: ""assuming there are no deprecation warnings"". This is what allows us to evolve the Scala platform and keep it healthy. We move slowly to guarantee smooth upgrades, but we want to keep improving as well!

### Binary Compatibility

When two versions of Scala are binary compatible, it is safe to compile your project on one Scala version and link against another Scala version at run time. Safe run-time linkage (only!) means that the JVM does not throw a (subclass of) [`LinkageError`](http://docs.oracle.com/javase/7/docs/api/java/lang/LinkageError.html) when executing your program in the mixed scenario, assuming that none arise when compiling and running on the same version of Scala. Concretely, this means you may have external dependencies on your run-time classpath that use a different version of Scala than the one you're compiling with, as long as they're binary compatibile. In other words, separate compilation on different binary compatible versions does not introduce problems compared to compiling and running everything on the same version of Scala.

We check binary compatibility automatically with [MiMa](https://github.com/typesafehub/migration-manager). We strive to maintain a similar invariant for the `behavior` (as opposed to just linkage) of the standard library, but this is not checked mechanically (Scala is not a proof assistant so this is out of reach for its type system).

#### Forwards and Back

We distinguish forwards and backwards compatibility (think of these as properties of a sequence of versions, not of an individual version). Maintaining backwards compatibility means code compiled on an older version will link with code compiled with newer ones. Forwards compatibility allows you to compile on new versions and run on older ones.

Thus, backwards compatibility precludes the removal of (non-private) methods, as older versions could call them, not knowing they would be removed, whereas forwards compatibility disallows adding new (non-private) methods, because newer programs may come to depend on them, which would prevent them from running on older versions (private methods are exempted here as well, as their definition and call sites must be in the same compilation unit).

These are strict constraints, but they have worked well for us in the Scala 2.10.x series. They didn't stop us from fixing [372 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20""SI""%20AND%20resolution%3D""fixed""%20and%20fixVersion%20>%20""Scala%202.10.0""%20and%20fixVersion%20<%3D%20""Scala%202.10.4"") in the 2.10.x series post 2.10.0. The advantages are clear, so we will maintain this policy in the 2.11.x series, and are looking (but not yet commiting!) to extend it to include major versions in the future.

#### Meta

Note that so far we've only talked about the jars generated by scalac for the standard library and reflection.
Our policies do not extend to the meta-issue: ensuring binary compatibility for bytecode generated from identical sources, by different version of scalac? (The same problem exists for compiling on different JDKs.) While we strive to achieve this, it's not something we can test in general. Notable examples where we know meta-binary compatibility is hard to achieve: specialisation and the optimizer.

In short, if binary compatibility of your library is important to you, use [MiMa](https://github.com/typesafehub/migration-manager) to verify compatibility before releasing.
Compiling identical sources with different versions of the scala compiler (or on different JVM versions!) could result in binary incompatible bytecode. This is rare, and we try to avoid it, but we can't guarantee it will never happen.

#### Concretely

Just like the 2.10.x series, we guarantee forwards and backwards compatibility of the `""org.scala-lang"" % ""scala-library"" % ""2.11.x""` and `""org.scala-lang"" % ""scala-reflect"" % ""2.11.x""` artifacts, except for anything under the `scala.reflect.internal` package, as scala-reflect is still experimental. We also strongly discourage relying on the stability of `scala.concurrent.impl` and `scala.reflect.runtime`, though we will only break compatibility for severe bugs here.

Note that we will only enforce _backwards_ binary compatibility for the new modules (artifacts under the groupId `org.scala-lang.modules`). As they are opt-in, it's less of a burden to require having the latest version on the classpath. (Without forward compatibility, the latest version of the artifact must be on the run-time classpath to avoid linkage errors.)

Finally, Scala 2.11 introduces `scala-library-all` to aggregate the modules that constitute a Scala release. Note that this means it does not provide forward binary compatibility, whereas the core `scala-library` artifact does. We consider the versions of the modules that `""scala-library-all"" % ""2.11.x""` depends on to be the canonical ones, that are part of the official Scala distribution. (The distribution itself is defined by the new `scala-dist` maven artifact.)

### License clarification

Scala is now distributed under the standard 3-clause BSD license. Originally, the same 3-clause BSD license was adopted, but slightly reworded over the years, and the ""Scala License"" was born. We're now back to the standard formulation to avoid confusion.
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/332625/assets,https://api.github.com/repos/scala/scala/releases/332625,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.1,https://github.com/scala/scala/releases/tag/v2.11.1,https://api.github.com/repos/scala/scala/zipball/v2.11.1,v2.11.1,False,False
277118,2014-04-16T17:59:19Z,2014-04-17T17:27:27Z,Scala 2.11.0 final release!,"We are very pleased to announce the final release of Scala 2.11.0!
- Get started with the [Hello Scala 2.11 template](https://typesafe.com/activator/template/hello-scala-2_11) in [Typesafe Activator](https://typesafe.com/platform/getstarted)
- Download a distribution from [scala-lang.org](http://scala-lang.org/download/2.11.0.html)
- Obtain it via [Maven Central](http://search.maven.org/?search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.0%22#search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.0%22)

There have been no code changes since RC4, just improvements to documentation and version bump to the most recent stable version of Akka actors. Here's the [difference between the release and RC4](https://github.com/scala/scala/compare/v2.11.0-RC4...v2.11.0).

Code that compiled on 2.10.x without deprecation warnings should compile on 2.11.x (we do not guarantee this for experimental APIs, such as reflection). If not, [please file a regression](https://issues.scala-lang.org/secure/CreateIssueDetails!init.jspa?pid=10005&issuetype=1&versions=11311&labels=regression). We are working with the community to ensure availability of the core projects of the Scala 2.11.x eco-system, please see below for a list. This release is _not_ binary compatible with the 2.10.x series, to allow us to keep improving the Scala standard library.

<!--break-->

The Scala 2.11.x series targets Java 6, with (evolving) experimental support for Java 8. In 2.11.0, Java 8 support is mostly limited to reading Java 8 bytecode and parsing Java 8 source. Stay tuned for more complete (experimental) Java 8 support.

### New features in the 2.11 series

This release contains all of the bug fixes and improvements made in the 2.10 series, as well as:
- Collections
  - Immutable `HashMap`s and `HashSet`s perform faster filters, unions, and the like, with improved structural sharing (lower memory usage or churn).
  - Mutable `LongMap` and `AnyRefMap` have been added to provide improved performance when keys are `Long` or `AnyRef` (performance enhancement of up to 4x or 2x respectively).
  - `BigDecimal` is more explicit about rounding and numeric representations, and better handles very large values without exhausting memory (by avoiding unnecessary conversions to `BigInt`).
  - `List` has improved performance on `map`, `flatMap`, and `collect`.
  - See also Deprecation above: we have slated many classes and methods to become final, to clarify which classes are not meant to be subclassed and to facilitate future maintenance and performance improvements.
- Modularization
  - The core Scala standard library jar has shed 20% of its bytecode. The modules for xml, parsing, swing as well as the (unsupported) continuations plugin and library are available individually or via [scala-library-all](http://search.maven.org/#artifactdetails%7Corg.scala-lang%7Cscala-library-all%7C2.11.0%7Cpom). Note that this artifact has weaker binary compatibility guarantees than `scala-library` -- as explained above.
  - The compiler has been modularized internally, to separate the presentation compiler, scaladoc and the REPL. We hope this will make it easier to contribute. In this release, all of these modules are still packaged in scala-compiler.jar. We plan to ship them in separate JARs in 2.12.x.
- Reflection, macros and quasiquotes
  - Please see [this detailed changelog](http://docs.scala-lang.org/overviews/macros/changelog211.html) that lists all significant changes and provides advice on forward and backward compatibility.
  - See also this [summary](http://scalamacros.org/news/index.html) of the experimental side of the 2.11 development cycle.
  - [#3321](https://github.com/scala/scala/pull/3321) introduced [Sprinter](http://vladimirnik.github.io/sprinter/), a new AST pretty-printing library! Very useful for tools that deal with source code.
- Back-end
  - The [GenBCode back-end](https://github.com/scala/scala/pull/2620) (experimental in 2.11). See [@magarciaepfl's extensive documentation](http://magarciaepfl.github.io/scala/).
  - A new experimental way of compiling closures, implemented by [@JamesIry](https://github.com/JamesIry). With `-Ydelambdafy:method` anonymous functions are compiled faster, with a smaller bytecode footprint. This works by keeping the function body as a private (static, if no `this` reference is needed) method of the enclosing class, and at the last moment during compilation emitting a small anonymous class that `extends FunctionN` and delegates to it. This sets the scene for a smooth migration to Java 8-style lambdas (not yet implemented).
  - Branch elimination through constant analysis [#2214](https://github.com/scala/scala/pull/2214)
  - [Scala.js](http://www.scala-js.org/), a separate project, provides an experimental JavaScript back-end for Scala 2.11. Note that it is not part of the standard Scala distribution.
  - Be more [Avian](http://oss.readytalk.com/avian/)\- [friendly](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.0-M1%22%20and%20fixVersion%20%3C%3D%20%22Scala%202.11.0%22%20and%20resolution%20%3D%20fixed%20and%20text%20~%20%22avian%22).
- Compiler Performance
  - Incremental compilation has been improved significantly. To try it out, upgrade to sbt 0.13.2 and add `incOptions := incOptions.value.withNameHashing(true)` to your build! Other build tools are also supported. More info at [this sbt issue](https://github.com/sbt/sbt/issues/1010) -- that's where most of the work happened. More features are planned, e.g. [class-based tracking](https://github.com/sbt/sbt/issues/1104).
  - We've been optimizing the batch compiler's performance as well, and will continue to work on this during the 2.11.x cycle.
  - Improve performance of reflection [SI-6638](https://issues.scala-lang.org/browse/SI-6638)
- The IDE received [numerous bug fixes and improvements!](https://issues.scala-lang.org/browse/SI-8085?jql=component%20%3D%20%22Presentation%20Compiler%22%20AND%20project%20%3D%20SI%20AND%20resolution%20%3D%20fixed%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.0-M1%22%20and%20fixVersion%20%3C%3D%20%20%22Scala%202.11.0%22%20ORDER%20BY%20updated%20DESC)
- REPL
  - The bytecode decompiler command, :javap, now works with Java 7 [SI-4936](https://issues.scala-lang.org/browse/SI-4936) and has sprouted new options [SI-6894](https://issues.scala-lang.org/browse/SI-6894) (Thanks, [@som-snytt](https://github.com/som-snytt)!)
  - Added command :kind to help to tell ground types from type constructors. [#2340](https://github.com/scala/scala/pull/2340) (Thanks, [George Leontiev](https://github.com/folone) and [Eugene Yokota](https://github.com/eed3si9n)!)
  - The interpreter can now be embedded as a JSR-223 Scripting Engine [SI-874](https://issues.scala-lang.org/browse/SI-874). (Thanks, [Raphael Jolly](https://github.com/rjolly)!)
- Improved `-Xlint` warnings
  - Warn about unused private / local terms and types, and unused imports.
  - This will even tell you when a local `var` could be a `val`.
- Slimming down the compiler
  - The experimental .NET backend has been removed from the compiler.
  - Scala 2.10 shipped with new implementations of the Pattern Matcher and the Bytecode Emitter. We have removed the old implementations.
  - Search and destroy mission for ~5000 chunks of dead code. [#1648](https://github.com/scala/scala/pull/1648/files)

The Scala team and contributors [fixed 613 bugs](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20and%20fixVersion%20>%3D%20""Scala%202.11.0-M1""%20and%20fixVersion%20<%3D%20""Scala%202.11.0""%20and%20resolution%20%3D%20fixed) that are exclusive to Scala 2.11.0! We also backported as many as possible. With the release of 2.11, 2.10 backports will be dialed back.

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, participating in mailing lists and other public fora, and -- of course -- submitting and reviewing pull requests! You are all awesome.

Concretely, according to `git log --no-merges --oneline master --not 2.10.x --format='%aN'  | sort | uniq -c | sort -rn`, 112 people contributed code, tests, and/or documentation to Scala 2.11.x: Paul Phillips, Jason Zaugg, Eugene Burmako, Adriaan Moors, Den Shabalin, Simon Ochsenreither, A. P. Marki, Miguel Garcia, James Iry, Iain McGinniss, Rex Kerr, Grzegorz Kossakowski, Vladimir Nikolaev, Eugene Vigdorchik, François Garillot, Mirco Dotta, Rüdiger Klaehn, Raphael Jolly, Kenji Yoshida, Paolo Giarrusso, Antoine Gourlay, Hubert Plociniczak, Aleksandar Prokopec, Simon Schaefer, Lex Spoon, Andrew Phillips, Sébastien Doeraene, Luc Bourlier, Josh Suereth, Jean-Remi Desjardins, Vojin Jovanovic, Vlad Ureche, Viktor Klang, Valerian, Prashant Sharma, Pavel Pavlov, Michael Thorpe, Jan Niehusmann, Heejong Lee, George Leontiev, Daniel C. Sobral, Christoffer Sawicki, yllan, rjfwhite, Volkan Yazıcı, Ruslan Shevchenko, Robin Green, Olivier Blanvillain, Lukas Rytz, James Ward, Iulian Dragos, Ilya Maykov, Eugene Yokota, Erik Osheim, Dan Hopkins, Chris Hodapp, Antonio Cunei, Andriy Polishchuk, Alexander Clare, 杨博, srinivasreddy, secwall, nermin, martijnhoekstra, kurnevsky, jinfu-leng, folone, Yaroslav Klymko, Xusen Yin, Trent Ogren, Tobias Schlatter, Thomas Geier, Stuart Golodetz, Stefan Zeiger, Scott Carey, Samy Dindane, Sagie Davidovich, Runar Bjarnason, Roland Kuhn, Roberto Tyley, Robert Nix, Robert Ladstätter, Rike-Benjamin Schuppner, Rajiv, Philipp Haller, Nada Amin, Mike Morearty, Michael Bayne, Mark Harrah, Luke Cycon, Lee Mighdoll, Konstantin Fedorov, Julio Santos, Julien Richard-Foy, Juha Heljoranta, Johannes Rudolph, Jiawei Li, Jentsch, Jason Swartz, James Roper, Havoc Pennington, Evgeny Kotelnikov, Dmitry Petrashko, Dmitry Bushev, David Hall, Daniel Darabos, Dan Rosen, Cody Allen, Carlo Dapor, Brian McKenna, Andrey Kutejko, Alden Torres.

Thank you all very much.

If you find any errors or omissions in these relates notes, [please submit a PR](https://github.com/scala/make-release-notes/blob/master/hand-written.md)!

### Reporting Bugs / Known Issues

Please [file any bugs you encounter](https://issues.scala-lang.org/secure/CreateIssueDetails!init.jspa?pid=10005&issuetype=1&versions=11311). If you're unsure whether something is a bug, please contact the [scala-user](https://groups.google.com/forum/?fromgroups#!forum/scala-user) mailing list.

Before reporting a bug, please have a look at these [known issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20fixVersion%20%21%3D%20%22Scala%202.11.0-RC3%22%20AND%20affectedVersion%20%3D%20%22Scala%202.11.0%22%20%20and%20resolution%20%3D%20unresolved%20ORDER%20BY%20priority%20DESC).

### Scala IDE for Eclipse

The Scala IDE with this release built in is [available from this update site](http://download.scala-ide.org/sdk/helium/e38/scala211/stable/site/) for [Eclipse 4.2/4.3 (Juno/Kepler)](http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr2). Please have a look at the [getting started guide](http://scala-ide.org/docs/user/gettingstarted.html) for more info.

### Available projects

The following Scala projects have already been released against 2.11.0! We'd love to include yours in this list as soon as it's available -- please submit a PR to update [these release notes](https://github.com/scala/make-release-notes/blob/master/hand-written.md).

```
""org.scalacheck""                   %% ""scalacheck""                % ""1.11.3""
""org.scalatest""                    %% ""scalatest""                 % ""2.1.3""
""org.scalautils""                   %% ""scalautils""                % ""2.1.3""
""com.typesafe.akka""                %% ""akka-actor""                % ""2.3.2""
""com.typesafe.scala-logging""       %% ""scala-logging-slf4j""       % ""2.0.4""
""org.scala-lang.modules""           %% ""scala-async""               % ""0.9.1""
""org.scalikejdbc""                  %% ""scalikejdbc-interpolation"" % ""2.0.0-beta1""
""com.softwaremill.scalamacrodebug"" %% ""macros""                    % ""0.4""
""com.softwaremill.macwire""         %% ""macros""                    % ""0.6""
""com.chuusai""                      %% ""shapeless""                 % ""1.2.4""
""com.chuusai""                      %% ""shapeless""                 % ""2.0.0""
""org.nalloc""                       %% ""optional""                  % ""0.1.0""
""org.scalaz""                       %% ""scalaz-core""               % ""7.0.6""
""com.nocandysw""                    %% ""platform-executing""        % ""0.5.0""
""com.qifun""                        %% ""stateless-future""          % ""0.1.1""
""com.github.scopt""                 %% ""scopt""                     % ""3.2.0""
""com.dongxiguo""                    %% ""fastring""                  % ""0.2.4""
""com.github.seratch""               %% ""ltsv4s""                    % ""1.0.0""
""com.googlecode.kiama""             %% ""kiama""                     % ""1.5.3""
""org.scalamock""                    %% ""scalamock-scalatest-support"" % ""3.0.1""
""org.scalamock""                    %% ""scalamock-specs2-support""  % ""3.0.1""
""com.github.nscala-time""           %% ""nscala-time""               % ""1.0.0""
""com.github.xuwei-k""               %% ""applybuilder70""            % ""0.1.2""
""com.github.xuwei-k""               %% ""nobox""                     % ""0.1.9""
""org.typelevel""                    %% ""scodec-bits""               % ""1.0.0""
""org.typelevel""                    %% ""scodec-core""               % ""1.0.0""
""com.sksamuel.scrimage""            %% ""scrimage""                  % ""1.3.20""
""net.databinder""                   %% ""dispatch-http""             % ""0.8.10""
""net.databinder""                   %% ""unfiltered""                % ""0.7.1""
""io.argonaut""                      %% ""argonaut""                  % ""6.0.4""
""org.specs2""                       %% ""specs2""                    % ""2.3.11""
""com.propensive""                   %% ""rapture-core""              % ""0.9.0""
""com.propensive""                   %% ""rapture-json""              % ""0.9.1""
""com.propensive""                   %% ""rapture-io""                % ""0.9.1""
""org.scala-stm""                    %% ""scala-stm""                 % ""0.7""
```

The following projects were released against 2.11.0-RC4, with an 2.11 build hopefully following soon:

```
""org.scalafx""            %% ""scalafx""            % ""8.0.0-R4""
""org.scalafx""            %% ""scalafx""            % ""1.0.0-R8""
""org.scalamacros""        %% ""paradise""           % ""2.0.0-M7""
""com.clarifi""            %% ""f0""                 % ""1.1.1""
""org.parboiled""          %% ""parboiled-scala""    % ""1.1.6""
""org.monifu""             %% ""monifu""             % ""0.4""
```

### Cross-building with sbt 0.13

When cross-building between Scala versions, you often need to vary the versions of your dependencies. In particular, the new scala modules (such as scala-xml) are no longer included in scala-library, so you'll have to add an explicit dependency on it to use Scala's xml support.

Here's how we recommend handling this in sbt 0.13. For the full build and Maven build, see [example](https://github.com/scala/scala-module-dependency-sample).

```
scalaVersion        := ""2.11.0""

crossScalaVersions  := Seq(""2.11.0"", ""2.10.3"")

// add scala-xml dependency when needed (for Scala 2.11 and newer)
// this mechanism supports cross-version publishing
libraryDependencies := {
  CrossVersion.partialVersion(scalaVersion.value) match {
    case Some((2, scalaMajor)) if scalaMajor >= 11 =>
      libraryDependencies.value :+ ""org.scala-lang.modules"" %% ""scala-xml"" % ""1.0.1""
    case _ =>
      libraryDependencies.value
  }
}
```

### Important changes

For most cases, code that compiled under 2.10.x without deprecation warnings should not be affected. We've verified this by [compiling](https://jenkins-dbuild.typesafe.com:8499/job/Community-2.11.x) a [sizeable number of open source projects](https://github.com/typesafehub/community-builds/blob/master/common-2.11.x.conf#L43). 

Changes to the reflection API may cause breakages, but these breakages can be easily fixed in a manner that is source-compatible with Scala 2.10.x. Follow our reflection/macro changelog for [detailed instructions](http://docs.scala-lang.org/overviews/macros/changelog211.html#how_to_make_your_210x_macros_work_in_2110).

We've decided to fix the following more obscure deviations from specified behavior without deprecating them first.
- [SI-4577](https://issues.scala-lang.org/browse/SI-4577) Compile `x match { case _ : Foo.type => }` to `Foo eq x`, as specified. It used to be `Foo == x` (without warning). If that's what you meant, write `case Foo =>`.
- [SI-7475](https://issues.scala-lang.org/browse/SI-7475) Improvements to access checks, aligned with the spec (see also the linked issues). Most importantly, private members are no longer inherited. Thus, this does not type check: `class Foo[T] { private val bar: T = ???; new Foo[String] { bar: String } }`, as the `bar` in `bar: String` refers to the `bar` with type `T`. The `Foo[String]`'s `bar` is not inherited, and thus not in scope, in the refinement. (Example from [SI-8371](https://issues.scala-lang.org/browse/SI-8371), see also [SI-8426](https://issues.scala-lang.org/browse/SI-8426).)

The following changes were made after a deprecation cycle (Thank you, [@soc](https://github.com/soc), for leading the deprecation effort!)
- [SI-6809](https://issues.scala-lang.org/browse/SI-6809) Case classes without a parameter list are no longer allowed.
- [SI-7618](https://issues.scala-lang.org/browse/SI-7618) Octal number literals no longer supported.

Finally, some notable improvements and bug fixes:
- [SI-7296](https://issues.scala-lang.org/browse/SI-7296) Case classes with > 22 parameters are now allowed.
- [SI-3346](https://issues.scala-lang.org/browse/SI-3346) Implicit arguments of implicit conversions now guide type inference.
- [SI-6240](https://issues.scala-lang.org/browse/SI-6240) Thread safety of reflection API.
- [#3037](https://github.com/scala/scala/pull/3037) Experimental support for SAM synthesis.
- [#2848](https://github.com/scala/scala/pull/2848) Name-based pattern-matching.
- [SI-6169](https://issues.scala-lang.org/browse/SI-6169) Infer bounds of Java-defined existential types.
- [SI-6566](https://issues.scala-lang.org/browse/SI-6566) Right-hand sides of type aliases are now considered invariant for variance checking.
- [SI-5917](https://issues.scala-lang.org/browse/SI-5917) Improve public AST creation facilities.
- [SI-8063](https://issues.scala-lang.org/browse/SI-8063) Expose much needed methods in public reflection/macro API.
- [SI-8126](https://issues.scala-lang.org/browse/SI-8126) Add -Xsource option (make 2.11 type checker behave like 2.10 where possible).

To catch future changes like this early, you can run the compiler under -Xfuture, which makes it behave like the next major version, where possible, to alert you to upcoming breaking changes.

### Deprecations

Deprecation is essential to two of the 2.11.x series' three themes ([faster/smaller/stabler](http://java.dzone.com/articles/state-scala-2013)). They make the language and the libraries smaller, and thus easier to use and maintain, which ultimately improves stability. We are very proud of Scala's first decade, which brought us to where we are, and we are actively working on minimizing the downsides of this legacy, as exemplified by 2.11.x's focus on deprecation, modularization and infrastructure work.

The following language ""warts"" have been deprecated:
- [SI-7605](https://issues.scala-lang.org/browse/SI-7605) Procedure syntax (only under -Xfuture).
- [SI-5479](https://issues.scala-lang.org/browse/SI-5479) DelayedInit. We will continue support for the important `extends App` idiom. We won't drop `DelayedInit` until there's a replacement for important use cases. ([More details and a proposed alternative.](https://issues.scala-lang.org/browse/SI-4330?jql=labels%20%3D%20delayedinit%20AND%20resolution%20%3D%20unresolved))
- [SI-6455](https://issues.scala-lang.org/browse/SI-6455) Rewrite of `.withFilter` to `.filter`: you must implement `withFilter` to be compatible with for-comprehensions.
- [SI-8035](https://issues.scala-lang.org/browse/SI-8035) Automatic insertion of `()` on missing argument lists.
- [SI-6675](https://issues.scala-lang.org/browse/SI-6675) Auto-tupling in patterns.
- [SI-7247](https://issues.scala-lang.org/browse/SI-7247) NotNull, which was never fully implemented -- slated for removal in 2.12.
- [SI-1503](https://issues.scala-lang.org/browse/SI-1503) Unsound type assumption for stable identifier and literal patterns.
- [SI-7629](https://issues.scala-lang.org/browse/SI-7629) View bounds (_under -Xfuture_).

We'd like to emphasize the following library deprecations:
- [#3103](https://github.com/scala/scala/pull/3103), [#3191](https://github.com/scala/scala/pull/3191), [#3582](https://github.com/scala/scala/pull/3582) Collection classes and methods that are (very) difficult to extend safely have been slated for being marked `final`. Proxies and wrappers that were not adequately implemented or kept up-to-date have been deprecated, along with other minor inconsistencies.
- scala-actors is now deprecated and will be removed in 2.12; please follow the steps in the [Actors Migration Guide](http://docs.scala-lang.org/overviews/core/actors-migration-guide.html) to port to Akka Actors
- [SI-7958](https://issues.scala-lang.org/browse/SI-7958) Deprecate `scala.concurrent.future` and `scala.concurrent.promise`
- [SI-3235](https://issues.scala-lang.org/browse/SI-3235) Deprecate `round` on `Int` and `Long` ([#3581](https://github.com/scala/scala/pull/3581)).
- We are looking for maintainers to take over the following modules: [scala-swing](https://github.com/scala/scala-swing), [scala-continuations](https://github.com/scala/scala-continuations). 2.12 will not include them if no new maintainer is found.
  We will likely keep maintaining the other modules (scala-xml, scala-parser-combinators), but help is still greatly appreciated.

Deprecation is closely linked to source and binary compatibility. We say two versions are source compatible when they compile the same programs with the same results. Deprecation requires qualifying this statement: ""assuming there are no deprecation warnings"". This is what allows us to evolve the Scala platform and keep it healthy. We move slowly to guarantee smooth upgrades, but we want to keep improving as well!

### Binary Compatibility

When two versions of Scala are binary compatible, it is safe to compile your project on one Scala version and link against another Scala version at run time. Safe run-time linkage (only!) means that the JVM does not throw a (subclass of) [`LinkageError`](http://docs.oracle.com/javase/7/docs/api/java/lang/LinkageError.html) when executing your program in the mixed scenario, assuming that none arise when compiling and running on the same version of Scala. Concretely, this means you may have external dependencies on your run-time classpath that use a different version of Scala than the one you're compiling with, as long as they're binary compatibile. In other words, separate compilation on different binary compatible versions does not introduce problems compared to compiling and running everything on the same version of Scala.

We check binary compatibility automatically with [MiMa](https://github.com/typesafehub/migration-manager). We strive to maintain a similar invariant for the `behavior` (as opposed to just linkage) of the standard library, but this is not checked mechanically (Scala is not a proof assistant so this is out of reach for its type system).

#### Forwards and Back

We distinguish forwards and backwards compatibility (think of these as properties of a sequence of versions, not of an individual version). Maintaining backwards compatibility means code compiled on an older version will link with code compiled with newer ones. Forwards compatibility allows you to compile on new versions and run on older ones.

Thus, backwards compatibility precludes the removal of (non-private) methods, as older versions could call them, not knowing they would be removed, whereas forwards compatibility disallows adding new (non-private) methods, because newer programs may come to depend on them, which would prevent them from running on older versions (private methods are exempted here as well, as their definition and call sites must be in the same compilation unit).

These are strict constraints, but they have worked well for us in the Scala 2.10.x series. They didn't stop us from fixing [372 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20""SI""%20AND%20resolution%3D""fixed""%20and%20fixVersion%20>%20""Scala%202.10.0""%20and%20fixVersion%20<%3D%20""Scala%202.10.4"") in the 2.10.x series post 2.10.0. The advantages are clear, so we will maintain this policy in the 2.11.x series, and are looking (but not yet commiting!) to extend it to include major versions in the future.

#### Meta

Note that so far we've only talked about the jars generated by scalac for the standard library and reflection.
Our policies do not extend to the meta-issue: ensuring binary compatibility for bytecode generated from identical sources, by different version of scalac? (The same problem exists for compiling on different JDKs.) While we strive to achieve this, it's not something we can test in general. Notable examples where we know meta-binary compatibility is hard to achieve: specialisation and the optimizer.

In short, if binary compatibility of your library is important to you, use [MiMa](https://github.com/typesafehub/migration-manager) to verify compatibility before releasing.
Compiling identical sources with different versions of the scala compiler (or on different JVM versions!) could result in binary incompatible bytecode. This is rare, and we try to avoid it, but we can't guarantee it will never happen.

#### Concretely

Just like the 2.10.x series, we guarantee forwards and backwards compatibility of the `""org.scala-lang"" % ""scala-library"" % ""2.11.x""` and `""org.scala-lang"" % ""scala-reflect"" % ""2.11.x""` artifacts, except for anything under the `scala.reflect.internal` package, as scala-reflect is still experimental. We also strongly discourage relying on the stability of `scala.concurrent.impl` and `scala.reflect.runtime`, though we will only break compatibility for severe bugs here.

Note that we will only enforce _backwards_ binary compatibility for the new modules (artifacts under the groupId `org.scala-lang.modules`). As they are opt-in, it's less of a burden to require having the latest version on the classpath. (Without forward compatibility, the latest version of the artifact must be on the run-time classpath to avoid linkage errors.)

Finally, Scala 2.11.0 introduces `scala-library-all` to aggregate the modules that constitute a Scala release. Note that this means it does not provide forward binary compatibility, whereas the core `scala-library` artifact does. We consider the versions of the modules that `""scala-library-all"" % ""2.11.x""` depends on to be the canonical ones, that are part of the official Scala distribution. (The distribution itself is defined by the new `scala-dist` maven artifact.)

### License clarification

Scala is now distributed under the standard 3-clause BSD license. Originally, the same 3-clause BSD license was adopted, but slightly reworded over the years, and the ""Scala License"" was born. We're now back to the standard formulation to avoid confusion.
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/277118/assets,https://api.github.com/repos/scala/scala/releases/277118,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.0,https://github.com/scala/scala/releases/tag/v2.11.0,https://api.github.com/repos/scala/scala/zipball/v2.11.0,v2.11.0,False,False
262671,2014-04-05T11:20:42Z,2014-04-08T17:46:23Z,Scala 2.11.0-RC4: fourth RC's a charm,"<!-- comment at the top because it breaks the markdown parser when it's where we'd actually like it...
Things to update:
- replace 2.11.0-RC4 by actual version,
- milestone=32 by actual milestone number
- bug/PR counts
-->

We are very pleased to announce Scala 2.11.0-RC4, the next release candidate of Scala 2.11.0! Download it now from [scala-lang.org](http://scala-lang.org/download/2.11.0-RC4.html) or via [Maven Central](http://search.maven.org/%23search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.0-RC4%22).

Since RC3, we've fixed two blocker bugs, and admitted some final polish for macros and quasiquotes. Here's the [difference between RC4 and RC3](https://github.com/scala/scala/compare/v2.11.0-RC3...v2.11.0-RC4).

Please do try out this release candidate to help us find any serious regressions before the final release. The next release candidate (or the final) will be cut on Friday April 11, if there are no unresolved blocker bugs. Our goal is to have the next release be the final -- please help us make sure there are no important regressions!

Code that compiled on 2.10.x without deprecation warnings should compile on 2.11.x (we do no guarantee this for experimental APIs, such as reflection). If not, [please file a regression](https://issues.scala-lang.org/secure/CreateIssueDetails!init.jspa?pid=10005&issuetype=1&versions=11311&labels=regression). We are working with the community to ensure availability of the core projects of the Scala 2.11.x eco-system, please see below for a list. This release is _not_ binary compatible with the 2.10.x series, to allow us to keep improving the Scala standard library.

For production use, we recommend the latest stable release, 2.10.4.

<!--break-->

The Scala 2.11.x series targets Java 6, with (evolving) experimental support for Java 8. In 2.11.0, Java 8 support is mostly limited to reading Java 8 bytecode and parsing Java 8 source. Stay tuned for more complete (experimental) Java 8 support.

The Scala team and contributors [fixed 613 bugs](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20and%20fixVersion%20>%3D%20""Scala%202.11.0-M1""%20and%20fixVersion%20<%3D%20""Scala%202.11.0-RC4""%20and%20resolution%20%3D%20fixed) that are exclusive to Scala 2.11.0-RC4! We also backported as many as possible. With the release of 2.11, 2.10 backports will be dialed back.

Since the last RC, we fixed [11 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20fixVersion%20%3D%20""Scala%202.11.0-RC4""%20AND%20resolution%20%3D%20fixed%20ORDER%20BY%20priority%20DESC) via [37 merged pull requests](https://github.com/scala/scala/issues?milestone=36&state=closed).

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, participating in mailing lists and other public fora, and -- of course -- submitting and reviewing pull requests! You are all awesome.

Concretely, according to `git log --no-merges --oneline master --not 2.10.x --format='%aN'  | sort | uniq -c | sort -rn`, 111 people contributed code, tests, and/or documentation to Scala 2.11.x: Paul Phillips,  Jason Zaugg,  Eugene Burmako,  Adriaan Moors,  Den Shabalin,  Simon Ochsenreither,  A. P. Marki,  Miguel Garcia,  James Iry,  Denys Shabalin,  Rex Kerr,  Grzegorz Kossakowski,  Vladimir Nikolaev,  Eugene Vigdorchik,  François Garillot,  Mirco Dotta,  Rüdiger Klaehn,  Raphael Jolly,  Kenji Yoshida,  Paolo Giarrusso,  Antoine Gourlay,  Hubert Plociniczak,  Aleksandar Prokopec,  Simon Schaefer,  Lex Spoon,  Andrew Phillips,  Sébastien Doeraene,  Luc Bourlier,  Josh Suereth,  Jean-Remi Desjardins,  Vojin Jovanovic,  Vlad Ureche,  Viktor Klang,  Valerian,  Prashant Sharma,  Pavel Pavlov,  Michael Thorpe,  Jan Niehusmann,  Heejong Lee,  George Leontiev,  Daniel C. Sobral,  Christoffer Sawicki,  yllan,  rjfwhite,  Volkan Yazıcı,  Ruslan Shevchenko,  Robin Green,  Olivier Blanvillain,  Lukas Rytz,  Iulian Dragos,  Ilya Maykov,  Eugene Yokota,  Erik Osheim,  Dan Hopkins,  Chris Hodapp,  Antonio Cunei,  Andriy Polishchuk,  Alexander Clare,  杨博,  srinivasreddy,  secwall,  nermin,  martijnhoekstra,  jinfu-leng,  folone,  Yaroslav Klymko,  Xusen Yin,  Trent Ogren,  Tobias Schlatter,  Thomas Geier,  Stuart Golodetz,  Stefan Zeiger,  Scott Carey,  Samy Dindane,  Sagie Davidovich,  Runar Bjarnason,  Roland Kuhn,  Roberto Tyley,  Robert Nix,  Robert Ladstätter,  Rike-Benjamin Schuppner,  Rajiv,  Philipp Haller,  Nada Amin,  Mike Morearty,  Michael Bayne,  Mark Harrah,  Luke Cycon,  Lee Mighdoll,  Konstantin Fedorov,  Julio Santos,  Julien Richard-Foy,  Juha Heljoranta,  Johannes Rudolph,  Jiawei Li,  Jentsch,  Jason Swartz,  James Ward,  James Roper,  Havoc Pennington,  Evgeny Kotelnikov,  Dmitry Petrashko,  Dmitry Bushev,  David Hall,  Daniel Darabos,  Dan Rosen,  Cody Allen,  Carlo Dapor,  Brian McKenna,  Andrey Kutejko,  Alden Torres.

Thank you all very much.

If you find any errors or omissions in these relates notes, [please submit a PR](https://github.com/scala/make-release-notes/blob/master/hand-written.md)!

### Reporting Bugs / Known Issues

Please [file any bugs you encounter](https://issues.scala-lang.org/secure/CreateIssueDetails!init.jspa?pid=10005&issuetype=1&versions=11311). If you're unsure whether something is a bug, please contact the [scala-user](https://groups.google.com/forum/?fromgroups#!forum/scala-user) mailing list.

Before reporting a bug, please have a look at these [known issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20fixVersion%20%21%3D%20%22Scala%202.11.0-RC3%22%20AND%20affectedVersion%20%3D%20%22Scala%202.11.0-RC4%22%20%20and%20resolution%20%3D%20unresolved%20ORDER%20BY%20priority%20DESC).

### Scala IDE for Eclipse

The Scala IDE with this release built in is [available from this update site](http://download.scala-ide.org/sdk/helium/e38/scala211/dev/site/) for [Eclipse 4.2/4.3 (Juno/Kepler)](http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr2). Please have a look at the [getting started guide](http://scala-ide.org/docs/user/gettingstarted.html) for more info.

### Available projects

The following Scala projects have already been released against 2.11.0-RC4! We'd love to include yours in this list as soon as it's available -- please submit a PR to update [these release notes](https://github.com/scala/make-release-notes/blob/master/hand-written.md).

```
""com.typesafe.akka""      %% ""akka-actor""         % ""2.3.0""
""org.scalatest""          %% ""scalatest""          % ""2.1.3""
""org.scala-lang.modules"" %% ""scala-async""        % ""0.9.1""
```

The following projects were released against 2.11.0-RC3, with an RC4 build hopefully following soon:

```
""org.scalacheck""         %% ""scalacheck""         % ""1.11.3""
""org.scalafx""            %% ""scalafx""            % ""1.0.0-R8""
""org.scalafx""            %% ""scalafx""            % ""8.0.0-R4""
""com.github.scopt""       %% ""scopt""              % ""3.2.0""
""org.specs2""             %% ""specs2""             % ""2.3.10""
""org.scalaz""             %% ""scalaz-core""        % ""7.0.6""
""com.nocandysw""          %% ""platform-executing"" % ""0.5.0""
""io.argonaut""            %% ""argonaut""           % ""6.0.3""
""com.clarifi""            %% ""f0""                 % ""1.1.1""
""org.parboiled""          %% ""parboiled-scala""    % ""1.1.6""
""com.sksamuel.scrimage""  %% ""scrimage""           % ""1.3.16""
```

### Cross-building with sbt 0.13

When cross-building between Scala versions, you often need to vary the versions of your dependencies. In particular, the new scala modules (such as scala-xml) are no longer included in scala-library, so you'll have to add an explicit dependency on it to use Scala's xml support.

Here's how we recommend handling this in sbt 0.13. For the full build and Maven build, see [example](https://github.com/scala/scala-module-dependency-sample).

```
scalaVersion        := ""2.11.0-RC4""

crossScalaVersions  := Seq(""2.11.0-RC4"", ""2.10.3"")

// add scala-xml dependency when needed (for Scala 2.11 and newer)
// this mechanism supports cross-version publishing
libraryDependencies := {
  CrossVersion.partialVersion(scalaVersion.value) match {
    case Some((2, scalaMajor)) if scalaMajor >= 11 =>
      libraryDependencies.value :+ ""org.scala-lang.modules"" %% ""scala-xml"" % ""1.0.1""
    case _ =>
      libraryDependencies.value
  }
}
```

### Important changes

For most cases, code that compiled under 2.10.x without deprecation warnings should not be affected. We've verified this by [compiling](https://jenkins-dbuild.typesafe.com:8499/job/Community-2.11.x) a [sizeable number of open source projects](https://github.com/typesafehub/community-builds/blob/master/common-2.11.x.conf#L43). 

Changes to the reflection API may cause breakages, but these breakages can be easily fixed in a manner that is source-compatible with Scala 2.10.x. Follow our reflection/macro changelog for [detailed instructions](http://docs.scala-lang.org/overviews/macros/changelog211.html#how_to_make_your_210x_macros_work_in_2110).

We've decided to fix the following more obscure deviations from specified behavior without deprecating them first.
- [SI-4577](https://issues.scala-lang.org/browse/SI-4577) Compile `x match { case _ : Foo.type => }` to `Foo eq x`, as specified. It used to be `Foo == x` (without warning). If that's what you meant, write `case Foo =>`.
- [SI-7475](https://issues.scala-lang.org/browse/SI-7475) Improvements to access checks, aligned with the spec (see also the linked issues). Most importantly, private members are no longer inherited. Thus, this does not type check: `class Foo[T] { private val bar: T = ???; new Foo[String] { bar: String } }`, as the `bar` in `bar: String` refers to the `bar` with type `T`. The `Foo[String]`'s `bar` is not inherited, and thus not in scope, in the refinement. (Example from [SI-8371](https://issues.scala-lang.org/browse/SI-8371), see also [SI-8426](https://issues.scala-lang.org/browse/SI-8426).)

The following changes were made after a deprecation cycle (Thank you, [@soc](https://github.com/soc), for leading the deprecation effort!)
- [SI-6809](https://issues.scala-lang.org/browse/SI-6809) Case classes without a parameter list are no longer allowed.
- [SI-7618](https://issues.scala-lang.org/browse/SI-7618) Octal number literals no longer supported.

Finally, some notable improvements and bug fixes:
- [SI-7296](https://issues.scala-lang.org/browse/SI-7296) Case classes with > 22 parameters are now allowed.
- [SI-3346](https://issues.scala-lang.org/browse/SI-3346) Implicit arguments of implicit conversions now guide type inference.
- [SI-6240](https://issues.scala-lang.org/browse/SI-6240) Thread safety of reflection API.
- [#3037](https://github.com/scala/scala/pull/3037) Experimental support for SAM synthesis.
- [#2848](https://github.com/scala/scala/pull/2848) Name-based pattern-matching.
- [SI-6169](https://issues.scala-lang.org/browse/SI-6169) Infer bounds of Java-defined existential types.
- [SI-6566](https://issues.scala-lang.org/browse/SI-6566) Right-hand sides of type aliases are now considered invariant for variance checking.
- [SI-5917](https://issues.scala-lang.org/browse/SI-5917) Improve public AST creation facilities.
- [SI-8063](https://issues.scala-lang.org/browse/SI-8063) Expose much needed methods in public reflection/macro API.
- [SI-8126](https://issues.scala-lang.org/browse/SI-8126) Add -Xsource option (make 2.11 type checker behave like 2.10 where possible).

To catch future changes like this early, you can run the compiler under -Xfuture, which makes it behave like the next major version, where possible, to alert you to upcoming breaking changes.

### Deprecations

Deprecation is essential to two of the 2.11.x series' three themes ([faster/smaller/stabler](http://java.dzone.com/articles/state-scala-2013)). They make the language and the libraries smaller, and thus easier to use and maintain, which ultimately improves stability. We are very proud of Scala's first decade, which brought us to where we are, and we are actively working on minimizing the downsides of this legacy, as exemplified by 2.11.x's focus on deprecation, modularization and infrastructure work.

The following language ""warts"" have been deprecated:
- [SI-7605](https://issues.scala-lang.org/browse/SI-7605) Procedure syntax (only under -Xfuture).
- [SI-5479](https://issues.scala-lang.org/browse/SI-5479) DelayedInit. We will continue support for the important `extends App` idiom. We won't drop `DelayedInit` until there's a replacement for important use cases. ([More details and a proposed alternative.](https://issues.scala-lang.org/browse/SI-4330?jql=labels%20%3D%20delayedinit%20AND%20resolution%20%3D%20unresolved))
- [SI-6455](https://issues.scala-lang.org/browse/SI-6455) Rewrite of `.withFilter` to `.filter`: you must implement `withFilter` to be compatible with for-comprehensions.
- [SI-8035](https://issues.scala-lang.org/browse/SI-8035) Automatic insertion of `()` on missing argument lists.
- [SI-6675](https://issues.scala-lang.org/browse/SI-6675) Auto-tupling in patterns.
- [SI-7247](https://issues.scala-lang.org/browse/SI-7247) NotNull, which was never fully implemented -- slated for removal in 2.12.
- [SI-1503](https://issues.scala-lang.org/browse/SI-1503) Unsound type assumption for stable identifier and literal patterns.
- [SI-7629](https://issues.scala-lang.org/browse/SI-7629) View bounds (_under -Xfuture_).

We'd like to emphasize the following library deprecations:
- [#3103](https://github.com/scala/scala/pull/3103), [#3191](https://github.com/scala/scala/pull/3191), [#3582](https://github.com/scala/scala/pull/3582) Collection classes and methods that are (very) difficult to extend safely have been slated for being marked `final`. Proxies and wrappers that were not adequately implemented or kept up-to-date have been deprecated, along with other minor inconsistencies.
- scala-actors is now deprecated and will be removed in 2.12; please follow the steps in the [Actors Migration Guide](http://docs.scala-lang.org/overviews/core/actors-migration-guide.html) to port to Akka Actors
- [SI-7958](https://issues.scala-lang.org/browse/SI-7958) Deprecate `scala.concurrent.future` and `scala.concurrent.promise`
- [SI-3235](https://issues.scala-lang.org/browse/SI-3235) Deprecate `round` on `Int` and `Long` ([#3581](https://github.com/scala/scala/pull/3581)).
- We are looking for maintainers to take over the following modules: [scala-swing](https://github.com/scala/scala-swing), [scala-continuations](https://github.com/scala/scala-continuations). 2.12 will not include them if no new maintainer is found.
  We will likely keep maintaining the other modules (scala-xml, scala-parser-combinators), but help is still greatly appreciated.

Deprecation is closely linked to source and binary compatibility. We say two versions are source compatible when they compile the same programs with the same results. Deprecation requires qualifying this statement: ""assuming there are no deprecation warnings"". This is what allows us to evolve the Scala platform and keep it healthy. We move slowly to guarantee smooth upgrades, but we want to keep improving as well!

### Binary Compatibility

When two versions of Scala are binary compatible, it is safe to compile your project on one Scala version and link against another Scala version at run time. Safe run-time linkage (only!) means that the JVM does not throw a (subclass of) [`LinkageError`](http://docs.oracle.com/javase/7/docs/api/java/lang/LinkageError.html) when executing your program in the mixed scenario, assuming that none arise when compiling and running on the same version of Scala. Concretely, this means you may have external dependencies on your run-time classpath that use a different version of Scala than the one you're compiling with, as long as they're binary compatibile. In other words, separate compilation on different binary compatible versions does not introduce problems compared to compiling and running everything on the same version of Scala.

We check binary compatibility automatically with [MiMa](https://github.com/typesafehub/migration-manager). We strive to maintain a similar invariant for the `behavior` (as opposed to just linkage) of the standard library, but this is not checked mechanically (Scala is not a proof assistant so this is out of reach for its type system).

#### Forwards and Back

We distinguish forwards and backwards compatibility (think of these as properties of a sequence of versions, not of an individual version). Maintaining backwards compatibility means code compiled on an older version will link with code compiled with newer ones. Forwards compatibility allows you to compile on new versions and run on older ones.

Thus, backwards compatibility precludes the removal of (non-private) methods, as older versions could call them, not knowing they would be removed, whereas forwards compatibility disallows adding new (non-private) methods, because newer programs may come to depend on them, which would prevent them from running on older versions (private methods are exempted here as well, as their definition and call sites must be in the same compilation unit).

These are strict constraints, but they have worked well for us in the Scala 2.10.x series. They didn't stop us from fixing [372 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20""SI""%20AND%20resolution%3D""fixed""%20and%20fixVersion%20>%20""Scala%202.10.0""%20and%20fixVersion%20<%3D%20""Scala%202.10.4"") in the 2.10.x series post 2.10.0. The advantages are clear, so we will maintain this policy in the 2.11.x series, and are looking (but not yet commiting!) to extend it to include major versions in the future.

#### Meta

Note that so far we've only talked about the jars generated by scalac for the standard library and reflection.
Our policies do not extend to the meta-issue: ensuring binary compatibility for bytecode generated from identical sources, by different version of scalac? (The same problem exists for compiling on different JDKs.) While we strive to achieve this, it's not something we can test in general. Notable examples where we know meta-binary compatibility is hard to achieve: specialisation and the optimizer.

In short, if binary compatibility of your library is important to you, use [MiMa](https://github.com/typesafehub/migration-manager) to verify compatibility before releasing.
Compiling identical sources with different versions of the scala compiler (or on different JVM versions!) could result in binary incompatible bytecode. This is rare, and we try to avoid it, but we can't guarantee it will never happen.

#### Concretely

Just like the 2.10.x series, we guarantee forwards and backwards compatibility of the `""org.scala-lang"" % ""scala-library"" % ""2.11.x""` and `""org.scala-lang"" % ""scala-reflect"" % ""2.11.x""` artifacts, except for anything under the `scala.reflect.internal` package, as scala-reflect is still experimental. We also strongly discourage relying on the stability of `scala.concurrent.impl` and `scala.reflect.runtime`, though we will only break compatibility for severe bugs here.

Note that we will only enforce _backwards_ binary compatibility for the new modules (artifacts under the groupId `org.scala-lang.modules`). As they are opt-in, it's less of a burden to require having the latest version on the classpath. (Without forward compatibility, the latest version of the artifact must be on the run-time classpath to avoid linkage errors.)

Finally, Scala 2.11.0 introduces `scala-library-all` to aggregate the modules that constitute a Scala release. Note that this means it does not provide forward binary compatibility, whereas the core `scala-library` artifact does. We consider the versions of the modules that `""scala-library-all"" % ""2.11.x""` depends on to be the canonical ones, that are part of the official Scala distribution. (The distribution itself is defined by the new `scala-dist` maven artifact.)

### New features in the 2.11 series

This release contains all of the bug fixes and improvements made in the 2.10 series, as well as:
- Collections
  - Immutable `HashMap`s and `HashSet`s perform faster filters, unions, and the like, with improved structural sharing (lower memory usage or churn).
  - Mutable `LongMap` and `AnyRefMap` have been added to provide improved performance when keys are `Long` or `AnyRef` (performance enhancement of up to 4x or 2x respectively).
  - `BigDecimal` is more explicit about rounding and numeric representations, and better handles very large values without exhausting memory (by avoiding unnecessary conversions to `BigInt`).
  - `List` has improved performance on `map`, `flatMap`, and `collect`.
  - See also Deprecation above: we have slated many classes and methods to become final, to clarify which classes are not meant to be subclassed and to facilitate future maintenance and performance improvements.
- Modularization
  - The core Scala standard library jar has shed 20% of its bytecode. The modules for xml, parsing, swing as well as the (unsupported) continuations plugin and library are available individually or via [scala-library-all](http://search.maven.org/#artifactdetails%7Corg.scala-lang%7Cscala-library-all%7C2.11.0-RC4%7Cpom). Note that this artifact has weaker binary compatibility guarantees than `scala-library` -- as explained above.
  - The compiler has been modularized internally, to separate the presentation compiler, scaladoc and the REPL. We hope this will make it easier to contribute. In this release, all of these modules are still packaged in scala-compiler.jar. We plan to ship them in separate JARs in 2.12.x.
- Reflection, macros and quasiquotes
  - Please see [this detailed changelog](http://docs.scala-lang.org/overviews/macros/changelog211.html) that lists all significant changes and provides advice on forward and backward compatibility.
  - See also this [summary](http://scalamacros.org/news/index.html) of the experimental side of the 2.11 development cycle.
  - [#3321](https://github.com/scala/scala/pull/3321) introduced [Sprinter](http://vladimirnik.github.io/sprinter/), a new AST pretty-printing library! Very useful for tools that deal with source code.
- Back-end
  - The [GenBCode back-end](https://github.com/scala/scala/pull/2620) (experimental in 2.11). See [@magarciaepfl's extensive documentation](http://magarciaepfl.github.io/scala/).
  - A new experimental way of compiling closures, implemented by [@JamesIry](https://github.com/JamesIry). With `-Ydelambdafy:method` anonymous functions are compiled faster, with a smaller bytecode footprint. This works by keeping the function body as a private (static, if no `this` reference is needed) method of the enclosing class, and at the last moment during compilation emitting a small anonymous class that `extends FunctionN` and delegates to it. This sets the scene for a smooth migration to Java 8-style lambdas (not yet implemented).
  - Branch elimination through constant analysis [#2214](https://github.com/scala/scala/pull/2214)
- Compiler Performance
  - Incremental compilation has been improved significantly. To try it out, upgrade to sbt 0.13.2-M2 and add `incOptions := incOptions.value.withNameHashing(true)` to your build! Other build tools are also supported. More info at [this sbt issue](https://github.com/sbt/sbt/issues/1010) -- that's where most of the work happened. More features are planned, e.g. [class-based tracking](https://github.com/sbt/sbt/issues/1104).
  - We've been optimizing the batch compiler's performance as well, and will continue to work on this during the 2.11.x cycle.
  - Improve performance of reflection [SI-6638](https://issues.scala-lang.org/browse/SI-6638)  
- IDE
  - [Numerous bug fixes and improvements!](https://issues.scala-lang.org/browse/SI-8085?jql=component%20%3D%20%22Presentation%20Compiler%22%20AND%20project%20%3D%20SI%20AND%20resolution%20%3D%20fixed%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.0-M1%22%20and%20fixVersion%20%3C%3D%20%20%22Scala%202.11.0-RC4%22%20ORDER%20BY%20updated%20DESC)
- REPL
  - The bytecode decompiler command, :javap, now works with Java 7 [SI-4936](https://issues.scala-lang.org/browse/SI-4936) and has sprouted new options [SI-6894](https://issues.scala-lang.org/browse/SI-6894) (Thanks, [@som-snytt](https://github.com/som-snytt)!)
  - Added command :kind to help to tell ground types from type constructors. [#2340](https://github.com/scala/scala/pull/2340) (Thanks, [George Leontiev](https://github.com/folone) and [Eugene Yokota](https://github.com/eed3si9n)!)
  - The interpreter can now be embedded as a JSR-223 Scripting Engine [SI-874](https://issues.scala-lang.org/browse/SI-874). (Thanks, [Raphael Jolly](https://github.com/rjolly)!)
- Warnings
  - Warn about unused private / local terms and types, and unused imports, under `-Xlint`. This will even tell you when a local `var` could be a `val`.
- Slimming down the compiler
  - The experimental .NET backend has been removed from the compiler.
  - Scala 2.10 shipped with new implementations of the Pattern Matcher and the Bytecode Emitter. We have removed the old implementations.
  - Search and destroy mission for ~5000 chunks of dead code. [#1648](https://github.com/scala/scala/pull/1648/files)

### License clarification

Scala is now distributed under the standard 3-clause BSD license. Originally, the same 3-clause BSD license was adopted, but slightly reworded over the years, and the ""Scala License"" was born. We're now back to the standard formulation to avoid confusion.
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/262671/assets,https://api.github.com/repos/scala/scala/releases/262671,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.0-RC4,https://github.com/scala/scala/releases/tag/v2.11.0-RC4,https://api.github.com/repos/scala/scala/zipball/v2.11.0-RC4,v2.11.0-RC4,False,True
231696,2014-03-19T02:51:21Z,2014-03-20T00:27:39Z,Scala 2.11.0-RC3: three is the new two!,"<!-- comment at the top because it breaks the markdown parser when it's where we'd actually like it...
Things to update:
- replace 2.11.0-RC3 by actual version,
- milestone=32 by actual milestone number
- bug/PR counts
-->

We are very pleased to announce Scala 2.11.0-RC3, the second (sic) release candidate of Scala 2.11.0! Download it now from [scala-lang.org](http://scala-lang.org/download/2.11.0-RC3.html) or via [Maven Central](http://search.maven.org/%23search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.0-RC3%22).

There won't be an RC2 release because we missed a [blocker issue](https://issues.scala-lang.org/browse/SI-8341) (thanks for the reminder, Chee Seng!). Unfortunately, the mistake wasn't caught until after the tag was pushed. Jason quickly [fixed](https://github.com/scala/scala/pull/3639) the bug, which is the only [difference between RC3 and RC2](https://github.com/scala/scala/compare/v2.11.0-RC2...v2.11.0-RC3).

Please do try out this release candidate to help us find any serious regressions before the final release. The next release candidate (or the final) will be cut on Friday March 28, if there are no unresolved blocker bugs at noon (PST). Our goal is to have the next release be the final -- please help us make sure there are no important regressions!

Code that compiled on 2.10.x without deprecation warnings should compile on 2.11.x (we do no guarantee this for experimental APIs, such as reflection). If not, [please file a regression](https://issues.scala-lang.org/secure/CreateIssueDetails!init.jspa?pid=10005&issuetype=1&versions=11311&labels=regression). We are working with the community to ensure availability of the core projects of the Scala 2.11.x eco-system, please see below for a list. This release is _not_ binary compatible with the 2.10.x series, to allow us to keep improving the Scala standard library.

For production use, we recommend the latest stable release, 2.10.4.

<!--break-->

The Scala 2.11.x series targets Java 6, with (evolving) experimental support for Java 8. In 2.11.0, Java 8 support is mostly limited to reading Java 8 bytecode and parsing Java 8 source. Stay tuned for more complete (experimental) Java 8 support.

The Scala team and contributors [fixed 601 bugs](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20and%20fixVersion%20>%3D%20""Scala%202.11.0-M1""%20and%20fixVersion%20<%3D%20""Scala%202.11.0-RC3""%20and%20resolution%20%3D%20fixed) that are exclusive to Scala 2.11.0-RC3! We also backported as many as possible. With the release of 2.11, 2.10 backports will be dialed back.

Since the last RC, we fixed [54 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20fixVersion%20%3D%20""Scala%202.11.0-RC3""%20AND%20resolution%20%3D%20fixed%20ORDER%20BY%20priority%20DESC) via [37 merged pull requests](https://github.com/scala/scala/issues?milestone=32&state=closed).

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, participating in mailing lists and other public fora, and -- of course -- submitting and reviewing pull requests! You are all awesome.

Concretely, according to `git log --no-merges --oneline master --not 2.10.x --format='%aN'  | sort | uniq -c | sort -rn`, 111 people contributed code, tests, and/or documentation to Scala 2.11.x: Paul Phillips,  Jason Zaugg,  Eugene Burmako,  Adriaan Moors,  Den Shabalin,  Simon Ochsenreither,  A. P. Marki,  Miguel Garcia,  James Iry,  Denys Shabalin,  Rex Kerr,  Grzegorz Kossakowski,  Vladimir Nikolaev,  Eugene Vigdorchik,  FranÃ§ois Garillot,  Mirco Dotta,  RÃ¼diger Klaehn,  Raphael Jolly,  Kenji Yoshida,  Paolo Giarrusso,  Antoine Gourlay,  Hubert Plociniczak,  Aleksandar Prokopec,  Simon Schaefer,  Lex Spoon,  Andrew Phillips,  SÃ©bastien Doeraene,  Luc Bourlier,  Josh Suereth,  Jean-Remi Desjardins,  Vojin Jovanovic,  Vlad Ureche,  Viktor Klang,  Valerian,  Prashant Sharma,  Pavel Pavlov,  Michael Thorpe,  Jan Niehusmann,  Heejong Lee,  George Leontiev,  Daniel C. Sobral,  Christoffer Sawicki,  yllan,  rjfwhite,  Volkan YazÄ±cÄ±,  Ruslan Shevchenko,  Robin Green,  Olivier Blanvillain,  Lukas Rytz,  Iulian Dragos,  Ilya Maykov,  Eugene Yokota,  Erik Osheim,  Dan Hopkins,  Chris Hodapp,  Antonio Cunei,  Andriy Polishchuk,  Alexander Clare,  æ¨åš,  srinivasreddy,  secwall,  nermin,  martijnhoekstra,  jinfu-leng,  folone,  Yaroslav Klymko,  Xusen Yin,  Trent Ogren,  Tobias Schlatter,  Thomas Geier,  Stuart Golodetz,  Stefan Zeiger,  Scott Carey,  Samy Dindane,  Sagie Davidovich,  Runar Bjarnason,  Roland Kuhn,  Roberto Tyley,  Robert Nix,  Robert LadstÃ¤tter,  Rike-Benjamin Schuppner,  Rajiv,  Philipp Haller,  Nada Amin,  Mike Morearty,  Michael Bayne,  Mark Harrah,  Luke Cycon,  Lee Mighdoll,  Konstantin Fedorov,  Julio Santos,  Julien Richard-Foy,  Juha Heljoranta,  Johannes Rudolph,  Jiawei Li,  Jentsch,  Jason Swartz,  James Ward,  James Roper,  Havoc Pennington,  Evgeny Kotelnikov,  Dmitry Petrashko,  Dmitry Bushev,  David Hall,  Daniel Darabos,  Dan Rosen,  Cody Allen,  Carlo Dapor,  Brian McKenna,  Andrey Kutejko,  Alden Torres.

Thank you all very much.

If you find any errors or omissions in these relates notes, [please submit a PR](https://github.com/scala/make-release-notes/blob/master/hand-written.md)!

### Reporting Bugs / Known Issues

Please [file any bugs you encounter](https://issues.scala-lang.org/secure/CreateIssueDetails!init.jspa?pid=10005&issuetype=1&versions=11311). If you're unsure whether something is a bug, please contact the [scala-user](https://groups.google.com/forum/?fromgroups#!forum/scala-user) mailing list.

Before reporting a bug, please have a look at these [known issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20fixVersion%20%21%3D%20%22Scala%202.11.0-RC3%22%20AND%20affectedVersion%20%3D%20%22Scala%202.11.0-RC3%22%20%20and%20resolution%20%3D%20unresolved%20ORDER%20BY%20priority%20DESC).

### Scala IDE for Eclipse

The Scala IDE with this release built in is [available from this update site](http://download.scala-ide.org/sdk/helium/e38/scala211/dev/site/) for [Eclipse 4.2/4.3 (Juno/Kepler)](http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr2). Please have a look at the [getting started guide](http://scala-ide.org/docs/user/gettingstarted.html) for more info.

### Available projects

The following Scala projects have already been released against 2.11.0-RC3! We'd love to include yours in this list as soon as it's available -- please submit a PR to update [these release notes](https://github.com/scala/make-release-notes/blob/master/hand-written.md).

```
""org.scalacheck""         %% ""scalacheck""         % ""1.11.3""
""org.scalafx""            %% ""scalafx""            % ""1.0.0-R8""
""org.scalafx""            %% ""scalafx""            % ""8.0.0-R4""
""com.typesafe.akka""      %% ""akka-actor""         % ""2.3.0""
""com.github.scopt""       %% ""scopt""              % ""3.2.0""
""org.scalatest""          %% ""scalatest""          % ""2.1.2""
""org.specs2""             %% ""specs2""             % ""2.3.10""
""org.scalaz""             %% ""scalaz-core""        % ""7.0.6""
""org.scala-lang.modules"" %% ""scala-async""        % ""0.9.0""
""com.nocandysw""          %% ""platform-executing"" % ""0.5.0""
```

The following projects were released against 2.11.0-RC1, with an RC3 build hopefully following soon:

```
""io.argonaut""            %% ""argonaut""           % ""6.0.3""
""com.clarifi""            %% ""f0""                 % ""1.1.1""
""org.parboiled""          %% ""parboiled-scala""    % ""1.1.6""
""com.sksamuel.scrimage""  %% ""scrimage""           % ""1.3.16""
```

### Cross-building with sbt 0.13

When cross-building between Scala versions, you often need to vary the versions of your dependencies. In particular, the new scala modules (such as scala-xml) are no longer included in scala-library, so you'll have to add an explicit dependency on it to use Scala's xml support.

Here's how we recommend handling this in sbt 0.13. For the full build and Maven build, see [example](https://github.com/scala/scala-module-dependency-sample).

```
scalaVersion        := ""2.11.0-RC3""

crossScalaVersions  := Seq(""2.11.0-RC3"", ""2.10.3"")

// add scala-xml dependency when needed (for Scala 2.11 and newer)
// this mechanism supports cross-version publishing
libraryDependencies := {
  CrossVersion.partialVersion(scalaVersion.value) match {
    case Some((2, scalaMajor)) if scalaMajor >= 11 =>
      libraryDependencies.value :+ ""org.scala-lang.modules"" %% ""scala-xml"" % ""1.0.1""
    case _ =>
      libraryDependencies.value
  }
}
```

### Important changes

For most cases, code that compiled under 2.10.x without deprecation warnings should not be affected. We've verified this by [compiling](https://jenkins-dbuild.typesafe.com:8499/job/Community-2.11.x) a [sizeable number of open source projects](https://github.com/typesafehub/community-builds/blob/master/common-2.11.x.conf#L43). 

Changes to the reflection API may cause breakages, but these breakages can be easily fixed in a manner that is source-compatible with Scala 2.10.x. Follow our reflection/macro changelog for [detailed instructions](http://docs.scala-lang.org/overviews/macros/changelog211.html#how_to_make_your_210x_macros_work_in_2110).

We've decided to fix the following more obscure deviations from specified behavior without deprecating them first.
- [SI-4577](https://issues.scala-lang.org/browse/SI-4577) Compile `x match { case _ : Foo.type => }` to `Foo eq x`, as specified. It used to be `Foo == x` (without warning). If that's what you meant, write `case Foo =>`.
- [SI-7475](https://issues.scala-lang.org/browse/SI-7475) Improvements to access checks, aligned with the spec (see also the linked issues). Most importantly, private members are no longer inherited. Thus, this does not type check: `class Foo[T] { private val bar: T = ???; new Foo[String] { bar: String } }`, as the `bar` in `bar: String` refers to the `bar` with type `T`. The `Foo[String]`'s `bar` is not inherited, and thus not in scope, in the refinement. (Example from [SI-8371](https://issues.scala-lang.org/browse/SI-8371), see also [SI-8426](https://issues.scala-lang.org/browse/SI-8426).)

The following changes were made after a deprecation cycle (Thank you, [@soc](https://github.com/soc), for leading the deprecation effort!)
- [SI-6809](https://issues.scala-lang.org/browse/SI-6809) Case classes without a parameter list are no longer allowed.
- [SI-7618](https://issues.scala-lang.org/browse/SI-7618) Octal number literals no longer supported.

Finally, some notable improvements and bug fixes:
- [SI-7296](https://issues.scala-lang.org/browse/SI-7296) Case classes with > 22 parameters are now allowed.
- [SI-3346](https://issues.scala-lang.org/browse/SI-3346) Implicit arguments of implicit conversions now guide type inference.
- [SI-6240](https://issues.scala-lang.org/browse/SI-6240) Thread safety of reflection API.
- [#3037](https://github.com/scala/scala/pull/3037) Experimental support for SAM synthesis.
- [#2848](https://github.com/scala/scala/pull/2848) Name-based pattern-matching.
- [SI-6169](https://issues.scala-lang.org/browse/SI-6169) Infer bounds of Java-defined existential types.
- [SI-6566](https://issues.scala-lang.org/browse/SI-6566) Right-hand sides of type aliases are now considered invariant for variance checking.
- [SI-5917](https://issues.scala-lang.org/browse/SI-5917) Improve public AST creation facilities.
- [SI-8063](https://issues.scala-lang.org/browse/SI-8063) Expose much needed methods in public reflection/macro API.
- [SI-8126](https://issues.scala-lang.org/browse/SI-8126) Add -Xsource option (make 2.11 type checker behave like 2.10 where possible).

To catch future changes like this early, you can run the compiler under -Xfuture, which makes it behave like the next major version, where possible, to alert you to upcoming breaking changes.

### Deprecations

Deprecation is essential to two of the 2.11.x series' three themes ([faster/smaller/stabler](http://java.dzone.com/articles/state-scala-2013)). They make the language and the libraries smaller, and thus easier to use and maintain, which ultimately improves stability. We are very proud of Scala's first decade, which brought us to where we are, and we are actively working on minimizing the downsides of this legacy, as exemplified by 2.11.x's focus on deprecation, modularization and infrastructure work.

The following language ""warts"" have been deprecated:
- [SI-7605](https://issues.scala-lang.org/browse/SI-7605) Procedure syntax (only under -Xfuture).
- [SI-5479](https://issues.scala-lang.org/browse/SI-5479) DelayedInit. We will continue support for the important `extends App` idiom. We won't drop `DelayedInit` until there's a replacement for important use cases. ([More details and a proposed alternative.](https://issues.scala-lang.org/browse/SI-4330?jql=labels%20%3D%20delayedinit%20AND%20resolution%20%3D%20unresolved))
- [SI-6455](https://issues.scala-lang.org/browse/SI-6455) Rewrite of `.withFilter` to `.filter`: you must implement `withFilter` to be compatible with for-comprehensions.
- [SI-8035](https://issues.scala-lang.org/browse/SI-8035) Automatic insertion of `()` on missing argument lists.
- [SI-6675](https://issues.scala-lang.org/browse/SI-6675) Auto-tupling in patterns.
- [SI-7247](https://issues.scala-lang.org/browse/SI-7247) NotNull, which was never fully implemented -- slated for removal in 2.12.
- [SI-1503](https://issues.scala-lang.org/browse/SI-1503) Unsound type assumption for stable identifier and literal patterns.
- [SI-7629](https://issues.scala-lang.org/browse/SI-7629) View bounds (_under -Xfuture_).

We'd like to emphasize the following library deprecations:
- [#3103](https://github.com/scala/scala/pull/3103), [#3191](https://github.com/scala/scala/pull/3191), [#3582](https://github.com/scala/scala/pull/3582) Collection classes and methods that are (very) difficult to extend safely have been slated for being marked `final`. Proxies and wrappers that were not adequately implemented or kept up-to-date have been deprecated, along with other minor inconsistencies.
- scala-actors is now deprecated and will be removed in 2.12; please follow the steps in the [Actors Migration Guide](http://docs.scala-lang.org/overviews/core/actors-migration-guide.html) to port to Akka Actors
- [SI-7958](https://issues.scala-lang.org/browse/SI-7958) Deprecate `scala.concurrent.future` and `scala.concurrent.promise`
- [SI-3235](https://issues.scala-lang.org/browse/SI-3235) Deprecate `round` on `Int` and `Long` ([#3581](https://github.com/scala/scala/pull/3581)).
- We are looking for maintainers to take over the following modules: [scala-swing](https://github.com/scala/scala-swing), [scala-continuations](https://github.com/scala/scala-continuations). 2.12 will not include them if no new maintainer is found.
  We will likely keep maintaining the other modules (scala-xml, scala-parser-combinators), but help is still greatly appreciated.

Deprecation is closely linked to source and binary compatibility. We say two versions are source compatible when they compile the same programs with the same results. Deprecation requires qualifying this statement: ""assuming there are no deprecation warnings"". This is what allows us to evolve the Scala platform and keep it healthy. We move slowly to guarantee smooth upgrades, but we want to keep improving as well!

### Binary Compatibility

When two versions of Scala are binary compatible, it is safe to compile your project on one Scala version and link against another Scala version at run time. Safe run-time linkage (only!) means that the JVM does not throw a (subclass of) [`LinkageError`](http://docs.oracle.com/javase/7/docs/api/java/lang/LinkageError.html) when executing your program in the mixed scenario, assuming that none arise when compiling and running on the same version of Scala. Concretely, this means you may have external dependencies on your run-time classpath that use a different version of Scala than the one you're compiling with, as long as they're binary compatibile. In other words, separate compilation on different binary compatible versions does not introduce problems compared to compiling and running everything on the same version of Scala.

We check binary compatibility automatically with [MiMa](https://github.com/typesafehub/migration-manager). We strive to maintain a similar invariant for the `behavior` (as opposed to just linkage) of the standard library, but this is not checked mechanically (Scala is not a proof assistant so this is out of reach for its type system).

#### Forwards and Back

We distinguish forwards and backwards compatibility (think of these as properties of a sequence of versions, not of an individual version). Maintaining backwards compatibility means code compiled on an older version will link with code compiled with newer ones. Forwards compatibility allows you to compile on new versions and run on older ones.

Thus, backwards compatibility precludes the removal of (non-private) methods, as older versions could call them, not knowing they would be removed, whereas forwards compatibility disallows adding new (non-private) methods, because newer programs may come to depend on them, which would prevent them from running on older versions (private methods are exempted here as well, as their definition and call sites must be in the same compilation unit).

These are strict constraints, but they have worked well for us in the Scala 2.10.x series. They didn't stop us from fixing [372 issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20""SI""%20AND%20resolution%3D""fixed""%20and%20fixVersion%20>%20""Scala%202.10.0""%20and%20fixVersion%20<%3D%20""Scala%202.10.4"") in the 2.10.x series post 2.10.0. The advantages are clear, so we will maintain this policy in the 2.11.x series, and are looking (but not yet commiting!) to extend it to include major versions in the future.

#### Meta

Note that so far we've only talked about the jars generated by scalac for the standard library and reflection.
Our policies do not extend to the meta-issue: ensuring binary compatibility for bytecode generated from identical sources, by different version of scalac? (The same problem exists for compiling on different JDKs.) While we strive to achieve this, it's not something we can test in general. Notable examples where we know meta-binary compatibility is hard to achieve: specialisation and the optimizer.

In short, if binary compatibility of your library is important to you, use [MiMa](https://github.com/typesafehub/migration-manager) to verify compatibility before releasing.
Compiling identical sources with different versions of the scala compiler (or on different JVM versions!) could result in binary incompatible bytecode. This is rare, and we try to avoid it, but we can't guarantee it will never happen.

#### Concretely

Just like the 2.10.x series, we guarantee forwards and backwards compatibility of the `""org.scala-lang"" % ""scala-library"" % ""2.11.x""` and `""org.scala-lang"" % ""scala-reflect"" % ""2.11.x""` artifacts, except for anything under the `scala.reflect.internal` package, as scala-reflect is still experimental. We also strongly discourage relying on the stability of `scala.concurrent.impl` and `scala.reflect.runtime`, though we will only break compatibility for severe bugs here.

Note that we will only enforce _backwards_ binary compatibility for the new modules (artifacts under the groupId `org.scala-lang.modules`). As they are opt-in, it's less of a burden to require having the latest version on the classpath. (Without forward compatibility, the latest version of the artifact must be on the run-time classpath to avoid linkage errors.)

Finally, Scala 2.11.0 introduces `scala-library-all` to aggregate the modules that constitute a Scala release. Note that this means it does not provide forward binary compatibility, whereas the core `scala-library` artifact does. We consider the versions of the modules that `""scala-library-all"" % ""2.11.x""` depends on to be the canonical ones, that are part of the official Scala distribution. (The distribution itself is defined by the new `scala-dist` maven artifact.)

### New features in the 2.11 series

This release contains all of the bug fixes and improvements made in the 2.10 series, as well as:
- Collections
  - Immutable `HashMap`s and `HashSet`s perform faster filters, unions, and the like, with improved structural sharing (lower memory usage or churn).
  - Mutable `LongMap` and `AnyRefMap` have been added to provide improved performance when keys are `Long` or `AnyRef` (performance enhancement of up to 4x or 2x respectively).
  - `BigDecimal` is more explicit about rounding and numeric representations, and better handles very large values without exhausting memory (by avoiding unnecessary conversions to `BigInt`).
  - `List` has improved performance on `map`, `flatMap`, and `collect`.
  - See also Deprecation above: we have slated many classes and methods to become final, to clarify which classes are not meant to be subclassed and to facilitate future maintenance and performance improvements.
- Modularization
  - The core Scala standard library jar has shed 20% of its bytecode. The modules for xml, parsing, swing as well as the (unsupported) continuations plugin and library are available individually or via [scala-library-all](http://search.maven.org/#artifactdetails%7Corg.scala-lang%7Cscala-library-all%7C2.11.0-RC3%7Cpom). Note that this artifact has weaker binary compatibility guarantees than `scala-library` -- as explained above.
  - The compiler has been modularized internally, to separate the presentation compiler, scaladoc and the REPL. We hope this will make it easier to contribute. In this release, all of these modules are still packaged in scala-compiler.jar. We plan to ship them in separate JARs in 2.12.x.
- Reflection, macros and quasiquotes
  - Please see [this detailed changelog](http://docs.scala-lang.org/overviews/macros/changelog211.html) that lists all significant changes and provides advice on forward and backward compatibility.
  - See also this [summary](http://scalamacros.org/news/index.html) of the experimental side of the 2.11 development cycle.
  - [#3321](https://github.com/scala/scala/pull/3321) introduced [Sprinter](http://vladimirnik.github.io/sprinter/), a new AST pretty-printing library! Very useful for tools that deal with source code.
- Back-end
  - The [GenBCode back-end](https://github.com/scala/scala/pull/2620) (experimental in 2.11). See [@magarciaepfl's extensive documentation](http://magarciaepfl.github.io/scala/).
  - A new experimental way of compiling closures, implemented by [@JamesIry](https://github.com/JamesIry). With `-Ydelambdafy:method` anonymous functions are compiled faster, with a smaller bytecode footprint. This works by keeping the function body as a private (static, if no `this` reference is needed) method of the enclosing class, and at the last moment during compilation emitting a small anonymous class that `extends FunctionN` and delegates to it. This sets the scene for a smooth migration to Java 8-style lambdas (not yet implemented).
  - Branch elimination through constant analysis [#2214](https://github.com/scala/scala/pull/2214)
- Compiler Performance
  - Incremental compilation has been improved significantly. To try it out, upgrade to sbt 0.13.2-M2 and add `incOptions := incOptions.value.withNameHashing(true)` to your build! Other build tools are also supported. More info at [this sbt issue](https://github.com/sbt/sbt/issues/1010) -- that's where most of the work happened. More features are planned, e.g. [class-based tracking](https://github.com/sbt/sbt/issues/1104).
  - We've been optimizing the batch compiler's performance as well, and will continue to work on this during the 2.11.x cycle.
  - Improve performance of reflection [SI-6638](https://issues.scala-lang.org/browse/SI-6638)  
- IDE
  - [Numerous bug fixes and improvements!](https://issues.scala-lang.org/browse/SI-8085?jql=component%20%3D%20%22Presentation%20Compiler%22%20AND%20project%20%3D%20SI%20AND%20resolution%20%3D%20fixed%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.0-M1%22%20and%20fixVersion%20%3C%3D%20%20%22Scala%202.11.0-RC3%22%20ORDER%20BY%20updated%20DESC)
- REPL
  - The bytecode decompiler command, :javap, now works with Java 7 [SI-4936](https://issues.scala-lang.org/browse/SI-4936) and has sprouted new options [SI-6894](https://issues.scala-lang.org/browse/SI-6894) (Thanks, [@som-snytt](https://github.com/som-snytt)!)
  - Added command :kind to help to tell ground types from type constructors. [#2340](https://github.com/scala/scala/pull/2340) (Thanks, [George Leontiev](https://github.com/folone) and [Eugene Yokota](https://github.com/eed3si9n)!)
  - The interpreter can now be embedded as a JSR-223 Scripting Engine [SI-874](https://issues.scala-lang.org/browse/SI-874). (Thanks, [Raphael Jolly](https://github.com/rjolly)!)
- Warnings
  - Warn about unused private / local terms and types, and unused imports, under `-Xlint`. This will even tell you when a local `var` could be a `val`.
- Slimming down the compiler
  - The experimental .NET backend has been removed from the compiler.
  - Scala 2.10 shipped with new implementations of the Pattern Matcher and the Bytecode Emitter. We have removed the old implementations.
  - Search and destroy mission for ~5000 chunks of dead code. [#1648](https://github.com/scala/scala/pull/1648/files)

### License clarification

Scala is now distributed under the standard 3-clause BSD license. Originally, the same 3-clause BSD license was adopted, but slightly reworded over the years, and the ""Scala License"" was born. We're now back to the standard formulation to avoid confusion.
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/231696/assets,https://api.github.com/repos/scala/scala/releases/231696,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.0-RC3,https://github.com/scala/scala/releases/tag/v2.11.0-RC3,https://api.github.com/repos/scala/scala/zipball/v2.11.0-RC3,v2.11.0-RC3,False,True
229929,2014-03-18T00:54:18Z,2014-03-19T02:56:12Z,(Superseded by 2.11.0-RC3),,https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/229929/assets,https://api.github.com/repos/scala/scala/releases/229929,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.0-RC2,https://github.com/scala/scala/releases/tag/v2.11.0-RC2,https://api.github.com/repos/scala/scala/zipball/v2.11.0-RC2,v2.11.0-RC2,False,False
211675,2014-02-28T17:14:27Z,2014-03-05T23:42:20Z,Scala 2.11.0-RC1,"We are very pleased to announce the first release candidate of Scala 2.11.0! Download it now from [scala-lang.org](http://scala-lang.org/download/2.11.0-RC1.html) or via [Maven Central](http://search.maven.org/%23search%7Cga%7C1%7Cg%3A%22org.scala-lang%22%20AND%20v%3A%222.11.0-RC1%22).

Please do try out this release candidate to help us find any serious regressions before the final release. The next release candidate will be cut on Monday March 17, if there are no unresolved blocker bugs at noon (PST). Subsequent RCs will be released on a weekly schedule, with Monday at noon (PST) being the cut-off for blocker bug reports. Our goal is to have no more than three RCs for this release -- please help us achieve this by testing your project soon!

Code that compiled on 2.10.x without deprecation warnings should compile on 2.11.x (we do no guarantee this for experimental APIs, such as reflection). If not, [please file a regression](https://issues.scala-lang.org/secure/CreateIssueDetails!init.jspa?pid=10005&issuetype=1&versions=11311&labels=regression). We are working with the community to ensure availability of the core projects of the Scala 2.11.x eco-system, please see below for a list. This release is _not_ binary compatible with the 2.10.x series, to allow us to keep improving the Scala standard library.

For production use, we recommend the latest stable release, 2.10.3 (2.10.4 final coming soon).

<!--break-->

The Scala 2.11.x series targets Java 6, with (evolving) experimental support for Java 8. In 2.11.0, Java 8 support is mostly limited to reading Java 8 bytecode and parsing Java 8 source. Stay tuned for more complete (experimental) Java 8 support.

The Scala team and contributors [fixed 544 bugs](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20and%20fixVersion%20>%3D%20""Scala%202.11.0-M1""%20and%20fixVersion%20<%3D%20""Scala%202.11.0-RC1""%20and%20resolution%20%3D%20fixed) that are exclusive to Scala 2.11.0-RC1! We also backported as many as possible. With the release of 2.11, 2.10 backports will be dialed back.

Since the last milestone, we fixed [133 issues](https://issues.scala-lang.org/issues/?jql=project+%3D+SI+AND+fixVersion+%3D+%22Scala+2.11.0-RC1%22+AND+status+%3D+CLOSED+ORDER+BY+priority+DESC) via [154 merged pull requests](https://github.com/scala/scala/issues?milestone=27&state=closed).

A big thank you to everyone who's helped improve Scala by reporting bugs, improving our documentation, participating in mailing lists and other public fora, and -- of course -- submitting and reviewing pull requests! You are all awesome.

Concretely, between Jan 2013 and today, [69 contributors](https://github.com/scala/scala/graphs/contributors?from=2013-1-1&to=2014-03-01&type=c) have helped improve Scala!

Our gratitude goes to [@paulp](https://github.com/paulp), [@som-snytt](https://github.com/som-snytt), [@soc](https://github.com/soc), [@JamesIry](https://github.com/JamesIry), [@Ichoran](https://github.com/Ichoran), [@vigdorchik](https://github.com/vigdorchik), [@kzys](https://github.com/kzys), [@Blaisorblade](https://github.com/Blaisorblade), [@rjolly](https://github.com/rjolly), [@gourlaysama](https://github.com/gourlaysama), [@xuwei-k](https://github.com/xuwei-k), [@sschaef](https://github.com/sschaef), [@rklaehn](https://github.com/rklaehn), [@lexspoon](https://github.com/lexspoon), [@folone](https://github.com/folone), [@qerub](https://github.com/qerub), [@etaty](https://github.com/etaty), [@ViniciusMiana](https://github.com/ViniciusMiana), [@ScrapCodes](https://github.com/ScrapCodes), [@pavelpavlov](https://github.com/pavelpavlov), [@jedesah](https://github.com/jedesah), [@ihji](https://github.com/ihji), [@harrah](https://github.com/harrah), [@aztek](https://github.com/aztek), [@clhodapp](https://github.com/clhodapp), [@vy](https://github.com/vy), [@eed3si9n](https://github.com/eed3si9n), [@mergeconflict](https://github.com/mergeconflict), [@greenrd](https://github.com/greenrd), [@rjfwhite](https://github.com/rjfwhite), [@danielhopkins](https://github.com/danielhopkins), [@khernyo](https://github.com/khernyo), [@u-abramchuk](https://github.com/u-abramchuk), [@mt2309](https://github.com/mt2309), [@ivmaykov](https://github.com/ivmaykov), [@yllan](https://github.com/yllan), [@jrudolph](https://github.com/jrudolph), [@jannic](https://github.com/jannic), [@non](https://github.com/non), [@dcsobral](https://github.com/dcsobral), [@chuvoks](https://github.com/chuvoks), [@rtyley](https://github.com/rtyley).

With special thanks to the team at EPFL: [@xeno-by](https://github.com/xeno-by), [@densh](https://github.com/densh), [@magarciaEPFL](https://github.com/magarciaEPFL), [@VladimirNik](https://github.com/VladimirNik), [@lrytz](https://github.com/lrytz), [@VladUreche](https://github.com/VladUreche), [@heathermiller](https://github.com/heathermiller), [@sjrd](https://github.com/sjrd), [@hubertp](https://github.com/hubertp), [@OlivierBlanvillain](https://github.com/OlivierBlanvillain), [@namin](https://github.com/namin), [@cvogt](https://github.com/cvogt), [@vjovanov](https://github.com/vjovanov).

If you find any errors or omissions in these relates notes, [please submit a PR](https://github.com/scala/make-release-notes/blob/master/hand-written.md)!

### Reporting Bugs / Known Issues

Please [file any bugs you encounter](https://issues.scala-lang.org/secure/CreateIssueDetails!init.jspa?pid=10005&issuetype=1&versions=11311). If you're unsure whether something is a bug, please contact the [scala-user](https://groups.google.com/forum/?fromgroups#!forum/scala-user) mailing list.

Before reporting a bug, please have a look at these [known issues](https://issues.scala-lang.org/issues/?jql=project%20%3D%20SI%20AND%20fixVersion%20%21%3D%20%22Scala%202.11.0-RC1%22%20AND%20affectedVersion%20%3D%20%22Scala%202.11.0-RC1%22%20%20and%20resolution%20%3D%20unresolved%20ORDER%20BY%20priority%20DESC).

### Scala IDE for Eclipse

The Scala IDE with this release built in is [available from this update site](http://download.scala-ide.org/sdk/helium/e38/scala211/dev/site/) for [Eclipse 4.2/4.3 (Juno/Kepler)](http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/keplersr2). Please have a look at the [getting started guide](http://scala-ide.org/docs/user/gettingstarted.html) for more info.

### Available projects

The following Scala projects have already been released against 2.11.0-RC1! We'd love to include yours in this list as soon as it's available -- please submit a PR to update [these release notes](https://github.com/scala/make-release-notes/blob/master/hand-written.md).

```
""org.scalacheck""    %% ""scalacheck""         % ""1.11.3""
""org.scalafx""       %% ""scalafx""            % ""1.0.0-R8""
""org.scalatest""     %% ""scalatest""          % ""2.1.0""
""org.specs2""        %% ""specs2""             % ""2.3.9""
""com.typesafe.akka"" %% ""akka-actor""         % ""2.3.0-RC4""
""org.scalaz""        %% ""scalaz-core""        % ""7.0.6""
""io.argonaut""       %% ""argonaut""           % ""6.0.3""
""com.nocandysw""     %% ""platform-executing"" % ""0.5.0""
""com.clarifi""       %% ""f0""                 % ""1.1.1""
```

NOTE: RC1 ships with akka-actor 2.3.0-RC4 (the final is out now, but wasn't yet available when RC1 was cut). The next Scala 2.11 RC will ship with akka-actor 2.3.0 final.

### Cross-building with sbt 0.13

When cross-building between Scala versions, you often need to vary the versions of your dependencies. In particular, the new scala modules (such as scala-xml) are no longer included in scala-library, so you'll have to add an explicit dependency on it to use Scala's xml support.

Here's how we recommend handling this in sbt 0.13. For the full build, see [[@gkossakowski's](https://github.com/gkossakowski's) example](https://github.com/gkossakowski/scala-sbt-cross-compile/).

```
scalaVersion        := ""2.11.0-RC1""

crossScalaVersions  := Seq(""2.11.0-RC1"", ""2.10.3"")

// add scala-xml dependency when needed (for Scala 2.11 and newer)
// this mechanism supports cross-version publishing
libraryDependencies := {
  CrossVersion.partialVersion(scalaVersion.value) match {
    case Some((2, scalaMajor)) if scalaMajor >= 11 =>
      libraryDependencies.value :+ ""org.scala-lang.modules"" %% ""scala-xml"" % ""1.0.0""
    case _ =>
      libraryDependencies.value
  }
}
```

### Important changes

For most cases, code that compiled under 2.10.x without deprecation warnings should not be affected. We've verified this by [compiling](https://jenkins-dbuild.typesafe.com:8499/job/Community-2.11.x) a [sizeable number of open source projects](https://github.com/typesafehub/community-builds/blob/master/community-2.11.x.dbuild#L26). 

Changes to the reflection API may cause breakages, but these breakages can be easily fixed in a manner that is source-compatible with Scala 2.10.x. Follow our reflection/macro changelog for [detailed instructions](http://docs.scala-lang.org/overviews/macros/changelog211.html#how_to_make_your_210x_macros_work_in_2110).

We've decided to fix the following more obscure deviations from specified behavior without deprecating them first.
- [SI-4577](https://issues.scala-lang.org/browse/SI-4577) Compile `x match { case _ : Foo.type => }` to `Foo eq x`, as specified. It used to be `Foo == x` (without warning). If that's what you meant, write `case Foo =>`.

The following changes were made after a deprecation cycle (Thank you, [@soc](https://github.com/soc), for leading the deprecation effort!)
- [SI-6809](https://issues.scala-lang.org/browse/SI-6809) Case classes without a parameter list are no longer allowed.
- [SI-7618](https://issues.scala-lang.org/browse/SI-7618) Octal number literals no longer supported.

Finally, some notable improvements and bug fixes:
- [SI-7296](https://issues.scala-lang.org/browse/SI-7296) Case classes with > 22 parameters are now allowed.
- [SI-3346](https://issues.scala-lang.org/browse/SI-3346) Implicit arguments of implicit conversions now guide type inference.
- [SI-6240](https://issues.scala-lang.org/browse/SI-6240) Thread safety of reflection API.
- [#3037](https://github.com/scala/scala/pull/3037) Experimental support for SAM synthesis.
- [#2848](https://github.com/scala/scala/pull/2848) Name-based pattern-matching.
- [SI-7475](https://issues.scala-lang.org/browse/SI-7475) Improvements to access checks, aligned with the spec (see also the linked issues).
- [SI-6169](https://issues.scala-lang.org/browse/SI-6169) Infer bounds of Java-defined existential types.
- [SI-6566](https://issues.scala-lang.org/browse/SI-6566) Right-hand sides of type aliases are now considered invariant for variance checking.
- [SI-5917](https://issues.scala-lang.org/browse/SI-5917) Improve public AST creation facilities.
- [SI-8063](https://issues.scala-lang.org/browse/SI-8063) Expose much needed methods in public reflection/macro API.
- [SI-8126](https://issues.scala-lang.org/browse/SI-8126) Add -Xsource option (make 2.11 type checker behave like 2.10 where possible).

To catch future changes like this early, you can run the compiler under -Xfuture, which makes it behave like the next major version, where possible, to alert you to upcoming breaking changes.

### Deprecations

Deprecation is essential to two of the 2.11.x series' three themes ([faster/smaller/stabler](http://java.dzone.com/articles/state-scala-2013)). They make the language and the libraries smaller, and thus easier to use and maintain, which ultimately improves stability. We are very proud of Scala's first decade, which brought us to where we are, and we are actively working on minimizing the downsides of this legacy, as exemplified by 2.11.x's focus on deprecation, modularization and infrastructure work.

The following language ""warts"" have been deprecated:
- [SI-7605](https://issues.scala-lang.org/browse/SI-7605) Procedure syntax (only under -Xfuture).
- [SI-5479](https://issues.scala-lang.org/browse/SI-5479) DelayedInit. We will continue support for the important `extends App` idiom. We won't drop `DelayedInit` until there's a replacement for important use cases. ([More details and a proposed alternative.](https://issues.scala-lang.org/browse/SI-4330?jql=labels%20%3D%20delayedinit%20AND%20resolution%20%3D%20unresolved))
- [SI-6455](https://issues.scala-lang.org/browse/SI-6455) Rewrite of `.withFilter` to `.filter`: you must implement `withFilter` to be compatible with for-comprehensions.
- [SI-8035](https://issues.scala-lang.org/browse/SI-8035) Automatic insertion of `()` on missing argument lists.
- [SI-6675](https://issues.scala-lang.org/browse/SI-6675) Auto-tupling in patterns.
- [SI-7247](https://issues.scala-lang.org/browse/SI-7247) NotNull, which was never fully implemented -- slated for removal in 2.12.
- [SI-1503](https://issues.scala-lang.org/browse/SI-1503) Unsound type assumption for stable identifier and literal patterns.
- [SI-7629](https://issues.scala-lang.org/browse/SI-7629) View bounds (_under -Xfuture_).

We'd like to emphasize the following library deprecations:
- [#3103](https://github.com/scala/scala/pull/3103), [#3191](https://github.com/scala/scala/pull/3191), [#3582](https://github.com/scala/scala/pull/3582) Collection classes and methods that are (very) difficult to extend safely have been slated for being marked `final`. Proxies and wrappers that were not adequately implemented or kept up-to-date have been deprecated, along with other minor inconsistencies.
- scala-actors is now deprecated and will be removed in 2.12; please follow the steps in the [Actors Migration Guide](http://docs.scala-lang.org/overviews/core/actors-migration-guide.html) to port to Akka Actors
- [SI-7958](https://issues.scala-lang.org/browse/SI-7958) Deprecate `scala.concurrent.future` and `scala.concurrent.promise`
- [SI-3235](https://issues.scala-lang.org/browse/SI-3235) Deprecate `round` on `Int` and `Long` ([#3581](https://github.com/scala/scala/pull/3581)).
- We are looking for maintainers to take over the following modules: [scala-swing](https://github.com/scala/scala-swing), [scala-continuations](https://github.com/scala/scala-continuations). 2.12 will not include them if no new maintainer is found.
  We will likely keep maintaining the other modules (scala-xml, scala-parser-combinators), but help is still greatly appreciated.

Deprecation is closely linked to source and binary compatibility. We say two versions are source compatible when they compile the same programs with the same results. Deprecation requires qualifying this statement: ""assuming there are no deprecation warnings"". This is what allows us to evolve the Scala platform and keep it healthy. We move slowly to guarantee smooth upgrades, but we want to keep improving as well!

### Binary Compatibility

When two versions of Scala are binary compatible, it is safe to compile your project on one Scala version and link against another Scala version at run time. Safe run-time linkage (only!) means that the JVM does not throw a (subclass of) [`LinkageError`](http://docs.oracle.com/javase/7/docs/api/java/lang/LinkageError.html) when executing your program in the mixed scenario, assuming that none arise when compiling and running on the same version of Scala. Concretely, this means you may have external dependencies on your run-time classpath that use a different version of Scala than the one you're compiling with, as long as they're binary compatibile. In other words, separate compilation on different binary compatible versions does not introduce problems compared to compiling and running everything on the same version of Scala.

We check binary compatibility automatically with [MiMa](https://github.com/typesafehub/migration-manager). We strive to maintain a similar invariant for the `behavior` (as opposed to just linkage) of the standard library, but this is not checked mechanically (Scala is not a proof assistant so this is out of reach for its type system).

#### Forwards and Back

We distinguish forwards and backwards compatibility (think of these as properties of a sequence of versions, not of an individual version). Maintaining backwards compatibility means code compiled on an older version will link with code compiled with newer ones. Forwards compatibility allows you to compile on new versions and run on older ones.

Thus, backwards compatibility precludes the removal of (non-private) methods, as older versions could call them, not knowing they would be removed, whereas forwards compatibility disallows adding new (non-private) methods, because newer programs may come to depend on them, which would prevent them from running on older versions (private methods are exempted here as well, as their definition and call sites must be in the same compilation unit).

These are strict constraints, but they have worked well for us in the Scala 2.10.x series. They didn't stop us from fixing [372 issues](https://issues.scala-lang.org/browse/SI-8168?filter=12405&jql=project%20%3D%20SI%20AND%20resolution%20%3D%20fixed%20AND%20fixVersion%20%3E%20%22Scala%202.10.0%22%20and%20fixVersion%20%3C%3D%20%22scala%202.10.4-RC3%22) in the 2.10.x series post 2.10.0. The advantages are clear, so we will maintain this policy in the 2.11.x series, and are looking (but not yet commiting!) to extend it to include major versions in the future.

#### Concretely

Just like the 2.10.x series, we guarantee forwards and backwards compatibility of the `""org.scala-lang"" % ""scala-library"" % ""2.11.x""` and `""org.scala-lang"" % ""scala-reflect"" % ""2.11.x""` artifacts, except for anything under the `scala.reflect.internal` package, as scala-reflect is still experimental. We also strongly discourage relying on the stability of `scala.concurrent.impl` and `scala.reflect.runtime`, though we will only break compatibility for severe bugs here.

Note that we will only enforce _backwards_ binary compatibility for the new modules (artifacts under the groupId `org.scala-lang.modules`). As they are opt-in, it's less of a burden to require having the latest version on the classpath. (Without forward compatibility, the latest version of the artifact must be on the run-time classpath to avoid linkage errors.)

Finally, Scala 2.11.0 introduces `scala-library-all` to aggregate the modules that constitute a Scala release. Note that this means it does not provide forward binary compatibility, whereas the core `scala-library` artifact does. We consider the versions of the modules that `""scala-library-all"" % ""2.11.x""` depends on to be the canonical ones, that are part of the official Scala distribution. (The distribution itself is defined by the new `scala-dist` maven artifact.)

### New features in the 2.11 series

This release contains all of the bug fixes and improvements made in the 2.10 series, as well as:
- Collections
  - Immutable `HashMap`s and `HashSet`s perform faster filters, unions, and the like, with improved structural sharing (lower memory usage or churn).
  - Mutable `LongMap` and `AnyRefMap` have been added to provide improved performance when keys are `Long` or `AnyRef` (performance enhancement of up to 4x or 2x respectively).
  - `BigDecimal` is more explicit about rounding and numeric representations, and better handles very large values without exhausting memory (by avoiding unnecessary conversions to `BigInt`).
  - `List` has improved performance on `map`, `flatMap`, and `collect`.
  - See also Deprecation above: we have slated many classes and methods to become final, to clarify which classes are not meant to be subclassed and to facilitate future maintenance and performance improvements.
- Modularization
  - The core Scala standard library jar has shed 20% of its bytecode. The modules for xml, parsing, swing as well as the (unsupported) continuations plugin and library are available individually or via [scala-library-all](http://search.maven.org/#artifactdetails%7Corg.scala-lang%7Cscala-library-all%7C2.11.0-RC1%7Cpom). Note that this artifact has weaker binary compatibility guarantees than `scala-library` -- as explained above.
  - The compiler has been modularized internally, to separate the presentation compiler, scaladoc and the REPL. We hope this will make it easier to contribute. In this release, all of these modules are still packaged in scala-compiler.jar. We plan to ship them in separate JARs in 2.12.x.
- Reflection, macros and quasiquotes
  - Please see [this detailed changelog](http://docs.scala-lang.org/overviews/macros/changelog211.html) that lists all significant changes and provides advice on forward and backward compatibility.
  - See also this [summary](http://scalamacros.org/news/index.html) of the experimental side of the 2.11 development cycle.
  - [#3321](https://github.com/scala/scala/pull/3321) introduced [Sprinter](http://vladimirnik.github.io/sprinter/), a new AST pretty-printing library! Very useful for tools that deal with source code.
- Back-end
  - The [GenBCode back-end](https://github.com/scala/scala/pull/2620) (experimental in 2.11). See [@magarciaepfl's extensive documentation](http://magarciaepfl.github.io/scala/).
  - A new experimental way of compiling closures, implemented by [@JamesIry](https://github.com/JamesIry). With `-Ydelambdafy:method` anonymous functions are compiled faster, with a smaller bytecode footprint. This works by keeping the function body as a private (static, if no `this` reference is needed) method of the enclosing class, and at the last moment during compilation emitting a small anonymous class that `extends FunctionN` and delegates to it. This sets the scene for a smooth migration to Java 8-style lambdas (not yet implemented).
  - Branch elimination through constant analysis [#2214](https://github.com/scala/scala/pull/2214)
- Compiler Performance
  - Incremental compilation has been improved significantly. To try it out, upgrade to sbt 0.13.2-M2 and add `incOptions := incOptions.value.withNameHashing(true)` to your build! Other build tools are also supported. More info at [this sbt issue](https://github.com/sbt/sbt/issues/1010) -- that's where most of the work happened. More features are planned, e.g. [class-based tracking](https://github.com/sbt/sbt/issues/1104).
  - We've been optimizing the batch compiler's performance as well, and will continue to work on this during the 2.11.x cycle.
  - Improve performance of reflection [SI-6638](https://issues.scala-lang.org/browse/SI-6638)  
- IDE
  - [Numerous bug fixes and improvements!](https://issues.scala-lang.org/browse/SI-8085?jql=component%20%3D%20%22Presentation%20Compiler%22%20AND%20project%20%3D%20SI%20AND%20resolution%20%3D%20fixed%20and%20fixVersion%20%3E%3D%20%22Scala%202.11.0-M1%22%20and%20fixVersion%20%3C%3D%20%20%22Scala%202.11.0-RC1%22%20ORDER%20BY%20updated%20DESC)
- REPL
  - The bytecode decompiler command, :javap, now works with Java 7 [SI-4936](https://issues.scala-lang.org/browse/SI-4936) and has sprouted new options [SI-6894](https://issues.scala-lang.org/browse/SI-6894) (Thanks, [@som-snytt](https://github.com/som-snytt)!)
  - Added command :kind to help to tell ground types from type constructors. [#2340](https://github.com/scala/scala/pull/2340) (Thanks, [George Leontiev](https://github.com/folone) and [Eugene Yokota](https://github.com/eed3si9n)!)
  - The interpreter can now be embedded as a JSR-223 Scripting Engine [SI-874](https://issues.scala-lang.org/browse/SI-874). (Thanks, [Raphael Jolly](https://github.com/rjolly)!)
- Warnings
  - Warn about unused private / local terms and types, and unused imports, under `-Xlint`. This will even tell you when a local `var` could be a `val`.
- Slimming down the compiler
  - The experimental .NET backend has been removed from the compiler.
  - Scala 2.10 shipped with new implementations of the Pattern Matcher and the Bytecode Emitter. We have removed the old implementations.
  - Search and destroy mission for ~5000 chunks of dead code. [#1648](https://github.com/scala/scala/pull/1648/files)

### License clarification

Scala is now distributed under the standard 3-clause BSD license. Originally, the same 3-clause BSD license was adopted, but slightly reworded over the years, and the ""Scala License"" was born. We're now back to the standard formulation to avoid confusion.
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/211675/assets,https://api.github.com/repos/scala/scala/releases/211675,master,https://api.github.com/repos/scala/scala/tarball/v2.11.0-RC1,https://github.com/scala/scala/releases/tag/v2.11.0-RC1,https://api.github.com/repos/scala/scala/zipball/v2.11.0-RC1,v2.11.0-RC1,False,True
97048,2013-11-18T19:39:51Z,2013-11-19T00:46:04Z,Scala 2.11.0-M7,"The highlights for the 2.11.0-M7 release: 
- delambdafication (compiling closures java8-style, as close as you can get on java 6) by @jamesiry
- blackbox/whitebox macro distinction by @xeno-by,
- collection deprecation and mutable LongMap/AnyRefMap by @ichoran,
- several IDE improvements by @dotta (positions for default args, docs on how to hack the compiler in the IDE) and @skyluc (completion for imports)
- for loop support in quasiquotes by @densh
- [Experimental Single Abstract Method support](https://github.com/scala/scala/pull/3037) (Originally introduced in M6, which was never officially released)
- faster, maven-based PR validation (the goal is to have feedback for the full validation suite in well under an hour by M8, and halve that further by throwing more machines at it over the next 6 months)

The full break down of [all 72 merged PRs](https://github.com/scala/scala/issues?milestone=25&page=1&state=closed):

## Features:

#3081   Delay delambdafication and put the lambda's body into the containing class reviewed tested  Opened by @JamesIry 22 days ago 21 comments
#3129   [rebase] blackbox and whitebox macros reviewed  Opened by @adriaanm 7 days ago  7 comments
#3119   New mutable hash map with Long keys: partially solves  and is relevant to . reviewed tested Opened by @Ichoran 8 days ago   17 comments

## IDE support:

#3140    Scope completion not returning members provided by imports tested  Opened by @skyluc 4 days ago    10 comments
#3136    Corrected range positions created during default args expansion reviewed tested    Opened by @dotta 5 days ago 15 comments

## Collections:

#3089   Collections: remove redundant calls to .seq reviewed tested Opened by @retronym 19 days ago 5 comments
#3103   Topic/tidy collections reviewed tested  Opened by @Ichoran 13 days ago  3 comments
#3027   IterableLike grouped : fix documentation tested Opened by @etaty a month ago    1 comment
#3074   Prevent useless filter operation in docs reviewed tested    Opened by @Jentsch a month ago  1 comment
#3144   fix IntMap#foreachValue and LongMap#foreachValue scaladoc reviewed tested   Opened by @xuwei-k 4 days ago   1 comment

## Reflection:

#3143   Revert ""temporarily disables run/reflection-sync-subtypes"" tested   Opened by @retronym 4 days ago  1 comment
#3095   Don't use runtime reflection from the batch compiler. tested    Opened by @retronym 18 days ago 8 comments
#3062   hotfix for reflection tests on Windows tested   Opened by @xeno-by a month ago  2 comments
#3056   hotfix for runtime reflection on java7  Opened by @xeno-by a month ago  6 comments
#3029   reflection sync tested  Opened by @xeno-by a month ago  26 comments
#3057   fixes handling of fancy nested classes in runtime reflection tested Opened by @xeno-by a month ago  15 comments

## Quasiquotes:

#3090   Add support for For loops to quasiquotes reviewed tested    Opened by @densh 19 days ago    18 comments
#3007   Add support for packages into quasiquotes and toolbox, improve handling of fresh names, unhardcode quasiquote expansion logic tested    Opened by @densh 2 months ago   17 comments

## Macros:

#3016   [master] assorted fixes for vampire macros tested   Opened by @xeno-by 2 months ago 4 comments
#3070   better macro impl shape errors tested   Opened by @xeno-by a month ago  2 comments
#3047   deprecates raw tree manipulation facilities in macros.Context reviewed tested   Opened by @xeno-by a month ago  5 comments

## Compiler optimization:

#3094   Avoid needless TypeRef allocation during erasure. reviewed tested   Opened by @retronym 18 days ago 2 comments
#3084   Microoptimization in implicit search reviewed tested    Opened by @retronym 21 days ago 4 comments
#3092   Small implicit optimizations, and  RunDefinitions tested    Opened by @retronym 18 days ago 8 comments

## Compiler/test suite improvements:

#3048   Test cases for SAM restrictions. reviewed tested    Opened by @adriaanm a month ago 1 comment
#3100   Paulper stack reduction tested  Opened by @som-snytt 14 days ago    4 comments
#3033   Traverser and Pickler improvements. tested  Opened by @paulp a month ago    8 comments
#3080   Check file maintainence reviewed tested Opened by @retronym 23 days ago 5 comments
#3135   Revived tests that once depended on xml reviewed tested Opened by @adriaanm 5 days ago  3 comments
#3067   Moving disabled tests to their rightful home. tested    Opened by @retronym a month ago 3 comments

## Improve compiler docs:

#3077   Update description of explicitouter phase. tested   Opened by @retronym a month ago 2 comments
#3145   Added information on how to launch and debug scalac inside Eclipse tested   Opened by @dotta 4 days ago 1 comment
#3104   Update eclipse setup instructions reviewed tested   Opened by @dotta 13 days ago    11 comments
#3139   Updated Eclipse .classpath for partest and scaladoc projects    Opened by @dotta 4 days ago 1 comment

## Modularization / build improvements & cleanups / PR validation speedup:

#3050   Ant labour: osgi uptodate checking and better doc skipping reviewed tested  Opened by @retronym a month ago 5 comments
#3061   Fix problem assembling sources and docs of modules. tested  Opened by @retronym a month ago 7 comments
#3112   Modularize scaladoc... almost reviewed tested   Opened by @adriaanm 10 days ago 12 comments
#3114   M6 modules, partest depends on scala as provided. tested    Opened by @adriaanm 9 days ago  15 comments
#3069   Rework build to allow publishing core to maven reviewed tested  Opened by @adriaanm a month ago 7 comments
#3108   Faster PR validation reviewed   Opened by @adriaanm 11 days ago 8 comments
#3039   Filter JVM debug output for custom options in partest tested    Opened by @huitseeker a month ago   2 comments
#3115   Add buildcharacter.properties to .gitignore. tested Opened by @paulp 8 days ago 2 comments
#3083   Cleanup tools/\* reviewed tested Opened by @retronym 22 days ago 5 comments

## Library improvements:

#3113   Make parameters to implicit value classes private reviewed tested   Opened by @adriaanm 9 days ago  1 comment
#3079   More clear implicitNotFound error for ExecutionContext reviewed tested  Opened by @jamesward 25 days ago    1 comment

## Bug fixes:

#3064   Platform independence for  test case tested Opened by @retronym a month ago 1 comment
#3030    implicit parameters can now guide implicit view inference tested   Opened by @xeno-by a month ago  21 comments
#3026    Tests for protected access tested  Opened by @retronym a month ago 6 comments
#3082    Avoid bridges to identical signatures over value classes tested    Opened by @retronym 22 days ago 4 comments
#3059    fixes weird typing of quasiquote arguments tested  Opened by @densh a month ago    10 comments
#3068    Deterministic warnings for pattern matcher, take 2 reviewed tested Opened by @retronym a month ago 6 comments
#3060   : Additional test case covering sbt/sbt#914  tested Opened by @harrah a month ago   3 comments
#3121    Adding Serializable to ResizableArrayAccess inner class reviewed tested    Opened by @rjfwhite 8 days ago  5 comments
#3076    Deprecate procedure syntax reviewed tested Opened by @soc a month ago  9 comments
#3042    resurrect the REPL's :sh command reviewed tested   Opened by @gourlaysama a month ago  12 comments
#3045    Fix AsSeenFrom of ThisType from TypeVar prefix reviewed tested Opened by @retronym a month ago 3 comments
#3123    Support class based wrappers in REPL tested    Opened by @som-snytt 8 days ago 9 comments
#3101    post-erasure signature clashes are now macro-aware reviewed tested Opened by @xeno-by 13 days ago  2 comments
#3006    - don't iterate over all keys in MapWrapper.containsKey() tested
#3073    Favour module accessors symbols in rebind reviewed tested  Opened by @retronym a month ago 3 comments
#3086    - parallel collections should use default ExecutionContext reviewed tested Opened by @axel22 21 days ago   5 comments
#3088    FOUND: stray undetermined type params in vicinity of implicits reviewed tested Opened by @retronym 19 days ago 9 comments
#3111    Deprecate methods `future` and `promise` in the `scala.concurren... reviewed tested    Opened by @phaller 10 days ago  14 comments
#3141    Fix false positive procedure warnings reviewed tested  Opened by @soc 4 days ago   8 comments
#3127    Use an intrinsic for the next power of two calculation. reviewed tested    Opened by @RajivKurian 7 days ago   9 comments

## Typos fixed:

#3151   fix typo tested Opened by @xuwei-k 21 hours ago 1 comment
#3153   Fix a typo in the `scala` man page reviewed tested  Opened by @misfo 8 hours ago    1 comment
#3142   Fixes markdown syntax   Opened by @skyluc 4 days ago    1 comment
#3099   from Issue #3098  tested    Opened by @yinxusen 14 days ago 1 comment

## Synch with 2.10:

#3133   Merge 2.10 reviewed     Opened by @adriaanm 5 days ago  7 comments
#3041   Merge 2.10.x into master    Opened by @gkossakowski a month ago 12 comments
#3051   Merge 2.10.x to master (again)  Opened by @retronym a month ago 6 comments
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/97048/assets,https://api.github.com/repos/scala/scala/releases/97048,2.12.x,https://api.github.com/repos/scala/scala/tarball/v2.11.0-M7,https://github.com/scala/scala/releases/tag/v2.11.0-M7,https://api.github.com/repos/scala/scala/zipball/v2.11.0-M7,v2.11.0-M7,False,True
54280,2013-09-07T00:05:56Z,2013-09-28T00:50:20Z,Scala 2.11.0-M5,"The fifth development milestone of Scala 2.11 brings the following [goodness](https://github.com/scala/scala/issues?direction=desc&labels=reviewed&milestone=20&page=1&sort=comments&state=closed):
- Pattern matcher: extractors became name-based thanks to @paulp (#2848)
- @adriaanm continues his modularization effort: [scala.xml](https://github.com/scala/scala-xml) and [scala.util.parsing](https://github.com/scala/scala-parser-combinators) live in separate repositories now (#2855)
- more bits of experimental backend based on ASM by @magarciaEPFL (#2711)
- improvements to stacktrace printing in REPL by @som-snytt and @qerub (#2877 and #2824)
- clarification of Scala license (#2881)

We're working on an [overview of the Scala 2.11 release](http://docs.scala-lang.org/scala/2.11/) -- [PRs](https://github.com/scala/scala/blob/gh-pages/2.11/index.markdown) welcome!

# License clarification

Scala was released with slightly modified variant of 3-clause BSD license. The fact that this is not exactly 3-clause BSD license was causing problems for people adopting Scala because they would have to go through legal process that approves a new license in their organization.

We've clarified the situation but switching to standard wording of 3-clause BSD license. The intent and meaning of the license hasn't change because previous version was just reworded version of 3-clause BSD license.

# Known issues

Scala compiler artifact (due to scaladoc) depends on previous version (2.11.0-M4) of `scala-xml` and `scala-parser-combinators` modules. If you depend on `scala-compiler` (e.g. your are a macro writer) then you need to use extra care when upgrading to M5. See [scala-partest#3](https://github.com/scala/scala-partest/pull/3) which discusses the problem in depth and offers a work-around for sbt-based builds.

# Regressions

We'd [love to hear](https://issues.scala-lang.org/) about any regressions since 2.10.3 or 2.11.0-M4. Before doing so, please search for existing bugs and/or consult with the [scala-user](https://groups.google.com/forum/#!forum/scala-user) mailing list to be sure it is a genuine problem.

When reporting a bug, please set the 'Affects Version' field to 2.11.0-M5 and add the `regression` label where appropriate.

# Scala IDE Lithium (4.0) for Eclipse

Please point your Eclipse 4.2/4.3 at http://download.scala-ide.org/sdk/e38/scala211/dev/site/ to update to the latest version that includes this milestone!
For more info, please see [the getting started guide](http://scala-ide.org/docs/user/gettingstarted.html).

# Binary compatibility

Note that this release is not binary compatible with the 2.10.x series, so you will need to obtain a fresh build of your dependencies against this version.
",https://api.github.com/users/gkossakowski,4217,gkossakowski,https://api.github.com/repos/scala/scala/releases/54280/assets,https://api.github.com/repos/scala/scala/releases/54280,master,https://api.github.com/repos/scala/scala/tarball/v2.11.0-M5,https://github.com/scala/scala/releases/tag/v2.11.0-M5,https://api.github.com/repos/scala/scala/zipball/v2.11.0-M5,v2.11.0-M5,False,True
10402,2013-07-11T07:58:46Z,2013-07-16T01:32:11Z,Scala 2.11.0-M4,"The fourth development milestone of Scala 2.11 brings the following [goodness](https://github.com/scala/scala/issues?direction=desc&labels=reviewed&milestone=18&page=1&sort=comments&state=closed):
- initial version of a new experimental back-end based on ASM by @magarciaEPFL (#2620)
- [quasiquotes](http://docs.scala-lang.org/overviews/macros/quasiquotes.html) by @densh (#2714)
- a more modular standard library: scala.xml and scala.util.parsing now come in separate jars (#2704)
  - we now also use a bog-standard [jline 2.11](https://github.com/jline/jline2/tree/jline-2.11)
- @soc implemented deprecation of the confusing octal literals (#2343)
- @JamesIry and @gkossakowski reduced scalac's memory retention (#2605)
- a Semmle-driven cleanup of the compiler's code base by @lexspoon (#2693)
- @paulp thwarted dangerous implicits in #2625 (SI-6899)
- other [bug fixes](https://issues.scala-lang.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project+%3D+SI+AND+resolution+%3D+fixed+AND+fixVersion+%3D+%22Scala+2.11.0-M4%22+ORDER+BY+key+ASC%2C+priority+DESC)
- a growing number of contributions -- thank you!

We're working on an [overview of the Scala 2.11 release](http://docs.scala-lang.org/scala/2.11/) -- [PRs](https://github.com/scala/scala/blob/gh-pages/2.11/index.markdown) welcome!

# Coming up

For the [next milestone](https://github.com/scala/scala/issues?milestone=20&state=open), slated for mid August, we're working on:
- optimizations for the experimental back-end (#2711 and others)
- a new translation for closures that lifts a closure body to a method
- [support for SAM target typing](https://github.com/adriaanm/scala/tree/sammy)
- more modules

# Regressions

We'd [love to hear](https://issues.scala-lang.org/) about any regressions since 2.10.2 or 2.11.0-M3. Before doing so, please search for existing bugs and/or consult with the [scala-user](https://groups.google.com/forum/#!forum/scala-user) mailing list to be sure it is a genuine problem.

When reporting a bug, please set the 'Affects Version' field to 2.11.0-M4 and add the `regression` label where appropriate.

# Scala IDE Lithium (4.0) for Eclipse

Please point your Eclipse 4.2/4.3 at http://download.scala-ide.org/sdk/e38/scala211/dev/site/ to update to the latest version that includes this milestone!
For more info, please see [the getting started guide](http://scala-ide.org/docs/user/gettingstarted.html).

# Binary compatibility

Note that this release is not binary compatible with the 2.10.x series, so you will need to obtain a fresh build of your dependencies against this version. 

@cunei is working on [a tool](http://typesafehub.github.io/distributed-build/0.6.0/index.html) to solve this problem. The current version already builds [akka, genjavadoc, sbinary, sbt, sbt-full-library, sbt-republish, scala, scala-arm, scala-stm, scalabuff, scalacheck, scalatest, scalaz, shapeless, specs2, sperformance, zeromq-scala-binding, zinc](https://jenkins-dbuild.typesafe.com:8499/job/Community8/1/consoleFull).
",https://api.github.com/users/adriaanm,91083,adriaanm,https://api.github.com/repos/scala/scala/releases/10402/assets,https://api.github.com/repos/scala/scala/releases/10402,master,https://api.github.com/repos/scala/scala/tarball/v2.11.0-M4,https://github.com/scala/scala/releases/tag/v2.11.0-M4,https://api.github.com/repos/scala/scala/zipball/v2.11.0-M4,v2.11.0-M4,False,True
