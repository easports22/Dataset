id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
7987533,2017-10-04T02:24:21Z,2017-10-04T02:33:41Z,Macroergonomics,"A minor release to fix to very minor bugs:

* #647 make macros work with parameterized type classes
* #646 fix a serialization issue with SketchMap ",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/7987533/assets,https://api.github.com/repos/twitter/algebird/releases/7987533,develop,https://api.github.com/repos/twitter/algebird/tarball/v0.13.3,https://github.com/twitter/algebird/releases/tag/v0.13.3,https://api.github.com/repos/twitter/algebird/zipball/v0.13.3,v0.13.3,False,False
7759880,2017-09-14T19:54:30Z,2017-09-14T20:04:00Z,Gentle Caregiver,"Identical to 0.13.1 except on scala 2.12 we turn on optimization and inline from the algebird package.

See #645 ",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/7759880/assets,https://api.github.com/repos/twitter/algebird/releases/7759880,develop,https://api.github.com/repos/twitter/algebird/tarball/v0.13.2,https://github.com/twitter/algebird/releases/tag/v0.13.2,https://api.github.com/repos/twitter/algebird/zipball/v0.13.2,v0.13.2,False,False
7759641,2017-09-14T19:05:30Z,2017-09-14T19:47:28Z,Abrasive Caregiver,"This is a minor release that fixes some implicit resolution issues and adds a couple of utility methods. It also fixes the 2.12 artifact which was incorrectly inlining.

Changes:
======
* #622 fix ambiguous implicit for Max semigroup
* #637 add ability to create a BloomFilter from an Iterator
* Make Successible Serializable (accidentally pushed directly to develop. woops!)
* #641 make `implicitly[Semigroup[BigDecimal]]` work again
* #627 add more utility methods to Interval (including ability to make open and closed intervals and isEmpty on an Intersection.
* #643 remove incorrect optimization setting in 2.12 to prevent inlining outside of the project.",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/7759641/assets,https://api.github.com/repos/twitter/algebird/releases/7759641,develop,https://api.github.com/repos/twitter/algebird/tarball/v0.13.1,https://github.com/twitter/algebird/releases/tag/v0.13.1,https://api.github.com/repos/twitter/algebird/zipball/v0.13.1,v0.13.1,False,False
5445293,2017-02-13T21:40:25Z,2017-02-13T21:43:51Z,Scala 2.12 goodness!,"This is the first Algebird release to publish Scala 2.12 artifacts!
Apart from that, here are some of the changes since the last release:

Various BloomFilter improvements:
Remove seed variable in BloomFilter and rename k to hashIndex: https://github.com/twitter/algebird/pull/557
Polymorphic Bloom filters: https://github.com/twitter/algebird/pull/607
Optimize BloomFilter significantly: https://github.com/twitter/algebird/pull/610
Bloom filter distance function: https://github.com/twitter/algebird/pull/612
Optimize Hamming distance for Bloom Filters: https://github.com/twitter/algebird/pull/617

Incorporate more Algebra types:
Use standard algebra types: https://github.com/twitter/algebird/pull/523
Use more algebra types - https://github.com/twitter/algebird/pull/620

SpaceSaver updates:
Widen the visibility of SpaceSaver.SSMany, SpaceSaver.SSOne: https://github.com/twitter/algebird/issues/577
SpaceSaver fromBytes & toBytes: https://github.com/twitter/algebird/pull/603
Catch OOM in SpaceSaverTest: https://github.com/twitter/algebird/pull/614

Remove typeclass from interval constructor: https://github.com/twitter/algebird/pull/605

Better toString in ExpHistogram: https://github.com/twitter/algebird/pull/604

Remove legacy CountMinSketchMonoid: https://github.com/twitter/algebird/pull/602
Convert all laws to take Equiv instances, deprecate Equiv versions: https://github.com/twitter/algebird/pull/595
replace FromIntLike with Ring and toK function: https://github.com/twitter/algebird/pull/594
bail out of SemigroupMacro.sumOption for `to.isEmpty`: https://github.com/twitter/algebird/pull/599
Handle empty in Generated{Product, Abstract}Algebra: https://github.com/twitter/algebird/pull/597
Add explicit return types to Group instances for Moments, AveragedValue: https://github.com/twitter/algebird/pull/596
Remove view bounds on Moments, DecayedValue, AveragedValue: https://github.com/twitter/algebird/pull/592
Add MonoidAggregator.collectBefore: https://github.com/twitter/algebird/pull/611

Thanks to @johandahlberg , @johnynek , @ElPicador , @sritchie , @isnotinvain for the contributions!
",https://api.github.com/users/piyushnarang,9885908,piyushnarang,https://api.github.com/repos/twitter/algebird/releases/5445293/assets,https://api.github.com/repos/twitter/algebird/releases/5445293,develop,https://api.github.com/repos/twitter/algebird/tarball/0.13.0,https://github.com/twitter/algebird/releases/tag/0.13.0,https://api.github.com/repos/twitter/algebird/zipball/0.13.0,0.13.0,False,False
5310398,2017-01-31T01:19:04Z,2017-01-31T01:43:29Z,Early Scala 2.12 release,"This is an early release of some Scala 2.12 Algebird packages that contains some binary incompatible changes. Please pick up release: https://github.com/twitter/algebird/releases/tag/0.13.0. That contains the appropriate set of Scala 2.12 Algebird artifacts. 
",https://api.github.com/users/piyushnarang,9885908,piyushnarang,https://api.github.com/repos/twitter/algebird/releases/5310398/assets,https://api.github.com/repos/twitter/algebird/releases/5310398,develop,https://api.github.com/repos/twitter/algebird/tarball/0.12.4,https://github.com/twitter/algebird/releases/tag/0.12.4,https://api.github.com/repos/twitter/algebird/zipball/0.12.4,0.12.4,False,True
4821759,2016-12-02T22:15:55Z,2016-12-02T22:53:57Z,Even Faster SumOption!,"The main new feature of this release is a faster (benchmarked!) implementation of tuple and product semigroup sumOptions. This means if you are aggregating on scalding or spark, you should see a significant (~ 2x faster).

There is a new `Set` membership monoid called `SetDiff`. It can model adding and removing from sets (which can be useful for applications in summingbird).

We have an exponential histogram Fold, which is an approximate data-structure that can tell you approximate counts over sliding windows (see #568). A future work will add a monoid for this type, however when possible, using the Fold is better since it has better error properties.

Lastly, there are many new docs.

Huge thanks to @sritchie who was the main contributor to this release.

### changelog:
- Add `SetDiff` data structure to `algebird-core`: https://github.com/twitter/algebird/pull/555
- Add `Ring[BigDecimal]`, modeled after `Ring[BigInt]`: https://github.com/twitter/algebird/pull/553
- ""Exponential Histogram"" sliding window counter implementation added to `algebird-core` as `ExpHist`: https://github.com/twitter/algebird/pull/568
- improve HLLSeries performance: https://github.com/twitter/algebird/pull/575
- Add a microsite at https://twitter.github.io/algebird via the `sbt-microsites` plugin, along with docs for all typeclasses and data structures: https://github.com/twitter/algebird/pull/576
- Adds lots of scalacheck `Arbitrary` and `Gen` instances to `algebird-test`, under `com.twitter.algebird.scalacheck.{ gen, arbitrary }`: https://github.com/twitter/algebird/pull/579
- Add `Monoid[Max[Vector[T]]]`, `Monoid[Max[Stream[T]]]`: https://github.com/twitter/algebird/pull/579
- Add `FirstAggregator` and `LastAggregator`, and docs and API / perf improvements for `First`, `Last`, `Min`, `Max`: https://github.com/twitter/algebird/pull/579
- Add `LawsEquiv` versions of all laws: https://github.com/twitter/algebird/pull/584
- Deprecates broken group/ring for `Future`/`Try`: https://github.com/twitter/algebird/pull/584
- Add `metricsLaws[T]` to `BaseProperties` in `algebird-test`: https://github.com/twitter/algebird/pull/584
- Modify generated `Tuple2Monoid`, etc to extend `TupleNSemigroup`, giving subclasses access to efficient `sumOption`: https://github.com/twitter/algebird/pull/585
- optimize `Generated{Abstract,Product}Algebra.sumOption` with benchmarking https://github.com/twitter/algebird/pull/591
- Add an efficient `sumOption`, `+`, `-`, methods and docs to `AveragedValue`: https://github.com/twitter/algebird/pull/589
",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/4821759/assets,https://api.github.com/repos/twitter/algebird/releases/4821759,develop,https://api.github.com/repos/twitter/algebird/tarball/v0.12.3,https://github.com/twitter/algebird/releases/tag/v0.12.3,https://api.github.com/repos/twitter/algebird/zipball/v0.12.3,v0.12.3,False,False
4218633,2016-09-23T22:01:10Z,2016-09-23T22:22:14Z,Add me maybe,"This is an optimization and bug-fix release that is compatible with `0.12.x`. We add two new features: `Semigroup.maybePlus[T](t: T, o: Option[T]): T` and `Aggregator.numericSum` to convert to double and and sum from any `scala.math.Numeric`.

The full change log is below. Thanks to all contributors!
- Optimize `CMS.create(Seq[K])` #537
- Add sumOption support to primitive Rings #538
- Add Aggregator.numericSum function #539
- Add code coverage checks #541
- Add Semigroup.maybePlus for combining a value with an optional value. #544
- Clean up compilation warnings #546
- Fix algebird-spark to work with spark 2 (#550)
",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/4218633/assets,https://api.github.com/repos/twitter/algebird/releases/4218633,develop,https://api.github.com/repos/twitter/algebird/tarball/v0.12.2,https://github.com/twitter/algebird/releases/tag/v0.12.2,https://api.github.com/repos/twitter/algebird/zipball/v0.12.2,v0.12.2,False,False
3523797,2016-06-26T00:15:36Z,2016-06-26T00:43:35Z,"Better Aggregator Methods, Faster CountMinSketch and Batched!","This release adds many convenience methods to `Aggregator`, adds a new type called `Batched[T]`, and speeds up CMS.

Aggregator now has methods for reservoir sampling, and more top-K (sort*Take) aggregators. Batched allows you to defer doing any work on `plus` until you have a certain size, then it calls `sumOption` internally. This is designed for aggregations that are expensive to do iteratively, but sumOption can be made efficient. Lastly, CMS was significantly improved in performance, a sumOption method was added, and a [mutable builder (CMSSummation)](https://github.com/twitter/algebird/blob/v0.12.1/algebird-core/src/main/scala/com/twitter/algebird/CountMinSketch.scala#L139) was added (see #533).

This release should be 100% binary compatible with `0.12.0` (this check is now part of the travis-ci checks we run).
- Add an Identity Monad #511 
- Improve toRichTraverable to work with Iterator also #518 #535 
- fix several flakey tests #510 #514 #525 
- Improve SpaceSaver design #519 
- Add sortByTake, sortByReverseTake to Aggregator #527 
- Add a randomSample and reservoirSample  aggregators #529 
- Add a Batched type for converting plus to sumOption (defer plus until you have a batch): #530 
- Add a default size to appoximatePercentile: #531 
- Add a .group method to MapAlgebra and RichTraversable #532 
- Optimize CountMinSketch, add a mutable Builder for faster construction: #533 

Thank you to:
@joshualande @non @dossett @jnievelt @piyushnarang @koertkuipers @Gabriel439 @NathanHowell @johnynek @ianoc 
",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/3523797/assets,https://api.github.com/repos/twitter/algebird/releases/3523797,develop,https://api.github.com/repos/twitter/algebird/tarball/v0.12.1,https://github.com/twitter/algebird/releases/tag/v0.12.1,https://api.github.com/repos/twitter/algebird/zipball/v0.12.1,v0.12.1,False,False
2534203,2016-02-02T02:50:20Z,2016-02-02T03:13:59Z,More Speed,"- Implement an appendMonoid Aggregator factory which yields aggregators…: https://github.com/twitter/algebird/pull/501
- Dealing with probabilistic tests: https://github.com/twitter/algebird/pull/478
- Add Applicative.sequenceGen: https://github.com/twitter/algebird/pull/498
- Create a sparse Count-Min-Sketch.: https://github.com/twitter/algebird/pull/464
- fix name and visibility of negativePowersOfTwo: https://github.com/twitter/algebird/pull/492
- Speed up HLL presentation by 100x: https://github.com/twitter/algebird/pull/491
- Test Semigroup#sumOption using Iterator instead of List: https://github.com/twitter/algebird/pull/490
- Fix tests that were not actually running: https://github.com/twitter/algebird/pull/485
- add immutable version of sorted(Reverse)Take: https://github.com/twitter/algebird/pull/484
- Cuber/roller macros: https://github.com/twitter/algebird/pull/483
- Add sanity requirement for Approximate: https://github.com/twitter/algebird/pull/481
- Ioconnell/make develop version have snapshot suffix: https://github.com/twitter/algebird/pull/482
- Upgrade scalacheck and scalatest: https://github.com/twitter/algebird/pull/480
- Adding scoped top-N CMS monoid: https://github.com/twitter/algebird/pull/471
- Fix Qtree quantileBounds off-by-one error: https://github.com/twitter/algebird/pull/472
- Move benchmarks to JMH: https://github.com/twitter/algebird/pull/473
- Ianoc/q tree benchmark more coverage: https://github.com/twitter/algebird/pull/474
- Optimize QTree a bunch: https://github.com/twitter/algebird/pull/475
- Disable coveralls, shows up as builds pending that are long finished: https://github.com/twitter/algebird/pull/476
",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/2534203/assets,https://api.github.com/repos/twitter/algebird/releases/2534203,develop,https://api.github.com/repos/twitter/algebird/tarball/v0.12.0,https://github.com/twitter/algebird/releases/tag/v0.12.0,https://api.github.com/repos/twitter/algebird/zipball/v0.12.0,v0.12.0,False,False
1602664,2015-07-29T15:54:05Z,2015-07-29T15:55:31Z,Sparking up some aggregators,"Version 0.11.0

Move CMSHasherByteArray from scalding: https://github.com/twitter/algebird/pull/467
Upgrade sbt launcher script (sbt-extras): https://github.com/twitter/algebird/pull/469
Create case class macros for algebraic structures: https://github.com/twitter/algebird/pull/466
Refactor MapAggregator: https://github.com/twitter/algebird/pull/462
Algebird support for spark: https://github.com/twitter/algebird/pull/397
Add MapAggregator from 1 (key, aggregator) pair: https://github.com/twitter/algebird/pull/452
Remove unnecessary use of scala.math: https://github.com/twitter/algebird/pull/455
Don't call deprecated HyperLogLog methods in tests: https://github.com/twitter/algebird/pull/456
Update product_generators.rb: https://github.com/twitter/algebird/pull/457
Pzheng/gaussian euclidean: https://github.com/twitter/algebird/pull/448
",https://api.github.com/users/ianoc,446652,ianoc,https://api.github.com/repos/twitter/algebird/releases/1602664/assets,https://api.github.com/repos/twitter/algebird/releases/1602664,develop,https://api.github.com/repos/twitter/algebird/tarball/0.11.0,https://github.com/twitter/algebird/releases/tag/0.11.0,https://api.github.com/repos/twitter/algebird/zipball/0.11.0,0.11.0,False,False
1323849,2015-05-21T17:44:56Z,2015-05-21T17:56:12Z,QTreeAggregators and Easier to Use HLL,"- Make HLL easier to use, add Hash128 typeclass #440 
- add ! to ApproximateBoolean #442 
- add QTreeAggregator and add approximatePercentileBounds to Aggregator #443 
- Make level configurable in QTreeAggregators #444 
",https://api.github.com/users/egonina,3441503,egonina,https://api.github.com/repos/twitter/algebird/releases/1323849/assets,https://api.github.com/repos/twitter/algebird/releases/1323849,develop,https://api.github.com/repos/twitter/algebird/tarball/0.10.1,https://github.com/twitter/algebird/releases/tag/0.10.1,https://api.github.com/repos/twitter/algebird/zipball/0.10.1,0.10.1,False,False
1284237,2015-05-11T20:28:27Z,2015-05-11T21:07:36Z,"HyperLogLogSeries, CMS enhancements, AdaptiveCache, new Aggregators","- HyperLogLogSeries #295
- CMS: add contramap to convert CMS[K] to CMS[L], add support for String and Bytes, remove Ordering context bound for K #399
- AdaptiveCache #419
- Add MapAggregator to compose tuples of (key, agg) pairs #411
- EventuallyAggregator and variants #407
- Add HLL method to do error-based Aggregator #438
- Speed up QTree #433
- Added function to safely downsize a HyperLogLog sketch #418
- Bumping to bijection 0.8.0 #441
- Now on Scala 2.10.5
",https://api.github.com/users/jnievelt,4684038,jnievelt,https://api.github.com/repos/twitter/algebird/releases/1284237/assets,https://api.github.com/repos/twitter/algebird/releases/1284237,develop,https://api.github.com/repos/twitter/algebird/tarball/0.10.0,https://github.com/twitter/algebird/releases/tag/0.10.0,https://api.github.com/repos/twitter/algebird/zipball/0.10.0,0.10.0,False,False
872989,2015-01-21T23:13:45Z,2015-01-21T23:20:37Z,"Now with better CMS hashing, easier Aggregations, and more!","- Replace mapValues with one single map to avoid serialization in frameworks like Spark. #344
- Add Fold trait for composable incremental processing (for develop) #350
- Add a GC friendly LRU cache to improve SummingCache #341
- BloomFilter should warn or raise on unrealistic input. #355
- GH-345: Parameterize CMS to CMS[K] and decouple counting/querying from heavy hitters #354
- Add Array Monoid & Group. #356
- Improvements to Aggregator #359
- Improve require setup for depth/delta and associated test spec #361
- Bump from 2.11.2 to 2.11.4 #365
- Move to sbt 0.13.5 #364
- Correct wrong comment in estimation function #372
- Add increments to all Summers #373
- removed duplicate semigroup #375
- GH-381: Fix serialization errors when using new CMS implementation in Storm #382
- Fix snoble's name #384
- Lift methods for Aggregator and MonoidAggregator #380
- applyCumulative method on Aggregator #386
- Add Aggregator.zip #389
- GH-388: Fix CMS test issue caused by roundtripping depth->delta->depth #395
- GH-392: Improve hashing of BigInt #394
- add averageFrom to DecayedValue #391
- Freshen up Applicative instances a bit #387
- less noise on DecayedValue tests #405
- Preparer #400
- Upgrade bijection to 0.7.2 #406
",https://api.github.com/users/isnotinvain,372969,isnotinvain,https://api.github.com/repos/twitter/algebird/releases/872989/assets,https://api.github.com/repos/twitter/algebird/releases/872989,develop,https://api.github.com/repos/twitter/algebird/tarball/0.9.0,https://github.com/twitter/algebird/releases/tag/0.9.0,https://api.github.com/repos/twitter/algebird/zipball/0.9.0,0.9.0,False,False
757232,2014-12-04T23:39:04Z,2014-12-04T23:43:38Z,Bringing Aggregator Goodness to 0.8 branch,"Similar to the 0.7.2 release, this is identical to the 0.8 release except that it has many Aggregators and Folds added.

See: https://github.com/twitter/algebird/blob/0.8.2/algebird-core/src/main/scala/com/twitter/algebird/Aggregator.scala#L55

There are now Aggregators for count, size, max, maxBy, min, minBy, forall, exists, sortedTake, sortedReverseTake, toSet, toList, uniqueCount and a few more.

Also, by an enrichment (for binary compatibility), you can .join two aggregators to aggregate a sequence (or a Scalding TypedPipe) without passing over it twice.

If you are not operating in parallel, the Fold type is just as useful. You can toFold and Aggregator, which can also be joined.

Aggregate away!
",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/757232/assets,https://api.github.com/repos/twitter/algebird/releases/757232,develop,https://api.github.com/repos/twitter/algebird/tarball/0.8.2,https://github.com/twitter/algebird/releases/tag/0.8.2,https://api.github.com/repos/twitter/algebird/zipball/0.8.2,0.8.2,False,False
757040,2014-12-04T22:08:30Z,2014-12-04T22:19:33Z,More Aggregators for Ye Olde 0.7 branch,"This is identical to the 0.7 release except that it has many Aggregators and Folds added.

See: https://github.com/twitter/algebird/blob/0.7.2/algebird-core/src/main/scala/com/twitter/algebird/Aggregator.scala#L55

There are now Aggregators for `count, size, max, maxBy, min, minBy, forall, exists, sortedTake, sortedReverseTake, toSet, toList, uniqueCount` and a few more.

Also, by an enrichment (for binary compatibility), you can `.join` two aggregators to aggregate a sequence (or a Scalding TypedPipe) without passing over it twice.

If you are not operating in parallel, the Fold type is just as useful. You can `toFold` and Aggregator, which can also be joined.

Aggregate away! 
",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/757040/assets,https://api.github.com/repos/twitter/algebird/releases/757040,develop,https://api.github.com/repos/twitter/algebird/tarball/0.7.2,https://github.com/twitter/algebird/releases/tag/0.7.2,https://api.github.com/repos/twitter/algebird/zipball/0.7.2,0.7.2,False,False
546890,2014-09-09T21:05:18Z,2014-09-10T02:48:33Z,Now with 2.11 support!,"- Removes deprecated monoid: https://github.com/twitter/algebird/pull/342
- Use some value classes: https://github.com/twitter/algebird/pull/340
- WIP: Algebird 210 211: https://github.com/twitter/algebird/pull/337
- Use Builder in Seq/List Monoids: https://github.com/twitter/algebird/pull/338
- Add a commment to close 334: https://github.com/twitter/algebird/pull/339
- Make trait public that should never have been private: https://github.com/twitter/algebird/pull/335
- Fix some issues with Successible/Predessible: https://github.com/twitter/algebird/pull/332
- Add Applicative and Functor as superclasses of Monad: https://github.com/twitter/algebird/pull/330
- Updated Maven section to updated version 0.7.0: https://github.com/twitter/algebird/pull/329
",https://api.github.com/users/ianoc,446652,ianoc,https://api.github.com/repos/twitter/algebird/releases/546890/assets,https://api.github.com/repos/twitter/algebird/releases/546890,develop,https://api.github.com/repos/twitter/algebird/tarball/0.8.0,https://github.com/twitter/algebird/releases/tag/0.8.0,https://api.github.com/repos/twitter/algebird/zipball/0.8.0,0.8.0,False,False
410616,2014-07-03T19:07:37Z,2014-07-03T19:09:09Z,"Heuristic based aggregator, simplify the space saver","- simplification for spacesaver. before buckets were kept in an option str...: https://github.com/twitter/algebird/pull/308
- Dynamic Summer, may use heuristics to decide not to keep a tuple in a buffer for aggregation.: https://github.com/twitter/algebird/pull/314
- Was a missing call to the update if we had flushed. Now we just do it as...: https://github.com/twitter/algebird/pull/324
- Bump to 2.10.4 in travis: https://github.com/twitter/algebird/pull/323
- Feature/auto formatter ran: https://github.com/twitter/algebird/pull/321
- Little commit fixing up some spacing per our norms:: https://github.com/twitter/algebird/pull/319
- provider methods for java: https://github.com/twitter/algebird/pull/317
- Serializable adaptive matrix: https://github.com/twitter/algebird/pull/318
- Clean up comments: https://github.com/twitter/algebird/pull/315
- make distribution immutable now that it contains mutable counters: https://github.com/twitter/algebird/pull/313
- a monoid that keeps track of the monoid usage: https://github.com/twitter/algebird/pull/311
",https://api.github.com/users/ianoc,446652,ianoc,https://api.github.com/repos/twitter/algebird/releases/410616/assets,https://api.github.com/repos/twitter/algebird/releases/410616,develop,https://api.github.com/repos/twitter/algebird/tarball/0.7.0,https://github.com/twitter/algebird/releases/tag/0.7.0,https://api.github.com/repos/twitter/algebird/zipball/0.7.0,0.7.0,False,False
279046,2014-04-18T23:19:38Z,2014-04-18T23:22:31Z,More focus on performance,"- make constructors for SpaceSaver subclasses public so that deserializers..: https://github.com/twitter/algebird/pull/289
- Restoring optimized SketchMapMonoid#sumOption: https://github.com/twitter/algebird/pull/293
- Newer caliper hll benchmark: https://github.com/twitter/algebird/pull/297
- hll optimization: https://github.com/twitter/algebird/pull/299
- Optimize the storage backend used in sketch map: https://github.com/twitter/algebird/pull/301
- migrate async summers from Summingbird: https://github.com/twitter/algebird/pull/296
- add sumOption to EventuallySemiGroup: https://github.com/twitter/algebird/pull/306
- Heavyhitters no longer attempts lazy storage in SketchMap: https://github.com/twitter/algebird/pull/305
- Async Maps performance improvements: https://github.com/twitter/algebird/pull/302
- Make the AsyncListSum be immutable again: https://github.com/twitter/algebird/pull/309
",https://api.github.com/users/ianoc,446652,ianoc,https://api.github.com/repos/twitter/algebird/releases/279046/assets,https://api.github.com/repos/twitter/algebird/releases/279046,develop,https://api.github.com/repos/twitter/algebird/tarball/0.6.0,https://github.com/twitter/algebird/releases/tag/0.6.0,https://api.github.com/repos/twitter/algebird/zipball/0.6.0,0.6.0,False,False
213148,2014-03-06T21:37:59Z,2014-03-06T21:39:52Z,Version 0.5.0,"- Remove handling that doesn't seem needed/wanted for longs: https://github.com/twitter/algebird/pull/287
- Add average() for DecayedValue: https://github.com/twitter/algebird/pull/286
- SketchMapParams can support being constructed with both width/depth and eps/delta: https://github.com/twitter/algebird/pull/285
- undo the undo of the interval fixes: https://github.com/twitter/algebird/pull/283
- Fix priority queue bug found by scalacheck: https://github.com/twitter/algebird/pull/280
- Adds type parameters to Intersection for more precision: https://github.com/twitter/algebird/pull/279
- Make resolver consistent with scalding: https://github.com/twitter/algebird/pull/276
- remove Math use in test: https://github.com/twitter/algebird/pull/275
- Remove extends function from algebird: https://github.com/twitter/algebird/pull/274
- remove unnecessary implicit requirement: https://github.com/twitter/algebird/pull/272
- Fix SketchMapMonoid zero: https://github.com/twitter/algebird/pull/269
- Make SketchMapMonoid params public: https://github.com/twitter/algebird/pull/265
- Add Predecessible and methods to Interval: https://github.com/twitter/algebird/pull/262
- Implement StreamSummary data structure for finding frequent/top-k items: https://github.com/twitter/algebird/pull/259
",https://api.github.com/users/jcoveney,830087,jcoveney,https://api.github.com/repos/twitter/algebird/releases/213148/assets,https://api.github.com/repos/twitter/algebird/releases/213148,develop,https://api.github.com/repos/twitter/algebird/tarball/0.5.0,https://github.com/twitter/algebird/releases/tag/0.5.0,https://api.github.com/repos/twitter/algebird/zipball/0.5.0,0.5.0,False,False
175980,2014-02-06T19:45:45Z,2014-02-06T19:46:45Z,Version 0.4.0,"- Make SketchMap1 the only SketchMap implementation: https://github.com/twitter/algebird/pull/256
- Use semigroup in StateWithError: https://github.com/twitter/algebird/pull/255
- Don't iterate through everything in unit monoid: https://github.com/twitter/algebird/pull/253
- Factor as much logic as possible into SketchmapMonoid1: https://github.com/twitter/algebird/pull/251
- Moving Trampoline flatMap implementation into trait: https://github.com/twitter/algebird/pull/249
- Integrate Caliper: https://github.com/twitter/algebird/pull/248
- Adds append method to MonoidAggregator and RingAggregator: https://github.com/twitter/algebird/pull/246
- Make the map monoid more performant for mutable maps: https://github.com/twitter/algebird/pull/245
- Make BFHash take on non negative values only: https://github.com/twitter/algebird/pull/243
- Fixed DecayedValue: https://github.com/twitter/algebird/pull/238
- Updated scaladoc to 0.3.0: https://github.com/twitter/algebird/pull/237
- Add Incrementable and tests: https://github.com/twitter/algebird/pull/234
- Updates sbt runner: https://github.com/twitter/algebird/pull/232
- Upgrade sbt, specs, add a build.properties, and bump travis's target: https://github.com/twitter/algebird/pull/231
",https://api.github.com/users/jcoveney,830087,jcoveney,https://api.github.com/repos/twitter/algebird/releases/175980/assets,https://api.github.com/repos/twitter/algebird/releases/175980,develop,https://api.github.com/repos/twitter/algebird/tarball/0.4.0,https://github.com/twitter/algebird/releases/tag/0.4.0,https://api.github.com/repos/twitter/algebird/zipball/0.4.0,0.4.0,False,False
114816,2013-12-06T22:03:30Z,2013-12-06T22:14:03Z,"Successible, Tuple sumOption and more","- Make a field transient in BloomFilter serialization: https://github.com/twitter/algebird/pull/209
- Add the TunnelMonoid to Util (like async function monoid): https://github.com/twitter/algebird/pull/213
- Make DecayedValueMonoid a class: https://github.com/twitter/algebird/pull/223
- SketchMap performance improvements: https://github.com/twitter/algebird/pull/227
- Add the Option group: https://github.com/twitter/algebird/pull/230
- Add Successible Typeclass for countable things: https://github.com/twitter/algebird/pull/234
- sumOption support on generated tuple Semigroups: https://github.com/twitter/algebird/pull/242

Thanks to @jcoveney , @andrewnguyen , @jackcwang1 , @tsdeng and [@gmike](http://twitter.com/gmike) especially.
",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/114816/assets,https://api.github.com/repos/twitter/algebird/releases/114816,develop,https://api.github.com/repos/twitter/algebird/tarball/0.3.1,https://github.com/twitter/algebird/releases/tag/0.3.1,https://api.github.com/repos/twitter/algebird/zipball/0.3.1,0.3.1,False,False
58642,2013-10-03T23:07:15Z,2013-10-03T23:09:33Z,Optimize the sums,"- Optimize lots of the Monoids/Semigroups when summing many items: see Semigroup.sumOption https://github.com/twitter/algebird/pull/206
- Add many Aggregators for more convenient aggregation: https://github.com/twitter/algebird/pull/194
- Aggregators compose: https://github.com/twitter/algebird/pull/188
- Added scala.collection.Map (not just immutable.Map) algebras: https://github.com/twitter/algebird/pull/199
- Added Boolean monoids (Or and And): https://github.com/twitter/algebird/pull/198
",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/algebird/releases/58642/assets,https://api.github.com/repos/twitter/algebird/releases/58642,develop,https://api.github.com/repos/twitter/algebird/tarball/0.3.0,https://github.com/twitter/algebird/releases/tag/0.3.0,https://api.github.com/repos/twitter/algebird/zipball/0.3.0,0.3.0,False,False
11483,2013-07-17T21:04:33Z,2013-07-17T21:09:02Z,Algebird 0.2.0,"This release closes up the following issues:
- Adds algebird-bijection module: https://github.com/twitter/algebird/pull/181
- Build cleanups: https://github.com/twitter/algebird/pull/180
- MapAlgebra.sparseEquiv: https://github.com/twitter/algebird/pull/182
- Remove isNonZero from Semigroup, add to Monoid: https://github.com/twitter/algebird/pull/183
- add MapAlgebra.mergeLookup: https://github.com/twitter/algebird/pull/185

The new release's API documentation can be found here:

http://twitter.github.io/algebird/#package

Thanks to all of our wonderful contributors!
",https://api.github.com/users/sritchie,69635,sritchie,https://api.github.com/repos/twitter/algebird/releases/11483/assets,https://api.github.com/repos/twitter/algebird/releases/11483,develop,https://api.github.com/repos/twitter/algebird/tarball/0.2.0,https://github.com/twitter/algebird/releases/tag/0.2.0,https://api.github.com/repos/twitter/algebird/zipball/0.2.0,0.2.0,False,False
