id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
8294832,2017-10-26T20:19:17Z,2017-10-27T22:23:22Z,Finagle 17.10.0,"Release Version Format
=================

* From now on, release versions will be based on release date in the format of
YY.MM.x where x is a patch number. [8efc24b1](https://github.com/twitter/finagle/commit/8efc24b1685f6a5df231df4a0f6d7725a10dcdb0)

New Features
==========

* finagle-core: DeadlineFilter may now be created from the class and used as a
regular Filter in addition to a stack module as before. [b80a1df4](https://github.com/twitter/finagle/commit/b80a1df4156fc6f7e4b35399d996bc46af465881)

* finagle-mysql: Add ability to toggle the `CLIENT_FOUND_ROWS` flag. [fae2e69d](https://github.com/twitter/finagle/commit/fae2e69d81faeef7cf0dee0340cb4ec27d2bcf10)

* finagle-http: Separated the DtabFilter.Extractor from the ServerContextFilter into
a new module: ServerDtabContextFilter. While this is still enabled in the default
Http server stack, it can be disabled independently of the ServerContextFilter.
[335d639f](https://github.com/twitter/finagle/commit/335d639f2140f44948b914b931bd467774e72fc2)

Runtime Behavior Changes
===================

* finagle-netty4: `Netty4ClientEngineFactory` and `Netty4ServerEngineFactory` now
validate loaded certificates in all cases to ensure that the current date
range is within the validity range specified in the certificate. [dc3230e3](https://github.com/twitter/finagle/commit/dc3230e3a98fb6ec68f23f8fc00c703401db5738)

* finagle-netty4: `TrustCredentials.Insecure` now works with native SSL/TLS engines.
[6b822e94](https://github.com/twitter/finagle/commit/6b822e94e309f0946ace6586095a511d47fa152b)

* finagle-http2: Upgraded to the new netty http/2 API in netty version 4.1.16.Final,
which fixes several long-standing bugs but has some bugs around cleartext http/2.
One of the work-arounds modifies the visibility of a private field, so it's incompatible
with security managers.  This is only true for http/2--all other protocols will be unaffected.
[bb01393f](https://github.com/twitter/finagle/commit/bb01393fc2a41a34e7ff92e1e7dc24bcadbef954)

* finagle-http: Netty 3 `HeaderMap` was replaced with our own implementation.
[199dc51c](https://github.com/twitter/finagle/commit/199dc51cfcf573349fe436d7eaf594a857667657)

Deprecations
==========

* finagle-base-http: With the intention to make `c.t.f.http.Cookie` immutable,
  `set` methods on `c.t.f.http.Cookie` have been deprecated:
    - `comment_=`
    - `commentUrl_=`
    - `domain_=`
    - `maxAge_=`
    - `path_=`
    - `ports_=`
    - `value_=`
    - `version_=`
    - `httpOnly_=`
    - `isDiscard_=`
    - `isSecure_=`

  Use the `c.t.f.http.Cookie` constructor to set `domain`, `maxAge`, `path`, `value`, `httpOnly`,
  and `secure`. `comment`, `commentUrl`, `ports`, `version`, and `discard` have been removed
  per RFC-6265. [71760096](https://github.com/twitter/finagle/commit/717600969e4d4e7db047e758deae0ba30282461d).

  Alternatively, use the `domain`, `maxAge`, `path`, `httpOnly`, and `secure` methods to create a
new `Cookie` with the existing fields set, and the respective field set to a given value.
[14beb975](https://github.com/twitter/finagle/commit/14beb975d1c3aa4f57cf2ee3a0ab46c766496737)

* finagle-base-http: `c.t.f.http.Cookie.isSecure` and `c.t.f.http.Cookie.isDiscard`
have been deprecated. Use `c.t.f.http.Cookie.secure` for `c.t.f.http.Cookie.isSecure`.
`isDiscard` has been removed per RFC-6265. [71760096](https://github.com/twitter/finagle/commit/717600969e4d4e7db047e758deae0ba30282461d)

Breaking API Changes
================

* finagle-mysql: Moved `Cursors.cursor` method to `Client` trait, and removed `Cursors` trait.
This allows cursor queries to used with transactions.  [1224721c](https://github.com/twitter/finagle/commit/1224721ccf25930e5f2cede3f4ecedfca219dee9)

* finagle-mux: Expose transport contexts in mux.Request and mux.Response. [f0f46785](https://github.com/twitter/finagle/commit/f0f46785a24daa09a68ebcf2f4b841474df31114)

* finagle-mux: The ""leased"" gauge has been removed from the mux client implementation since the
metric is reported as the sum of the value over all clients which is unlikely to be useful.
[1c31e384](https://github.com/twitter/finagle/commit/1c31e3848e337f3bc5b8bfd687daadffc64dbb94)
",https://api.github.com/users/nepthar,359054,nepthar,https://api.github.com/repos/twitter/finagle/releases/8294832/assets,https://api.github.com/repos/twitter/finagle/releases/8294832,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-17.10.0,https://github.com/twitter/finagle/releases/tag/finagle-17.10.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-17.10.0,finagle-17.10.0,False,False
7660522,2017-09-06T18:50:05Z,2017-09-06T21:55:27Z,Finagle 7.1.0,"New Features
----

  * finagle-core: If a `c.t.u.tunable.Tunable` request or total timeout has been configured
    on a client which uses a `c.t.f.client.DynamicTimeout` filter, the current value of tunable will
    be used in the case of no dynamic timeout set for a request. ``PHAB_ID=D81886``

  * finagle-core: `FailFastException` now captures the throwable that caused it. ``PHAB_ID=D86396``

  * finagle-redis: finagle interface for redis DBSIZE command. ``PHAB_ID=D85305``

Bug Fixes
----

  * finagle-core: Unregister `ServerRegistry` entry on `StackServer#close`. A
    StackServer entry is registered in the `ServerRegistry` on serve of the
    server but never unregistered. It is now unregistered on close of
    the StackServer. ``PHAB_ID=D83200``

  * finagle-netty4: `Netty4ClientEngineFactory` and `Netty4ServerEngineFactory` now
    properly load all chain certificates when the `SslClientConfiguration` or
    `SslServerConfiguration` uses `KeyCredentials.CertKeyAndChain` instead of just the
    first one in the file. ``PHAB_ID=D82414``

Runtime Behavior Changes
---

  * finagle-stats: Verbosity levels are now respected: debug-metrics aren't exported
    by default.  ``PHAB_ID=D85278``

  * finagle-netty4: `ChannelTransport` no longer considers the `Channel.isWritable` result
    when determining status. ``PHAB_ID=D82670``

Deprecations
---

  * finagle-base-http: Encoding/decoding methods on `c.t.f.http.Request` and `c.t.f.http.Response`
    to/from Strings and arrays of bytes have been deprecated. Use the methods on
    `c.t.f.http.codec.HttpCodec` instead:
       - For `c.t.f.http.Request.encodeString`, use `c.t.f.Http.codec.HttpCodec.encodeRequestToString`
       - For `c.t.f.http.Request.encodeBytes`, use `c.t.f.Http.codec.HttpCodec.encodeRequestToBytes`
       - For `c.t.f.http.Request.decodeString`, use `c.t.f.Http.codec.HttpCodec.decodeStringToRequest`
       - For c.t.f.http.Request.decodeBytes`, use `c.t.f.Http.codec.HttpCodec.decodeBytesToRequest`
       - For `c.t.f.http.Response.encodeString`, use `c.t.f.Http.codec.HttpCodec.encodeResponseToString`
       - For `c.t.f.http.Response.decodeString`, use `c.t.f.Http.codec.HttpCodec.decodeStringToResponse`
       - For `c.t.f.http.Response.decodeBytes`, use `c.t.f.Http.codec.HttpCodec.decodeBytesToResponse`
    ``PHAB_ID=D81341``

Breaking API Changes
---

  * finagle-core: `com.twitter.finagle.loadbalancer.DeterministicOrdering` was renamed
    to `com.twitter.finagle.loadbalancer.ProcessCoordinate` and the internal `Coord` ADT
    was changed as well. ``PHAB_ID=D84452``

  * finagle-core: Remove deprecated method `httpProxyTo(String, Option[Transporter.Credentials])`.
    Use `httpProxyTo(String, Transporter.Credentials]` instead. ``PHAB_ID=D84077``

  * finagle-*-http: Netty 3 specific HTTP transport related code has been moved into its own
    project, finagle-netty3-http, in preparation for removing it from Finagle.
    ``PHAB_ID=D84101``

  * finagle-memcached: Remove deprecated method `BaseClient.release()`. Use
    `BaseClient.close()` instead. ``PHAB_ID=D83168``

  * finagle-memcached: Move `c.t.f.memcached.java.Client` to `c.t.f.memcached.JavaClient`,
    `c.t.f.memcached.java.ClientBase` to `c.t.f.memcached.JavaClientBase`, and
    `c.t.f.memcached.java.ResultWithCAS` to `c.t.f.memcached.ResultWithCAS`. ``PHAB_ID=D83719``

  * finagle-core: Added a new type member `Context` to `Transport`, and a method that
    returns a context, which has most of the methods currently directly on `Transport`.
    Also deprecates most of those methods--please start using the context instead of the
    `Transport` directly.  Also added type parameters to `Transporter`, `Listener`, and
    type members to `StackClient` and `StackServer`.  ``PHAB_ID=D83972``",https://api.github.com/users/kevinoliver,347229,kevinoliver,https://api.github.com/repos/twitter/finagle/releases/7660522/assets,https://api.github.com/repos/twitter/finagle/releases/7660522,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-7.1.0,https://github.com/twitter/finagle/releases/tag/finagle-7.1.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-7.1.0,finagle-7.1.0,False,False
7430196,2017-08-15T22:31:43Z,2017-08-17T18:22:11Z,Finagle 7.0.0,"New Features
------------

  * finagle-core: A `StackClient` can be configured with a `c.t.u.tunable.Tunable`
    request timeout using `.withRequestTimeout(tunable)`; this facilitates changing
    the timeout at runtime, without server restart. See [tunables](https://twitter.github.io/finagle/guide/Configuration.html#tunables) for details.
    ``PHAB_ID=D80751``.

  * finagle-core: `SslClientSessionVerifier` and `SslServerSessionVerifier` have been added
    as `Stack` params for executing custom SSL/TLS `Session` verification logic on the
    establishment of an SSL/TLS `Session`. ``PHAB_ID=D63256``

  * finagle-core: `tls` methods which take an `SslClientSessionVerifier` have
    been added to `ClientBuilder` and `ClientTransportParams`
    (withTransport.tls). `tls` methods which take an `SslServerSessionVerifier`
    have been added to `ServerBuilder` and `ServerTransportParams`
    (withTransport.tls). ``PHAB_ID=D68645``

  * finagle-core: Timer tasks submitted to the `c.t.f.util.DefaultTimer` can have their
    execution time monitored. Slow executing tasks may result in a log message at level WARN
    and a counter of slow tasks is kept under `finagle/timer/slow`. This can be enabled using
    the global flag `c.t.f.util.defaultTimerProbeSlowTasks` and the maximum allowed runtime
    and minimum duration between log messages can be tuned using the global flags
    `c.t.f.util.defaultTimerSlowTaskMaxRuntime`, and
    `c.t.f.util.defaultTimerSlowTaskLogMinInterval`, respectively. ``PHAB_ID=D70279``

  * finagle-core: The JVM metrics for GC, allocations, memory, and more have moved
    here from TwitterServer. See [the new JVM section in the user guide](https://twitter.github.io/finagle/guide/Metrics.html).
    ``PHAB_ID=D80883``

  * finagle-http, finagle-thriftmux: `MethodBuilder` has been promoted out of experimental.
    `MethodBuilder` is a collection of APIs for client configuration at a higher level than
    the Finagle 6 APIs while improving upon the deprecated `ClientBuilder`.
    See [the user guide](https://twitter.github.io/finagle/guide/MethodBuilder.html) for details. ``PHAB_ID=D60032``

  * finagle-http: add `withNoAutomaticContinue` api to disable automatically sending 100 CONTINUE
    responses. ``PHAB_ID=D80017``
    
  * finagle-http: The nack related logic in the `c.t.f.h.c.HttpClientDispatcher` has been
    moved into a filter, `c.t.f.h.f.ClientNackFilter` which has been added to the client
    stack and can now be removed based on its `Stack.Role`. ``PHAB_ID=D78902``

  * finagle-init: Introduce a module to support service-loading initialization
    code. ``PHAB_ID=D75950``

  * finagle-memcached: Added support for partitioned backends in finagle client. Introducing
    the new PartitioningService (``PHAB_ID=D75143``), KetamaPartitioningService (``PHAB_ID=D77499``)
    and MemcachedPartitioningService (``PHAB_ID=D78927``), which provide this support at different
    levels of abstraction. The c.t.f.Memcached util, that is used for creating new memcached
    clients, now creates a new partitioning client that utilizes these new services for the
    Memcached protocol. The new memcached client can be enabled by setting the toggle
    ""com.twitter.finagle.memcached.UsePartitioningMemcachedClient"" to 1.0. ``PHAB_ID=D80352``

  * finagle-mux: Default to new more efficient decoder. ``PHAB_ID=D80225``

  * finagle-mysql: `IsolationLevel` support was added with
    `Transactions.transactionWithIsolation` method, so the default level can be overridden
    at the transaction level. ``PHAB_ID=D68944``

  * finagle-mysql: Add support for unsigned integers. When enabled, unsigned integers that do
    not fit into the existing signed representation are widened. For example an unsigned
    Int32 is represented as a Java Long, etc. Because this changes the `c.t.f.mysql.Value`
    variant returned by the row, it is disabled by default and must be enabled with the param
    `c.t.f.Mysql.param.UnsignedColumns`. ``PHAB_ID=D78721``

  * finagle-netty4: Adds support for passing a chain file to the default TLS implementation.
    ``PHAB_ID=D59531``

  * finagle-netty4: Netty 4 transports now use pooled allocators by default. ``PHAB_ID=D75014``

  * finagle-netty4: `KeyCredentials.CertKeyAndChain` is now available to use with
    `Netty4ServerEngineFactory`. ``PHAB_ID=D80494``

  * finagle-netty4: `c.t.f.netty4.trackReferenceLeaks` is now a CLI flag (default: disabled)
    rather than a toggle. ``PHAB_ID=D80654``

  * finagle-stats: Metrics now report verbosity levels via `MetricsView.verbosity`.
    ``PHAB_ID=D78150``

  * finagle-stats: `JsonExporter` now respects verbosity levels (current default behavior is
    to keep exporting ""debug"" metrics). Adjust `com.twitter.finagle.stats.verbose` tunable
    whitelist to change it.  ``PHAB_ID=D79571``

  * finagle-tunable: `StandardTunableMap` is now public. Users can access file-based, in-memory,
    and service-loaded tunable values using the map.
    See [tunables](https://twitter.github.io/finagle/guide/Configuration.html#tunables) for details.
    ``PHAB_ID=D80751``.

  * finagle: Changed dependencies of Netty from 4.1.10 to 4.1.12. ``PHAB_ID=D60438``

Bug Fixes
---------

  * finagle-mysql: Fix decoding error for medium length integers. ``PHAB_ID=D78505``

Breaking API Changes
--------------------

  * finagle: Finagle is now decoupled from Netty 3. Depend on `finagle-netty3`
    explicitly if needed. ``PHAB_ID=D65268``

  * finagle-base-http: The HTTP message model has been refactored to remove backing
    Netty 3 types. Additionally, the `Request` and `Response` classes now have private
    constructors to enforce a more appropriate inheritance model: `Request.Proxy` and
    `Response.Proxy` are now the point of entry for extending the HTTP model types. Along
    with the model changes the InputStream generated `.getInputStream()` method of HTTP
    messages no longer consumes the messages body. ``PHAB_ID=D74519``

  * finagle-core: The Framer type has been transformed into a specialized version of a
    more generic abstraction, Decoder[T]. ``PHAB_ID=D59495``

  * finagle-core: Replace the `c.t.f.context.RemoteInfo.Available` constructor
    which takes `ClientId` in favor of a version taking `String`. `ClientId` is
    Twitter's Thrift specific concept and this should be more generic.
    ``PHAB_ID=D60136``

  * finagle-core: Remove the ability to set a global address sort. This is no longer
    necessary as setting this per client is sufficient. ``PHAB_ID=D60698``

  * finagle-core: Remove global flag `com.twitter.finagle.tracing.debugTrace`.
    This functionality is better suited as a concrete `Tracer` implementation instead
    of mixed into the generic code. ``PHAB_ID=D63252``

  * finagle-core: ``PHAB_ID=D63526``

    - `ClientBuilder.codec` and `ServerBuilder.codec` have been removed. Use `.stack` instead.
    - `ClientBuilder.channelFactory` and `ServerBuilder.channelFactory` have been removed.
       Use `.stack` instead.

  * finagle-core: LoadBalancerFactory now takes `Stack.Params` which allows a client to
    more easily pass in the stack context. ``PHAB_ID=D73129``

  * finagle-memcached: Add `c.t.util.Closable` trait to `c.t.f.memcached.BaseClient`.
    ``PHAB_ID=D63970``

  * finagle-mysql: A number of implementation details were made private such as specific
    `Row` implementations and `ResultSet` builder functions that consume raw packets.
    ``PHAB_ID=D78721``

  * finagle-netty4-http: HTTP/1.1 implementation based on Netty 4 is no longer experimental
    and is moved out of the `exp` package. ``PHAB_ID=D80181``

  * finagle-serversets: Remove `ZkMetaData.AddressOrdering``, it is no longer used.
    ``PHAB_ID=D60698``

  * finagle-stats: `c.t.f.stats.MetricsStatsReceiver` no longer has constructor variants
    which take a `c.t.u.events.Sink` as util-events is now deprecated. ``PHAB_ID=D64437``

  * finagle-thrift: The Netty3 thrift implementation has been removed.
    ``PHAB_ID=D63670``

  * finagle-zipkin-core: `c.t.f.zipkin.core.SamplingTracer` no longer has constructor
    which takes a `c.t.u.events.Sink` as util-events is now deprecated. ``PHAB_ID=D64437``

  * finagle-zipkin: Zipkin Tracer now exports only three counters: `requests`, `failures`,
    `success`.  ``PHAB_ID=D71965``

Runtime Behavior Changes
------------------------

  * finagle-core: The `AsyncSemaphore` which sequences dispatches in `GenSerialClientDispatcher`
    is now failed with a retryable `Failure` so that the retry logic knows that requests that
    which failed to acquire the semaphore are safe to retry. ``PHAB_ID=D78904``

  * finagle-http: `serverErrorsAsFailuresV2` toggle is turned into a flag `serverErrorsAsFailures`.
    ``PHAB_ID=D73265``

  * finagle-http: Dispatcher stats are now exported under the client scope like
    all other client stats.``PHAB_ID=D72265``

  * finagle-http: It's now possible to send a response from the HTTP server that has a
    Content-Length header so long as the 'Transfer-Encoding: chunked' isn't set on the response.
    ``PHAB_ID=D80087``

  * finagle-http: Non-streaming servers strip 'expect' headers when a 100 CONTINUE
    response is sent. ``PHAB_ID=D80017``

  * finagle-serversets: `Stabilizer` is no longer exporting `pending_tasks` and `deviation_ms`
    stats. See `notify_ms` instead.  ``PHAB_ID=D65571``

  * finagle-stats, finagle-zipkin-core: No longer publishing `c.t.u.events` as util-events
    is now deprecated. ``PHAB_ID=D64437``

  * finagle-stats: No longer backed by commons metrics, now its own thing.  ``PHAB_ID=D73497``

  * finagle-netty4: Unset Netty's default timeout (10 seconds) for SSL handshake on clients.
    Use `.withSession.acquisitionTimeout` instead.  ``PHAB_ID=D78500``",https://api.github.com/users/dschobel,58369,dschobel,https://api.github.com/repos/twitter/finagle/releases/7430196/assets,https://api.github.com/repos/twitter/finagle/releases/7430196,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-7.0.0,https://github.com/twitter/finagle/releases/tag/finagle-7.0.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-7.0.0,finagle-7.0.0,False,False
6667122,2017-06-07T22:35:55Z,2017-06-09T20:19:45Z,Finagle 6.45.0,"New Features
--------------

  * finagle: Changed dependencies of Netty from 4.1.9 to 4.1.10 and tcnative
    from 2.0.0 to 2.0.1. ``RB_ID=916056``

  * finagle-core: `c.t.f.n.ssl.SslConnectHandler` is no longer exported publicly.
    It has also been renamed to `c.t.f.n.ssl.client.SslClientConnectHandler`.
    ``RB_ID=916932``

  * finagle-core: c.t.f.factory.ServiceFactoryCache is now exported publicly.
    ``RB_ID=915064``

  * finagle-core: Allow customization of load balancer behavior when no nodes
    are `Status.Open`. See the user guide for details:
    https://twitter.github.io/finagle/guide/Clients.html#behavior-when-no-nodes-are-available
    ``RB_ID=916145``

  * finagle-core: The global `c.t.f.naming.NameInterpreter` can be optionally set using
    service loader. ``RB_ID=917082``

  * finagle-redis: Support scanning over sets and sorted sets with SSCAN and ZSCAN.
    ``RB_ID=916484``

Bug Fixes
----------

  * finagle-mux: Disable Netty4RefCountingControl decoder when message fragmentation
    is enabled. ``PHAB_ID=D58153``

  * finagle: Fixed Java API for `withStack` for Client and Server implementations.
    Java users now get the correct types for calls such as `c.t.f.Http.client().withStack`
    and `c.t.f.Http.server().withStack`. ``RB_ID=915440``

  * finagle-thrift, finagle-thriftmux: Clients created using `newServiceIface` now use the
    configured `c.t.f.service.ResponseClassifier` (or `c.t.f.service.ResponseClassifier.Default` if
    not configured) for per-method stats and usage in `c.t.f.liveness.FailureAccrualFactory` and
    `c.t.f.stats.StatsFilter`. ``RB_ID=917010``

Runtime Behavior Changes
---------------------------

  * finagle: Add a floor of 8 to the default values of the flags `c.t.f.netty3.numWorkers`
    and `c.t.f.netty4.numWorkers`. ``RB_ID=916465``

  * finagle-core: `c.t.f.util.DefaultTimer` is decoupled from Netty 3 and is loaded via the
    `LoadService` machinery. If no timers are available on the class path, the `JavaTimer`
    instead is used instead. This ony affects direct usages of `DefaultTimer` as all Finagle
    protocols are using Netty 4 `HashedWheelTimer` at this point. ``RB_ID=915924``

  * finagle-core: The load balancer implementations no longer close the endpoint
    resources when they are closed. Instead, they treat them as externally
    managed resources and expect the layers above to manage them. No change
    is required if using the Balancers in the context of a Finagle client.
    If that's not the case, however, managing the life cycle of the passed
    in endpoints is necessary. ``RB_ID=916415``

  * finagle-core: Aperture load balancers now expire idle sessions which fall
    out of the aperture window. ``RB_ID=916508``

  * finagle-http: Uses Netty 4 as the default transport implementation.
    Use `.configured(Http.Netty3Impl)` to switch implementation over to Netty 3.
    ``PHAB_ID=D58698`` ``RB_ID=917936``

  * finagle-memcached: If the client decoder detects a protocol failure, the ClientTransport
    will close the connection. ``RB_ID=917685``

  * finagle-netty4: `poolReceiveBuffers` toggle is removed (suppressed by `UsePooling`).
    ``RB_ID=917912``

  * finagle-http: To conform to RFC 2616, a message body is NO LONGER sent when 1xx, 204
    and 304 responses are returned. To conform with RFC 7230, a Content-Length header field
    is NOT sent for 1xx and 204 responses. Both rules are enforced even if users intentionally
    add body data or the header field for these responses. If violation of these rules is
    detected then an error message is logged. ``RB_ID=917827``

Breaking API Changes
----------------------

  * finagle: `$protocol.Client.params/stack` and `$protocol.Server.params/stack` are removed,
    use similar methods on instances instead: `$protocol.client.params/stack` and
    `$protocol.server.params/stack` instead. ``RB_ID=915703``

  * finagle-core: Remove deprecated `c.t.f.builder.ClientBuilder.tracerFactory`.
    Use `c.t.f.builder.ClientBuilder.tracer` instead. Remove deprecated
    `c.t.f.tracing.Tracer.Factory`. Use `c.t.f.tracing.Tracer` instead.
    ``RB_ID=915481``

  * finagle-core: Remove deprecated `c.t.f.Deadline`. Use `c.t.f.context.Deadline` instead.
    ``RB_ID=915550``

  * finagle-core: Remove deprecated `c.t.f.builder.ClientBuilder.cluster` and
    `c.t.f.builder.ClientBuilder.group`. Use `c.t.f.builder.ClientBuilder.dest` instead.
    ``RB_ID=915098``

  * finagle-core: Remove deprecated `c.t.f.tracing.Trace.recordRpcName`. Use
    `c.t.f.tracing.Trace.recordRpc` and `c.t.f.tracing.Trace.recordServiceName` instead.
    ``RB_ID=916426``

  * finagle-core: Remove deprecated `c.t.f.builder.Cluster`. Use `com.twitter.finagle.Name` to
    represent clusters instead. ``RB_ID=916162``

  * finagle-core: LoadBalancerFactory now takes an EndpointFactory which is an
    extension of ServiceFactory that carries an address and has the ability to
    be rebuilt. ``RB_ID=916956``

  * finagle-base-http: Remove deprecated `c.t.f.http.Message.ContentTypeWwwFrom`.
    Use `c.t.f.http.Message.ContentTypeWwwForm` instead. ``RB_ID=915543`

  * finagle-exception: Remove deprecated `c.t.f.exception.Reporter.clientReporter` and
    `c.t.f.exception.Reporter.sourceReporter`. Use `c.t.f.exception.Reporter.monitorFactory`
    instead. ``RB_ID=916403``

  * finagle-http: Remove deprecated `c.t.f.http.HttpMuxer.pattern`. Specify a route
    using `c.t.f.http.HttpMuxer.route(pattern, this)` instead. ``RB_ID=915551``

  * finagle-http: Remove deprecated `c.t.f.http.filter.ValidateRequestFilter`. Create a custom
    filter if this behavior is needed. ``RB_ID=915548``

  * finagle-kestrel: Remove deprecated methods on `c.t.f.kestrel.MultiReader`:
    - `apply(cluster: Cluster[SocketAddress], queueName: String)`
    - `apply(clients: Seq[Client], queueName: String)`
    - `apply(handles: ju.Iterator[ReadHandle])`
    - `newBuilder(cluster: Cluster[SocketAddress], queueName: String)`
    - `merge(readHandleCluster: Cluster[ReadHandle])`
    Use the `c.t.f.Var[Addr]`-based `apply` methods on `c.t.f.kestrel.MultiReaderMemcache` or `c.t.f.kestrel.MultiReaderThriftMux` instead. ``RB_ID=914910``

  * finagle-kestrel: Removed from the project. ``RB_ID=915221``
    https://finagle.github.io/blog/2017/04/06/announce-removals/

  * finagle-mdns: Removed from the project. ``RB_ID=915216``
    https://finagle.github.io/blog/2017/04/06/announce-removals/

  * finagle-memcached: Remove deprecated `c.t.f.memcached.BaseClient.cas` methods.
    Use `c.t.f.memcached.BaseClient.checkAndSet` instead. ``RB_ID=914678``

  * finagle-memcached: `c.t.f.memcached.protocol.text.Encoder` object is now private.
    ``RB_ID=917214``

  * finagle-memcached: Make memcached Response subtypes with no fields case objects.
    ``RB_ID=917137``

  * finagle-mysql: Remove deprecated methods on `c.t.f.Mysql`:
      - `withCredentials`; use `c.t.f.Mysql.client.withCredentials` instead
      - `withDatabase`; use `c.t.f.Mysql.client.withDatabase` instead
      - `withCharset`; use `c.t.f.Mysql.client.withCharset` instead
      - `configured`; use `c.t.f.Mysql.client.configured` instead
    ``RB_ID=916418``

  * finagle-native: Removed from the project. ``RB_ID=915204``
    https://finagle.github.io/blog/2017/04/06/announce-removals/

  * finagle-netty4: `AnyToHeapInboundHandler` is gone. Use `BufCodec` while designing
    new Finagle protocols. ``RB_ID=915251``

  * finagle-ostrich4: Removed from the project. ``RB_ID=915327``
    https://finagle.github.io/blog/2017/04/06/announce-removals/

  * finagle-redis: `ChannelBuffer` methods and converters are removed. Use `Buf`-based API
    instead. Removed APIs: ``RB_ID=916015``

      - `c.t.f.redis.NettyConverters`
      - `c.t.f.redis.util.StringToChannelBuffer`
      - `c.t.f.redis.Client.watch(Seq[ChannelBuffer])`

  * finagle-stream: Removed from the project. ``RB_ID=915200``
    https://finagle.github.io/blog/2017/04/06/announce-removals/

  * finagle-thrift: Remove deprecated `c.t.f.thrift.transport.netty3.ThriftServerBufferedCodec`
    and `c.t.f.thrift.transport.netty3.ThriftServerBufferedCodecFactory`. Use the `c.t.f.Thrift`
    object to build a server. ``RB_ID=915656``

  * finagle-thriftmux: Remove deprecated `c.t.f.ThrifMux.withClientId`. Use
    `c.t.f.ThriftMux.client.withClientId`. Remove deprecated `c.t.f.ThrifMux.withProtocolFactory`.
    Use `c.t.f.ThriftMux.client.withProtocolFactory`. ``RB_ID=915655``",https://api.github.com/users/roanta,1617360,roanta,https://api.github.com/repos/twitter/finagle/releases/6667122/assets,https://api.github.com/repos/twitter/finagle/releases/6667122,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.45.0,https://github.com/twitter/finagle/releases/tag/finagle-6.45.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.45.0,finagle-6.45.0,False,False
6154052,2017-04-20T21:35:12Z,2017-04-21T21:15:40Z,Finagle 6.44.0,"New Features
--------------

  * finagle-core: FailureAccrual is now production ready. It has been promoted out of
    experimental and moved from com.twitter.finagle.service.exp to
    com.twitter.finagle.liveness. ``RB_ID=914662``

  * finagle-core: SSL/TLS APIs have been changed to include methods which work
    based on an SSL configuration, and an SSL configuration and an SSL engine factory.
    ``RB_ID=911209``

  * finagle-core: LoadBalancerFactory now exposes a mechanism to order the collection
    of endpoints passed to the balancer implementations. This allows a consistent ordering
    of endpoints across process boundaries. ``RB_ID=910372``

  * finagle-core: Introduce `c.t.f.client.EndpointerStackClient`, a mechanism for
    making clients that don't need a transporter and dispatcher. This simplifies
    making non-netty clients. ``RB_ID=912889``

  * finagle-http2: Add support for liveness detection via pings.  It can be configured
    the same way as it is in mux. ``RB_ID=913341``

  * finagle-toggle: Standard toggles now track the last value produced from `apply`.
    These values are visible via TwitterServer's /admin/toggles endpoint. ``RB_ID=913925``

Breaking API Changes
----------------------

  * finagle-mysql: Support for Netty 3 has been removed, making Netty 4 the only transport
    implementation. ``RB_ID=914661``

  * finagle-core: com.twitter.finagle.service.exp.FailureAccrualPolicy has been promoted to
    com.twitter.finagle.liveness.FailureAccrualPolicy

  * finagle-commons-stats: Remove finagle-commons-stats, which was a compatibility layer
    for a deprecated stats library.  Please move to finagle-stats instead.  ``RB_ID=910964``

  * finagle-core: SSL/TLS stack params for Finagle running Netty 4 have changed.
    - The `TlsConfig` param in `Transport` has been removed.
    - For client engines, the same two parameters as Finagle running Netty 3 are now used:
      - `ClientSsl` in `Transport`, which is used for configuring a client `Engine`'s hostname,
        key credentials, trust credentials, cipher suites, protocols, and application protocols.
      - `SslClientEngineFactory` in `SslClientEngineFactory`, which determines how the `Engine`
        is created based off of an `Address` and an `SslClientConfiguration`.
    - For server engines, the same two parameters as Finagle running Netty 3 are now used:
      - `ServerSsl` in `Transport`, which is used for configuring a server `Engine`'s key
        credentials, trust credentials, cipher suites, protocols, application protocols, and
        where the server supports or requires client authentication.
      - `SslServerEngineFactory` in `SslServerEngineFactory`, which determines how the `Engine`
        is created based off of an `SslServerConfiguration`.
    - Note: Not all client and server configurations work with all engine factories. Each engine
      factory should document what is not supported by that specific engine factory.
    - Note: By default, Finagle on Netty 4 will use the `Netty4ClientEngineFactory` and
      `Netty4ServerEngineFactory` respectively.
    ``RB_ID=910500``

  * finagle-core: Change the API to LoadBalancerFactory to a more concrete
    `Activity[IndexedSeq[ServiceFactory[Req, Rep]]]` since the majority of the
    load balancer implementations don't need the properties of a Set but instead
    need ordering guarantees and efficient random access. ``RB_ID=910372``

  * finagle-core: Balancers.aperture now has a new parameter `useDeterministicOrdering`,
    which is set to false by default. This feature is still experimental and under
    construction. This will break the Java API and require the additional param to
    be passed in explicitly.  ``RB_ID=911541``

  * finagle-core: The logic for tracking sessions that was in StdStackServer has been lifted into
    a new template, ListeningStackServer where implementations define the creation of a
    ListeningServer from a ServiceFactory, SocketAddress, and a function that tracks accepted
    sessions. ``RB_ID=914124``

  * finagle-core: Change the AddressOrdering param to no longer take a StatsReceiver,
    since orderings were simplified and are no longer composite. ``RB_ID=914113``

  * finagle-core: Remove deprecated methods on `c.t.f.Client`:
      - newClient(dest: Group[SocketAddress])
      - newService(dest: Group[SocketAddress])
    ``RB_ID=914787``

  * finagle-core: `c.t.f.ListeningServer` no longer extends `c.t.f.Group`. Use
    `c.t.f.ListeningServer.boundAddress` to extract the address from the server.
    ``RB_ID=914693``

  * finagle-core: Remove deprecated `c.t.f.group.StabilizingGroup`. Use
    `c.t.f.addr.StabilizingAddr` instead. ``RB_ID=914823``

  * finagle-core: Constructors for `c.t.f.ChannelException` and its subclasses now have
    overloads that take `Option`\s instead of allowing `null`. While the existing
    constructors remain, and forward to the new ones, this can still cause compilation
    failures when the arguments are ambiguous. ``RB_ID=914800``

  * finagle-core: Remove MimimumSetCluster since it has been deperecated for quite
    some time. Instead, use finagle logical destinations via `Name`s. ``RB_ID=914849``

  * finagle-core: Remove deprecated `c.t.f.Resolver.resolve`. Use `c.t.f.Resolver.bind`
    instead. Remove deprecated `c.t.f.BaseResolver.resolve`. Use `c.t.f.Resolver.eval`
    instead. ``RB_ID=914986``

  * finagle-http: `c.t.f.http.Http` codec has disappeared as part of Netty 4 migration. Use
    `c.t.f.Http.client` or `c.t.f.Http.server` stacks instead. ``RB_ID=912427``

  * finagle-kestrel: Remove `c.t.f.kestrel.param.KestrelImpl.` Kestrel clients and servers
    now use Netty 4 and cannot be configured for Netty 3. ``RB_ID=911031``

  * finagle-memcached: Remove `c.t.f.memcached.param.MemcachedImpl.` Memcached clients and servers
    now use Netty 4 and cannot be configured for Netty 3. ``RB_ID=911031``

  * finagle-kestrel: Remove commands that are not supported by the client:
      - `com.twitter.finagle.kestrel.protocol.DumpConfig`
      - `com.twitter.finagle.kestrel.protocol.DumpStats`
      - `com.twitter.finagle.kestrel.protocol.FlushAll`
      - `com.twitter.finagle.kestrel.protocol.Reload`
      - `com.twitter.finagle.kestrel.protocol.ShutDown`
      - `com.twitter.finagle.kestrel.protocol.Stats`
      - `com.twitter.finagle.kestrel.protocol.Version`
    ``RB_ID=911206``

  * finagle-memcached: Remove deprecated `c.t.f.memcached.KetamaClientBuilder`. Use
    `c.t.f.Memcached.client` to create a Memcached client. ``RB_ID=907352``

  * finagle-memcached: Remove deprecated `c.t.f.memcached.replication.ReplicationClient`. Use
    `c.t.f.memcached.replication.BaseReplicationClient` with clients created using
    `c.t.f.Memcached.client`. ``RB_ID=907352``

  * finagle-memcached: Remove deprecated methods on `c.t.f.memcached.Client`:
    - `apply(name: Name)`
    - `apply(host: String)`
    
    Use `c.t.f.Memcached.client` to create a Memcached client. ``RB_ID=908442``

  * finagle-memcached: Remove deprecated `c.t.f.memcached.protocol.text.Memcached` object.
    Use `c.t.f.Memcached.client` to create Memcached clients. ``RB_ID=908442``

  * finagle-memcached: Remove deprecated `c.t.f.memcached.Server` class. Use
    `c.t.f.memcached.integration.TestMemcachedServer` for a quick test server.
    ``RB_ID=914827``

  * Remove deprecated `c.t.f.memcached.PartitionedClient` object. Use
    `c.t.f.memcached.CacheNodeGroup.apply` instead of
    `c.t.f.memcached.PartitionedClient.parseHostWeights`. ``RB_ID=914827``

  * Remove deprecated `c.t.f.memcached.util.ParserUtils.DIGITS`. Use ""^\\d+$"" instead.
    Remove deprecated `c.t.f.memcached.util.ParserUtils.DigitsPattern`. Use Pattern.compile(^\\d+$)
    instead. ``RB_ID=914827``

  * finagle-memcached: Remove old `c.t.f.memcached.replicated.BaseReplicationClient` and
    `c.t.f.memcached.migration.MigrationClient`, and most `c.t.f.memcached.CachePoolCluster`
    methods. ``RB_ID=910986``

  * finagle-memcached: Remove old `c.t.f.memcached.migration.DarkRead`, and
    `c.t.f.memcached.migration.DarkWrite`. ``RB_ID=911367``

  * finagle-memcached: Remove `c.t.f.memcached.CachePoolConfig`. ``RB_ID=914623``

  * finagle-mux: Netty 3 implementation of Mux is removed. Default is
    Netty 4. ``RB_ID=914239``

  * finagle-netty4: `DirectToHeapInboundHandler` was renamed to `AnyToHeapInboundHandler`
    and now copies any inbound buffer (not just directs) on heap.  ``RB_ID=913984``

  * finagle-thrift, finagle-thriftmux: Remove rich client/server support for prior
    versions of Scrooge generated code. ``RB_ID=911515``

  * finagle-core: `c.t.f.client.Transporter` no longer has a close method, which
    was introduced in 6.43.0.  It was sort of a hack, and we saw the opportunity
    to do it properly. ``RB_ID=912889``

  * finagle-core, finagle-mux: Move FailureDetector from `c.t.f.mux` to `c.t.f.liveness`.
    This also means that the `sessionFailureDetector` flag is now
    `c.t.f.liveness.sessionFailureDetector`. ``RB_ID=912337``


Bug Fixes
----------

  * finagle-exp: `DarkTrafficFilter` now respects the log level when `HasLogLevel`,
    and otherwise defaults the level to `warning` instead of `error`. ``RB_ID=914805``

  * finagle-netty4: Fixed connection stall on unsuccessful proxy handshakes in Finagle clients
    configured with HTTP proxy (`Transporter.HttpProxyTo`).  ``RB_ID=913358``


Runtime Behavior Changes
---------------------------

  * finagle-netty4: Finagle is no longer logging the failed proxy handshake response.
    ``RB_ID=913358``

  * finagle-netty4: SOCKS5 proxies are now bypassed if the connect destination is
    localhost. This matches Finagle's prior behavior from when Netty 3 was the default
    transport implementation. ``RB_ID=914494``


Dependencies
--------------

  * finagle-memcached: Remove dependency on com.twitter.common:io-json. ``RB_ID=914623``
",https://api.github.com/users/ryanoneill,1393463,ryanoneill,https://api.github.com/repos/twitter/finagle/releases/6154052/assets,https://api.github.com/repos/twitter/finagle/releases/6154052,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.44.0,https://github.com/twitter/finagle/releases/tag/finagle-6.44.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.44.0,finagle-6.44.0,False,False
5710617,2017-03-10T23:38:01Z,2017-03-11T07:49:37Z,Finagle 6.43.0,"New Features
----------------

  * finagle-base-http: `c.t.f.http.Message` now has a Java friendly method to set the
    HTTP version: `Message.version(Version)`. ``RB_ID=906946``

  * finagle-base-http: Added Java friendly methods to the HTTP model including
    `c.t.f.http.Message.contentLength(Long)`, `c.t.f.http.Message.contentLengthOrElse(Long): Long`,
    and `c.t.f.http.Request.method(Method)`. ``RB_ID=907501``

  * finagle-base-http: `c.t.f.http.HeaderMap` now has a method, `HeaderMap.newHeaderMap` for
    creating new empty `HeaderMap` instances. ``RB_ID=907397``

  * finagle-core: SSL/TLS client and server configurations and engine factories have
    been added for finer grained control when using TLS with Finagle. ``RB_ID=907191``

Breaking API Changes
--------------------------

  * finagle-base-http: `c.t.f.http.MapHeaderMap` has been made private. Please use
    `HeaderMap.apply` or `HeaderMap.newHeaderMap` to construct a new `HeaderMap` instance.
    ``RB_ID=907397``

  * finagle-base-http: `c.t.f.http.Version` is no longer represented by case objects
    and has been replaced by val instances of a case class. ``RB_ID=906946``

  * finagle-base-http: The common HTTP methods are no longer modeled by case objects but
    as instances of a single c.t.f.http.Method class. The string representation of the HTTP
    method is now available via the `Method.name` method. ``RB_ID=906697``

  * finagle-core: Move the `java.net.SocketAddress` argument from the `apply` method
    on `com.twitter.finagle.client.Transporter` to the `newTransporter` method of
    `com.twitter.finagle.client.StackClient`. ``RB_ID=907544``

  * finagle-core: Load Balancer implementations no longer mix-in the OnReady trait and
    OnReady was removed. ``RB_ID=908863``

  * finagle-core: HeapBalancer, ApertureLoadBalancer, and RoundRobinBalancer classes were
    made package private. To construct load balancers for use within a Finagle client,
    use the `com.twitter.finagle.loadbalancer.Balancers` object. ``RB_ID=909245``

  * finagle-core: The `aperture` constructor on the `Balancers` object no longer takes
    a Timer since it was unused. ``RB_ID=909245``

  * finagle-core: The load balancer algorithm is now further scoped under ""algorithm"".
    ``RB_ID=909309``

  * finagle-core: Remove `Ring` from Finagle core's util since it is unused
    internally. ``RB_ID=909718``

  * finagle-core: SSL/TLS stack params for Finagle running Netty 3 have changed.
      - The `TLSClientEngine` param in `Transport` has been replaced by two parameters:
        - `ClientSsl` in `Transport`, which is used for configuring a client `Engine`'s hostname,
          key credentials, trust credentials, cipher suites, protocols, and application protocols.
        - `SslClientEngineFactory` in `SslClientEngineFactory`, which determines how the `Engine`
          is created based off of an `Address` and an `SslClientConfiguration`.
      - The `TLSHostname` param in `Transporter` has been removed. Hostnames should be set as
        part of the `SslClientConfiguration` now.
      - The `TLSServerEngine` param in `Transport` has been replaced by two parameters:
        - `ServerSsl` in `Transport`, which is used for configuring a client `Engine`'s key
          credentials, trust credentials, cipher suites, protocols, application protocols, and
          whether the server supports or requires client authentication.
        - `SslServerEngineFactory` in `SslServerEngineFactory`, which determines how the `Engine`
          is created based off of an `SslServerConfiguration`.
      - Note: Not all client and server configurations work with all engine factories. Each engine
        factory should document what is not supported by that specific engine factory.
      - Note: Users using Finagle-Native should in the short term use `LegacyServerEngineFactory`
        and in the long term move to using `Netty4ServerEngineFactory`.
      - Note: With this change, private keys are expected to explicitly be PKCS#8 PEM-encoded keys.
        Users using PKCS#1 keys should in the short term use `LegacyKeyServerEngineFactory` and in
        the longer term switch to using PKCS#8 keys, or use your own `SslServerEngineFactory` which
        can explicitly handle those type of keys.
      - Note: By default, Finagle on Netty 3 will use the `JdkClientEngineFactory` and
        `JdkServerEngineFactory` respectively.
      ``RB_ID=907923``

  * finagle-core: `withLoadBalancer.connectionsPerEndpoint` was removed and moved
    into finagle-memcached, which was the only client that uses the feature. ``RB_ID=908354``

  * finagle-core: `ClientBuilder.expHttpProxy` and `ClientBuilder.expSocksProxy` are removed.
    Use `$Protocol.withTransport.httpProxyTo` instead (requires Netty 4 transport). ``RB_ID=909739``

  * finagle-kestrel: Remove the deprecated `codec` method on `c.t.f.kestrel.MultiReaderMemcache`.
    Use `.stack(Kestrel.client)` on the configured `c.t.f.builder.ClientBuilder` instead.
    ``RB_ID=907184``

  * finagle-kestrel: Removed `c.t.f.kestrel.Server`. A local Kestrel server is preferred for
    testing. ``RB_ID=907334``

  * finagle-kestrel: Removed deprecated `c.t.f.kestrel.protocol.Kestrel`. To create a Finagle
    Kestrel client, use `c.t.f.Kestrel.client`. ``RB_ID=907422``

  * finagle-serversets: Removed the unapply method and modified the signature of
    fromAddrMetadata method in `c.t.f.serverset2.addr.ZkMetadata`. Instead of pattern
    matching use the modified fromAddrMetadata method. ``RB_ID=908186``

  * finagle-stats: Remove the `com.twitter.finagle.stats.exportEmptyHistograms` toggle
    which has defaulted to 0.0 for quite some time. Change the default value of the
    `com.twitter.finagle.stats.includeEmptyHistograms` flag to false to retain the
    behavior. ``RB_ID=907186``

  * finagle-thrift: `ThriftServiceIface` was refactored to be in terms of `ThriftMethod.Args`
    to `ThriftMethod.SuccessType` instead of `ThriftMethod.Args` to `ThriftMethod.Result`.
    ``RB_ID=908846``

Runtime Behavior Changes
-------------------------------

  * finagle-http: Responses with a server error status code (500s) are now classified
    as a failure. This effects success rate metrics and failure accrual.
    See the `com.twitter.finagle.http.serverErrorsAsFailuresV2` toggle for opting
    out of this behavior. ``RB_ID=909315``

  * finagle-netty4: Servers no longer set SO_LINGER=0 on sockets. ``RB_ID=907325``

Deprecations
---------------

  * finagle-base-http: The `c.t.f.http.Response` methods `getStatusCode()` and `setStatusCode()`
    have been deprecated. Use the methods `statusCode` and `statusCode(Int)` instead.
    ``RB_ID=908409``

  * finagle-http: Now that `c.t.f.http.Method` and `c.t.f.http.Version` are represented by
    instances and thus easier to use from Java, the Java helpers `c.t.f.http.Versions`,
    `c.t.f.http.Statuses`, and `c.t.f.http.Methods` have been deprecated. ``RB_ID=907680``

  * finagle-memcached: `c.t.f.memcached.replication.ReplicationClient` is now deprecated. Use
    `c.t.f.memcached.replication.BaseReplicationClient` with clients created using
    `c.t.f.Memcached.client`. ``RB_ID=907384``

  * finagle-thrift: As part of the Netty 4 migration, all `c.t.f.Codec` and `c.t.f.CodecFactory`
    types in finagle-thrift are now deprecated. Use the `c.t.f.Thrift` object to make clients
    and servers. ``RB_ID=907626``

Bug Fixes
-----------
  * finagle-http: The HTTP/1.x Client will no longer force-close the socket after receiving
    a response that lacks content-length and transfer-encoding headers but is required per
    RFC 7230 to not have a body. ``RB_ID=908593``

  * finagle-redis: The HSCAN and SCAN commands take an optional argument for pattern matching.
    This argument has been fixed to use the correct name of 'MATCH' instead of the incorrect
    'PATTERN'. ``RB_ID=908817``

  * finagle-thrift: Properly locate sub-classed MethodIface services to instantiate for serving
    BaseServiceIface implemented thrift services. ``RB_ID=907608``

Dependencies
----------------

  * finagle: Bump guava to 19.0. ``RB_ID=907807``",https://api.github.com/users/mosesn,156562,mosesn,https://api.github.com/repos/twitter/finagle/releases/5710617/assets,https://api.github.com/repos/twitter/finagle/releases/5710617,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.43.0,https://github.com/twitter/finagle/releases/tag/finagle-6.43.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.43.0,finagle-6.43.0,False,False
5372683,2017-02-04T00:14:50Z,2017-02-06T16:49:28Z,Finagle 6.42.0,"## New Features
- finagle-commons-stats: Provide a TwitterServer exporter for commons stats.
  This simplifies migration for folks who don't want to switch to
  commons metrics and TwitterServer in one go.  It will export stats on the
  /vars.json endpoint.  `RB_ID=902921`
- finagle-http: Introduce `HeaderMap.getOrNull(header)`, a Java-friendly variant of
  `HeaderMap.get(header).orNull`.  `RB_ID=904093`

## Breaking API Changes
- finagle: finagle-http-compat has been removed as part of migration off Netty 3. Use
  finagle-http types/APIs directly. `RB_ID=903647`
- finagle: finagle-spdy has been removed as part of the migration off Netty 3. Please
  use finagle-http2 as a replacement. `RB_ID=906033`
- finagle-base-http: `Message.write(ChannelBuffer)` has been replaced with a method that
  receives a `Buf`. The semantics of calling the `write` method on chunked messages has
  changed from potentially throwing an exception based on the state of the `Writer` to
  always throwing an `IllegalStateException`. Existing users of the `write(..)` methods
  on chunked messages should use the `Writer` directly. `RB_ID=900091`
- fingle-base-http: `HeaderMap.getAll(key)` now returns a `Seq[String]` as opposed to a
  `Iterable[String]`. `RB_ID=905019`
- finagle-core: The ChannelTransport implementations which transforms a Netty pipeline into
  a finagle Transport[Req, Rep] have been specialized to Transport[Any, Any] to avoid the
  illusion of a runtime checked cast. Transport.cast has been changed to receive either a
  Class[T] or an implicit Manifest[T] in order to check the inbound cast at runtime. For users
  of the ChannelTransport types, use the Transport.cast method to get a Transport of the right
  type. `RB_ID=902053`
- finagle-memcached: Remove deprecated methods on `c.t.f.memcached.Client`:
  - `apply(group: Group[SocketAddress])`
  - `apply(cluster: Cluster[SocketAddress])`
  
  Use `c.t.f.Memcached.client` to create a Memcached client. `RB_ID=899331`
- finagle-toggle: `ToggleMap` `Toggles` now rehash the inputs to
  `apply` and `isDefinedAt` in order to promote a relatively even
  distribution even when the inputs do not have a good distribution.
  This allows users to get away with using a poor hashing function
  such as `String.hashCode`. `RB_ID=899195`

## Deprecations
- finagle-base-http: Deprecate `c.t.f.http.MapHeaderMap` as it will
  soon be private. Use `c.t.f.http.HeaderMap.apply(..)` to get a HeaderMap
  instance. `RB_ID=906497`
- finagle-base-http: Deprecate `c.t.f.http.HeaderMap += (String, Date)`.
  Use `c.t.f.http.HeaderMap.set(String, Date)` instead. `RB_ID=906497`
- finagle-base-http: Deprecate `c.t.f.http.Message.ContentTypeWwwFrom`.
  Use `c.t.f.http.Message.ContentTypeWwwForm` instead. `RB_ID=901041`
- finagle-base-http: Deprecate `c.t.f.http.Message.headers()`. Use
  `c.t.f.http.Message.headerMap` instead. `RB_ID=905019`
- finagle-base-http: Deprecate the lazy `response: Response` field on the Request type.
  This field is potentially hazardous as it's not necessarily the Response that will
  be returned by a Service but it is often used as such. Construct a Response using
  the static constructor methods. `RB_ID=899983`
- finagle-base-http: Numerous protected[finagle] methods on `http.Request` and
  `http.Response` that deal in Netty 3 types have been deprecated as part of the
  migration to Netty 4. `RB_ID=905761`
- finagle-http: Deprecate ValidateRequestFilter which now has limited utility.
  See entry in Runtime Behavior Changes. If this is still needed, copy the remaining
  behavior into a new filter. `RB_ID=899895`
- finagle-memcached: Deprecate methods on `c.t.f.memcached.Client`:
  - `apply(name: Name)`
  - `apply(host: String)`
  
  Use `c.t.f.Memcached.client` to create a Memcached client. `RB_ID=899331``
- finagle-memcached: Deprecate `c.t.f.memcached.protocol.text.Memcached` object.
  Use `c.t.f.Memcached.client` to create Memcached clients. `RB_ID=899009`
- finagle-memcached: Deprecations on `c.t.f.memcached.util.ParserUtils`:
  - For `isDigits(ChannelBuffer)` use `ParserUtils.isDigits(Buf)` instead.
  - `DIGITS`
  - `DigitsPattern`
  
  `RB_ID=905253`

## Runtime Behavior Changes
- finagle-http: The HTTP client will no longer emit a Netty 3/4 `TooLongFrameException` when
  a response exceeds the specified MaxResponseSize parameter, and instead emits a Finagle
  specific `TooLongMessageException` which wraps the Netty exception. `RB_ID=905567`
- finagle-http: ValidateRequestFilter doesn't look for the uri ""/bad-http-request"" which
  had been indicative of the netty3 http codec giving up on decoding a http request. These
  events are caught lower in the pipeline and should not bubble up to the level of this
  filter. `RB_ID=899895`
- finagle-netty4: DirectToHeapHandler is now aware of `ByteBufHolder` types hence can copy
  them on to heap. `RB_ID=906602`
- finagle-redis: Transport implementation is now based on Netty 4 (instead of Netty 3).
  `RB_ID=895728`

## Bug Fixes
- finagle-core: Properly compute length when converting a `Buf.ByteArray`
  to a Netty 4 `ByteBuf`. `RB_ID=901605`
- finagle-memcached: AtomicMap change lock function to synchronize on map
  object. `DIFF_ID=D18735`
- finagle-netty4: Fixed connection stall in Finagle clients configured with
  both HTTP proxy (`Transporter.HttpProxyTo`) and TLS/SSL enabled. `RB_ID=904831`
- finagle-netty4: Fixed connection stall in Finagle clients configured with
  both HTTP proxy (`Transporter.HttpProxy`) and TLS/SSL enabled. `RB_ID=904803`
",https://api.github.com/users/bryce-anderson,2948506,bryce-anderson,https://api.github.com/repos/twitter/finagle/releases/5372683/assets,https://api.github.com/repos/twitter/finagle/releases/5372683,master,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.42.0,https://github.com/twitter/finagle/releases/tag/finagle-6.42.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.42.0,finagle-6.42.0,False,False
4975312,2016-12-20T23:31:17Z,2016-12-21T01:47:09Z,Finagle 6.41.0,"## New Features
- finagle-core: Added stat ""pending_requests/rejected"" for the number of requests
  rejected by `c.t.f.PendingRequestFilter`. `RB_ID=898184`

## Breaking API Changes
- finagle-core:  Remove the `Filter#andThen(Req1 => Future[Rep1]): Req2 => Future[Rep2]`
  method.  This overload is no longer usable in scala 2.12, because `Service`
  is a SAM.  Because of the order in which SAMs get resolved, literal
  functions in scala will get confused about which method they should use.
  Instead of passing a Function directly, wrap the Function with a Service.mk.
  `RB_ID=896524`.
- finagle-core: `CancelledWriteException` was removed as it is no longer used.
  `RB_ID=896757`
- finagle-kestrel: The `codec` method has been removed from the kestrel
  MultiReader object. Configure a ClientBuilder protocol using the default
  thrift StackClient, Thrift.client, via the `stack` method of ClientBuilder.
  `RB_ID=894297`

## Runtime Behavior Changes
- finagle-core: `c.t.f.builder.ClientBuilder` remove deprecated methods.
  The same functionality is available through the Stack-based APIs or
  `ClientBuilder.configured`, with the exception of `channelFactory`, which
  has no analog because it exposes a Netty 3 API. `RB_ID=893147`
  - `channelFactory`
  - `expHostConnectionBufferSize`
  - `hostConnectionIdleTime`
  - `hostConnectionMaxIdleTime`
  - `hostConnectionMaxLifeTime`
  - `hostConnectionMaxWaiters`
  - `readerIdleTimeout`
  - `recvBufferSize`
  - `sendBufferSize`
  - `writerIdleTimeout`
- finagle-core: Lower logging level used in `c.t.f.util.DefaultMonitor` for expected
  exceptions: `CancelledRequestException`, `TooManyWaitersException`,
  `CancelledConnectionException`, `FailedFastException`. `RB_ID=895702`
- finagle-core: `c.t.f.util.DefaultMonitor` now logs most exceptions at
  `WARNING` level instead of `FATAL`. `RB_ID=895983`
- finagle-core: `c.t.f.util.DefaultMonitor` works harder to find the appropriate
  log level by walking the exception's causes to find `c.t.util.TimeoutExceptions`
  and `c.t.logging.HasLogLevel`. `RB_ID=896695`
- finagle-core: The `c.t.f.service.Retries` module will now flag a response as
  `NonRetryable` if either the retry limit is reached or the retry budget is exhausted.
  `RB_ID=897800`
- finagle-mdns: Uses only one implementation backed by jmdns instead of trying
  to use a platform specific implementation of DDNS if present. `RB_ID=897917`
- finagle-netty4: Client initiated TLS/SSL session renegotiations are now rejected
  by default. `RB_ID=895871`
- finagle-netty4: `ChannelTransport` no longer interrupts netty write operations
  in order to temporarily unblock rollout of netty4. This reverts netty4 back
  to netty3 semantics for writes. `RB_ID=896757`

## Deprecations
- finagle-kestrel: Deprecate the `codec` method on `c.t.f.kestrel.MultiReaderMemcache`.
  Use `.stack(Kestrel.client)` on the configured `c.t.f.builder.ClientBuilder` instead.
  `RB_ID=895989`
",https://api.github.com/users/jcrossley,8378895,jcrossley,https://api.github.com/repos/twitter/finagle/releases/4975312/assets,https://api.github.com/repos/twitter/finagle/releases/4975312,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.41.0,https://github.com/twitter/finagle/releases/tag/finagle-6.41.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.41.0,finagle-6.41.0,False,False
4737056,2016-11-22T23:20:54Z,2016-11-23T03:02:54Z,Finagle 6.40.0,"## New Features
- finagle: Most libraries (excluding finagle-thrift{,mux}) no longer need to
  add an additional resolver that points to maven.twttr.com. `RB_ID=878967`
- finagle: Introducing a new Finagle module `finagle-base-http` that provides
  a common ground for both Netty 3 (`finagle-http`) and Netty 4 (`finagle-netty4-http`)
  HTTP implementations. Netty 3 is still a default transport used in Finagle's
  `Http.client` and `Http.server`. `RB_ID=884614`
- finagle-core: Introduce the `c.t.f.client.DynamicTimeout` module allowing clients
  to specify call-site specific timeouts. `RB_ID=885005`
- finagle-memcached: Introduce `c.t.f.memcached.CasResult.replaced: Boolean`
  to help transition usage off of the deprecated `cas` client method to
  `checkAndSet`. `RB_ID=891628`
- finagle-thrift: We now depend on a fork of libthrift hosted in the Central Repository.
  The new package lives in the 'com.twitter' organization. This removes the necessity of
  depending on maven.twttr.com. This also means that eviction will not be automatic and
  using a newer libthrift library requires manual eviction if artifacts are being pulled
  in transitively. `RB_ID=885879`

## Runtime Behavior Changes
- finagle-core: `Monitor` logging is improved in Finagle. `RB_ID=878890`
  - All exceptions caught in the stack are now logged by Finagle's `DefaultMonitor`
    (previously Util's `RootMonitor`) such that Twitter's logging
    framework is used instead of JDK logging.
  - `DefaultMonitor` is now installed implicitly such that it will be composed
    (via `orElse`) with the monitor passed by a user through the stack param.
    The logic behind this compostion is quite straightforward: exceptions that
    are't handled by a user-defined monitor propagated to the default monitor.
  - `DefaultMonitor` now logs upstream socket address, downstream socket address,
    and a client/server label if those are available.
  - `RootMonitor` is still used to handle fatal exceptions from pending side-effect-only
    closures (i.e., `onFailure`, `onSuccess`) on a service future/promise.
- finagle-mux: `com.twitter.finagle.Failures` are now sent over the wire with
  their flags intact via `com.twitter.finagle.mux.transport.MuxFailure` in the
  previously unused Rdispatch context. This allows for greater signaling along
  a chain of services. See the ""MuxFailure Flags"" section of the mux protocol
  spec in finagle-mux/src/main/scala/c/t/f/mux/package.scala `RB_ID=882431`
- finagle-netty4: The netty4 listener + transporter no longer manage direct byte 
  buffers by default. c.t.f.netty4.channel.DirectToHeapInboundHandler is introduced 
  to help protocol builders manage them. `RB_ID=881648`
- finagle-stats: Changed the default behavior of empty histograms to only export
  the count. Thus the `com.twitter.finagle.stats.exportEmptyHistograms` toggle
  now defaults to `0.0`. `RB_ID=882522`

## Breaking API Changes
- finagle: Some APIs around configuring TLS/SSL on Finagle clients have changed to
  unblock Netty 4 adoption. `RB_ID=890935`
  - `c.t.f.Http.client.withTls(Netty3TransporterTLSConfig)` is removed. Use
    variations of `c.t.f.Http.client.withTransport.tls` instead.
  - `c.t.f.netty3.Netty3TransporterTLSConfig` is removed.
- finagle: Some APIs around configuring TLS/SSL on Finagle servers have changed to
  unblock Netty 4 adoption. `RB_ID=891270`
  - `c.t.f.Http.server.withTls(Netty3ListenerTLSConfig)` is removed. Use
    variations of `c.t.f.Http.server.withTransport.tls` instead.
  - `c.t.f.netty3.Netty3ListenerTLSConfig` is removed.
- finagle-core: Removed the protected and unused method `read(permit: Permit): Future[Rep]`
  from `SerialClientDispatcher`. `RB_ID=881978`
- finagle-core: Removed a gauge, `idle`, from `c.t.f.factory.ServiceFactoryCache`.
  `RB_ID=884210`
- finagle-core: `ServiceTimeoutException` now extends `NoStackTrace`. `RB_ID=886809`
- finagle-core: Marked `com.twitter.finagle.util.ConcurrentRingBuffer` as
  private.  It doesn't fit the typical programming model we encourage for
  users of finagle, and so we found it was rarely used.  `RB_ID=888801`
- finagle-core: Marked `transform` in `com.twitter.finagle.Stack` as protected. It is
  too powerful and unnecessary for users, and should be used by implementors only.
- finagle-core: Removed the `StatsReceiver` argument from `TimeoutFilter`.  `RB_ID=891380`
- finagle-core: Stopped exporting a few metrics related to deadlines, and replaced with a simpler
  one.  There was a per-`TimeoutFilter` one named `timeout/expired_deadline_ms`, and a per-server
  one named `admission_control/deadline/deadline_budget_ms`.  We added instead a per-server one
  named `admission_control/deadline/exceeded_ms`. `RB_ID=891380`
- finagle-http: HttpMuxer now takes in a Seq[Route] instead of a
  Seq[(String, Service[Request, Response])]. `RB_ID=886829`
- finagle-http: As part of the first step towards restructuring Finagle HTTP modules
  required for Netty 4 adoption, HTTP params are moved from the inner object `c.t.f.Http.param`
  into their own package `c.t.f.http.param`. `RB_ID=885155`
- finagle-redis: A couple of methods had to be renamed (and return type changed) to
  unblock Netty 4 adoption. `RB_ID=882622`
  - `Command.toChannelBuffer` renamed to `Command.toBuf` and return
    type changed from N3 `ChannelBuffer` to Finagle `Buf`.
  - `Command.toByteArray` is removed.
  - Both `Command.key` and `Command.value` now implemented in terms of `Buf`s
    (no `ChannelBuffer`s).
- finagle-redis: An API around `c.t.f.redis.protocol.Command` was modernized as part of
  major restructuring required for the Netty 4 adoption. `RB_ID=885811`
  - `RedisMessage` (a common parent for both `Command` and `Reply`) has been removed.
  - The encoding machinery was restructured to eliminate duplicated and dead code.
- finagle-thrift: Removed deprecated `ThriftRichClient.newServiceIface` methods
  which did not take a label. Use the versions that take a String label.
  `RB_ID=891004`
- finagle-thrift: Removed deprecated `ThriftRichClient.newIface` methods based
  on `Groups`. Use the versions that a `dest` or `Name`. `RB_ID=891004`
- finagle-thriftmux: Removed deprecated classes `ThriftMuxClient`, `ThriftMuxClientLike`,
  `ThriftMuxServer`, and `ThriftMuxServerLike`. `RB_ID=880924`

## Bug Fixes
- finagle-core: The `withTlsWithoutValidation` and `tlsWithoutValidation`
  APIs have been fixed for an issue on Java 8 where certificate validation
  was being attempted instead of bypassed. `RB_ID=881660`
- finagle-http: The toggle implementation for `com.twitter.finagle.http.serverErrorsAsFailures`
   had a bug when toggled on. That toggle is no longer used and is superseded by
  `com.twitter.finagle.http.serverErrorsAsFailuresV2`. `RB_ID=882151`
- finagle-netty4: Connecting to a Socks 5 proxy using Finagle with Netty 4
  now works properly. This previously resulted in a timeout and
  `ProxyConnectException`. `RB_ID=884344`
- finagle-netty4: Don't swallow bind failures. `RB_ID=892217`

## Deprecations
- finagle-core: `c.t.f.builder.ClientBuilder` deprecate some seldom used methods.
  The same functionality is available through the Stack-based APIs or
  `ClientBuilder.configured`. `RB_ID=881612`
  - `hostConnectionIdleTime`
  - `hostConnectionMaxIdleTime`
  - `hostConnectionMaxLifeTime`
  - `hostConnectionMaxWaiters`
",https://api.github.com/users/jcrossley,8378895,jcrossley,https://api.github.com/repos/twitter/finagle/releases/4737056/assets,https://api.github.com/repos/twitter/finagle/releases/4737056,develop,https://api.github.com/repos/twitter/finagle/tarball/version-6.40.0,https://github.com/twitter/finagle/releases/tag/version-6.40.0,https://api.github.com/repos/twitter/finagle/zipball/version-6.40.0,version-6.40.0,False,False
4364601,2016-10-11T02:03:11Z,2016-10-12T00:32:54Z,Finagle 6.39.0,"## New Features
- finagle-thriftmux: Allow ThriftMux.Clients to be filtered. This is supported
  in the the StdStackClient but ThriftMux.Client is a StackBasedClient. `RB_ID=874560`
- finagle-netty4: Add boolean flag `com.twitter.finagle.netty4.poolReceiveBuffers` that
  enables/disables pooling of receive buffers (disabled by default). When enabled, lowers
  the CPU usage and allocation rate (GC pressure) with the cost of increased memory
  footprint at the startup. `RB_ID=872940`
- finagle-netty4: Add new histogram `receive_buffer_bytes` (only enabled with pooling)
  to keep track of the receive buffer sizes (useful for tuning pooling). `RB_ID=877080`
- finagle: Most libraries (excluding finagle-thrift{,mux}) no longer need to
  add an additional resolver that points to maven.twttr.com. `RB_ID=878967`

## Deprecations
- finagle-core: `c.t.f.builder.ClientBuilder` deprecate some seldom used methods.
  The same functionality is available through the Stack-based APIs or
  `ClientBuilder.configured`. `RB_ID=878009`
  - `readerIdleTimeout`
  - `writerIdleTimeout`
  - `recvBufferSize`
  - `sendBufferSize`
  - `channelFactory`
  - `expHostConnectionBufferSize`
- finagle-kestrel: Deprecate `c.t.f.kestrel.protocol.Kestrel()`,
  `c.t.f.kestrel.protocol.Kestrel(failFast)`, and `c.t.f.kestrel.protocol.Kestrel.get()`.
  To create a Kestrel client using ClientBuilder, use `.stack(c.t.f.Kestrel.client)`.
  `RB_ID=870686`

## Breaking API Changes
- finagle-core: The constructors for both `c.t.f.netty3.Netty3Listener` and
  `c.t.f.netty3.Netty3Transporter` now take `Stack.Params` instead of
  individual parameters. `RB_ID=871251`
- finagle-thrift: The c.t.f.thrift.legacy package has been removed which included
  the public types `ThriftCall`, `ThriftReply`, and `ThriftCallFactory`.
  `RB_ID=873982`

## Runtime Behavior Changes
- finagle-core: Tolerate TraceIds that are greater than 64 bits in preparation of
  moving to 128 bit ids. `RB_ID=874365`
- finagle-http: `c.t.f.http.service.HttpResponseClassifier.ServerErrorsAsFailures` now
  classifies a retryable nack as a `ResponseClass.RetryableFailure`. `RB_ID=869182`
- finagle-http: `c.t.f.Http.{Client,Server}` is moving towards treating HTTP
  5xx status codes as failures via
  `c.t.f.http.service.HttpResponseClassifier.ServerErrorsAsFailures`. This can
  be disabled by setting the toggle ""com.twitter.finagle.http.serverErrorsAsFailures""
  to `0.0` or explicitly setting it using `withResponseClassifier`.
  `RB_ID=869303`, `RB_ID=875367`
- finagle-thrift: Also track response failures in the
  `c.t.finagle.thrift.ThriftServiceIface#statsFilter` in addition to successful
  responses that encode an Error or Exception. `RB_ID=879075`

## Bug Fixes
- finagle-http: Fix issue in `c.t.finagle.http.RequestBuilder` when the URI host contains
  underscores. `RB_ID=870978`
- finagle-http: A connection for HTTP/1.0 or non-keep-alive requests is now closed
  gracefully so that all requests that have been issued received responses.
  `RB_ID=868767`
- finagle-netty4: `ChannelTransport` now drains messages before reading more data off the
  transport which should reduce memory pressure in streaming protocols. `RB_ID=872639`
",https://api.github.com/users/jcrossley,8378895,jcrossley,https://api.github.com/repos/twitter/finagle/releases/4364601/assets,https://api.github.com/repos/twitter/finagle/releases/4364601,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.39.0,https://github.com/twitter/finagle/releases/tag/finagle-6.39.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.39.0,finagle-6.39.0,False,False
4076257,2016-09-07T17:54:22Z,2016-09-08T01:29:09Z,Finagle 6.38.0,"# New Features
- finagle-http: `HttpNackFilter` now handles both retryable and non-retryable nacks via a new
  header: ""finagle-http-nonretryable-nack"". These are converted to non-retryable `c.t.f.Failures`
  and counted by a new counter ""nonretryable_nacks"". `RB_ID=865468`
- finagle-toggle: Is no longer considered experimental. `RB_ID=868819`

# Breaking API Changes
- finagle-netty4: Move `numWorkers` flag out of the package object so it gets a
  user friendly name: `c.t.f.netty4.numWorkers` instead of `c.t.f.netty4$.package$.numWorkers`.
  `RB_ID=123567`
- finagle-core: `c.t.f.netty3.WorkerPool` is no longer visible outside of `c.t.f.netty3`.
  `RB_ID=123567`
- finagle-core: The `content` parameter of the `ClientSslContext` and
  `ClientSslContextAndHostname` `TlsConfig` options has been renamed to `context`.
  `RB_ID=868791`

# Runtime Behavior Changes
- finagle-thriftmux: Removed ""<server_label>/thriftmux/downgraded_connections"" and
  ""<server_label>/thriftmux/connections"" gauges. Counters are still available at
  ""<server_label>/thrifmux/connects"" and ""<server_label>thriftmux/downgraded_connects"".
  `RB_ID=867459`
",https://api.github.com/users/cacoco,613046,cacoco,https://api.github.com/repos/twitter/finagle/releases/4076257/assets,https://api.github.com/repos/twitter/finagle/releases/4076257,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.38.0,https://github.com/twitter/finagle/releases/tag/finagle-6.38.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.38.0,finagle-6.38.0,False,False
3979084,2016-08-26T01:51:13Z,2016-08-26T03:52:39Z,Finagle 6.37.0,"# Deprecations
- finagle-core: `c.t.f.Deadline` is deprecated in favor of `c.t.f.context.Deadline`.
  `RB_ID=864148`

# Breaking API Changes
- finagle-core: As part of a move away from encoding/decoding in the Netty pipeline, removed
  `FrameEncoder` and `FrameDecoder` types, found in `c.t.f.codec`. `RB_ID=847716`
- finagle-core: Delete IdleConnectionFilter, which is no longer hooked up in the server, and
  no longer seems to be useful.  `RB_ID=856377`
- finagle-core: Remove deprecated methods from `c.t.f.builder.ClientBuilder` `RB_ID=864622`
  - `connectionTimeout`, use `tcpConnectTimeout`
  - `expFailFast`, use `failFast`
  - `buildFactory`, use other `buildFactory` methods
  - `build`, use other `build` methods
- finagle-exp: Abstract out parts of the DarkTrafficFilter for potential re-use.
  We also canonicalize the DarkTrafficFilter stats scope which changes from
  ""darkTrafficFilter"" to ""dark_traffic_filter"". E.g.:
  ""dark_traffic_filter/forwarded"", ""dark_traffic_filter/skipped"", and
  ""dark_traffic_filter/failed"". `RB_ID=852548`
- finagle-mysql: Mysql has been promoted out of experimental. Please change all
  references of com.twitter.finagle.exp.{M,m}ysql to com.twitter.finagle.{M,m}ysql
- finagle-redis: Server-side support for Redis is removed. See this finaglers@ thread
  (https://groups.google.com/forum/#!topic/finaglers/dCyt60TJ7eM) for discussion.
  Note that constructors for Redis commands no longer accept raw byte arrays.
   `RB_ID=848815`
- finagle-redis: Redis codec (i.e., `c.t.f.Codec`) is removed. Use `c.t.f.Redis.client`
  instead. `RB_ID=848815`

# New Features
- finagle-core: Expose metrics on util's default `FuturePool` implementations
  `unboundedPool` and `interruptibleUnboundedPool`:
  ""finagle/future_pool/pool_size"", ""finagle/future_pool/queue_size"",
  ""finagle/future_pool/active_tasks"", and ""finagle/future_pool/completed_tasks"".
  `RB_ID=850652`
- finagle-thrift: maxThriftBufferSize is now tunable via parameter for Thrift
  servers. It previously only was for ThriftMux servers. `RB_ID=860102`
- finagle-core: Mux Clients now propagate the number of times the client retried
  the request in the request's c.t.f.context.Context, available via
  c.t.f.context.Retries. `RB_ID=862640`

# Runtime Behavior Changes
- finagle-http: HttpTransport now eagerly closes client connection after
  processing non-keepalive requests.
- finagle-redis: `c.t.f.redis.Client` now uses the pipelining dispatcher. `RB_ID=848815`
- finagle-serversets: `c.t.f.serverset2.Stabilizer` no longer uses a timer to implement
  stabilization periods if the periods are 0 seconds long. `RB_ID=861561`
- finagle-core: 'c.t.f.Failure' has a new flag, Rejected, to indicate that a given request was
  rejected. All Failures generated with the Failure.rejected constructor are flagged Rejected and
  Restartable. `RB_ID=863356`
- finagle-core: `c.t.f.FixedInetResolver` now optionally retries failed DNS
  lookups with provided backoff, and `c.t.f.serverset2.Zk2Resolver` uses this
  retry functionality infinitely, exponentially backing off from 1 second to
  5 minutes. `RB_ID=860058`
",https://api.github.com/users/cacoco,613046,cacoco,https://api.github.com/repos/twitter/finagle/releases/3979084/assets,https://api.github.com/repos/twitter/finagle/releases/3979084,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.37.0,https://github.com/twitter/finagle/releases/tag/finagle-6.37.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.37.0,finagle-6.37.0,False,False
3617999,2016-07-07T22:47:31Z,2016-07-08T18:29:01Z,Finagle 6.36.0,"# Deprecations
- finagle-http: Removed DtabFilter.Finagle in favor of DtabFilter.Extractor.
  `RB_ID=840600`
- finagle-zipkin: Deprecate `ZipkinTracer` in favor of `ScribeZipkinTracer`.
  `RB_ID=840494`

# Breaking API Changes
- finagle: Builds are now only for Java 8 and Scala 2.11. See the
  [blog post](https://finagle.github.io/blog/2016/04/20/scala-210-and-java7) for details. `RB_ID=828898`
- finagle: Finagle is no longer depending on Twitter's clone of JSR166e, JDK 8
  API is used instead. `RB_ID=833652`
- finagle-cacheresolver: package contents merged into finagle-memcached.
  `RB_ID=833602`
- finagle-core: Renamed DeadlineFilter to DeadlineStatsFilter, which now only
  records stats for the number of requests with exceeded deadlines, the
  remaining deadline budget, and the transit latency of requests. It no longer
  rejects requests and has no configuration. We have decided not to pursue
  Deadline Admission Control at this time. `RB_ID=829372`
- finagle-core: `ClientBuilder.socksProxy(SocketAddress)` is removed.
  Use command line flags (see `c.t.f.socks.SocksProxyFlags.scala`) instead.
  `RB_ID=834634`
- finagle-core: Removed ""closechans"" and ""closed"" counters from `ChannelStatsHandler`.
  `RB_ID=835194`
- finagle-core: Removed the ""load"" gauge from `StatsFilter` as it was duplicated
  by the ""pending"" gauge. `RB_ID=835199`
- finagle-core: `c.t.finagle.NoStacktrace` is removed. Use `scala.util.control.NoStackTrace`
  instead. `RB_ID=833188`
- finagle-core: `c.t.finagle.Failure.withStackTrace` is removed. Use system property
  `scala.control.noTraceSuppression` instead to fill stacktraces in Finagle's failures.
  `RB_ID=833188`
- finagle-core: `c.t.f.filter.RequestSerializingFilter` is removed.
  Use `c.t.f.filter.RequestSemaphoreFilter` instead. `RB_ID=839372`
- finagle-core: `SessionParams` no longer contains `acquisitionTimeout`. Instead, it
  was extracted into `ClientSessionParams`. `RB_ID=837726`
- finagle-core: Changed visibility of PipeliningDispatcher to private[finagle].  Clients should
  not be affected, since it's not a part of the end-user API. `RB_ID=843153`.
- finagle-http: Deprecate channelBufferUsageTracker in favor of maxRequestSize.
  `RB_ID=831233`
- finagle-http: HttpClientDispatcher, HttpServerDispatcher, and
  ConnectionManager are no longer public. `RB_ID=830150`
- finagle-redis: Deprecated methods have been removed from the client API.
  `RB_ID=843455`
- finagle-redis: `c.t.f.redis.*Commands` traits are now package-private.
  `RB_ID=843455`
- finagle-redis: Replace `ChannelBuffer` with `Buf` in client's:
  - `HashCommands`: `RB_ID=843596`
  - `ListCommands`: `RB_ID=844596`
  - `BtreeSortedSetCommands`: `RB_ID=844862`
  - `HyperLogLogCommands`: `RB_ID=844945`
  - `PubSubCommands`: `RB_ID=845087`
  - `SetCommands`: `RB_ID=845578`
  - `SortedSetCommands`: `RB_ID=846074`
- finagle-memcached: `c.t.f.memcached.Client` now uses `c.t.bijection.Bijection`
  instead of `c.t.u.Bijection`. `RB_ID=834383`
- finagle-thrift: As part of the migration off of `Codec`, remove
  `c.t.f.thrift.ThriftClientBufferedCodec` and `c.t.f.thrift.ThriftClientBufferedCodecFactory`
  which were used by `ClientBuilder.codec` and `ServerBuilder.codec`. Replace usage
  with `ClientBuilder.stack(Thrift.client.withBufferedTransport)`
  or `ServerBuilder.stack(Thrift.server.withBufferedTransport)`. `RB_ID=838146`
- finagle-zipkin: Moved case classes and companion objects `Span`, `ZipkinAnnotation`,
  `BinaryAnnotation`, `Endpoint`, `Sampler` and `SamplingTracer` to finagle-zipkin-core.
  `RB_ID=840494`
- finagle-mysql: Removed `c.t.f.exp.mysql.transport.MysqlTransporter`, as it was not useful for it
  to be public. `RB_ID=840718`

# Bug Fixes
- finagle-core: PipeliningDispatcher now serializes ""write and enqueue Promise"" so it's no longer
  possible for the wrong response to be given to a request. `RB_ID=834927`
- finagle-http: Servers which aggregate content chunks (streaming == false) now return a 413
  response for streaming clients who exceed the servers' configured max request size.
  `RB_ID=828741`
- finagle-mysql: `c.t.f.exp.mysql.PreparedCache` now closes prepared statements when no one holds
  a reference to the cached future any longer.  This fixes a race condition where the cached
  future could be evicted and the prepared statement closed while a user tries to use that
  prepared statement.  `RB_ID=833970`
- finagle-netty4-http: Servers now see the correct client host address for requests. `RB_ID=844076`

# New Features
- finagle-core: Added gauge, ""scheduler/blocking_ms"" measuring how much time,
  in milliseconds, the `com.twitter.concurrent.Scheduler` is spending doing blocking
  operations on threads that have opted into tracking. This also moves the
  ""scheduler/dispatches"" gauge out of TwitterServer into Finagle. `RB_ID=828289`
- finagle-core: Added a FailureAccrualPolicy that marks an endpoint
  dead when the success rate in a specified time window is under the
  required threshold. `RB_ID=829984`
- finagle-core: `StackServer` now installs an `ExpiringService` module by default. This
  allows servers to have control over session lifetime and brings the `StackServer` to
  feature parity with `ServerBuilder`.  `RB_ID=837726`
- finagle-exp: Changed DarkTrafficFilter to forward interrupts to dark service. `RB_ID=839286`
- finagle-http: ContextFilter and Dtab-extractor/injector logic has been moved from
  the http dispatchers into the client and server stacks. `RB_ID=840600`
- finagle-mysql: Added a `withMaxConcurrentPreparedStatements` method to the client which lets you
  specify how many prepared statements you want to cache at a time.  `RB_ID=833970`
- finagle-redis: Adds support for scripting commands. `RB_ID=837538`
- finagle-netty4: SOCKS5 proxy support. `RB_ID=839856`
- finagle-zipkin-core: A new module containing most of the functionality
  from finagle-zipkin, leaving finagle-zipkin with only Scribe specific code
  and a service loader. This allows for other transports to be implemented
  in separate modules. For example the upcoming finagle-zipkin-kafka.
  `RB_ID=840494`
- finagle-thriftmux: Introduce a Netty4 implementation of mux and thrift-mux.
  `RB_ID=842869`

# Runtime Behavior Changes
- finagle-core: For SSLEngine implementations supplied via configuration or
  created by Finagle, the setEnableSessionCreation method is no longer called.
  The supplied value, true, is the default for JSSE implementations, and for
  other engines this can be an unsupported operation. `RB_ID=845765`
- finagle-core: Pipelined protocols (memcached, redis) no longer prevent
  connections from being cut by interrupts.  Instead, interrupts are masked
  until a subsequent ten second timeout has expired without a response in the
  pipeline. `RB_ID=843153`
- finagle-core: MonitorFilter now installs the parameterized monitor, and will
  no longer fail the request automatically if any exception is thrown
  synchronously (like if an exception is thrown in an onSuccess or onFailure
  block).  This removes a race, and makes Finagle more deterministic.
  `RB_ID=832979`
",https://api.github.com/users/cacoco,613046,cacoco,https://api.github.com/repos/twitter/finagle/releases/3617999/assets,https://api.github.com/repos/twitter/finagle/releases/3617999,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.36.0,https://github.com/twitter/finagle/releases/tag/finagle-6.36.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.36.0,finagle-6.36.0,False,False
3113941,2016-04-27T18:30:36Z,2016-04-27T23:10:10Z,Finagle 6.35.0,"### Note: This is the final release that will support Scala 2.10 and Java 7.

### Deprecations
- finagle: remove unused finagle-validate and finagle-testers packages. `RB_ID=818726`

### Runtime Behavior Changes
- finagle-core: DeadlineFilter is now per-connection, so the max rejection percentage
  is not shared across clients. This prevents a single client from exceeding the rejection
  budget. `RB_ID=813731`.
- finagle-http: Local Dtabs are now encoded into the `Dtab-Local` header.  `X-Dtab` headers
  may still be read but should be considered deprecated. `RB_ID=815092`
- finagle-thrift: Removed duplicate ""thrift"" label on Thrift/ThriftMux scrooge-related
  server stats. `RB_ID=816825`

### Breaking API Changes
- finagle-redis: Deprecated ChannelBuffer exposing apis for string commands. `RB_ID=817766`.
- finagle-core: DefaultClient has been removed. Implementors should prefer `c.t.f.StackClient`
  `RB_ID=812681`.
- finagle-core: When a client is created, its server set resolution is started eagerly.
  `RB_ID=806940`
- finagle-core: Dentry now takes a Dentry.Prefix instead of a Path. `RB_ID=813914`
- finagle-cache-resolver: `c.t.f.cacheresolver.ZookeeperCacheNodeGroup` has been removed from the
  API since we no longer check for the zookeeper data for the cache pool size to refresh for the
  changes in the serverset. `RB_ID=811190`

### New Features
- finagle-core: Multi-line Dtabs may now contain line-oriented comments beginning with '#'.
  Comments are omitted from parsed Dtabs. `RB_ID=818752`
- finagle-http: new stack params MaxChunkSize, MaxHeaderSize, and MaxInitialLineLength
  are available to configure the http codec. `RB_ID=811129`
- finagle-mux: Mux now has support for fragmenting Tdispatch and Rdispatch payloads.
  This helps with head-of-line blocking in the presence of large payloads and allows
  long transmissions to be interrupted. `RB_ID=794641`.
- finagle-core: Dtabs allow wildcard path elements in prefixes. `RB_ID=813914`
- finagle-netty4: HTTP proxy support for any Finagle Netty 4 client. `RB_ID=819752`
- finagle-core: Gauge for dns resolutions awaiting lookups. `RB_ID=822410`

### Bug Fixes
- finagle-http: Ensure that service closure is delayed until chunked response bodies
  have been processed. `RB_ID=813110`
- finagle-stats: Ensure that histogram snapshotting does not fall behind if snapshot()
  is not called at least once per interval. `RB_ID=826149`
",https://api.github.com/users/cacoco,613046,cacoco,https://api.github.com/repos/twitter/finagle/releases/3113941/assets,https://api.github.com/repos/twitter/finagle/releases/3113941,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.35.0,https://github.com/twitter/finagle/releases/tag/finagle-6.35.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.35.0,finagle-6.35.0,False,False
2790623,2016-03-10T23:18:32Z,2016-03-11T06:59:45Z,Finagle 6.34.0,"### Runtime Behavior Changes
- finagle-core: GenSerialClientDispatcher fails pending and subsequent requests when 
  its underlying transport closes. `RB_ID=807590`

### New Features
- finagle-core: Include upstream/downstream addresses/client ids and request trace id
  in exceptions that extend `c.t.f.HasRemoteInfo` (including `c.t.f.SourcedException`),
  accessible via the `remoteInfo` value. `RB_ID=797082`
- finagle-core: Introduce `c.t.f.service.ResponseClassifier` for HTTP servers,
  which allows developers to give Finagle the additional application specific knowledge
  necessary in order to properly classify responses.`RB_ID=800179`
- finagle: Export two new histograms: `request_payload_bytes` and `response_payload_bytes`
  for the following protocols: HTTP (non-chunked), Mux, ThriftMux and Thrift. `RB_ID=797821`
- finagle-core: Define `c.t.f.Address` to represent an endpoint's physical location.
  Resolvers and namers may attach metadata such as weight to individual endpoint addresses.
  `RB_ID=792209`
- finagle-http: Introduce convenience extractors to pattern match `c.t.f.http.Response.status`
  against the different categories. `RB_ID=802953`
- finagle-http: Add `toBoolean` method in `StringUtil` to parse strings to boolean consistently.
  `RB_ID=804056`

### Breaking API Changes
- finagle-core: `c.t.f.Codec.prepareConnFactory(ServiceFactory)` is marked `final`, override
  `c.t.f.Codec.prepareConnFactory(ServiceFactory, Stack.Params)` instead. `RB_ID=797821`
- finagle-core: `c.t.f.Codec.newClientDispatcher(Transport)` is marked `final`, override
  `c.t.f.Codec.newClientDispatcher(Transport, Stack.Params)` instead. `RB_ID=797821`
- finagle-core: Removed deprecations: `RB_ID=800974`
  - Removed `c.t.f.Service.release`, replace usage with `Service.close()`.
  - Removed `c.t.f.ServiceFactory.make`, replace usage with `ServiceFactory.apply`.
  - Removed `c.t.f.ProxyServiceFactory`, replace usage with `ServiceFactoryProxy`.
  - Removed deprecated `c.t.f.service.FailureAccrualFactory` constructor.
  - Removed `c.t.f.netty3.ChannelBufferBuf.apply`, replace usage with `ChannelBufferBuf.Owned.apply`.
  - Removed `c.t.f.util.InetAddressUtil.Loopback`, replace usage with `java.net.InetAddress.getLoopbackAddress`.
  - Removed `c.t.f.tracing.TracingFilter`, replace usage with `TraceInitializationFilter` and `(Client|Server)TracingFilter`.
- finagle-core: `c.t.f.Addr.Bound.addr` type changed from `Set[SocketAddress]` to
  `Set[c.t.f.Address]`. We provide a migration guide below for the most common cases.
  
  Callers of `c.t.f.Addr.Bound.addr` must handle `Set[c.t.f.Address]` instead of
  `Set[SocketAddresses]`. If you do something with the `SocketAddress` and expect the underlying
  type to be `InetSocketAddress`, use `c.t.f.Address.Inet.addr` to get the underlying
  `InetSocketAddress`.
  
  `c.t.f.Addr` constructors and `c.t.f.Name.bound` method now accept `c.t.f.Address` instead
  of `SocketAddress`. For most cases, wrapping the `InetSocketAddress` in an `Address.Inet`
  will fix the compile error.
  
  Any other `SocketAddress` subclass is currently incompatible with `c.t.f.Address`. Instead,
  you should encode any additional information in the metadata field of `c.t.f.Address.Inet`
  or `c.t.f.exp.Address.ServiceFactory`.
  
  `RB_ID=792209`
- finagle-core: Delete `c.t.f.ServiceFactorySocketAddress` and replace usages with
  `c.t.f.exp.Address.ServiceFactory`. `RB_ID=792209`
- finagle-core: Delete `c.t.f.WeightedSocketAddress` and instead use
  `c.t.f.addr.WeightedAddress` to represent address weights. `RB_ID=792209`
- finagle-core: `c.t.f.builder.ClientBuilder.hosts` takes a Seq of `InetSocketAddress` instead of
  `SocketAddress`. If you get a compile error, change the static type to `InetSocketAddress` if
  you can. Otherwise, cast it at runtime to `InetSocketAddress`. `RB_ID=792209`
- finagle-core: `c.t.f.client.Transporter.EndpointAddr` takes a `c.t.f.Address` as its
  parameter instead of `SocketAddress`. `RB_ID=792209`
- finagle-core: `c.t.f.service.FauilureAccrualFactory.Param(FailureAccrualPolicy)` is removed -
  it's not safe to configure Failure Accrual with a shareable instance of the policy, use
  `() => FailureAccrualPolicy` instead. `RB_ID=802953`
- finagle-core: `$Client.withSessionQualifier.failureAccrualPolicy` has been removed from the API
  since it enables an experimental feature (use Stack's `.configured` API instead). `RB_ID=802953`
- finagle-core: `c.t.f.service.exp.FailureAccrualPolicies` (Java-friendly API) has bee removed -
  use `c.t.f.service.exp.FailureAccrualPolicy` instead.
- finagle-memcached: `c.t.f.memcached.protocol.text.Memcached` no longer takes a `StatsReceiver`,
  pass it to a `(Client/Server)Builder` instead. `RB_ID=797821`
- finagle-redis: `c.t.f.redis.Redis` no longer takes a `StatsReceiver`, pass it to a
  `(Client/Server)Builder` instead. `RB_ID=797821`
",https://api.github.com/users/cacoco,613046,cacoco,https://api.github.com/repos/twitter/finagle/releases/2790623/assets,https://api.github.com/repos/twitter/finagle/releases/2790623,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.34.0,https://github.com/twitter/finagle/releases/tag/finagle-6.34.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.34.0,finagle-6.34.0,False,False
2764662,2015-12-03T23:48:25Z,2016-03-08T04:18:51Z,Finagle 6.31.0,"## New Features
- finagle-core: `c.t.f.Server` now has a `serveAndAnnounce` method that accepts a `SocketAddress`
  as an address. `RB_ID=758862`
- finagle-core: `c.t.f.service.Retries` now supports adding delay between each automatic retry.
  This is configured via the `Retries.Budget`. `RB_ID=768883`
- finagle-core: FailureAccrualFactory now uses a FailureAccrualPolicy to determine when to
  mark an endpoint dead. The default policy, FailureAccrualPolicy.consecutiveFailures(),
  mimicks existing functionality, and FailureAccrualPolicy.successRate() operates on the
  exponentially weighted average success rate over a window of requests.`RB_ID=756921`
- finagle-core: Introduce `c.t.f.transport.Transport.Options` to configure transport-level options
  (i.e., socket options `TCP_NODELAY` and `SO_REUSEADDR`). `RB_ID=773824`
- finagle-http: `c.t.f.http.exp.Multipart` now supports both in-memory and on-disk file uploads.
  `RB_ID=RB_ID=769889`
- finagle-netty4: Hello World. Introduce a `Listener` for Netty 4.1. This is still considered beta.
  `RB_ID=718688`
- finagle-netty4: Introduce `ChannelTransport` for Netty 4.1. `RB_ID=763435`
- finagle-thrift: `c.t.f.ThriftRichClient` implementations of `newServiceIface`
  method that accept a `label` argument to pass to the `ScopedStats` instance. `RB_ID=760157`
- finagle-stats: Added `c.t.f.stats` now has a `statsFilterFile` flag which will read a blacklist
  of regex, newline-separated values. It will be used along with the `statsFilter` flag for stats
  filtering. `RB_ID=764914`

## Deprecations
- finagle-core: the #channelFactory method of `c.t.f.builder.ServerBuilder` has been deprecated
  in favor of the `c.t.f.netty3.numWorkers` flag. `RB_ID=718688`

## Runtime Behavior Changes
- finagle-core: The behavior for `c.t.f.util.DefaultMonitor` has changed such that
  unhandled exceptions are propagated to `c.t.u.RootMonitor` except for
  `c.t.f.Failures` with a log `Level` below INFO. `RB_ID=758056`
- finagle-core: The metrics for requeues `requeue/requeues`, `requeue/budget` and
  `requeue/budget_exhausted` have moved under retries. They are now `retries/requeues`,
  `retries/budget` and `retries/budget_exhausted`. `RB_ID=760213`
- finagle-core: `c.t.f.service.RetryFilter` and `c.t.f.service.RetryExceptionsFilter`
  now default to using a `RetryBudget` to mitigate retry amplification on downstream
  services. The previous behavior can be achieved by explicitly passing in
  `RetryBudget.Infinite`. `RB_ID=766302`
- finagle-core: `c.t.f.factory.TrafficDistributor` now suppresses changes when a bound
  address is updated from a valid set to an error. Instead, it continues using stale
  data until it gets a successful update.
- finagle-http: Unhandled exceptions from user defined HTTP services are now converted
  into very basic 500 responses so clients talking to those services see standard HTTP
  responses instead of a dropped connection. `RB_ID=755846`
- finagle-memcached: Moved metrics from underlying `KetamaPartitionedClient` for Memcached clients
  to share the same scope of the underlying finagle client. `RB_ID=771691`
- finagle-mux: `com.twitter.finagle.mux.ThresholdFailureDetector` is turned on by
  default. `RB_ID=756213`
- finagle-serversets: The `c.t.f.serverset2.Zk2Resolver` now surfaces `Addr.Pending`
  when it detects that its underlying ZooKeeper client is unhealthy. Unhealthy is defined
  as non-connected for greater than its 'unhealthyWindow' (which defaults to 5 minutes).
  `RB_ID=760771`
- finagle-serversets: The `c.t.f.serverset2.ZkSession` now uses an unbounded semaphore to
  limit to 100 outstanding zookeeper requests at any one moment. `RB_ID=771399`

## Breaking API Changes
- finagle-core: `BackupRequestLost` is no longer itself an `Exception`. Use
  `BackupRequestLost.Exception` in its place. `RB_ID=758056`
- finagle-core: Replaced `c.t.f.builder.ClientConfig.Retries` with
  `c.t.f.service.Retries.Policy`. `RB_ID=760213`
- finagle-core: A deprecated `c.t.f.CancelledReadException` has been removed.
  `RB=763435`
- finagle-http: `c.t.f.http.exp.Multipart.decodeNonChunked` has been removed from
  the public API. Use `c.t.f.http.Request.multipart` instead. Also
  `c.t.f.http.exp.Multipart.FileUpload` is no longer a case class, but base trait
  for `Multipart.InMemoryFileUpload` and `Multipart.OnDiskFileUpload`. `RB_ID=769889`
- finagle-mux: `c.t.f.FailureDetector.apply` method is changed to private scope,
  to reduce API surface area. Using `FailureDetector.Config` is enough to config
  session based failure detection behavior. `RB_ID=756833`
- finagle-mux: `closeThreshold` in `c.t.f.mux.FailureDetector.ThresholdConfig` is
  changed to `closeTimeout`, from an integer that was used as a multiplier to time
  duration. This makes it easier to config. `RB_ID=759406`

## Bug Fixes
- finagle-thrift: `c.t.f.ThriftRichClient` scoped stats label is now threaded
  properly through `newServiceIface` `RB_ID=760157`
",https://api.github.com/users/kevinoliver,347229,kevinoliver,https://api.github.com/repos/twitter/finagle/releases/2764662/assets,https://api.github.com/repos/twitter/finagle/releases/2764662,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.31.0,https://github.com/twitter/finagle/releases/tag/finagle-6.31.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.31.0,finagle-6.31.0,False,False
2764658,2015-10-15T22:23:58Z,2016-03-08T04:17:51Z,Finagle 6.30.0,"## New Features
- finagle-core: `com.twitter.finagle.client.LatencyCompensator` allows its
  default Compensator value to be set via an API call. This allows
  libraries to set defaults for clients that have not configured this module.
  `RB_ID=750228`
- finagle-core: New Resolver `com.twitter.finagle.FixedInetResolver` extends
  InetResolver by caching successful DNS lookups indefinitely. It's scheme is 'fixedinet'.
  This is used by clients or resolvers that do not want or expect
  host->ip map changes (such as the zk2 resolver and twemcache client).
  `RB_ID=753712`

## Runtime Behavior Changes
- finagle-core: `RetryPolicy.tries` now uses jittered backoffs instead of
  having no delay. `RB_ID=752629`
- finagle-core: `FailureAccrualFactory` uses jittered backoffs as the duration
  to mark dead for, if `markDeadFor` is not configured. `RB_ID=746930`
- finagle-core: The transit latency (transit_latency_ms) and deadline budget
  (deadline_budget_ms) stats are now only recorded for servers, not for
  clients anymore, since they're only meaningful for servers. `RB_ID=75268`
- finagle-http: Clients sending requests with payloads larger than the server
  accepts (default 5MB) now receive a HTTP 413 response instead of a channel
  closed exception.  `RB_ID=753664`

## Breaking API Changes
- finagle-core: `TimerFromNettyTimer` is renamed to `HashedWheelTimer` and
  the constructor accepting `org.jboss.netty.util.Timer` made private. For
  compatibility, `HashedWheelTimer` has additional constructors to match
  those provided by `org.jboss.netty.util.HashedWheelTimer`. `RB_ID=748514`
- finagle-httpx / finagle-httpx-compat: Renamed to finagle-http and
  finagle-http-compat respectively. This changes the package names, e.g.:
  com.twitter.finagle.httpx to com.twitter.finagle.http. `RB_ID=751876`
- finagle-core: Marked `HandletimeFilter` private[finagle], and renamed it to
  `ServerStatsFilter`. `RB_ID=75268`
- finagle-zipkin: Drop `c.t.zipkin.thrift.Annotation.duration` and associated thrift field
  `c.t.f.thrift.thrift.Annotation.duration`. `RB_ID=751986`
- finagle-stress: Project has been removed from Finagle. `RB_ID=752201`
- finagle-swift: Project has been moved off of Finagle to
  https://github.com/finagle/finagle-swift . `RB_ID=752826`
",https://api.github.com/users/kevinoliver,347229,kevinoliver,https://api.github.com/repos/twitter/finagle/releases/2764658/assets,https://api.github.com/repos/twitter/finagle/releases/2764658,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.30.0,https://github.com/twitter/finagle/releases/tag/finagle-6.30.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.30.0,finagle-6.30.0,False,False
2764654,2015-09-28T17:59:42Z,2016-03-08T04:17:01Z,Finagle 6.29.0,"## Deprecations
- finagle-http: Deprecated in favour of finagle-httpx and now removed.

## New Features
- finagle-core: Provides a `RetryFilter` which takes a
  `RetryPolicy[(Req, Try[Rep])]` and allows you to retry on both ""successful""
  requests, such as HTTP 500s, as well as failed requests. The `Req`
  parameterization facilitates using the request to determine if retrying is
  safe (i.e. the request is idempotent).
- finagle-httpx: Experimental support `multipart/form-data` (file uploads)
  decoding via `c.t.f.httpx.exp.Multipart`. `RB_ID=730102`

## Runtime Behavior Changes
- finagle-core: `InetResolver.bind` will now succeed if any hostname resolution
  succeeds. Previous behavior required that all hosts are successfully resolved.
  `RB_ID=737748`
- finagle-core: DNS lookups in InetResolver are no longer cached
  within Finagle according to `networkaddress.cache.ttl`; we rely
  instead on however caching is configured in the JVM and OS. `RB_ID=735006`
- finagle-core: After being revived, a `FailureAccrualFactory` enters a
  'probing' state wherein it must successfully satisfy a request before
  accepting more. If the request fails, it waits for the next `markDeadFor`
  period. `RB_ID=747541`
- finagle-serversets: DNS lookups in Zk2Resolver are no longer
  cached within Finagle according to `networkaddress.cache.ttl`;
  instead they are cached indefinitely. `RB_ID=735006`
- finagle-redis: c.t.f.Redis now uses a pipelined dispatcher along with
  a concurrent load balancer to help eliminate head-of-line blocking.

## Breaking API Changes
- finagle-core: `RetryingFilter`, which takes a RetryPolicy[Try[Nothing]]`and
  is invoked only on exceptions, has been renamed to`RetryExceptionsFilter`.
  `RetryExceptionsFilter`is a subclass of`RetryFilter`, which takes a
  `RetryPolicy[(Req, Try[Rep])]`and allows you to retry on both ""successful""
  requests, such as HTTP 500s, as well as failed requests. The`Req`
  parameterization facilitates using the request to determine if retrying is
  safe (i.e. the request is idempotent).
- finagle-core: Name.all is now private to `com.twitter.finagle`.
- finagle-memcached: Unified stack-based construction APIs and cleanup internal
  constructors. In particular, `KetamaClient` was removed and `KetamaPartitionClient`
  and `KetamaFailureAccrualFactory` are now sealed inside Finagle. See
  [[com.twitter.finagle.Memcached]] for how to construct a finagle-memcached client.
- finagle-redis: Port the c.t.f.Redis protocol object to the StackClient API.
  A redis client can now be constructed and configured like the rest of the
  finagle subprojects.
",https://api.github.com/users/kevinoliver,347229,kevinoliver,https://api.github.com/repos/twitter/finagle/releases/2764654/assets,https://api.github.com/repos/twitter/finagle/releases/2764654,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.29.0,https://github.com/twitter/finagle/releases/tag/finagle-6.29.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.29.0,finagle-6.29.0,False,False
2764653,2015-08-27T22:28:27Z,2016-03-08T04:16:13Z,Finagle 6.28.0,"## Runtime Behavior Changes
- finagle-core: Weights are no longer supported by the load balancers. They are moved
  one level above and interpreted by a new module, the `TrafficDistributor`. This
  frees the balancers to have non-linear load metrics. It also changes the semantics
  of weights. They are now normalized by size of endpoints that share the same weight
  and interpreted proportional to offered load (however, they can still be though of,
  roughly, as multipliers for traffic). `RB_ID=677416`
- finagle-core: The RequestSemaphoreFilter now sheds load by dropping the tail of the queue
  and failing it with a `Failure.Restartable`. Previously, the filter had an unbounded
  queue but now the default size is 0 (i.e. no queueing). The dropped requests are in
  turn requeued by Finagle clients with protocol support (e.g. Http, ThriftMux).
  `RB_ID=696934`
- finagle-core: `ServerBuilder.ServerConfig.BindTo`, `ServerBuilder.ServerConfig.MonitorFactory`,
  and `ServerBuilder.ServerConfig.Daemonize`, are now private to `com.twitter.finagle.builder`. `RB_ID=730865`
- finagle-memcachedx: Renamed to finagle-memcached.
- finagle-stats: Standard deviation (""$statName.stddev"") is no longer exported.
  `RB_ID=726309` (follow up to `RB_ID=717647`)
- finagle-serversets: `namer/bind_latency_us` stat now counts only
  time in name resolution, not service acquisition.
  `namer/{dtabcache,namecache,nametreecache}/misstime_ms` stats are
  no longer exported. `RB_ID=730309`

## Breaking API Changes
- finagle-core: `c.t.f.jsr166y` has been replaced with Java 7 API. finagle: Replace JSR166y
  with Java 7 API. `RB_ID=720903`
- finagle-core: `LoadBalancerFactory` no longer takes endpoints with weights as
  per the decoupling mentioned in runtime changes. `RB_ID=677416`
- finagle-core: `RequestSemaphoreFilter.Param` now accepts a `com.twitter.concurrent.AsyncSemaphore`
  instead of an integer representing the max concurrency. `RB_ID=696934`
- finagle-core: removed `c.t.f.asyncDns` flag and `c.t.f.SyncInetResolver`; DNS resolution is
  now always asynchronous. `RB_ID=734427`
- finagle-core: `ClientBuilder.ClientConfig.DefaultParams`, `ClientBuilder.ClientConfig.DestName`,
  `ClientBuilder.ClientConfig.GlobalTimeout`, `ClientBuilder.ClientConfig.Daemonize`, and
  `ClientBuilder.ClientConfig.MonitorFactory` are now private to `com.twitter.finagle.builder`.
  `ClientBuilder.ClientConfig.Retries` is now private to `com.twitter`. `RB_ID=727245`
- finagle-httpx: `Method` no longer has an extractor. To access the name of
  custom methods, use `toString`. `RB_ID=722913`
- finagle-mux: `c.t.f.mux.exp.FailureDetector` and `c.t.f.mux.exp.sessionFailureDetector` are
  moved out of exp package into mux package. `RB_ID=725350`
",https://api.github.com/users/kevinoliver,347229,kevinoliver,https://api.github.com/repos/twitter/finagle/releases/2764653/assets,https://api.github.com/repos/twitter/finagle/releases/2764653,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.28.0,https://github.com/twitter/finagle/releases/tag/finagle-6.28.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.28.0,finagle-6.28.0,False,False
2764649,2015-07-27T23:23:08Z,2016-03-08T04:15:24Z,Finagle 6.27.0,"## New Features
- finagle-http: Support nacks between Finagle Http clients and servers. When a server fails
  with retryable exceptions (exceptions wrapped by `Failure.rejected`), it sends back a ""Nack""
  response, i.e. 503 Response code with a new ""finagle-http-nack"" header. This allows clients
  to safely retry failed requests, and keep connections open. `RB_ID=705948`

## Runtime Behavior Changes
- finagle-core: FailFast parameter renamed from `onOrOff` to `enabled`. `RB_ID=720781`
- finagle-core: When evaluating NameTree unions, return components of the union in Ok state rather
  than waiting for all components to be Ok. This enables resilience of unions when part of the
  tree cannot be resolved. `RB_ID=697114`
- finagle-stats: Standard of deviation is no longer calculated. It is exported as a constant 0.0
  for ""$statName.stddev"". `RB_ID=717647`

## Breaking API Changes
- finagle-stream: Introduce StreamRequest as a replacement for Netty's
  HttpRequest, and converted the rest of the public API to not leak
  other Netty types (notably ChannelBuffer is replaced by Buf). `RB_ID=695896`
- finagle-core: Dtab does not implement the Namer interface anymore. Use
  `c.t.f.naming.DefaultInterpreter` to bind a name via a Dtab. Support for Dtab entries starting
  with /#/ has been removed. `c.t.f.Namer.bindAndEval` has been removed. Use
  `c.t.f.Namer.resolve` instead. `RB_ID=711681`
- finagle: `LoadService` and `ThriftRichClient` migrated off of deprecated `ClassManifest`
  to `ClassTag`. `RB_ID=720455`
",https://api.github.com/users/kevinoliver,347229,kevinoliver,https://api.github.com/repos/twitter/finagle/releases/2764649/assets,https://api.github.com/repos/twitter/finagle/releases/2764649,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.27.0,https://github.com/twitter/finagle/releases/tag/finagle-6.27.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.27.0,finagle-6.27.0,False,False
2764643,2015-06-23T22:08:59Z,2016-03-08T04:14:36Z,Finagle 6.26.0,"## Deprecations
- finagle-memcached: Deprecated in favor of finagle-memcachedx and now removed.

## New Features
- finagle-httpx: Support nacks between Finagle Http clients and servers. When a server fails
  with retryable exceptions (exceptions wrapped by `Failure.rejected`), it sends back a ""Nack""
  response, i.e. 503 Response code with a new ""finagle-http-nack"" header. This allows clients
  to safely retry failed requests, and keep connections open. `RB_ID=670046`

## Breaking API Changes
- finagle-core: Moved netty3 specific things into a netty3 namespace. For
  these symbols, the namespace translation follows this pattern:
  `c.t.f.$MODULE._ => c.t.f.netty3.$MODULE._.` `RB_ID=691746`
- finagle-core: Define `WeightedSocketAddress` as a case class. Add
  `WeightedSocketAddress.extract` method to extract weight. `RB_ID=614228`
- finagle-core: Constructing a new Balancer that can be injected into a Finagle client
  was unnecessarily complex and non-uniform. We removed the legacy constructors around
  defining the collection of endpoints and simplified the interface to `LoadBalancerFactory`.
  Now, `com.twitter.finagle.loadbalancer.Balancers` defines the collection of balancer
  constructors. `RB_ID=660730`
- finagle-core: Aperture can no longer be enabled via command line flags. Configuring
  per-client settings globally is generally not a good idea and we're working to remove
  these flags from Finagle. Use the constructors in `com.twitter.finagle.loadbalancer.Balancers`
  to create an instance that can be injected into a client. `RB_ID=663194`
- finagle-core: The default load balancer has changed to p2c from heap. `RB_ID=693450`
- finagle-core: `Service.isAvailable` and `ServiceFactory.isAvailable` is finalized.
  `Service.status` and `ServiceFactory.status` supersedes `isAvailable` usage since 6.24.0 release.
  `RB_ID=678588`
- finagle-core: `ClientBuilder.failureAccrual` method is removed. Use `ClientBuilder.failureAccrualFactory`
  instead. `RB_ID=689076`
- finagle-core: Stack param `ClientBuilder.ClientConfig.FailureAccrualFac` is removed.
  Use `ClientBuilder.failureAccrualFactory` instead. `RB_ID=689076`
- finagle-exception: `com.twitter.finagle.exception.ExceptionReporter` is no longer used
  as the default `com.twitter.finagle.util.ReporterFactory`. `RB_ID=674646`
- finagle-kestrel: Replace deprecated finagle-kestrel package with finagle-kestrelx.
  `RB_ID=667920`
- finagle-core: Add new method `noFailureAccrual` on `ClientBuilder` that completely disables
  `FailureAccrualFactory` in the underlying stack. `RB_ID=689076`

## New Features
- finagle-thrift: Support for finagle Services per thrift method.
",https://api.github.com/users/kevinoliver,347229,kevinoliver,https://api.github.com/repos/twitter/finagle/releases/2764643/assets,https://api.github.com/repos/twitter/finagle/releases/2764643,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.26.0,https://github.com/twitter/finagle/releases/tag/finagle-6.26.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.26.0,finagle-6.26.0,False,False
2764639,2015-04-22T21:18:03Z,2016-03-08T04:12:49Z,Finagle 6.25.0,"## Breaking API Changes
- finagle-core: `c.t.f.builder.Server` now implements `c.t.f.ListeningServer`.
- finagle-core: `c.t.f.Server.serveAndAnnounce` with a `ServiceFactory` had
  its first argument renamed to `name` from `forum`.
- finagle-core: Add an attribute map to `c.t.f.Addr.Bound`.
- finagle-core: `c.t.f.builder.ClientConfig.FailFast` has moved to
  `c.t.f.FailFastFactory.FailFast`.
- finagle-core: NoBrokersAvailableException now has two Dtab constructor
  arguments, both the base and local Dtabs.
- finagle-core: `c.t.f.Failure` convenience constructors (e.g., `Failure.Cause`,
  `Failure.Rejected`) were removed in favor of uniform flag treatment, and clean
  separation of attributes from interpretation of those attributes.
- finagle-core: `ExitGuard` usage is now private to finagle.
- finagle-core: `c.t.f.service.TimeoutFilter.module` is now split into
  `TimeoutFilter.clientModule` and `TimeoutFilter.serverModule`.
- finagle-core: remove deprecated `c.t.f.builder.ClientBuilder.stack` taking a
  `Stack.Params => Client[Req1, Rep1]`.
- finagle-core: StackRegistry.Entry takes different constructor arguments, and the
  name has been bundled in with the Stack.Params.  StackRegistry.Entry is only used
  internally, so this should be relatively inexpensive.  Similarly, StackRegister#register
  has also had a small change to its method signature along the same lines.
- finagle-http: deprecated methods in `c.t.f.http.HttpMessageProxy` have been removed.
- finagle-memcached / finagle-memcachedx: move TwitterCacheResolver
  and related objects to new finagle-cacheresolver package.
- finagle-memcached / finagle-memcachedx: failureAccrual param in ReplicationClient
  is changed from type (Int, Duration) to (Int, () => Duration), to allow flexibility
  to config duration. Also see `markDeadFor` change in finagle-core in the ""New Features""
  section below.
- finagle-memcached / finagle-memcachedx: MigrationClientTest now uses
  ServerCnxnFactory from com.twitter.zk rather than NIOServerCnxn.Factory from
  org.apache.zookeeper.server.
- finagle-mux: `c.t.f.mux.RequestNackedException` is removed in favor of a standard
  Failure (`c.t.f.Failure.Rejected`).
- finagle-ostrich4: Switched dependency to finagle-httpx from finagle-http.
- finagle-serversets: ZkInstance in tests now uses ServerCnxnFactory from
  com.twitter.zk rather than NIOServerCnxn.Factory from
  org.apache.zookeeper.server.
- finagle-stats: Switched dependency to finagle-httpx from finagle-http.
- finagle-mysql: PreparedStatements are now more type-safe! The type signature of
  PreparedStatements has changed from Seq[Any] => Future[Result] to Seq[Parameter] =>
  Future[Result]. Parameter represents objects that are serializable by finagle-mysql.
  In most cases, scalac should transparently wrap your arguments in Parameter when
  applying a PreparedStatement. However, in cases where this doesn't happen you
  can explicitly wrap them using `Parameter.wrap`.

## Runtime Behavior Changes
- finagle-core: `com.twitter.finagle.service.StatsFilter` no longer requires a
  `com.twitter.finagle.stats.RollupStatsReceiver` for correct behaviour, and
  providing one will double count failures.
- finagle-core: `com.twitter.finagle.factory.TimeoutFactory` will fail with
  a retryable `com.twitter.finagle.Failure` when it times out.
- finagle-core: `com.twitter.finagle.pool.WatermarkPool` will fail with
  an interrupted `com.twitter.finagle.Failure` when it is interrupted while
  waiting or trying to establish a connection.  It has previously failed with
  a `com.twitter.finagle.WriteException` when trying to establish a
  connection, but it's incorrect to retry on an interruption.
- finagle-core: `com.twitter.fiangle.RetryPolicy`'s `RetryableWriteException`
  and `WriteExceptionsOnly` will not retry on `com.twitter.finagle.Failure`s
  that are marked `InterruptedBy`, even if they are `Retryable`.
- finagle-core: The error message provided by `c.t.f.NoBrokersAvailableException`
  prints both the base and local Dtabs.
- finagle-core: Stats produced by `com.twitter.finagle.factory.BindingFactory`
  are now scoped with the ""namer"" prefix rather than ""interpreter"". The total
  latency associated with Name binding is now recorded in the ""bind_latency_ms""
  stat.
- finagle-core: The ""service_creation/service_acquisition_latency_ms"" stat
  produced by `com.twitter.finagle.factory.StatsFactoryWrapper` no longer
  includes time spent in name resolution, which is now covered by
  ""namer/bind_latency_us"" as discussed above.
- finagle-core: added transit_latency_ms and deadline_budget_ms stats.
- finagle-core: Automatic retries (requeues) are now credited as a ratio of
  requests over a window of time, instead of a fixed limit. The stats scope
  has also changed from ""automatic"" to ""requeues"".

## Deprecations
- finagle-core: `c.t.f.builder.Server.localAddress` is deprecated in favor of
  `c.t.f.ListeningServer.boundAddress`.

## New Features
- finagle-core: `Fail fast <https://twitter.github.io/finagle/guide/FAQ.html#why-do-clients-see-com-twitter-finagle-failedfastexception-s>`_
  is now `configurable <https://twitter.github.io/finagle/guide/FAQ.html#configuring-finagle6>`_
  on Stack-based clients via the `com.twitter.finagle.FailFastFactory.FailFast` param.
- finagle-core: `com.twitter.finagle.service.StatsFilter` is now configurable with an
  `com.twitter.finagle.stats.ExceptionStatsHandler` to customize how failures are recorded.
- finagle-core: It should be safe to match on `com.twitter.finagle.Failure.InterruptedBy`
  to tell if a `com.twitter.util.Future` failed due to being interrupted.
- finagle-core: `markDeadFor` in c.t.f.service.FailureAccrualFactory.Param is changed from
  Duration type to () => Duration. So it's flexible for clients to pass in a function that
  specifies Duration. For example, c.t.f.service.FailureAccrualFactory provides a function
  that adds perturbation in durations. Stack-based API and c.t.f.builder.ClientBuilder
  support both types for client configuration. For example,
  
  ```
  Thrift.client.configured(FailureAccrualFactory(5, () => 1.seconds))
  // or
  Thrift.client.configured(new FailureAccrualFactory(5, 1.seconds)).
  ```
  
  c.t.f.client.DefaultClient does not support Duration type in failureAccrual anymore.
- finagle-core: improved Java compatiblity for `c.t.f.Stack.Params` / `c.t.f.Stack.Parameterized`.
- finagle-core: Introduce the ability to add metadata to bound `com.twitter.finagle.Addr`\s.
- finagle-core: Introduce per-address latency compensation.  Clients may be configured with
  a 'Compensator' function that uses the client's address metadata to adjust connection and
  request timeouts.  This can be used, for instance, to account for speed-of-light latency
  between physical regions.
- finagle-core: Introduce per-address stats scoping.  Clients may be configured with
  a `com.twitter.finagle.client.StatsScoping.Scoper` function that uses the client's
  address metadata to adjust the scope of client stats. This can be used, for instance,
  to properly scope client stats for a Name that resolves to a Union of distinct clusters.
- finagle-core: A convenient method `Client.newService(dest: String, label: String)` was added.
- finagle-core: ExitGuard now has an 'explainGuards' method to provide a human-readable
  description of exit guards that are still active.
- finagle-http(x): Two missing params were added: `Decompression` and `CompressionLevel`. Both
  client and server may be configured with either `configured` method or `withDecompression`/
  `withCompressionLevel`.
- finagle-mysql: Add support for MySQL transactions.
- finagle-stats: A new HostStatsReceiver type is added and used for per host stats.
  It is loaded through LoadService and used by the Stack-based API as a default
  param. Per host stats can be turned on through `com.twitter.finagle.loadbalancer.perHostStats`
  flag, and is exported to the ""/admin/per_host_metrics.json"" route in twitter-server.
- finagle-stats: Improved compatibility when migrating from
  [Ostrich](https://github.com/twitter/ostrich/) stats via two flags:
  `com.twitter.finagle.stats.useCounterDeltas=true` and
  `com.twitter.finagle.stats.format=ostrich`. If these flags are both set,
  HTTP requests to `/admin/stats.json` with the `period=60` query string
  parameter will replicate Ostrich's behavior by computing deltas on counters
  every minute and formatting histograms with the same labels Ostrich uses.
- finagle-memcached(x): Add `c.t.f.memcached.Memcached` which provides a Stack
  based Memcache client that uses pipelining.

## Bug Fixes
- finagle-core: `c.t.f.Server.serveAndAnnounce` for a `Service` had its usage
  of `name` and `addr` transposed.

## Miscellaneous Cleanup
- finagle-protobuf: Move entire unused subproject to the `Finagle
  organization on GitHub: https://github.com/finagle/finagle-protobuf.
",https://api.github.com/users/kevinoliver,347229,kevinoliver,https://api.github.com/repos/twitter/finagle/releases/2764639/assets,https://api.github.com/repos/twitter/finagle/releases/2764639,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.25.0,https://github.com/twitter/finagle/releases/tag/finagle-6.25.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.25.0,finagle-6.25.0,False,False
2764618,2014-12-12T22:25:47Z,2016-03-08T04:07:50Z,Finagle 6.24.0,"# Breaking API Changes
- finagle-core: Remove `c.t.f.client.StackClient.Role.loadBalancer`, which
  was unused and duplicated by `c.t.f.loadbalancer.LoadBalancerFactory.role`.
- finagle-core: `c.t.f.Namer.orElse` was removed; composing Namers
  may be accomplished by constructing an appropriate Dtab.
- finagle-core: removed experimental `enum` / `expand` from
  `c.t.f.Namer` and `alt` / `union` from `c.t.f.Dtab`.
- finagle-http: Remove `c.t.f.http.CheckRequestFilter` along with
  `c.t.f.http.CheckHttpRequestFilter`. The functionality has been
  added to `c.t.f.http.codec.HttpServerDispatcher`. In addition,
  the codecError in `c.t.f.http.BadHttpRequest` has been replaced
  with the exception thrown by the HttpServerCodec.
- finagle-httpx: Remove deprecated code, limited scope of access on internal
  classes.
- finagle-mux: `c.t.f.mux.lease.exp.WindowedByteCounter` no longer
  calls `Thread.start()` in its constructor. This should be now be
  done by the caller.
- finagle-mux: The experimental session API is discontinued.
- finagle-mux: Introduce new Request and Response types for mux services.
  The new mux request includes a `destination` path so that, which corresponds
  to the `destination` field in Tdispatch requests. Furthermore, these new
  types expose `c.t.io.Buf` instead of Netty's ChannelBuffers.
- finagle-thrift,finagle-thriftmux: `c.t.f.Thrift.Client`, `c.t.f.Thrift.Server`,
  `c.t.f.ThriftMux.Client` and `c.t.f.ThriftMux.Server` have their
  `TProtocolFactory` configured via a `c.t.f.thrift.param.ProtocolFactory`
  `Stack.Param`.
- finagle-thriftmux: `c.t.f.ThriftMux.Client` now has its `ClientId`
  configured via a `c.t.f.thrift.param.ClientId` `Stack.Param`.
- Traces (`com.twitter.finagle.tracing.Trace`) lose their local-state mutating methods:
  `Trace.clear`, `Trace.pushId`, `Trace.setId`, `Trace.setTerminalId`, `Trace.pushTracer`,
  `Trace.pushTracerAndSetNextId`,
  `Trace.state_=`, and `Trace.unwind`.
  Let-bound versions of these are introduced in their stead.
  This makes it simple to ensure that state changes are properly delimited;
  further, these are always guaranteed to be delimited properly by Finagle.
  
  ```
  Trace.setTracer(tracer)
  codeThatUsesTracer()
  
  // Let-bound version:
  Tracer.letTracer(tracer) {
    codeThatUsesTracer()
  }
  ```
- Context handlers (`com.twitter.finagle.Context`) are removed.
  They are replaced by the use of marshalled request contexts
  (`com.twitter.finagle.context.Contexts.broadcast`).
  Marshalled request contexts do not require the use of service loading,
  so their use no longer requires build system coordination.
  We show Finagle's trace context:
  the first version uses the old context handler mechanism;
  the second uses `Contexts.broadcast`.
  
  ```
  // The old context handler for Finagle's tracing context. Note that this
  // also required the file
  // finagle-core/src/main/resources/META-INF/services/com.twitter.finagle.ContextHandler
  // to contain the fully qualifed class path of the below object.
  class TraceContext extends ContextHandler {
    val key = Buf.Utf8(""com.twitter.finagle.tracing.TraceContext"")
  
    def handle(body: Buf) {
      // Parse 'body' and mutate the trace state accordingly.
    }
  
    def emit(): Option[Buf] = {
      // Read the trace state and marshal to a Buf.
    }
  }
  
  // New definition. No service loading required.
  private[finagle] val idCtx = new Contexts.broadcast.Key[TraceId] {
    val marshalId = Buf.Utf8(""com.twitter.finagle.tracing.TraceContext"")
  
    def marshal(id: TraceId): Buf = {
      // Marshal the given trace Id
    }
  
    def tryUnmarshal(body: Buf): Try[TraceId] = {
      // Try to marshal 'body' into a trace id.
    }
  }
  ```

# Runtime Behavior Changes
- finagle-mux: Mark the ServiceFactory available again if the underlying
  Service is no longer available.  This permits it to be closed and reused.
- finagle-mux: Rename the ""lease_counter"" counter to ""leased"" on mux clients.

# Deprecations
- finagle-core: Deprecated the mechanisms of FailureAccrual that use
  factory Transformers.  It's better to just use the Params to
  configure the existing FailureAccrualFactory.  However, if you've
  actually written your own failure accrual transformer that's
  significantly different, then you can do stack.replace() to swap it
  in.
- finagle-memcached: Have cas() operation return false on NotFound()
  state instead of throw IllegalStateException

# New Features
- finagle-core: All `Stack.Param`s used in `ClientBuilder` and
  `ServerBuilder` are now publicly exposed for configuration
  parity.
- finagle-mux: Drain mux servers properly, so that shutdowns can be
  graceful.
- finagle-core: Introduce `Service.status` which supersedes
  `Service.isAvailable`. `Service.status` is a fine-grained
  health indicator. The default definition of
  `Service.isAvailable` is now defined in terms of
  `Service.status`; this definition will soon be made
  final.
- finagle-mux: Inject bound residual paths into mux requests.
- _Request contexts._ Request contexts replace the direct use of
  com.twitter.util.Local and of com.twitter.finagle.Context.
  Request contexts are environments of request-local bindings;
  they are guaranteed to be delimited by Finagle,
  and their API admits only properly delimited binding.
  They come in two flavors:
  Contexts.local are always local to handling a single request;
  bindings in Contexts.broadcast may be marshalled and transmitted across process
  boundaries where there is protocol support.
  Currently, both Thrift and Mux (and thus also ThriftMux)
  support marshalled contexts.
  See `com.twitter.finagle.contexts.Context` for more details.
",https://api.github.com/users/kevinoliver,347229,kevinoliver,https://api.github.com/repos/twitter/finagle/releases/2764618/assets,https://api.github.com/repos/twitter/finagle/releases/2764618,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.24.0,https://github.com/twitter/finagle/releases/tag/finagle-6.24.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.24.0,finagle-6.24.0,False,False
2763954,2016-02-04T00:56:35Z,2016-03-08T04:19:46Z,Finagle 6.33.0,"## New Features
- finagle-core: Introduce the `c.t.f.service.PendingRequestFactory` module in the client Stack.
  The module allows clients to limit the number of pending requests per connection. It is disabled
  by default. `RB_ID=795491`
- finagle-core: Introduce the `c.t.f.filter.ServerAdmissionControl` module in the server Stack,
  which is enabled through the param `c.t.f.param.EnableServerAdmissionControl`. Users can define
  their own admission control filters, which reject requests when the server operates beyond
  its capacity. These rejections apply backpressure and allow clients to retry requests on
  servers that may not be over capacity. The filter implementation should define its own logic
  to determine over capacity. One or more admission control filters can be installed through
  the `ServerAdmissionControl.register` method. `RB_ID=776385`
- finagle-core: Introduce `c.t.f.service.ResponseClassifier` which allows developers to
  give Finagle the additional application specific knowledge necessary in order to properly
  classify them. Without this, Finagle can only safely make judgements about transport
  level failures. This is now used by `StatsFilter` and `FailureAccrualFactory` so that
  application level failures can be used for both success metrics and failure accrual.
  `RB_ID=772906`
- finagle-core: Added a new 'Endpoints' section on client pages, listing the weights, paths,
  and resolved endpoints for each dtab.`RB_ID=779001`
- finagle-core: Introduce discoverable stack params which are available on every client/server
  via the `with`-prefixed methods. `RB_ID=781833`
- finagle-memcached: Added `c.t.f.memcached.BaseClient.checkAndSet` which exposes the difference
  between a conflict and a not found result.
- finagle-mux: Add a Wireshark dissector that can decode Mux messages. `RB_ID=779482`
- finagle-stats: Define flag `c.t.f.stats.statsFilterFile` as GlobalFlag[Set[File]] to take
  comma-separated multiple files. `RB_ID=793397`
- finagle-mux: Tinit/Rinit are now available and permit feature negotiation. `RB_ID=793350`

## Deprecations
- finagle-memcached: `c.t.f.memcached.BaseClient.cas` is deprecated in favor of the richer
  `checkAndSet` method.

## Breaking API Changes
- finagle-core: All the deprecated exceptions from `Exceptions.scala` have been removed.
  `RB_ID=774658`
- finagle-thrift: Remove the `framed` attributes from `c.t.f.Thrift.Client` and
  `c.t.f.Thrift.Server`.  This behavior may now be controlled with `c.t.f.Thrift.param.Framed`.
- finagle-core: Unused `c.t.f.builder.NonShrinkingCluster` has been removed.
  `RB_ID=779001`
- finagle-thrift: `c.t.f.ThriftRichClient` has a new abstract protected method
  `responseClassifier: ResponseClassifier`. If your implementation does not need
  this, you can implement it with `ResponseClassifier.Default`. `RB_ID=791470`

## Runtime Behavior Changes
- finagle-thrift,thriftmux: Deserialization of Thrift responses now happens as part
  of service application which means that it will now be part of the latency reported by
  `StatsFilter`. The actual latency as perceived by clients will not have changed, but
  for clients that spend significant time deserializing and do not have higher level
  metrics this may come as a surprise. `RB_ID=772931`
- finagle-mux,thriftmux: The default `closeTimeout` in ping based failure detection
  is changed from Duration.Top to 4 seconds, to allow a session to be closed by default
  when a ping response times out after 4 seconds. This allows sessions to be reestablished
  when there may be a networking issue, so that it can choose an alternative networking
  path instead. `RB_ID=773649`

## Breaking API Changes
- finagle-thrift: Remove the `framed` attributes from `c.t.f.Thrift.Client` and
  `c.t.f.Thrift.Server`.  This behavior may now be controlled with `c.t.f.Thrift.param.Framed`.
",https://api.github.com/users/kevinoliver,347229,kevinoliver,https://api.github.com/repos/twitter/finagle/releases/2763954/assets,https://api.github.com/repos/twitter/finagle/releases/2763954,develop,https://api.github.com/repos/twitter/finagle/tarball/finagle-6.33.0,https://github.com/twitter/finagle/releases/tag/finagle-6.33.0,https://api.github.com/repos/twitter/finagle/zipball/finagle-6.33.0,finagle-6.33.0,False,False
666452,2014-10-14T23:30:23Z,2014-10-30T18:50:06Z,v6.22.0,"## Breaking API Changes
- finagle-core: Removed unused `com.twitter.finagle.service.ProxyService`. It wasn't
  sufficiently general to be used outside of finagle, and was no longer used
  in finagle.

## New Features
- finagle-core: BroadcastStatsReceiver, introduce specialized implementation
- finagle-core: Introduce gauges in SummarizingStatsReceiver
- finagle-core: Introduce Transport#copyToWriter
- finagle-core: Make base Dtab used in BindingFactory a Stack.Param
- finagle-core: Proper decay in experimental ewma load metric
- finagle-core: Simplify Stack{Client, Server} and unify around them

## Runtime Behavior Changes
- finagle-core: Add support for non-URLClassloaders to LoadService
- finagle-core: clear locals before entering server dispatch loop
- finagle-core: Defer DNS Resolution in InetResolver to FuturePool
- finagle-core: for paths starting with /#/, skip rewrites where prefix is /
- finagle-core: include name resolution in tracing request span
- finagle-core: Properly wrap some IOException into ConnectionFailedException
- finagle-core: Scope InetResolver's stats properly
- finagle-http: Send ""Connection: close"" header while dispatcher is closing
- finagle-http: Set content length header when appropriate
- finagle-memcached: Use interruptible future for the client request readiness
- finagle-stats: Add content-type response header to JsonExporter
- finagle-thrift: Add back connection_preparation_latency stat in Thrift
- finagle-thriftmux: Record protocol as a gauge rather than a counter

## Documentation
- finagle-core: Add Scaladocs for ChannelBufferBuf and BufChannelBuffer
- finagle-core: link to the FAQ in FailedFastException
- finagle-serversets: Defer DNS resolution for endpoints to InetResolver
- finagle-thrift{,mux}: Clarified with\* deprecation warning
- Fix minor issues and missing code blocks in Finagle documentation

## Optimization
- finagle-core: GlobalFlag isn't caching the property value
- finagle-core: recursive-descent Path / NameTree / Dentry / Dtab parsers to reduce heap allocation

## Bug Fixes
- finagle-core: Fix a deadlock in Contexts
- finagle-core: Fix breaking ABI change in SummarizingStatsReceiver
- finagle-core: Fix bug in computing array index in SummarizingStatsReceiver
- finagle-core: Fix build.properties location for maven builds
- finagle-core: Fix synchronization in LeasedFactory
- finagle-core: Fix tracing with Stack{Client, Server}
- finagle-core: Make FailedFastException an instance variable.
- finagle-core: Synchronized access to the Stackable mutable.params map
- finagle-http: Fix CookieMap.rewriteCookieHeaders()
- finagle-http: Fix the memory leak in HttpClientDispatcher
- finagle-mysql: Fix timestamp fractional seconds encoding
- finagle-mysql: Properly heed timezone when extracting TimestampValue
- mux: clear contexts after receive, not in 'finally' clause
  
    Removed TLSEngine, and replaced it with two, TLSClientEngine, and
    TLSServerEngine, where TLSServerEngine is the same as TLSEngine, and
    TLSClientEngine takes a SocketAddress instead of ().  The other changed
    API is the Netty3TransporterTLSConfig now takes a function
    SocketAddress => Engine, instead of () => Engine.
",https://api.github.com/users/caniszczyk,63777,caniszczyk,https://api.github.com/repos/twitter/finagle/releases/666452/assets,https://api.github.com/repos/twitter/finagle/releases/666452,develop,https://api.github.com/repos/twitter/finagle/tarball/6.22.0,https://github.com/twitter/finagle/releases/tag/6.22.0,https://api.github.com/repos/twitter/finagle/zipball/6.22.0,6.22.0,False,False
