id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
7952862,2017-09-30T18:57:45Z,2017-09-30T19:10:37Z,Workaround null counters,"This is a minor bugfix release that works around hadoop giving us a null counter reporter. We work around by ignoring counters. This may not be the best solution, but it unblocks some users. We don't yet know why hadoop sometimes gives this users a null counter reporter.

See #1726 ",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/scalding/releases/7952862/assets,https://api.github.com/repos/twitter/scalding/releases/7952862,develop,https://api.github.com/repos/twitter/scalding/tarball/v0.17.3,https://github.com/twitter/scalding/releases/tag/v0.17.3,https://api.github.com/repos/twitter/scalding/zipball/v0.17.3,v0.17.3,False,False
7049536,2017-07-14T21:07:05Z,2017-07-14T21:33:51Z,Scalding 0.17.2,"This version is basically the same as 0.17.1 but backward compatible with 0.17.0.
* Revert memory estimator changes on 0.17.x branch: #1704
* Turn on mima checks on 0.17.x branch: #1706
",https://api.github.com/users/ttim,82200,ttim,https://api.github.com/repos/twitter/scalding/releases/7049536/assets,https://api.github.com/repos/twitter/scalding/releases/7049536,develop,https://api.github.com/repos/twitter/scalding/tarball/v0.17.2,https://github.com/twitter/scalding/releases/tag/v0.17.2,https://api.github.com/repos/twitter/scalding/zipball/v0.17.2,v0.17.2,False,False
6992357,2017-07-10T23:49:15Z,2017-07-11T00:00:57Z,Scalding 0.17.1 with  2.11 and 2.12 support,"Changes of this release:

* Request for Scalding release 0.17.0 (#1641)  …			b1bf1be
* make ordered serialization stable across compilations (#1664)  …			0f95484
* Remove unnecessary semicolon (#1668)			14d3f76
* Add tailrec annotation (#1671)			693e6b7
* Be more paranoid about Kryo registration order (#1673)			0b291f2
* Update sbt version to 0.13.15 (#1677)			bf0e724
* Register all Boxed classes in Kryo (#1678)  …			c930bcd
* Fix serialization of `KryoHadoop` (#1685)  …			a72fd72
* Merge pull request #1686 from ttim/cherry_pick_0.17.x_changes  …			9da38a1
* Fix stack overflow in typedPipeMonoid.zero (#1688)  …			6bcb169
* A couple of fixes into the 0.17.x branch (#1695)  …			a6d3775
* Memory estimator changes to 0.17.x branch (#1700)  …			9b8ea00
",https://api.github.com/users/tonyzhoujingtao,4277881,tonyzhoujingtao,https://api.github.com/repos/twitter/scalding/releases/6992357/assets,https://api.github.com/repos/twitter/scalding/releases/6992357,develop,https://api.github.com/repos/twitter/scalding/tarball/v0.17.1,https://github.com/twitter/scalding/releases/tag/v0.17.1,https://api.github.com/repos/twitter/scalding/zipball/v0.17.1,v0.17.1,False,False
6049347,2017-04-11T00:09:24Z,2017-04-11T17:40:07Z,Scalding 0.17.0 with 2.12 support!,"This is the first Scalding release that publishes artifacts for Scala 2.12! Here are some of the changes that are part of this release:
* 2.12 releated updates: https://github.com/twitter/scalding/pull/1663, https://github.com/twitter/scalding/pull/1646
* Use reflection over Jobs to find serialized classes: https://github.com/twitter/scalding/pull/1654, https://github.com/twitter/scalding/pull/1662
* Simplify match statement and use collection.breakOut: https://github.com/twitter/scalding/pull/1661
* Add explicit types to implicit methods and values: https://github.com/twitter/scalding/pull/1660
* Reducer estimation size fixes: https://github.com/twitter/scalding/pull/1652, https://github.com/twitter/scalding/pull/1650, https://github.com/twitter/scalding/pull/1645, https://github.com/twitter/scalding/pull/1644 
* Use Combined*SequenceFile for VKVS, WritableSequenceFileScheme, SequenceFileScheme: https://github.com/twitter/scalding/pull/1647
* Improve Vertica support in scalding-db: https://github.com/twitter/scalding/pull/1655
* Add andThen to Mappable: https://github.com/twitter/scalding/pull/1656
* Expand libjars globs in ScaldingShell to match the behavior of Tool: https://github.com/twitter/scalding/pull/1651
* Use Batched in Sketch production: https://github.com/twitter/scalding/pull/1648
* Pick up Algebird 0.13.0: https://github.com/twitter/scalding/pull/1640
* Added API for Execution/Config to work with DistributedCache: https://github.com/twitter/scalding/pull/1635
* Bump chill version to 0.8.3: https://github.com/twitter/scalding/pull/1634
* Fixes a bug in how we use this stack: https://github.com/twitter/scalding/pull/1632
* Upgrade build to sbt 0.13.13: https://github.com/twitter/scalding/pull/1629
* Generate Scalding microsite via sbt-microsites: https://github.com/twitter/scalding/pull/1623
* FileSource support for empty directories: https://github.com/twitter/scalding/pull/1622, https://github.com/twitter/scalding/pull/1618, https://github.com/twitter/scalding/pull/1613, https://github.com/twitter/scalding/pull/1611, https://github.com/twitter/scalding/pull/1591
* Clean up temporary files created by forceToDiskExecution: https://github.com/twitter/scalding/pull/1621
* Moving the repl in wonderland to a dedicated md file: https://github.com/twitter/scalding/pull/1614
* Update Scala and sbt version: https://github.com/twitter/scalding/pull/1610
* REFACTOR: Fixed some compilation warnings: https://github.com/twitter/scalding/pull/1604
* REFACTOR: Rename parameter to reflect expectation: https://github.com/twitter/scalding/pull/1601
* Add partitioned sources for Parquet thrift / scrooge: https://github.com/twitter/scalding/pull/1590
* Add a test for sortBy: https://github.com/twitter/scalding/pull/1594
* Create COMMITTERS.md: https://github.com/twitter/scalding/pull/1589
* Use ExecutionContext in Execution.from/fromTry: https://github.com/twitter/scalding/pull/1587
* Support custom parquet field name strategies: https://github.com/twitter/scalding/pull/1580
* Deprecate reflection-based JobTest apply method: https://github.com/twitter/scalding/pull/1578
* Use Caching for FlowDefExecution: https://github.com/twitter/scalding/pull/1581
[parquet tuple macros] listType was deprecated in favor of listOfElements: https://github.com/twitter/scalding/pull/1579
* Use Batched to speed up CMS summing on mappers: https://github.com/twitter/scalding/pull/1575
* Remove a TypedPipeFactory wrapper which seems unneeded: https://github.com/twitter/scalding/pull/1576
* Make Writeable sources Mappable to get toIterator: https://github.com/twitter/scalding/pull/1573
* case class implicit children: https://github.com/twitter/scalding/pull/1569",https://api.github.com/users/piyushnarang,9885908,piyushnarang,https://api.github.com/repos/twitter/scalding/releases/6049347/assets,https://api.github.com/repos/twitter/scalding/releases/6049347,develop,https://api.github.com/repos/twitter/scalding/tarball/v0.17.0,https://github.com/twitter/scalding/releases/tag/v0.17.0,https://api.github.com/repos/twitter/scalding/zipball/v0.17.0,v0.17.0,False,False
3151462,2016-05-03T20:09:11Z,2016-05-04T01:21:31Z,Scalding 0.16.0 Released!,"<h1> 28 Contributors to this release: </h1>

@Gabriel439, @JiJiTang, @MansurAshraf, @QuantumBear, @afsalthaj, @benpence, @danosipov, @epishkin, @gerashegalov, @ianoc, @isnotinvain, @jnievelt, @johnynek, @joshualande, @megaserg, @nevillelyh, @oeddyo, @piyushnarang, @reconditesea, @richwhitjr, @rubanm, @sid-kap, @sriramkrishnan, @stuhood, @tdyas, @tglstory, @vikasgorur, @zaneli

<h1>Release Notes</h1>

This release is a performance and correctness improvement release. The biggest improvements are to the Execution API and to OrderedSerialization.

Execution allows a reliable way to compose jobs and use scalding as a library, rather than running subclasses of `Job` in a framework style. In this release we have improved the performance and added some methods for more control of Executions (such as [.withNewCache](https://github.com/twitter/scalding/blob/4b779d0ec7cbffd1991831789b2c058487102985/scalding-core/src/main/scala/com/twitter/scalding/Execution.scala#L257) for cases where caching in the whole flow is not desired).

OrderedSerialization is a way to easily leverage binary comparators, comparators that act directly on serialized data so they don’t need to allocate nearly as much when the data is partitioned by key. These were discussed in [presentation at the Hadoop summit](https://www.youtube.com/watch?v=jupArYWxoq0) [[slides](http://www.slideshare.net/alexlevenson/hadoop-summit-2015-performance-optimization-at-scale)]. These are generated by macros so most simple types (case classes, scala collections, primitives, and recursion of these) are easy to use with a single import ([see this note](https://github.com/twitter/scalding/wiki/Automatic-Orderings,-Monoids-and-Arbitraries)).

Here’s a list of some of the features we’ve added to Scalding in this release.

<h2>New Features</h2>
- OrderedSerialization (fast binary comparators for grouping and joining + macros to create them) are production ready. To use them, and other macros, [see this note](https://github.com/twitter/scalding/wiki/Automatic-Orderings,-Monoids-and-Arbitraries). Updates related to OrderedSerialization - #1307, #1316, #1320, #1321, #1329, #1338, #1457
- Add TypedParquet macros for parquet read / write support (<b>Note:</b> this might not be ready for production use as it doesn’t support schema evolution) - #1303
- Naming of Executions is supported - #1334
- Add line numbers at .group and .toPipe boundaries - #1335
- Make some repl components extensible to allow setting custom implicits and config to load at boot time - #1342
- Implement flatMapValues method - #1348
- Add NullSink, can  be used with .onComplete to drive a side-effecting (but idempotent) job - #1378
- Add monoid and semigroup for Execution - #1379
- Support nesting Options in TypeDescriptor - #1387
- Add .groupWith method to TypedPipe - #1406
- Add counter verification logic - #1409
- Scalding viz options - #1426
- Add TypedPipeChecker to assist in testing a TypedPipe - #1478
- Add withConfig api to allow running an execution with a transformed config to override hadoop or source level options in subsections - #1489
- Add a liftToTry function to Execution - #1499
- Utility methods for running Executions in parallel - #1507
- Add's support for OrderedSerialization on sealed abstract classes - #1518
- Support for more formats to work with RichDate - #1522

<h2>Important Bug Fixes</h2>
- Add InvalidSourceTap to catch all cases for no good path - #1458
- SuccessFileSource: correctness for multi-dir globs - #1470
- A serialization error we were seeing in repl usage : #1376
- Fix lack of Externalizer in joins.  : #1421
- Requires a DateRange's ""end"" to be after its ""start""  : #1425
- Fixes map-only jobs to accommodate both an lzo source and sink binary converter  : #1431
- Fix bug with sketch joins and single keys  : #1451
- Fix FileSystem.get issue  : #1487
- Fix scrooge + OrderedSerialization for field names starting with `_`: #1534
- Add before() and after() to RichDate  : #1538

<h2>Performance Improvements</h2>
- Change defaults for Scalding reducer estimator - #1333
- Add runtime-based reducer estimators - #1358
- When using WriteExecution and forceToDisk we can share the same flowdef closer in construction - #1414
- Cache the zipped up write executions - #1415
- Cache counters for stat updates rather than doing a lookup for every increment - #1495
- Cache boxed classes - #1501
- Typed Mapside Reduce - #1508
- Add auto forceToDisk support to hashJoin in TypedPipe - #1529
- Fix performance bug in TypedPipeDiff : #1300
- Make sure Execution.zip fails fast  : #1412
- Fix Rounding Bug in RatioBasedEstimator  : #1542

Full change list is [here](https://github.com/twitter/scalding/blob/develop/CHANGES.md#version-0160)
",https://api.github.com/users/piyushnarang,9885908,piyushnarang,https://api.github.com/repos/twitter/scalding/releases/3151462/assets,https://api.github.com/repos/twitter/scalding/releases/3151462,develop,https://api.github.com/repos/twitter/scalding/tarball/v0.16.0,https://github.com/twitter/scalding/releases/tag/v0.16.0,https://api.github.com/repos/twitter/scalding/zipball/v0.16.0,v0.16.0,False,False
2959870,2016-04-05T23:48:20Z,2016-04-06T00:33:48Z,,"This is the candidate that we are considering for the 0.16.0 release. We will be testing this RC out internally at Twitter and if it looks good and other folks are on board, this can be promoted to 0.16.0
",https://api.github.com/users/piyushnarang,9885908,piyushnarang,https://api.github.com/repos/twitter/scalding/releases/2959870/assets,https://api.github.com/repos/twitter/scalding/releases/2959870,develop,https://api.github.com/repos/twitter/scalding/tarball/v0.16.0-RC6,https://github.com/twitter/scalding/releases/tag/v0.16.0-RC6,https://api.github.com/repos/twitter/scalding/zipball/v0.16.0-RC6,v0.16.0-RC6,False,False
1325143,2015-05-21T23:36:25Z,2015-05-21T23:48:20Z," LzoGenericScheme/Source, Typed Parquet Tuple and Better Performance with a new Elephant-Bird API","- Typed Parquet Tuple #1198 
- LzoGenericScheme and Source #1268 
- Move OrderedSerialization into zero-dep scalding-serialization module #1289
- bump elephantbird to 4.8 #1292
- Fix OrderedSerialization for some forked graphs #1293
- Add serialization modules to aggregate list #1298 

OrderedSerialization is work-in-progress and is not ready to be used.
",https://api.github.com/users/egonina,3441503,egonina,https://api.github.com/repos/twitter/scalding/releases/1325143/assets,https://api.github.com/repos/twitter/scalding/releases/1325143,develop,https://api.github.com/repos/twitter/scalding/tarball/0.15.0,https://github.com/twitter/scalding/releases/tag/0.15.0,https://api.github.com/repos/twitter/scalding/zipball/0.15.0,0.15.0,False,False
1309926,2015-05-15T18:31:26Z,2015-05-18T21:06:21Z,Scalding 0.14.0 Released!,"## ExecutionApp tutorial

A new tutorial for `ExecutionApp` is added in #1196.  You can check out [ExecutionTutorial.scala](https://github.com/twitter/scalding/blob/develop/tutorial/execution-tutorial/ExecutionTutorial.scala) for the source.

## Simple HDFS local mode REPL

#1244 adds an easy to use `useHdfsLocalMode` method to the REPL for running hadoop locally.  `useHdfsMode` reverts the behavior.

## TypedPipe conditional execution via #make

`TypedPipe` [now exposes](https://github.com/twitter/scalding/pull/1217) the `make` method for fallback computation/production of an optional store in an `Execution`.  If the store already exists, the computation is skipped.  Otherwise, the computation is performed and the store is created before proceeding with execution.

## TypedPipeDiff

#1266 adds `TypedPipeDiff` and helper enrichments for comparing the contents of two pipes.

## RichPipe#skewJoinWithSmaller now works

A data bug with the fields API method `skewJoinWithSmaller` was discovered and [fixed](https://github.com/twitter/scalding/pull/1278).  The API should be functionally equivalent to `joinWithSmaller` now.

See [CHANGES.md](https://github.com/twitter/scalding/blob/develop/CHANGES.md) for the full list of changes.
",https://api.github.com/users/jnievelt,4684038,jnievelt,https://api.github.com/repos/twitter/scalding/releases/1309926/assets,https://api.github.com/repos/twitter/scalding/releases/1309926,develop,https://api.github.com/repos/twitter/scalding/tarball/0.14.0,https://github.com/twitter/scalding/releases/tag/0.14.0,https://api.github.com/repos/twitter/scalding/zipball/0.14.0,0.14.0,False,False
939960,2015-02-04T05:08:06Z,2015-02-11T01:39:09Z,"Scalding 0.13.1, the most convenient scalding we’ve ever released! ","## Scala 2.11 Support is here!

We’re now publishing scalding for scala 2.11! Get it while it’s hot!

## Easier aggregation via the latest Algebird

Algebird now comes with some very powerful aggregators that make it easy to compose aggregations and apply them in a single pass. 

For example, to find each customer's order with the max quantity, as well as the order with the min price, in a single pass:

``` scala
val maxOp = maxBy[Order, Long](_.orderQuantity).andThenPresent(_.orderQuantity)
val minOp = minBy[Order, Long](_.orderPrice).andThenPresent(_.orderPrice)
TypedPipe.from(orders)
      .groupBy(_.customerName)
      .aggregate(maxOp.join(minOp))
```

For more examples and documentation see: [Aggregation using Algebird Aggregators](https://github.com/twitter/scalding/wiki/Aggregation-using-Algebird-Aggregators)
And for a hands on walkthrough in the REPL, see [Alice In Aggregator Land](https://gist.github.com/johnynek/814fc1e77aad1d295bb7)

## Read-Eval-Print-Love

We’ve made some improvements that make day to day use of the REPL more convenient:

### Easily switch between local and hdfs mode

#1113 Makes it easy to switch between local and hdfs mode in the REPL, without losing your session.
So you can iterate locally on some small data, and once that’s working, run a hadoop job on your real data, all from within the same REPL session. You can also sample some data down to fit into memory, then switch to local mode where you can really quickly get the answers you’re looking for.

For example:

``` bash
$ ./sbt assembly
$ ./scripts/scald.rb --repl --hdfs --host <host to ssh to and launch jobs from>
```

``` scala
scalding> useLocalMode()
scalding> def helper(x: Int) = (x * x) / 2
helper: (x: Int)Int
scalding> val dummyData = TypedPipe.from(Seq(10, 11, 12))
scalding> dummyData.map(helper).dump
50
60
72
scalding> useHdfsMode()
scalding> val realData = TypedPipe.from(MySource(“/logs/some/real/data”)
scalding> realData.map(helper).dump
```

### Easily save TypedPipes of case classes to disk

#1129 Lets you save any TypedPipe to disk from the REPL, regardless of format, so you can load it back up again later from another session. This is useful for saving an intermediate TypedPipe[MyCaseClass] without figuring out how to map it to a TSV or some other format. This works by serializing the objects to json behind the scenes.
For example:

``` bash
$ ./scripts/scald.rb --json --repl --local
```

``` scala
scalding> import com.twitter.scalding.TypedJson
import com.twitter.scalding.TypedJson

scalding> case class Bio(text: String, language: String)
defined class Bio

scalding> case class User(id: Long, bio: Bio)
defined class User

// in a real use case, getUsers might load a few sources, do some projections + joins, and then return
// a TypedPipe[User]
scalding> def getUsers() = TypedPipe.from(Seq( User(7, Bio(""hello"", ""en"")), User(8, Bio(""hola"", ""es"")) ))
getUsers: ()com.twitter.scalding.typed.TypedPipe[User]

scalding> getUsers().filter(_.bio.language == ""en"").save(TypedJson(""/tmp/en-users""))
res0: com.twitter.scalding.TypedPipe[User] = com.twitter.scalding.typed.TypedPipeFactory@7cccf31c

scalding> exit
```

``` bash
$ cat /tmp/en-users 
{""id"":7,""bio"":{""text"":""hello"",""language"":""en""}}

$ ./scripts/scald.rb --json --repl --local
```

``` scala
scalding> import com.twitter.scalding.TypedJson
import com.twitter.scalding.TypedJson

scalding> case class Bio(text: String, language: String)
defined class Bio

scalding> case class User(id: Long, bio: Bio)
defined class User

scalding> val filteredUsers = TypedPipe.from(TypedJson[User](""/tmp/en-users""))
filteredUsers: com.twitter.scalding.typed.TypedPipe[User] = com.twitter.scalding.typed.TypedPipeFactory@44bb1922

scalding> filteredUsers.dump
User(7,Bio(hello,en))
```

### ValuePipe.dump

#1157 Adds dump to ValuePipe, so now you can not only print the contents of TypedPipes but on ValuePipes as well (see above for examples of using dump in the REPL).

## Execution Improvements

The scaladoc for Execution is complete, but some additional exposition was added to the wiki: [Calling Scalding from inside your application](https://github.com/twitter/scalding/wiki/Calling-Scalding-from-inside-your-application). We added two helper methods to object Execution: `Execution.failed` creates an `Execution` from a `Throwable` (like `Future.failed`), and `Execution.unit` which creates a successful `Execution[Unit]`, which is handy in some branching loops.

## Bugfixes

The final bugs were finally removed from scalding*. Including #1190, a bug that effected the hashCode for Args instances and issue #1184 that made Stats unreliable for some users. 
*some humor is used in scalding notes.

See [CHANGES.md](https://github.com/twitter/scalding/blob/develop/CHANGES.md) for a full change log.

Thanks to @avibryant, @danielhfrank, @DanielleSucher, @miguno, and the rest of the [algebird contributors](https://github.com/twitter/algebird/graphs/contributors) for the new aggregations, as well as all the [scalding contributors](https://github.com/twitter/scalding/graphs/contributors)
",https://api.github.com/users/isnotinvain,372969,isnotinvain,https://api.github.com/repos/twitter/scalding/releases/939960/assets,https://api.github.com/repos/twitter/scalding/releases/939960,develop,https://api.github.com/repos/twitter/scalding/tarball/0.13.1,https://github.com/twitter/scalding/releases/tag/0.13.1,https://api.github.com/repos/twitter/scalding/zipball/0.13.1,0.13.1,False,False
749808,2014-12-02T17:58:32Z,2014-12-02T18:24:40Z,Execution.flatMap(polished) ,"We are very excited about the hottest scalding yet!

## Better join syntax

In the typed API you no longer need to type, “.group” before a join or in the argument to a join. Using a join method seems an explicit enough marker that you are crossing a map/reduce boundary, so this restriction is removed. It is still needed before a reduce (as TypedPipe.sum means a total sum, where as .group.sum means for each key group, sum the values). So from now on:

``` scala
    pipe1.join(pipe2).join(pipe3)
```

is perfectly correct.

While the above runs 1 map/reduce job, the type of the values is a nested tuple: ((v1, v2), v3). In same cases for small joins this is fine, but for large joins this can be a pain. We added the MultiJoin object flatten tuples as you might expect:

``` scala
    MultiJoin(pipe1, pipe2, pipe3) : CoGrouped[K, (V1, V2, V3)]
    MultiJoin.left(pipe1, pipe2, pipe3) : CoGrouped[K, (V1, Option[V2], Option[V3])]
    MultiJoin.outer(pipe1, pipe2, pipe3) : CoGrouped[K, (Option[V1], Option[V2], Option[V3])]
```

Hopefully this makes joining even cleaner and more powerful than it was in scalding 0.11.

## TypedPipe is immutable and reusable

TypedPipe is now immutable. This means you can pass TypedPipe (or Grouped or any object in the Typed API) between jobs safely. When we improved the REPL, we had to handle the fact that some parts of the job may be run independently. To make the REPL behave as you expect, we had to make a fake immutable version behind the scenes. In this release, TypedPipe itself is immutable so the REPL becomes much simpler and other applications, such as passing TypedPipes between jobs or executing them in loops, becomes possible.

## Execution[T]: a composable way to write Scalding Jobs

Have you ever wanted to convert a TypedPipe into an Iterator or List? Now you can:

``` scala
    val myPipe: TypedPipe[T] = getPipe
    val iterable: Iterable[T] = myPipe.toIterableExecution.waitFor
```

Since the beginning, scalding.Job has had a primitive way to start a follow up job after the current one using Job.next. This had a number of issues. First, since TypedPipes could not be passed between jobs, the user had to manually write to intermediate files, and then read those files in the next job. Managing these temporary files was very painful. Also, the types of jobs were quite limited because there had to be a linear succession of Jobs (and though tricks could work around this, it was rarely done and ugly). Scalding 0.12 introduces Execution[T]. This type represents a scalding job that runs and returns T, and naturally, you can flatMap it. If you want to run two jobs in parallel, you can zip them together. An Execution[T] is basically a “run” function that takes the configuration, Mode, and then returns a Future[T]. This means you can also wire in service calls in the beginning, middle or end of your scalding job by lifting your call into an Execution.fromFuture.

Execution also enables looping. Consider PageRank: we want to run until we reach a level of convergence. We can do this by writing a function:

``` scala
    def step(graph: TypedPipe[Edge], rank: TypedPipe[(Long, Double)]): Execution[(Double, TypedPipe[(Long, Double)])]
```

In the above, we express our algorithm step by propagation of the rank vector over the graph. The Execution returns the pair of the error between the old vector and the new vector and the new vector.  Now we look:

``` scala
val graph: TypedPipe[Edge]
def go(vector: TypedPipe[(Long, Double)]): Execution[TypedPipe[(Long, Double)]] =
  step(graph, vector).flatMap {
    case (err, v) if err < threshold => Execution.from(v)
    case (_, v) => go(v) // loop again
  }

// Now run the job.
val result = go(initVector).waitFor
```

For now, you need to put some operation in you scalding Job unless you use ExecutionJob or bypass using Job all-together if you choose, as done in ExecutionApp. ExecutionApp allows you do this:

``` scala
object MyJob extends ExecutionApp {
  def job: Execution[Unit] = someExecutionLoopToDoAwesomeStuff
}
```

Then you can run MyJob as a normal class with the hadoop command. It parses arguments and makes them available in the Config object (see Execution.getConfig to access the Config and from there the Args).

_Check out: .forceToDiskExecution, .writeExecution, .toIterableExecution, .forceToDiskExecution on TypedPipe to create executions you can use in loops, also .toOptionExecution and .getExecution on ValuePipe to get single values materialized._

As an example, see Kmeans: https://github.com/twitter/scalding/blob/develop/scalding-core/src/main/scala/com/twitter/scalding/examples/KMeans.scala

## Reducer Estimation:

The reducer estimation we developed has been made part of the open source release, meaning users can get automatic reducer setting based either on the input file sizes or on the history of the job. This promises to help us make more efficient use of our cluster. Estimation strategies are easy to implement, and will be an area of future improvement.

## Full list of changes below:
- Fix long compile time for MultiJoin helpers: https://github.com/twitter/scalding/pull/1109
- Allows reducer estimation to operate on all hfs taps: https://github.com/twitter/scalding/pull/1080
- Fix bufferedTake: https://github.com/twitter/scalding/pull/1107
- Generate methods for flattening the results of many joins: https://github.com/twitter/scalding/pull/1097
- Make TimePathedSource more configurable: https://github.com/twitter/scalding/pull/1105
- Adding DailyPrefixSuffixLzoTsv: https://github.com/twitter/scalding/pull/1082
- Option to select the fields for output in templatesource: https://github.com/twitter/scalding/pull/1061
- Add a DailySuffixMostRecentLzoProtobuf source: https://github.com/twitter/scalding/pull/1104
- Updates default scala version to 2.10.4: https://github.com/twitter/scalding/pull/1081
- MultiSourceTap hashcode: https://github.com/twitter/scalding/pull/1101
- scalding-core: merge flow step strategies to allow reducer estimation combined with other strategies: https://github.com/twitter/scalding/pull/1094
- Improve command line handling of the execution app: https://github.com/twitter/scalding/pull/1083
- More testing around the globifier with new properties: https://github.com/twitter/scalding/pull/1092
- Refactor JDBCSource to add compile-time info about type of DB: https://github.com/twitter/scalding/pull/1087
- Add a cumulative sum to KeyedList: https://github.com/twitter/scalding/pull/1085
- Add in failing test case: https://github.com/twitter/scalding/pull/1090
- Adds ability to also get the mode inside the Execution monad.: https://github.com/twitter/scalding/pull/1088
- Enforce invariant: mapGroup iterators all nonempty: https://github.com/twitter/scalding/pull/1072
- Allow PartitionSource to limit the number of open files: https://github.com/twitter/scalding/pull/1078
- append to Cascading frameworks system property instead of setting it directly: https://github.com/twitter/scalding/pull/1076
- Adds some output while assembly is building to keep travis happy: https://github.com/twitter/scalding/pull/1084
- Only request necessary hadoop configs in hraven reducer estimator: https://github.com/twitter/scalding/pull/1067
- Add parquet-scrooge sources: https://github.com/twitter/scalding/pull/1064
- Outer join handles case when both are empty: https://github.com/twitter/scalding/pull/1065
- Fix race in merging: https://github.com/twitter/scalding/pull/1063
- Add support for column projection to parquet sources: https://github.com/twitter/scalding/pull/1056
- Add typed version of RichPipe &#39;using&#39;: https://github.com/twitter/scalding/pull/1049
- Add getExecution/getOrElseExecution: https://github.com/twitter/scalding/pull/1062
- Change toIteratorExecution to toIterableExecution: https://github.com/twitter/scalding/pull/1058
- Cache Execution evaluations: https://github.com/twitter/scalding/pull/1057
- Add support for push down filters in parquet sources: https://github.com/twitter/scalding/pull/1050
- Add support for Fold: https://github.com/twitter/scalding/pull/1053
- move to use JobConf(true) for hadoop crazyness that causes host not foun...: https://github.com/twitter/scalding/pull/1051
- Disable Cascading update check.: https://github.com/twitter/scalding/pull/1048
- Respects -Dmapred.job.name when passed in on the command line: https://github.com/twitter/scalding/pull/1045
- Add some instances from Algebird: https://github.com/twitter/scalding/pull/1039
- Fix join.mapGroup issue: https://github.com/twitter/scalding/pull/1038
- Add a defensive .forceToDisk in Sketched: https://github.com/twitter/scalding/pull/1035
- Override toIterator for all Mappable with transformForRead: https://github.com/twitter/scalding/pull/1034
- Make sinkFields in TypedDelimited final.: https://github.com/twitter/scalding/pull/1032
- Fixed type of exception thrown by validateTaps: https://github.com/twitter/scalding/pull/1033
- Add default local maven repo to the resolver list: https://github.com/twitter/scalding/pull/1024
- Add an ExecutionApp trait for objects to skip the Job class: https://github.com/twitter/scalding/pull/1027
- Make each head pipe have a unique name: https://github.com/twitter/scalding/pull/1025
- Run REPL from SBT: https://github.com/twitter/scalding/pull/1021
- Add Config to openForRead: https://github.com/twitter/scalding/pull/1023
- Fix replConfig merging and evaluate values in Config.fromHadoop: https://github.com/twitter/scalding/pull/1015
- REPL Autoload file: https://github.com/twitter/scalding/pull/1009
- Fix hRaven Reducer Estimator: https://github.com/twitter/scalding/pull/1018
- Update Cascading JDBC Version.: https://github.com/twitter/scalding/pull/1016
- Some Execution fixes: https://github.com/twitter/scalding/pull/1007
- Refactor InputSizeReducerEstimator to correctly unroll MultiSourceTaps: https://github.com/twitter/scalding/pull/1017
- Fix issue #1011: Building develop branch fails: https://github.com/twitter/scalding/pull/1012
- hRaven Reducer Estimator: https://github.com/twitter/scalding/pull/996
- JsonLine should handle empty lines: https://github.com/twitter/scalding/pull/966
- Add comments for memory-related reduce operations.: https://github.com/twitter/scalding/pull/1006
- Add the remaining odds and ends to Execution[T]: https://github.com/twitter/scalding/pull/985
- Fix up the tests to run forked, and split across lots of travis builds: https://github.com/twitter/scalding/pull/993
- Typedpipe partition: https://github.com/twitter/scalding/pull/987
- Fix toIterator bug (#988): https://github.com/twitter/scalding/pull/990
- Basic reducer estimator support: https://github.com/twitter/scalding/pull/973
- Improve TypedSimilarity algorithm and update test.: https://github.com/twitter/scalding/pull/983
- Adds support for Counters inside the Execution Monad.: https://github.com/twitter/scalding/pull/982
- Make map/flatMap lazy on IterablePipe to address OOM: https://github.com/twitter/scalding/pull/981
- JsonLine: enable read transformation in test to get correct fields in sourceTap: https://github.com/twitter/scalding/pull/971
- Read and writable partitioned sources: https://github.com/twitter/scalding/pull/969
- Make an Execution[T] type, which is a monad, which makes composing Jobs easy.: https://github.com/twitter/scalding/pull/974
- Generalize handling of merged TypedPipes: https://github.com/twitter/scalding/pull/975
- Do not inherit from FileSource in LzoTraits: https://github.com/twitter/scalding/pull/976
- Make TypedPipe immutable: https://github.com/twitter/scalding/pull/968
- Adds an optional source: https://github.com/twitter/scalding/pull/963
- Add pipe1.join(pipe2) syntax in TypedAPI: https://github.com/twitter/scalding/pull/958
- Extending BddDsl for Typed API: https://github.com/twitter/scalding/pull/956
- VerticaJdbcDriver: https://github.com/twitter/scalding/pull/957
- fix the example usage in JDBCSource: https://github.com/twitter/scalding/pull/955
- Push back off ec2 requiring sudo, build failures are a nightmare: https://github.com/twitter/scalding/pull/953
- Add ExecutionContextJob to interop execution style with Job style: https://github.com/twitter/scalding/pull/952
",https://api.github.com/users/ianoc,446652,ianoc,https://api.github.com/repos/twitter/scalding/releases/749808/assets,https://api.github.com/repos/twitter/scalding/releases/749808,develop,https://api.github.com/repos/twitter/scalding/tarball/0.12.0,https://github.com/twitter/scalding/releases/tag/0.12.0,https://api.github.com/repos/twitter/scalding/zipball/0.12.0,0.12.0,False,False
475756,2014-08-07T00:11:45Z,2014-08-07T00:27:02Z,Fix REPL Snapshot Bug,"Use Hadoop config's ""hadoop.tmp.dir"" for saving snapshots; fixes issues with multiple users trying to create snapshots in the same temporary directory.
",https://api.github.com/users/bholt,398411,bholt,https://api.github.com/repos/twitter/scalding/releases/475756/assets,https://api.github.com/repos/twitter/scalding/releases/475756,develop,https://api.github.com/repos/twitter/scalding/tarball/0.11.2,https://github.com/twitter/scalding/releases/tag/0.11.2,https://api.github.com/repos/twitter/scalding/zipball/0.11.2,0.11.2,False,False
423033,2014-07-10T23:36:43Z,2014-07-10T23:38:34Z,Minor release bump,"- Fixes bad release portion where code wasn't updated for new scalding version number.
- use cascading-jdbc 2.5.3 for table exists fix and cascading 2.5.5: https://github.com/twitter/scalding/pull/951
- Bump build properties and sbt launcher: https://github.com/twitter/scalding/pull/950
- Fixes the travis build: https://github.com/twitter/scalding/pull/944
- Making the README.md consistent with 0.11.0 changes for the REPL.: https://github.com/twitter/scalding/pull/941
",https://api.github.com/users/ianoc,446652,ianoc,https://api.github.com/repos/twitter/scalding/releases/423033/assets,https://api.github.com/repos/twitter/scalding/releases/423033,develop,https://api.github.com/repos/twitter/scalding/tarball/0.11.1,https://github.com/twitter/scalding/releases/tag/0.11.1,https://api.github.com/repos/twitter/scalding/zipball/0.11.1,0.11.1,False,False
411037,2014-07-03T23:41:15Z,2014-07-03T23:43:22Z,Scalding repl and library usage get lots of love,"- REPL: Add toIterator (and related methods): https://github.com/twitter/scalding/pull/929
- Fix the build to use the shared module method: https://github.com/twitter/scalding/pull/938
- Clean up the UniqueID stuff, to avoid plumbing it everywhere: https://github.com/twitter/scalding/pull/937
- TypedPipe.from(List).distinct fails: https://github.com/twitter/scalding/pull/935
- Clean up ExecutionContext a bit: https://github.com/twitter/scalding/pull/933
- Fix Issue 932: no-op Jobs should not throw: https://github.com/twitter/scalding/pull/934
- Use Execution to run flows in REPL: https://github.com/twitter/scalding/pull/928
- Snapshot a pipe in the REPL: https://github.com/twitter/scalding/pull/918
- Add support for AppJar in Config: https://github.com/twitter/scalding/pull/924
- Fix LzoTextLine as a TypedSource: https://github.com/twitter/scalding/pull/921
- Use externalizer in BijectedSourceSink: https://github.com/twitter/scalding/pull/926
- Add an Executor to run flows without a Job: https://github.com/twitter/scalding/pull/915
- This handles the case where scalding will save out a tsv and re-use it down stream leading to issues where the types are not strings: https://github.com/twitter/scalding/pull/913
- Fix DailySuffixTsv for testability, remove leaked DailySuffixTsv: https://github.com/twitter/scalding/pull/919
- Add a Config class to make configuration understandable: https://github.com/twitter/scalding/pull/914
- Integrate the repl completely into scald.rb. Fixup scald-rb for better hdfs-local mode now with our provides: https://github.com/twitter/scalding/pull/902
- Add some auto-reformats: https://github.com/twitter/scalding/pull/911
- Update JDBCSource: https://github.com/twitter/scalding/pull/898
- Allow tests for typed delimited by fixing swallowed bug: https://github.com/twitter/scalding/pull/910
- Add Hadoop platform test to enable unit testing for Hadoop semantics: https://github.com/twitter/scalding/pull/858
- Some minor improvements to typed joining code: https://github.com/twitter/scalding/pull/909
- Fix #906: https://github.com/twitter/scalding/pull/908
- Run the test target, so the tests are reformatted: https://github.com/twitter/scalding/pull/907
- Enable scalariform: https://github.com/twitter/scalding/pull/905
- Simplify &quot;scald-repl.sh&quot;: https://github.com/twitter/scalding/pull/901
- Typed Tutorial: https://github.com/twitter/scalding/pull/897
- Adding a test for the scalding repl: https://github.com/twitter/scalding/pull/890
- Properly close tuple iterator in test framework.: https://github.com/twitter/scalding/pull/896
- Add constructors to ValuePipe: https://github.com/twitter/scalding/pull/893
- contraMap and andThen on TypedSink/TypedSource: https://github.com/twitter/scalding/pull/892
- Tiny fix to use an ImplicitBijection rather than Bijection: https://github.com/twitter/scalding/pull/887
- Feature/bijected source sink: https://github.com/twitter/scalding/pull/886
- Fix intersection equality error: https://github.com/twitter/scalding/pull/878
- Add DailySuffixTypedTsv and HourlySuffixTypedTsv.: https://github.com/twitter/scalding/pull/873
- add stepListner register support in Scalding: https://github.com/twitter/scalding/pull/875
- Backport Meatlocker: https://github.com/twitter/scalding/pull/571
",https://api.github.com/users/ianoc,446652,ianoc,https://api.github.com/repos/twitter/scalding/releases/411037/assets,https://api.github.com/repos/twitter/scalding/releases/411037,develop,https://api.github.com/repos/twitter/scalding/tarball/0.11.0,https://github.com/twitter/scalding/releases/tag/0.11.0,https://api.github.com/repos/twitter/scalding/zipball/0.11.0,0.11.0,False,False
321039,2014-05-13T23:55:20Z,2014-05-14T22:58:03Z,Version 0.10.0,"- Upgrade cascading to 2.5.4, cascading jdbc to 2.5.2
- Adding an hdfs mode for the Scalding REPL
- Added implementation of PartitionSource with tests
- Add helper methods to KeyedList and TypedPipe
- Add addTrap to TypedPipe
",https://api.github.com/users/jcoveney,830087,jcoveney,https://api.github.com/repos/twitter/scalding/releases/321039/assets,https://api.github.com/repos/twitter/scalding/releases/321039,develop,https://api.github.com/repos/twitter/scalding/tarball/0.10.0,https://github.com/twitter/scalding/releases/tag/0.10.0,https://api.github.com/repos/twitter/scalding/zipball/0.10.0,0.10.0,False,False
256194,2014-04-03T00:29:41Z,2014-04-04T02:36:08Z,Scalding 0.9: Get it while it’s hot!,"It’s been just over [two years since we open sourced Scalding](https://blog.twitter.com/2012/scalding) and today we are very excited to release the 0.9 version. Scalding at Twitter powers everything from internal and external facing dashboards, to custom relevance and ad targeting algorithms, including many graph algorithms such as PageRank, approximate user cosine similarity and many more.

There have been a wide breadth of new features added to Scalding since the last release:

**Joins**
An area of particular activity and impact has been around joins. The Fields API already had an API to do left and right joins over multiple streams, but with 0.9 we bring this functionality to the Typed-API. In 0.9, joins followed by reductions followed by more joins are automatically planned as single map reduce jobs, potentially reducing the number of steps in your pipelines.

``` scala
case class UserName(id: Long, handle: String)
case class UserFavs(byUser: Long, favs: List[Long])
case class UserTweets(byUser: Long, tweets: List[Long])

def users: TypedSource[UserName]
def favs: TypedSource[UserFavs]
def tweets: TypedSource[UserTweets]

def output: TypedSink[(UserName, UserFavs, UserTweets)]

// Do a three-way join in one map-reduce step, with type safety
users.groupBy(_.id)
  .join(favs.groupBy(_.byUser))
  .join(tweets.groupBy(_.byUser))
  .map { case (uid, ((user, favs), tweets)) =>
   (user, favs, tweets)
  }  
  .write(output)
```

This includes custom co-grouping, not just left and right joins. To handle skewed data there is a new count-min-sketch based algorithm to solve the curse of the last reducer, and a critical bug-fix for skewed joins in the Fields API.

**Input/output**
In addition to joins, we’ve added support for new input/output formats:
- Parquet Format is a columnar storage format which we [open sourced](https://blog.twitter.com/2013/announcing-parquet-10-columnar-storage-for-hadoop) in collaboration with Cloudera. Parquet can dramatically accelerate map-reduce jobs that read only a subset of the columns in an dataset, and can similarly reduce storage cost with more efficiently serialization.
- [Avro](http://avro.apache.org/) is an Apache project to standardize serialization with self-describing IDLs. Ebay contributed the [scalding-avro](https://github.com/twitter/scalding/tree/develop/scalding-avro) module to make it easy to work with Apache Avro serialized data.
- TemplateTap support eases partitioned writes of data, where the output path depends on the value of the data.

**Hadoop counters**
We’re also adding support for incrementing Hadoop counters inside map and reduce functions. For cases where you need to share a medium sized data file across all your tasks, support for Hadoop’s distributed cache was added in this release cycle.

**Typed API**
The typed API saw many improvements. When doing data-cubing, partial aggregation should happen before key expansion and sumByLocalKeys enables this. The type-system enforces constraints on sorting and joining that previously would have caused run-time exceptions. When reducing a data-set to a single value, a ValuePipe is returned. Like TypedPipe is analogous to a program to produce a distributed list, a ValuePipe is a like a program to produce a single value, with which we might want to filter or transform some TypedPipe.

**Matrix API**
When it comes to linear algebra, Scalding 0.9 introduced a new [Matrix API](https://github.com/twitter/scalding/blob/develop/scalding-core/src/main/scala/com/twitter/scalding/mathematics/Matrix2.scala#L31) which will replace the former one in our next major release. Due to the associative nature of matrix multiplication we can choose to compute (AB)C or A(BC). One of those orders might create a much smaller intermediate product than the other. The new API includes a dynamic programming optimization of the order of multiplication chains of matrices to minimize realized size along with several other optimizations. We have seen some considerable speedups of matrix operations with this API. In addition to the new optimizing API, we added some functions to efficiently compute all-pair inner-products (A A^T) using [DISCO](https://blog.twitter.com/2012/dimension-independent-similarity-computation-disco) and [DIMSUM](http://arxiv.org/pdf/1304.1467.pdf). These algorithms excel for cases of vectors highly skewed in their support, which is to say most vectors have few non-zero elements, but some are almost completely dense.

**Upgrading and Acknowledgements**
Some APIs were deprecated, some were removed entirely, and some added more constraints. We have some [sed rules](https://github.com/twitter/scalding/wiki/Upgrading-to-0.9.0) to aid in porting. All changes fixed significant warts. For instance, in the Fields API sum takes a type parameter, and works for any Semigroup or Monoid. Several changes improve the design to aid in using scalding more as a library and less as a framework.

This latest release is our biggest to date spanning over 800 commits from [57 contributors](https://github.com/twitter/scalding/graphs/contributors) It is available today in [maven central](http://search.maven.org/#search%7Cga%7C1%7Cscalding). We hope Scalding is as useful to you as it is for us and the growing [community](https://github.com/twitter/scalding/wiki/Powered-By). Follow us [@scalding](https://twitter.com/intent/user?screen_name=scalding), join us on IRC ([#scalding](https://twitter.com/search?q=%23scalding&src=hash)) or via the [mailing list](https://groups.google.com/forum/#!forum/cascading-user).
",https://api.github.com/users/isnotinvain,372969,isnotinvain,https://api.github.com/repos/twitter/scalding/releases/256194/assets,https://api.github.com/repos/twitter/scalding/releases/256194,develop,https://api.github.com/repos/twitter/scalding/tarball/0.9.1,https://github.com/twitter/scalding/releases/tag/0.9.1,https://api.github.com/repos/twitter/scalding/zipball/0.9.1,0.9.1,False,False
37943,2013-09-03T16:44:20Z,2013-09-03T16:49:29Z,Better Function Serialization,"This release adds more fault tolerant function serialization for https://github.com/twitter/summingbird . We now try Kryo, then fall back to Java if Kryo throws serializing the function.

If your code is working, there is no reason to update.

PS: Summingbird: https://blog.twitter.com/2013/streaming-mapreduce-with-summingbird
",https://api.github.com/users/johnynek,67958,johnynek,https://api.github.com/repos/twitter/scalding/releases/37943/assets,https://api.github.com/repos/twitter/scalding/releases/37943,develop,https://api.github.com/repos/twitter/scalding/tarball/0.8.11,https://github.com/twitter/scalding/releases/tag/0.8.11,https://api.github.com/repos/twitter/scalding/zipball/0.8.11,0.8.11,False,False
