id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
8116343,2017-10-13T20:21:00Z,2017-10-13T20:29:02Z,,"### Bug Fixes

- adjust `nextTick` implementation for more consistent behavior with earlier versions 4e0c4851, closes #6813",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/8116343/assets,https://api.github.com/repos/vuejs/vue/releases/8116343,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.5.2,https://github.com/vuejs/vue/releases/tag/v2.5.2,https://api.github.com/repos/vuejs/vue/zipball/v2.5.2,v2.5.2,False,False
8111213,2017-10-13T14:14:32Z,2017-10-13T14:15:42Z,,"### Bug Fixes

* **ssr:** add semicolon before self-removal script (#6794) 5a15a8d
* **transition-group:** work around rollup tree shaking (#6796) 60b1af9, closes #6792
* **v-model:** allow arbitrary names for type binding (#6802) 15031b8, closes #6800
* backwards compat with checkbox code generated in < 2.5 5665eaf, closes #6803
* fix empty array edge case in normalizeChildren 1f84dd1, closes #6790
* v-on=""object"" listeners should fire after high-priority ones 08a7fb5, closes #6805
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/8111213/assets,https://api.github.com/repos/vuejs/vue/releases/8111213,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.5.1,https://github.com/vuejs/vue/releases/tag/v2.5.1,https://api.github.com/repos/vuejs/vue/zipball/v2.5.1,v2.5.1,False,False
8104710,2017-10-13T03:07:14Z,2017-10-13T03:08:15Z,v2.5.0 Level E,"## Features & Improvements

### Error Handling and Reporting

* improve error handling with new `errorCaptured` hook b3cd9bc [[Details](https://gist.github.com/yyx990803/9bdff05e5468a60ced06c29c39114c6b#error-handling-with-errorcaptured-hook)]
* improve template expression error message e38d006, closes #6771
* improve option type checks b7105ae

### TypeScript Declaration Improvements

* further improve Vue type declarations for canonical usage (#6391) db138e2

  **This change requires upgrade actions for TypeScript users using 2.4 types.** Thanks to the work by @danielrosenwasser, @HerringtonDarkholme and @ktsn. For more details, please read [this blog post](https://medium.com/the-vue-point/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08).

### Functional Components

* compiled templates for functional component support ea0d227
* scoped CSS support for functional components 050bb33

  These features require `vue-loader>=13.3.0`. Thanks to the work by @blake-newman.  [[Details](https://gist.github.com/yyx990803/9bdff05e5468a60ced06c29c39114c6b#functional-component-support-in-sfcs)]

### Server Side Rendering

* `renderToString` now returns a Promise if no callback is passed f881dd1, closes #6160
* add `shouldPrefetch` option (same signature as `shouldPreload`) 7bc899c, closes #5964
* auto-remove initial state embed script if in production (#6763) 2d32b5d, closes #6761
* now ships an environment-agnostic build of the server renderer in `vue-server-renderer/basic.js` c5d0fa0 [[Details](https://gist.github.com/yyx990803/9bdff05e5468a60ced06c29c39114c6b#environment-agnostic-ssr)]

### `v-model`

* support dynamic `type` binding on `<input>` f3fe012
* now creates non-existent properties as reactive (non-recursive) e1da0d5, closes #5932 (See [reasoning behind this change](https://github.com/vuejs/vue/issues/5932#issuecomment-334040085))

### `v-on`

* automatic key modifier inference 4987eeb [[Details](https://gist.github.com/yyx990803/9bdff05e5468a60ced06c29c39114c6b#v-on-automatic-key-modifiers)]
* add `.exact` event modifier (#5977) 9734e87, closes #5976 [[Details](https://gist.github.com/yyx990803/9bdff05e5468a60ced06c29c39114c6b#v-on-exact-modifier)]

### Scoped Slots

* support denoting normal elements as scoped slot dae173d [[Details](https://gist.github.com/yyx990803/9bdff05e5468a60ced06c29c39114c6b#simplified-scoped-slots-usage)]

### Provide/Inject

* support providing default values for injections (#6322) 88423fc [[Details](https://gist.github.com/yyx990803/9bdff05e5468a60ced06c29c39114c6b#inject-with-default-values)]

### `<keep-alive>`

* add `max` prop for `<keep-alive>` for limiting max number of instances cached 2cba6d4

### Other Improvements

* `config.ignoredElements` can now contain RegExp in addition to strings (#6769) 795b908
* `data` function is now called with the vm instance as the first argument (#6760) 3a5432a
* `vue-template-compiler` now ships an environment-agnostic build which can be used directly in browsers in `vue-template-compiler/browser.js` a5e5b31

## Bug Fixes

* **compiler:** warn when inline-template component has no children (fix #6703) (#6715) baabd6d, closes #6703 #6715
* **core:** avoid observing VNodes 4459b87, closes #6610
* **ref:** preserve ref on components after removing root element (#6718) 6ad44e1, closes #6632 #6641
* handle errors in errorHandler 2b5c83a, closes #6714
* **ssr:** fix hydration mismatch with adjacent text node from slots b080a14, closes vuejs/vue-loader#974
* add slot v-bind warning (#6736) 514b90b, closes #6677
* allow an object's Symbols to be observed (#6704) 4fd2ce8
* fix scoped CSS for nested nodes in functional components 4216588
* **ssr:** handle inline template compilation error dff85b2, closes #6766
* perperly handle v-if on <template> scoped slot 68bdbf5, closes #6725
* prevent memory leak due to circular reference in vnodes 405d8e9, closes #6759
* properly render value on <progress> in IE/Edge c64f9ae, closes #6666
* resolve async component default for native dynamic import 2876ed8, closes #6751
* use correct namespace inside <foreignObject> as root node cf1ff5b, closes #6642
* use MessageChannel for nextTick 6e41679, closes #6566 #6690
* work around old Chrome bug 0f2cb09, closes #6601 

## Internals

We have changed the implementation of `Vue.nextTick` to fix a few bugs (related to #6566, #6690). The change involves using a **macro task** instead of a **micro task** to defer DOM updates when inside a DOM event handler attached via `v-on`. This means any Vue updates triggered by state changes inside `v-on` handlers will be now deferred using a macro task. This may lead to changes in behavior when dealing with native DOM events.

For more details regarding micro/macro tasks, see [this blog post](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/).

For the new implementation, see [source code for nextTick](https://github.com/vuejs/vue/blob/dev/src/core/util/next-tick.js).",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/8104710/assets,https://api.github.com/repos/vuejs/vue/releases/8104710,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.5.0,https://github.com/vuejs/vue/releases/tag/v2.5.0,https://api.github.com/repos/vuejs/vue/zipball/v2.5.0,v2.5.0,False,False
7756251,2017-09-14T15:32:41Z,2017-09-14T15:33:10Z,,"### Bug Fixes

* **ssr:** fix bundleRenderer Promise rejection regression 0c9534f
* **ssr:** fix style injection regression a2f73f2, closes #6603 #6353",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/7756251/assets,https://api.github.com/repos/vuejs/vue/releases/7756251,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.4.4,https://github.com/vuejs/vue/releases/tag/v2.4.4,https://api.github.com/repos/vuejs/vue/zipball/v2.4.4,v2.4.4,False,False
7734011,2017-09-13T07:57:30Z,2017-09-13T08:00:25Z,,"### Bug Fixes

* **directive:** should invoke unbind & inserted on inner component root element change 538ad20, closes #6513
* **inject:** exclude not enumerable keys of inject object (#6346) 3ee62fd, closes #6574
* **provide:** provide should default to parentVal during merging (#6473) 3c21675, closes #6436
* **ssr:** address possible xss vector 5091e2c
* **vdom:** avoid diff de-opt when both head/tail are different 230c6ae, closes #6502
* $off should ignore undefined handler argument fa6a729, closes #6591
* **ssr:** better handle v-html hydration 0f00f8f, closes #6519
* **ssr:** expose context.styles when no lifecycle styles are injected 1f52a2a, closes #6353
* **ssr:** fix cachedEscape memory issue 02f8b80, closes #6332
* **ssr:** handle v-text/v-html with non-string value 09106f0, closes #6572
* **ssr:** should also escape static text content 172dbf9, closes #6345
* **transition:** consider async placeholder as valid child to return (#6369) a43d667, closes #6256
* **types:** add `inject` option in functional component options type (#6530) 1baa0a7
* **types:** allow variadic plugin use (#6363) 38d5218, closes #6357
* **v-model:** Allow using array value with array v-model in checkboxes (#6220) d6e6f1d, closes #6219
* **v-model:** avoid unnecessary change event on select options change d4d553c, closes #6193
* **v-model:** fix input listener with modifier blocking v-model update 6f312d6, closes #6552
* **vdom:** Don't replace input for text-like type change (#6344) f76d16e, closes #6313
* computed properties should not be cached during SSR 06741f3
* deep clone slot vnodes on re-render 0529040, closes #6372
* do not use MutationObserver in IE11 844a540, closes #6466
* ensure $attrs and $listeners are always objects (#6441) 59dbd4a, closes #6263
* ensure outer bindings on nested HOC are properly re-applied on inner root element change a744497
* handle special case for allowfullscreen on <embed> d77b953, closes #6202
* inherit SVG ns on component root node (#6511) 89f0d29, closes #6506
* preserve slot attribute if not resolved by Vue 684cd7d, closes #6553
* set value as domProp for <progress> 7116af4, closes #6561
* support prop type checking for primitive wrapper objects (#6450) 679cd1f, closes #6447",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/7734011/assets,https://api.github.com/repos/vuejs/vue/releases/7734011,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.4.3,https://github.com/vuejs/vue/releases/tag/v2.4.3,https://api.github.com/repos/vuejs/vue/zipball/v2.4.3,v2.4.3,False,False
7118156,2017-07-21T04:28:42Z,2017-07-21T04:29:20Z,,"### Bug Fixes

* **v-on:** revert component root data.on/data.nativeOn behavior for 1713061, closes #6109
* checkbox v-model=""array"" ignore false-value ([#6180](https://github.com/vuejs/vue/issues/6180)) 3d14e85, closes #6178
* **compile:** properly generate comments with special character ([#6156](https://github.com/vuejs/vue/issues/6156)) d03fa26, closes #6150
* **parser:** only ignore the first newline in `<pre>` 082fc39, closes #6146
* **provide/inject:** merge provide properly from mixins 3036551, closes #6175
* **provide/inject:** resolve inject properly from mixins ([#6107](https://github.com/vuejs/vue/issues/6107)) b0f00e3, closes #6093
* **transition:** should trigger transition hooks for v-show in ie9 9b4dbba, closes #5525
* **v-bind:** respect .prop modifier on components ([#6159](https://github.com/vuejs/vue/issues/6159)) 06b9b0b
* **v-model:** use stricter check for `<select>` option update c70addf, closes #6112
* ensure looseEqual is not dependant on key enumeration order a8ac129, closes #5908
* include boolean in isPrimitive check ([#6127](https://github.com/vuejs/vue/issues/6127)) be3dc9c, closes #6126
* work around IE/Edge bug when accessing document.activeElement from iframe fc3d7cd, closes #6157

### Improvements

* warn when assigning to computed property with no setter eb9168c, closes #6078

### Reverts

* perf: remove src directory from npm module ([#6072](https://github.com/vuejs/vue/issues/6072)) ec4b1be",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/7118156/assets,https://api.github.com/repos/vuejs/vue/releases/7118156,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.4.2,https://github.com/vuejs/vue/releases/tag/v2.4.2,https://api.github.com/repos/vuejs/vue/zipball/v2.4.2,v2.4.2,False,False
7023932,2017-07-13T06:40:24Z,2017-07-13T06:48:32Z,,- Fixed `postinstall` script error when installing Vue from npm.,https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/7023932/assets,https://api.github.com/repos/vuejs/vue/releases/7023932,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.4.1,https://github.com/vuejs/vue/releases/tag/v2.4.1,https://api.github.com/repos/vuejs/vue/zipball/v2.4.1,v2.4.1,False,False
7023605,2017-07-13T05:58:37Z,2017-07-13T06:02:52Z,v2.4.0 Kill la Kill,"> ""Fear is freedom! Subjugation is liberation! Contradiction is truth!""

### Features

* **Full SSR + async component support in core:** SSR now supports rendering async components used anywhere and the client also supports async components during the hydration phase. This means async components / code-splitting now **just works** during SSR and is no longer limited at the route level. ([9cf6646](https://github.com/vuejs/vue/commit/9cf6646) & [7404091](https://github.com/vuejs/vue/commit/7404091))

* **Easier creation of wrapper components:** ([6118759](https://github.com/vuejs/vue/commit/6118759))

  - New component option: `inheritAttrs`. Turns off the default behavior where
  parent scope non-prop bindings are automatically inherited on component root
  as attributes.

  - New instance properties: `$attrs` & `$listeners`. `$attrs` contains the parent-scope attribute bindings that were not recognized as props, and `$listeners` contains the `v-on` listeners registered in the parent scope (without the `.native` modifier). These are essentially aliases of `$vnode.data.attrs` and `$vnode.data.on`, but are reactive.

  Combining these allows us to simplify a component like [this](https://github.com/almino/semantic-ui-vue2/blob/master/src/elements/Input.vue) down into this:

  ``` html
  <div>
    <input v-bind=""$attrs"" v-on=""$listeners"">
  </div>
  ```

  Based on discussion in [#5983](https://github.com/vuejs/vue/issues/5983).

* **v-on:** support `v-on` object syntax with no arguments. This pairs well with the new `$listeners` instance property when creating higher-order components. Note this syntax does **not** support modifiers. ([11614d6](https://github.com/vuejs/vue/commit/11614d6))

* Now auto-resolves ES module `default` export when resolving async components. This enables keeping using the simpler `const Foo = () => import('./Foo.vue')` syntax when declaring async components with the changes introduced in [vue-loader@13.0.0](https://github.com/vuejs/vue-loader/releases/tag/v13.0.0). ([0cd6ef3](https://github.com/vuejs/vue/commit/0cd6ef3))

* support `.sync` modifier for `v-bind=""object""` ([#5943](https://github.com/vuejs/vue/issues/5943)) ([3965e50](https://github.com/vuejs/vue/commit/3965e50)), closes [#5937](https://github.com/vuejs/vue/issues/5937)

* **keep-alive:** support Array for include and exclude ([#5956](https://github.com/vuejs/vue/issues/5956)) ([51c595a](https://github.com/vuejs/vue/commit/51c595a))

* **weex:** implement ""weex.supports"" api to support feature detection ([#6053](https://github.com/vuejs/vue/issues/6053)) ([b1512d8](https://github.com/vuejs/vue/commit/b1512d8))

* `vm.$watch` now also supports using the same object format supported by the `watch` component option: `{ handler: () => {}, deep: true }` ([#5645](https://github.com/vuejs/vue/pull/5645)) ([5aac170](https://github.com/vuejs/vue/commit/5aac170))

* **types:** add types for `vue-server-renderer` ([#5775](https://github.com/vuejs/vue/pull/5775)) ([e6de9a5](https://github.com/vuejs/vue/commit/e6de9a5))

* `Vue.config.errorHandler` now also captures errors thrown in custom event handlers ([#5709](https://github.com/vuejs/vue/pull/5709)) ([11b7d5d](https://github.com/vuejs/vue/commit/11b7d5d))

* add new config option `Vue.config.warnHandler` for defining a custom callback for runtime warnings. This only works in the development build. ([#5883](https://github.com/vuejs/vue/issues/5883)) ([9881b40](https://github.com/vuejs/vue/commit/9881b40))

* add `comments` option to allow preserving comments in template  ([#5951](https://github.com/vuejs/vue/issues/5951)) ([e4da249](https://github.com/vuejs/vue/commit/e4da249)), closes [#5392](https://github.com/vuejs/vue/issues/5392)

### Performance Improvements

* **ssr:** `vue-template-compiler` now has two new [SSR-specific compile methods](https://github.com/vuejs/vue/tree/dev/packages/vue-template-compiler#compilerssrcompiletemplate-options) that generates SSR-specific render function code by optimizing parts of the template into string concatenation. This improves raw SSR render performance by 2~8x depending on how much of the template can be optimized. Note this will have a much smaller impact on requests per second for a real app because raw render performance is only a small portion of the overall time spent in a request.

  This is enabled by default in `vue-loader@>=12` and can be disabled using the [optimizeSSR](https://vue-loader.vuejs.org/en/options.html#optimizessr) option.

* remove src directory from npm module, which should reduce download size when installing from npm. ([#6072](https://github.com/vuejs/vue/issues/6072)) ([e761573](https://github.com/vuejs/vue/commit/e761573))

### Bug Fixes

* check enterToClass/leaveToClass existence before adding it ([#5912](https://github.com/vuejs/vue/issues/5912)) ([34d8c79](https://github.com/vuejs/vue/commit/34d8c79))
* ensure cleanup in watcher.get ([#5988](https://github.com/vuejs/vue/issues/5988)) ([f6cd44c](https://github.com/vuejs/vue/commit/f6cd44c)), closes [#5975](https://github.com/vuejs/vue/issues/5975)
* improve Vue.set/Vue.delete API to support multi type of array index ([#5973](https://github.com/vuejs/vue/issues/5973)) ([eea0920](https://github.com/vuejs/vue/commit/eea0920))
* multiple merged vnode hooks not invoked properly ([91deb4f](https://github.com/vuejs/vue/commit/91deb4f)), closes [#6076](https://github.com/vuejs/vue/issues/6076)
* **v-model:** should generate component-specific code for tags with ""is"" attribute ([a1d1145](https://github.com/vuejs/vue/commit/a1d1145)), closes [#6066](https://github.com/vuejs/vue/issues/6066)
* prefetch should not have `as` attribute ([#5683](https://github.com/vuejs/vue/issues/5683)) ([ebca266](https://github.com/vuejs/vue/commit/ebca266))
* **core:** add merge strategy for provide option ([#6025](https://github.com/vuejs/vue/issues/6025)) ([306997e](https://github.com/vuejs/vue/commit/306997e)), closes [#6008](https://github.com/vuejs/vue/issues/6008)
* support plugin with multi version vue ([#5985](https://github.com/vuejs/vue/issues/5985)) ([049f317](https://github.com/vuejs/vue/commit/049f317)), closes [#5970](https://github.com/vuejs/vue/issues/5970)
* **core:** should preserve reactivity-ness of injected objects ([8d66691](https://github.com/vuejs/vue/commit/8d66691)), closes [#5913](https://github.com/vuejs/vue/issues/5913)
* **parser:** the first newline following pre and textarea tag should be ignored ([#6022](https://github.com/vuejs/vue/issues/6022)) ([4d68079](https://github.com/vuejs/vue/commit/4d68079))
* **ref:** refactor function registerRef ([#6039](https://github.com/vuejs/vue/issues/6039)) ([254d85c](https://github.com/vuejs/vue/commit/254d85c)), closes [#5997](https://github.com/vuejs/vue/issues/5997)
* **ssr:** fix bundleRenderer mapped async chunks caching check ([#5963](https://github.com/vuejs/vue/issues/5963)) ([de42186](https://github.com/vuejs/vue/commit/de42186))
* **ssr:** reference error when create $ssrContext for root component ([#5981](https://github.com/vuejs/vue/issues/5981)) ([5581654](https://github.com/vuejs/vue/commit/5581654)), closes [#5941](https://github.com/vuejs/vue/issues/5941)
* transition group should work with dynamic name ([#6006](https://github.com/vuejs/vue/issues/6006)) ([#6019](https://github.com/vuejs/vue/issues/6019)) ([d8d4ca6](https://github.com/vuejs/vue/commit/d8d4ca6))
* **v-model:** fix input change check for type=""number"" ([0a9aab5](https://github.com/vuejs/vue/commit/0a9aab5)), closes [#6069](https://github.com/vuejs/vue/issues/6069)
* **v-model:** use consistent behavior during IME composition for other text-like input types (fix [#5902](https://github.com/vuejs/vue/issues/5902)) ([4acc8c8](https://github.com/vuejs/vue/commit/4acc8c8))
* v-bind object should not override props on scopedSlots ([#5995](https://github.com/vuejs/vue/issues/5995)) ([458030a](https://github.com/vuejs/vue/commit/458030a))
* fix out-in transition for async components ([#5760](https://github.com/vuejs/vue/issues/5760)) ([c3cdfcf](https://github.com/vuejs/vue/commit/c3cdfcf))
* fix memory leak by preventing data.pendingInsert from keeping reference to removed nodes ([#5839](https://github.com/vuejs/vue/issues/5839)) ([4733408](https://github.com/vuejs/vue/commit/4733408))
* reduce memory usage by avoiding keeping reference to old vdom tree after patch ([#5851](https://github.com/vuejs/vue/issues/5851)) ([07a3726](https://github.com/vuejs/vue/commit/07a3726))
* fix XHTML compatibility ([#5852](https://github.com/vuejs/vue/issues/5852)) ([69f946b](https://github.com/vuejs/vue/commit/69f946b))
* Merge inject option when extending a component ([#5827](https://github.com/vuejs/vue/issues/5827)) ([080c387](https://github.com/vuejs/vue/commit/080c387))
* support string index when using `Vue.set` on Array ([#5889](https://github.com/vuejs/vue/issues/5889)) ([8a2c514](https://github.com/vuejs/vue/commit/8a2c514))
* ignore reserved attributes (`is`, `ref`, ...) in `v-bind` object syntax ([#5881](https://github.com/vuejs/vue/issues/5881)) ([d33c125](https://github.com/vuejs/vue/commit/d33c125))
* fix slot resolved incorrect with abstract component ([#5888](https://github.com/vuejs/vue/issues/5888)) ([213f136](https://github.com/vuejs/vue/commit/213f136))
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/7023605/assets,https://api.github.com/repos/vuejs/vue/releases/7023605,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.4.0,https://github.com/vuejs/vue/releases/tag/v2.4.0,https://api.github.com/repos/vuejs/vue/zipball/v2.4.0,v2.4.0,False,False
6643279,2017-06-08T04:54:13Z,2017-06-08T04:55:52Z,,"### Fixed

- #5839 fix memory leak caused by reference to removed vnodes on `data.pendingInsert`",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/6643279/assets,https://api.github.com/repos/vuejs/vue/releases/6643279,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.3.4,https://github.com/vuejs/vue/releases/tag/v2.3.4,https://api.github.com/repos/vuejs/vue/zipball/v2.3.4,v2.3.4,False,False
6327902,2017-05-09T16:57:08Z,2017-05-09T17:01:33Z,,"### Fixed

- #5586 fix unecessary input trigger with v-model on change event (@posva via #5589)
- #5591 ssr template interpolation should be whitespace-insensitive (@HerringtonDarkholme via ##5597)
- #5592 fix regression where text nodes are merged into comment placeholder nodes (@maggiehe via #5593)
- #5610 fix `Vue.use` not chainable when plugin has already been installed, also makes `Vue.mixin` chainable. (@lzxb via #5610)
- #5615 fix scoped slots when used together with `v-for`
- #5618 fix slot elements after `v-for` being unnecessarily recreated (@gebilaoxiong via #5627)
- #5633 fix comment nodes not cloned properly (@pengchongfu via #5633)
- #5635 fix async components timeout triggered when already resolved
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/6327902/assets,https://api.github.com/repos/vuejs/vue/releases/6327902,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.3.3,https://github.com/vuejs/vue/releases/tag/v2.3.3,https://api.github.com/repos/vuejs/vue/zipball/v2.3.3,v2.3.3,False,False
6249751,2017-05-02T10:29:59Z,2017-05-02T10:32:27Z,,"- Components can now access the SSR context as `this.$ssrContext`
- Internal improvements for handling functional `*.vue` components style SSR injections",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/6249751/assets,https://api.github.com/repos/vuejs/vue/releases/6249751,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.3.2,https://github.com/vuejs/vue/releases/tag/v2.3.2,https://api.github.com/repos/vuejs/vue/zipball/v2.3.2,v2.3.2,False,False
6248153,2017-05-02T07:58:53Z,2017-05-02T07:59:40Z,,"### Fixed

- #5536 fix regression when render function returns `null` (@gebilaoxiong via #5539)
- #5540 `vue-server-renderer/server-plugin`: ensure assets are unique (@pi0 via #5540)
- #5553 `vue-server-renderer/server-plugin`: avoid swallowing webpack error when entry is not found
- #5559 `vue-server-renderer`: with `runInNewContext: false`, the bundle is now indeed executed in the same context. The 2.3.0 behavior is still available behind a new option value `runInNewContext: 'once'`. See [docs](https://ssr.vuejs.org/en/api.html#runinnewcontext) for more details.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/6248153/assets,https://api.github.com/repos/vuejs/vue/releases/6248153,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.3.1,https://github.com/vuejs/vue/releases/tag/v2.3.1,https://api.github.com/repos/vuejs/vue/zipball/v2.3.1,v2.3.1,False,False
6204693,2017-04-27T06:22:09Z,2017-04-27T06:22:55Z,v2.3.0 JoJo's Bizarre Adventure,"> ""It was me, Dio!""

### 🚀 New

#### Server-Side Rendering Improvements

**Note:** We have created a [brand-new standalone guide](https://ssr.vuejs.org) for server-side rendering in Vue, it's a recommended read for all users. Also, the [HackerNews demo](https://github.com/vuejs/vue-hackernews-2.0/) has been updated to reflect the latest best practices.

- Now uses the `data-server-rendered` attribute to indicate server-rendered markup, making the output valid HTML.

- `template` option now supports simple interpolation using the render context. This allows the template to be dynamic based on the data attached to the context by rendered components.

  See [docs](http://ssr.vuejs.org/en/api.html#template) for more details.

- New `bundleRenderer` option: `runInNewContext`

  Defaults to `true`, which preserves the original behavior.

  When set to `false`, the renderer will no longer re-execute the entire bundle in a new vm context for each render. Instead, only the function exported by the bundle will be called again. This greatly improves performance, but requires some changes in source code structure.

  See [docs](http://ssr.vuejs.org/en/api.html#runinnewcontext) for more details.

- New `bundleRenderer` option: `clientManifest`

  By passing the `bundleRender` a client webpack build manifest generated by `vue-server-renderer/client-plugin`, the renderer can infer the proper build assets that need to be preloaded (e.g. code-split async chunks, images, and fonts). When using together with the `template` option, `<link rel=""preload/prefetch"">` and appropriate `<script>` tags will be injected automatically.

  See [docs](http://ssr.vuejs.org/en/build-config.html#generating-clientmanifest) for more details.

- `vue-ssr-webpack-plugin` is now deprecated, instead, it is now part of `vue-server-renderer`. It now also exposes two plugins - one for the server build and one for the client build.

  ``` js
  var VueSSRServerPlugin = require('vue-server-renderer/server-plugin')
  var VueSSRClientPlugin = require('vue-server-renderer/client-plugin')
  ```

  See [docs](http://ssr.vuejs.org/en/api.html#webpack-plugins) for more details.

#### Async Component Improvements

- Async component factories can now return an object of the following format:

  ``` js
  const AsyncComp = () => ({
    // The component to load. Should be a Promise
    component: import('./MyComp.vue'),
    // A component to use while the async component is loading
    loading: LoadingComp,
    // A component to use if the load fails
    error: ErrorComp,
    // Delay before showing the loading component. Defaults to 200ms.
    delay: 200,
    // The error component will be displayed if a timeout is provided and exceeded.
    timeout: 3000
  })
  ```

  Note that when used as a route component in `vue-router`, these properties will be ignored because async components are resolved upfront before the route navigation happens. You also need to update `vue-router` to 2.4.0+ if you wish to use the new syntax for route components.

#### Functional Component Improvements

- Functional components can now omit the `props` option. All attributes will be automatically extracted and exposed as camelized props on `context.props`.

  Note when the `props` option is provided, it will retain the old behavior - i.e. only explicitly declared props will be extracted.

- `v-on` listeners attached to a functional component will be exposed as `context.listeners`. This is simply an alias to `context.data.on`.

  Combined with the `props` change, functional components usage can be much cleaner:

  ``` js
  const MyComp = {
    functional: true,
    render (h, { props, listeners }) {
      return h('div', {
        on: {
          click: listeners.click // proxy click listener
        }
      }, [
        props.msg // auto extracted props
      ])
    )
  }
  ```

- Functional components now also support the `inject` option. Injected properties are exposed as `context.injections`. (@Kingwl via #5204)

#### Other Improvements

- `.sync` is back! However it now is simply syntax sugar that expands into a prop + listener pair, similar to `v-model`.

  The following

  ``` html
  <comp :foo.sync=""bar""></comp>
  ```

  is expanded into:

  ``` html
  <comp :foo=""bar"" @update:foo=""val => bar = val""></comp>
  ```

  For the child component to update `foo`'s value, it needs to explicitly emit an event instead of mutating the prop:

  ``` js
  this.$emit('update:foo', newValue)
  ```

- Warnings now include component hierarchy traces.

- `Vue.config.errorHandler` now also handles error thrown inside custom directive hooks (@xijiongbo via #5324)

- `Vue.config.errorHandler` now also handles error thrown in `nextTick` callbacks.

- New `v-on` modifier: `.passive` - adds the event listener with `{ passive: true }`. (@Kingwl via #5132)

- Props validation now supports `type: Symbol`.

- `style` bindings now support using an Array to provide multiple (prefixed) values to a property, so the following would be possible (@fnlctrl via #5460):

  ``` html
  <div :style=""{ display: [""-webkit-box"", ""-ms-flexbox"", ""flex""] }"">
  ```

- An extended component constructor can now also be used as a `mixin`. (@ktsn via #5448)

### 🐛 Fixed

- #5238, #5387 fix `v-model` not syncing for autocomplete / switching focus before confirming composition
- #5318 fix style diffing on cached/slot elements
- #5346 fix keep-alive cache incorrectly pruned with transition mode=""out-in""
- #5361 fix Symbol check error in Node 4.x
- #5394 fix duplicate attribute warning when using `class` and `:class` together in Edge
- #5398 fix `v-model` checkbox binding with Array index (@posva via #5402)
- #5464 fix incorrect compiler warning for $delete usage in templates
- #5480 allow slot names to be number `0` (@posva via #5481)
- #5526 fix text inside `<script type=""x/template"">` being unnecessarily decoded
- vue-class-component#87 fix base class lifecycle hook dropped when constructor options are modified before applying global mixin
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/6204693/assets,https://api.github.com/repos/vuejs/vue/releases/6204693,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.3.0,https://github.com/vuejs/vue/releases/tag/v2.3.0,https://api.github.com/repos/vuejs/vue/zipball/v2.3.0,v2.3.0,False,False
5874121,2017-03-27T02:46:09Z,2017-03-27T02:48:01Z,,"### Fixed

- Fixed a memory leak issue when used with `vue-router` (https://github.com/vuejs/vue-router/issues/1279)
- #5265 Warn when no getter is provided to a computed property (@kmc059000 via #5267)",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5874121/assets,https://api.github.com/repos/vuejs/vue/releases/5874121,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.2.6,https://github.com/vuejs/vue/releases/tag/v2.2.6,https://api.github.com/repos/vuejs/vue/zipball/v2.2.6,v2.2.6,False,False
5854602,2017-03-24T04:53:32Z,2017-03-24T04:56:51Z,,"### Fixed

- #5191 fix events emitted from `updated` hook not triggering update (@Kingwl via #5233)
- #5209 fix performance tracing issue
- #5216 fix `Vue.set` crashing when used on Arrays with non-number key (@pkaminski via #5216)
- #5224 fix `v-show` not setting inline display property in SSR (@defcc via #5224)
- #5223 fix Array values injected via `inject` option not reactive (@Kingwl via #5229)
- #5243 trigger warning when mutating injected bindings (@rayrutjes via #5243)
- #5250 fix `input[type=password]` behavior in IE9 (@ktsn via #5253)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5854602/assets,https://api.github.com/repos/vuejs/vue/releases/5854602,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.2.5,https://github.com/vuejs/vue/releases/tag/v2.2.5,https://api.github.com/repos/vuejs/vue/zipball/v2.2.5,v2.2.5,False,False
5725409,2017-03-13T15:08:09Z,2017-03-13T15:14:50Z,,"### Fixed

- #5181 fixed 2.2.3 performance tracing regression for nested components with the same name.",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5725409/assets,https://api.github.com/repos/vuejs/vue/releases/5725409,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.2.4,https://github.com/vuejs/vue/releases/tag/v2.2.4,https://api.github.com/repos/vuejs/vue/zipball/v2.2.4,v2.2.4,False,False
5720386,2017-03-13T08:07:59Z,2017-03-13T08:08:57Z,,"### Notable Changes

- `Vue.config.performance` now defaults to `false` due to its impact on dev mode performance. Only turn it on when you need it.

### Improvements

- Now warns usage of camelCase props when using in-DOM templates. (@CodinCat via #5161)
- Now warns when template contains text outside of root element. (@xujiongbo via #5164)

### Fixed

- #5121 parse content in textarea as plaintext (@HerringtonDarkholme via #5143)
- #5146, #5169, #5171 fix v-on `.prevent` modifier regression when combined with other key modifiers (@Kingwl via #5147)
- #5150 `v-bind` object should have lower priority than explicit bindings
- #5162 fix custom directive argument fallthrough
- #5174 fix ever-increasing component render time caused by calls to `performance.measure` in dev mode.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5720386/assets,https://api.github.com/repos/vuejs/vue/releases/5720386,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.2.3,https://github.com/vuejs/vue/releases/tag/v2.2.3,https://api.github.com/repos/vuejs/vue/zipball/v2.2.3,v2.2.3,False,False
5684646,2017-03-09T02:32:39Z,2017-03-09T02:40:27Z,,"### Fixed

- #5037 ssr: fix JSON file path detection in `createBundleRenderer`
- #5043 fix `provide/inject` for falsy values (@znck via #5044)
- #5046 fix `v-on` .left .right modifiers conflict between keyboard and mouse events
- #5055 handle values with circular reference in `v-model` bindings
- #5097 default slot should use fallback content when it contains all whitespace nodes
- #5120 fix v-on inline function expression with modifiers
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5684646/assets,https://api.github.com/repos/vuejs/vue/releases/5684646,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.2.2,https://github.com/vuejs/vue/releases/tag/v2.2.2,https://api.github.com/repos/vuejs/vue/zipball/v2.2.2,v2.2.2,False,False
5575208,2017-02-26T13:10:52Z,2017-02-26T14:46:50Z,,"- Fixed npm package missing `.esm` dist files.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5575208/assets,https://api.github.com/repos/vuejs/vue/releases/5575208,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.2.1,https://github.com/vuejs/vue/releases/tag/v2.2.1,https://api.github.com/repos/vuejs/vue/zipball/v2.2.1,v2.2.1,False,False
5573839,2017-02-26T04:28:15Z,2017-02-26T04:34:49Z,v2.2.0 Initial D,"> ""Fill'er up. High Octane.""

This release contains 31 pull requests from 22 different contributors - thank you!

## Upgrade Note
- In addition to `vue`, make sure to also upgrade `vue-template-compiler` and `vue-loader`.

## Notable Changes

> There are no breaking changes to the public API in this release. However, some internal changes may require adjustments on your part if your code relies on some undocumented behavior in previous versions.
- When using `v-for` with a component, a `key` is now required. You will likely see a bunch of ""soft warnings"" when you upgrade, but this does not affect the current behavior of your app.
- The template parser will now raise errors for tags that are missing matching closing tags. Although a tag without matching closing tag is vaild in HTML5, it is most of the time an unintentional mistake, and can lead to subtle bugs. This check does not work for in-DOM templates because the HTML string is already normalized by the browser before being passed to Vue's parser.
- Props and computed properties are now defined on a component's prototype instead of as self properties on each instance. This avoids many calls to `Object.defineProperty` and improves component initialization performance. This will only affect you if you rely on `hasOwnProperty` checks on props and computed properties, which should be extremely rare, but we are documenting it here to be explicit about the change. (relevant commits: 406352baba459288473915218b0ee81cf8066898, e870e6c6afd31aac94e21573eb5522a1c4d8cc8a)
- If you previously relied on `try...catch` for handling possible errors in component lifecycle hooks, the errors will no longer be thrown directly. However, you can use the global `Vue.config.errorHandler` to intercept and handle those errors.
- Many exposed methods and properties on `Vue.util` have been removed. If you previously relied on them, you should migrate off of them since this object is intended for internal use only - it is not (and has never been) considered part of the public API and may change without notice in the future.
- The default export used by Webpack 2 will now point to an ES module build (`dist/vue.runtime.esm.js`). This means without any alias configuration, `require('vue')` in webpack 2 will give you an object (`{ __esModule: true, default: Vue }`) instead. You should only use `import Vue from 'vue'` with webpack 2.
  
  Also see [updated dist files information](https://github.com/vuejs/vue/blob/dev/dist/README.md) for more details.
  
  **For TypeScript + webpack 2 users:** the new default ES module export will no longer work with `import Vue = require('vue')` - please see [updated TypeScript integration docs](https://vuejs.org/v2/guide/typescript.html) for more details.

## New

#### Server-Side Rendering Improvements
- New renderer option: `template`. Allows passing in a template for the entire HTML page. **[Docs](https://github.com/vuejs/vue/tree/36810163386dd4f2690d8d1c4b1016f17e467e2d/packages/vue-server-renderer#template)**
- `bundleRenderer` now accepts a special bundle object generated by [vue-ssr-webpack-plugin](https://github.com/vuejs/vue-ssr-webpack-plugin). Using the new bundle format seamlessly supports webpack code splitting and source maps. **[Docs](https://github.com/vuejs/vue/tree/36810163386dd4f2690d8d1c4b1016f17e467e2d/packages/vue-server-renderer#creating-the-server-bundle)**
- There are also related improvements in `vue-router` and `vue-style-loader` which together makes SSR + code splitting very straightforward - stay tuned for a detailed writeup.

#### Error Handling Improvements
- Errors thrown in component lifecycle hooks and watcher getter/callbacks no longer crash the entire app. These errors are now also forwarded to `Vue.config.errorHandler`, if provided.
- New option: `renderError`. A separate render function that will be used when there's an error in the default render function. Receives the error as the second argument.
  
  ``` js
  new Vue({
    render (h) {
      throw new Error('oops')
    },
    renderError (h, err) {
      return h('pre', { style: { color: 'red' }}, err.stack)
    }
  }).$mount('#app')
  ```

#### Component `v-model` Customization
- Previously, `v-model` on a custom component defaults to use `value` as the prop and `input` as the event. This places some restrictions when authoring custom input components that resembles checkboxes or radio inputs. In 2.2 you can customize the props/event pair using the new `model` component option:
  
  ``` js
  Vue.component('my-checkbox', {
    model: {
      prop: 'checked',
      event: 'change'
    },
    props: {
      // this allows using the `value` prop for a different purpose
      value: String
    },
    // ...
  })
  ```
  
  ``` html
  <my-checkbox v-model=""foo"" value=""some value""></my-checkbox>
  ```
  
  The above will be equivalent to:
  
  ``` html
  <my-checkbox
    :checked=""foo""
    @change=""(val) => { foo = val }""
    value=""some value"">
  </my-checkbox>
  ```

#### Provide & Inject
- The new `provide` and `inject` options provide similar functionality to React's context feature:
  
  ``` js
  const Provider = {
    provide () {
      return {
        foo: 'bar'
      }
    }
  }
  
  const Consumer = {
    inject: ['foo']
  }
  ```
  
  Now as long as `Consumer` is instantiated in the descendant tree of `Provider`, it will get `foo` injected into it (`this.foo === 'bar'`). This is a feature mostly intended for advanced usage by plugin / component library authors and should be used with caution.
  
  Special thanks to the discussion in #4029 and the community implementation (https://github.com/spatie/vue-expose-inject).
  
  **[More details in docs](https://vuejs.org/v2/api/#provide-inject)**

#### Other Improvements
- The production mode tip on startup can now be turned off by setting `Vue.config.productionTip = false`.
- A component's current props are now also exposed on `this.$props`. (@yantene via #4848)
- `<transition>` and `<transition-group>` now accepts explicit transition durations via the new `duration` prop: (@Akryum via #4857)
  
  ``` html
  <!-- same duration for enter/leave -->
  <transition :duration=""500"">
  
  <!-- different duration for enter/leave -->
  <transition :duration=""{ enter: 300, leave: 500 }"">
  ```
- New config: `Vue.config.performance`. Setting it to true traces component init, compile, render and patch time in the browser devtool timeline. Only available in dev mode.
- `<keep-alive>`: `activated` and `deactivated` now fires for all components inside an activated/deactivated tree.
- `vm.$on()` now supports registering the same callback for multiple events using `vm.$on([eventA, eventB], callback)` (@Kingwl via #4860)
- `v-on` new mouse event modifiers: `.left`, `.right`, `.middle`. Example: `<button @click.right=""onRightClick"">` (@Kingwl via #4866)
- `vue-template-compiler`: `parseComponent` result now also includes the attrs for each block. (@zephraph via #4925)
- `Vue.delete` now also supports Arrays: `Vue.delete(arr, index)` (@Hanks10100 via #4747)

## Fixed
- #4749 (keep-alive) handle invalid include/exclude values [458671b732c709999cbd1f0fa37d38215cab839b]
- #4753 (parser) fix infinite loop when parsing elements that contains `<` only (@dhcmrlchtdj via #4753) [938fa4efcc9bf6232bf5ace5920398dc2e128ac9]
- #4755 (v-model) handle dynamic `<select multiple>` bindings (@defcc via #4756) [9e38abca3e6ababe0b06dfc9838a90e06ff5ea88]
- #4758 (parser) preserve only whitespace child in `<pre>` tags (@defcc via #4760) [e02fb1294d1084d6f2224cf93a1425b09b1d8b5c]
- #4767 (core) ensure mutating extended constructor options does not affect parent [769c4dc2032251323c8f61ad8eba2c26c615a618]
- #4774 (core) fix replaced component root nodes losing parent scopeId [90a455c95ceb5d38e5a26b172e958232c25265d2]
- #4779 (slots) fix scoped slots with dynamic slot names [e7083d09f1eec1d8853b65720f1a8c6e0f22836e]
- #4796, #4896 (v-model) fix `v-model` + `@change` behavior inconsistency in different browsers [8e854a9ed1b606890b53637f201432174bb7508a]
- #4797 (parser) avoid double-decoding on attribute value (@jddxf via #4797) [d14bd641430d936867a5d289d513a37917a0deb6]
- #4813 (parser) fix SVG `foreignObject` regression (@zephraph via #4926) [0201d8ca1dd9b97d82cf91118aa0478708528989]
- #4838 (filter) fix filter parsing error for division operator (@rixlabs via #4844) [7259aefbe82516c63e9944a4dcc1dce1ac754bff]
- #4846 (v-on) fix .once with other modifiers that prevent execution of a handler [05c769bf4442d57f4593016d562bb702174ae295]
- #4855 (v-model) fix `<select multiple>` binding with undefined value (@posva via #4859) [ec7fca8495528bda169c44ac660747bf2a8000a8]
- #4863 (transition) trim transition class whitespace (@hashplus via #4863) [8bf5af8edf966e6fad8f260234519cf40ab0cde6]
- #4872 (core) fix props default value factory function when running application code in different realm (@HerringtonDarkholme via #4928) [01151ce3fa3cb346443d086332ec053c389ee619]
- #4900 (transition) fix transition-group move transition detection [69771090511fb8072b5600f6c4d212026c8e7eea]
- #4936 (ssr) bundleRenderer should resolve `require()` calls relative to bundle location. [8d885128371c81994715691c81d161b3768706dd]
- #4950 (core) warn when defining a method with same name as a prop (@chriscasola via #4950) [3dc9338479c6c04925831b21ebec43677a918897]
- #4976 (core) properly handle cosntructor options modification before global mixin [4cf49828c0274262f111e23056332d3a970b28d9, 7fa8fa76fe4a8450e0407cf64d704ac8df00c0c2]
- #4985 (transition) fix transition appear class fallback [7d3309deed60fc86568a6e2e09f0ccdb7dc5ceea]
- #4990 (core) fix memory leak in directives with `componentUpdated` hook [2a5fb41d1cd7445b6aacd2e888df1b397b1899dd]
- vuejs/vue-loader#628 (parser) fix parser hanging on trailing ill-formatted brackets [a0a619f6119c4cc6c71934c29fe3e62d3d608da9]
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5573839/assets,https://api.github.com/repos/vuejs/vue/releases/5573839,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.2.0,https://github.com/vuejs/vue/releases/tag/v2.2.0,https://api.github.com/repos/vuejs/vue/zipball/v2.2.0,v2.2.0,False,False
5184456,2017-01-17T17:17:12Z,2017-01-17T17:20:30Z,,"### Fixed
- fix `<transition>` render error when the wrapped component uses a non-string key.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5184456/assets,https://api.github.com/repos/vuejs/vue/releases/5184456,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.10,https://github.com/vuejs/vue/releases/tag/v2.1.10,https://api.github.com/repos/vuejs/vue/zipball/v2.1.10,v2.1.10,False,False
5175949,2017-01-16T23:48:07Z,2017-01-16T23:50:30Z,,"### Fixed
- #3433, #4445, #4511 avoid parsing error when being bundled via Browserify (@arielpachara via #4646)
- #4590 handle component root patch edge case
- #4599 ensure updated hook is called after child components are updated
- #4620 fix checkboxes that are in-focus not updating on data change (@defcc via #4639)
- #4633 fix keep-alive with dynamic include/exclude patterns
- #4650 fix single -> array & array -> single event handler patching
- #4655 fix v-on .once on multiple elements
- #4658 fix input with static `value` bindings being reset on component update
- #4693 support calling `$mount` in `created` again
- #4702 fix leave transition ending early when multiple custom transition components are used together
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5175949/assets,https://api.github.com/repos/vuejs/vue/releases/5175949,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.9,https://github.com/vuejs/vue/releases/tag/v2.1.9,https://api.github.com/repos/vuejs/vue/zipball/v2.1.9,v2.1.9,False,False
5022999,2016-12-28T05:54:35Z,2016-12-28T05:54:49Z,,"### Changes
- The transition behavior change introduced in 2.1.7 has been reverted. All transitions that worked in 2.1.6 and earlier should work exactly the same in 2.1.8.
- In order to properly solve #4510, a new type of transition class (`-to`) is introduced. Now for each transition phase (`enter`, `leave`, `appear`) there are three classes. For example for a leaving transition:
  - `v-leave`: the starting state for the transition;
  - `v-leave-to`: the ending state for the transition;
  - `v-leave-active`: applied across the entire transition duration.
  
  Both `v-leave` and `v-leave-active` behave exactly like before. The only difference between `v-leave-to` and `v-leave-active` is that it is applied **one frame after the transition starts**.
  
  The reason for this is that enter transitions are triggered by the removal of `v-enter`, which is also one frame after the transition starts. So using `v-leave-to` instead of `v-leave-active` ensures that **enter and leave transitions triggered at the same time also start in the exact same frame**. The class name also more correctly express what it represents.
  
  All previous transition code will continue to work, but from now on it is recommended to use `v-leave-to` to indicate leaving transition end state.

### Fixed
- #4545 fix dynamic transition type for higher-order transition components
- #4560 fix hydration error when interpolated text contains CRLF
- #4564, #4584, #4589 fix regression patch error for elements containing both components and `<slot>` (@defcc via #4572)
- #4576 fix enter transition flicker regression
- #4586 fix checkbox `v-model` checked state for non-boolean values
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5022999/assets,https://api.github.com/repos/vuejs/vue/releases/5022999,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.8,https://github.com/vuejs/vue/releases/tag/v2.1.8,https://api.github.com/repos/vuejs/vue/zipball/v2.1.8,v2.1.8,False,False
5006079,2016-12-24T16:36:17Z,2016-12-24T16:39:59Z,,"# 🎄 Happy Holidays! 🎄

### Potential Required Actions

In order to fix certain bugs, we had to introduce a few minor behavior changes:
- **If you are the author of a plugin/component that ships a pre-compiled dist file**:
  
  It is recommended to re-compile the dist file using the latest versions of `vue-template-compiler` and `vue-template-es2015-compiler`. The new generated code is backwards-compatible, but code generated by older versions of the compilers may not work properly with the latest runtime.
  
  Code generation changes that affect compatibility are very rare and we will avoid introducing similar changes in future patch releases.
- **If you use `<transition-group>`'s move animation feature**:
  
  When fixing #4510 (ensure leave transitions and enter transitions triggered by the same state change are started in the same frame), we had to move the application of the `v-enter-active` and `v-leave-active` classes to one frame after the application of `v-enter` and `v-leave`. This should not affect existing usage of `<transition>`, however if you are using `<transition-group>` for moving animations, there is a minor adjustment required: you need to now add `position: absolute` to both `v-leave` and `v-leave-active` (previously only `v-leave-active` is sufficient). See updated [moving animation example](https://github.com/vuejs/vue/blob/dev/examples/move-animations/index.html#L18-L31).

### Improvements
- Improved stateful components instantiation performance by ~30%.
- From version 2.1.7 and up, you can directly use the CDN link [https://unpkg.com/vue](https://unpkg.com/vue) for the standalone build.

### Fixed
- #4472 fix functional component multiple root nodes regression
- #4478 fix SVG foreignObject namespace regression
- #4484 unbind v-show if no longer present during patch
- #4494 ensure `value` for `<option>` is always updated (@defcc via #4505)
- #4497 fix `v-for` behavior with string value (@posva via #4499)
- #4510 ensure leave transitions and enter transitions triggered by the same state change are started in the same frame
- #4514 fix `v-model` selected value update between `0` and `""""` (@defcc via #4528)
- #4518 change `Vue.config.ignoredElements` default value to be consistent with docs (@semenyukdmitry via #4518)
- #4521 avoid checked state being overwritten before change event trigger
- #4529 support `v-bind` object syntax on scoped slots
- #4530 fix special attributes (e.g. `value`) patching error when switching between dynamic and static bindings
- #4533 fix hydration error caused by empty text nodes between `v-if` conditions
- #4535 fix node removal error when patching elements with `v-text` (@defcc via #4548)
- #4538 avoid casting empty string to Boolean when a prop expects both String and Boolean types (@fliptheweb via #4539)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/5006079/assets,https://api.github.com/repos/vuejs/vue/releases/5006079,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.7,https://github.com/vuejs/vue/releases/tag/v2.1.7,https://api.github.com/repos/vuejs/vue/zipball/v2.1.7,v2.1.7,False,False
4908928,2016-12-13T17:22:28Z,2016-12-13T17:23:42Z,,"### Fixed
- #4464 fix 2.1.5 regression for `v-else` + `v-for`
- #4466 fix 2.1.5 regression for boolean value in children arrays (@defcc via #4468)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4908928/assets,https://api.github.com/repos/vuejs/vue/releases/4908928,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.6,https://github.com/vuejs/vue/releases/tag/v2.1.6,https://api.github.com/repos/vuejs/vue/zipball/v2.1.6,v2.1.6,False,False
4901734,2016-12-13T03:09:29Z,2016-12-13T03:21:13Z,,"### Improvements
- Small across-the-board performance improvement for render functions compiled from templates. They now skip the normalization of nested children arrays based on information inferred from the templates at compile time.

### Fixed
- #4369 `value` should be bound as a DOM property for `<select>`
- #4391 fix IE9 radio input value
- #4392 avoid v-model with .trim/.number updating value when in focus (@defcc)
- #4393 fix template-nested `v-if` patch error
- #4415 fix filter parsing for divisions
- #4418 fix transition v-show display toggle timing for enter hooks
- #4432 fix `v-bind.prop` parse logic (@defcc via #4435)
- #4434 ensure local assets is prioritized regardless of naming convention
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4901734/assets,https://api.github.com/repos/vuejs/vue/releases/4901734,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.5,https://github.com/vuejs/vue/releases/tag/v2.1.5,https://api.github.com/repos/vuejs/vue/zipball/v2.1.5,v2.1.5,False,False
4813079,2016-12-02T03:01:19Z,2016-12-02T03:01:50Z,,"### Improvements
- Added typings for 2.1 features (@ktsn via #4305)
- New `v-on` modifier: `.once` (@KingMario via #4267)
- `config.keyCodes` now support Array values for mapping an alias to multiple keyCodes. (@defcc via #4328)
- Modifier key modifiers (`.ctrl`, `.alt`, `.shift` and `.meta`) now also work for KeyboardEvents.

### Fixed
- #4304 fix in-browser detection in jsdom + Node 7
- #4306 fix static style bindings that contains `!important`
- #4315 fix incorrect context for slot content created in functional components
- #4339 fix keep-alive child component root transition
- fix stateful transition wrapper component as child component root
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4813079/assets,https://api.github.com/repos/vuejs/vue/releases/4813079,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.4,https://github.com/vuejs/vue/releases/tag/v2.1.4,https://api.github.com/repos/vuejs/vue/zipball/v2.1.4,v2.1.4,False,False
4746851,2016-11-24T00:22:03Z,2016-11-24T00:24:37Z,,"### Fixed
- Fixed version mismatch between `vue` and sub packages
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4746851/assets,https://api.github.com/repos/vuejs/vue/releases/4746851,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.3,https://github.com/vuejs/vue/releases/tag/v2.1.3,https://api.github.com/repos/vuejs/vue/zipball/v2.1.3,v2.1.3,False,False
4746660,2016-11-23T23:42:05Z,2016-11-23T23:43:16Z,,"### Fixed
- #4300 proxy detection regression for transition components
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4746660/assets,https://api.github.com/repos/vuejs/vue/releases/4746660,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.2,https://github.com/vuejs/vue/releases/tag/v2.1.2,https://api.github.com/repos/vuejs/vue/zipball/v2.1.2,v2.1.2,False,False
4745689,2016-11-23T21:00:42Z,2016-11-23T21:04:16Z,,"### Fixed
- fix non-existent property reference detection after `vue-loader` code generation change
- #4284 fix instance root node patching edge case (@HerringtonDarkholme via #4299)
- #4288 fix `v-once` nodes losing child reference after patch
- #4289 `vue-template-compiler`: fix single-file components nested `<template>` parsing error
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4745689/assets,https://api.github.com/repos/vuejs/vue/releases/4745689,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.1,https://github.com/vuejs/vue/releases/tag/v2.1.1,https://api.github.com/repos/vuejs/vue/zipball/v2.1.1,v2.1.1,False,False
4731601,2016-11-22T16:15:07Z,2016-11-22T16:15:37Z,v2.1.0 Hunter X Hunter,"> ""You should enjoy the little detours to the fullest. Because that's where you'll find the things more important than what you want."" - Ging Freecss

This is a pretty long releaes note - [see a version with linkable TOC here](https://gist.github.com/yyx990803/faebe22e8763f5b17572b35ed96f52fe)

## New Features

### Scoped Slots

A scoped slot is a special type of slot that functions as a reusable template (that can be passed data to) instead of already-rendered-elements.

In a child component, simply pass data into a slot using normal prop syntax:

``` js
const Child = {
  data () {
    return { msg: 'hello from child' }
  },
  template: `
    <div class=""child"">
      <slot :text=""msg""></slot>
    </div>
  `
}
```

In the parent, a `<template>` element with a special attribute `scope` indicates that it is a template for a scoped slot. The value of `scope` is the name of a temporary variable that holds the props object passed from the child:

``` js
const Parent = {
  components: { Child },
  template: `
    <div class=""parent"">
      <child>
        <template scope=""props"">
          <span>hello from parent</span>
          <span>{{ props.text }}</span>
        </template>
      </child>
    </div>
  `
}
```

If we render the above, the output will be:

``` html
<div class=""parent"">
  <div class=""child"">
    <span>hello from parent</span>
    <span>hello from child</span>
  </div>
</div>
```

The equivalent in raw render functions would be:

``` js
const Child = {
  data () {
    return { msg: 'hello from child' }
  },
  render (h) {
    return h('div', { class: 'child' }, [
      // <slot :text=""msg""></slot>
      this.$scopedSlots.default({ text: this.msg })
    ])
  }
}

const Parent = {
  render (h) {
    return h('div', { class: 'parent' }, [
      h(Child, {
        // pass scopedSlots in the data object
        // in the form of { name: props => VNode | Array<VNode> }
        scopedSlots: {
          default: props => [
            h('span', 'hello from parent'),
            h('span', props.text)
          ]
        }
      })
    ])
  }
}
```

Notice how the scoped slot is simply a function under the hood.

A more typical use case for scoped slots would be a list component that allows the component consumer to customize how each item in the list should be rendered:

``` html
<my-awesome-list :items=""items"">
  <!-- scoped slot can be named too -->
  <template slot=""item"" scope=""props"">
    <li class=""my-fancy-item"">{{ props.text }}</li>
  </template>
</my-awesome-list>
```

And the template for the list component:

``` html
<ul>
  <slot name=""item""
    v-for=""item in items""
    :text=""item.text"">
    <!-- fallback content here -->
  </slot>
</ul>
```

### Conditional Keep Alive

`<keep-alive>` can now be configured to conditionally cache components using the new `include` and `exclude` props. Both props can either be a comma-delimited string or a RegExp:

``` html
<!-- comma-delimited string -->
<keep-alive include=""a,b"">
  <component :is=""view""></component>
</keep-alive>

<!-- regex (use v-bind) -->
<keep-alive :include=""/a|b/"">
  <component :is=""view""></component>
</keep-alive>
```

The match is first checked on the component's own `name` option, then its local registration name (the key in the parent's `components` option) if the `name` option is not available. Anonymous components cannot be matched against.

### v-else-if

A new directive `v-else-if` is introduced, and it works as you might have expected:

``` html
<div v-if=""type === 'a'"">A</div>
<div v-else-if=""type === 'b'"">B</div>
<div v-else>C</div>
```

Previously, if you write a template with multiple root-level elements with `v-if` on each, you would receive a warning from the compiler. However, with `v-else-if` it will be fine because now the compiler can safely infer that there will only be one root-level element:

``` js
Vue.component('example', {
  // no more warnings!
  template: `
    <div v-if=""type === 'a'"">A</div>
    <div v-else-if=""type === 'b'"">B</div>
    <div v-else>C</div>
  `
})
```

### Relaxed Filter Usage

Filters are now also supported in `v-bind` expressions (in addition to text interpolations):

``` html
<img v-bind:src=""imgSrc | formatURL"">

<!-- shorthand -->
<img :src=""imgSrc | formatURL"">
```

### Misc
- `nextTick` now returns a Promise if no callback is provided and Promise is supported in the environment (@chrisvfritz via #3967).
- New mouse event modifiers for `v-on`: `.ctrl`, `.alt`, `.shift` and `.meta`. (@KingMario via #4034)
- `v-bind` now supports the `.camel` modifier (previously available in 1.x). This modifier allows camelizing a `v-bind` attribute name when using in-DOM templates, e.g. the SVG `viewBox` attribute:
  
  ``` html
  <svg :view-box.camel=""viewBox""></svg>
  ```
  
  It is not needed if you are using string templates, or compiling with `vue-loader`/`vueify`.

## Dist Files Adjustments

Starting in 2.1.0, the following changes are applied to files in `dist` directory:
- The old `vue.common.js` is now renamed to `vue.runtime.common.js`. (So is the `main` field in `package.json`)
- The new `vue.common.js` now contains a different build that targets CommonJS/bundler environments but includes the compiler.

The difference between `dist/vue.js` and the new `dist/vue.common.js` is that the former is hard-coded in development mode, while the latter can be in either mode depending on the environment variables injected by the build tools.

See a more detailed explanation [here](https://github.com/vuejs/vue/blob/dev/dist/README.md), or read below to see if you need to do anything.

### What does this mean?
- **First, nothing will break because of these changes. You can upgrade first.**
- If you've been using the runtime-only build, no further action is needed.
- If you've been using the standalone build by configuring the Webpack alias, it's recommended to make the following change to benefit from slightly better perf and smaller file size (only do this after upgrading to 2.1.0):
  
  ``` js
  // before
  resolve: {
    alias: {
      vue$: 'vue/dist/vue.js'
    }
  }
  
  // after
  resolve: {
    alias: {
      vue$: 'vue/dist/vue.common.js'
    }
  }
  ```

## vue-loader@10.0.0

`vue-loader` gets a breaking release with the following changes:
- `vue-template-compiler` is now a peer dependency instead of a direct dependency. This allows the user to pin `vue-template-compiler` to a specific version instead of relying on the implicit upgrades from a semver caret range.
- `templateBuble` option is merged with the `buble` option. This means the template expressions will be using the same Buble configuration with `buble-loader` (if present).

In addition, all [Buble base transforms](https://buble.surge.sh/guide/#supported-features) are now enabled by default for template expression, including arrow functions and parameter destructuring (**Note: the following examples all require Vue core ^2.1.0**):

``` html
<!-- arrow functions in v-on handlers -->
<button @click=""e => log(e)""></button>

<!-- destructuring in v-for -->
<li v-for=""{ id, text } in items"">
  {{ id }} {{ text }}
</li>

<!-- destructuring in scoped slots -->
<my-component>
  <template scope=""{ id, text }"">
    <span>{{ id }} {{ text }}</span>
  </template>
</my-component>
```

## JSX Improvements
- Using a function as children is now treated as the default scoped slot (note this requires Vue core 2.1.0):
  
  ``` jsx
  // in parent
  render (h) {
    return (
      <child>
        {props => <span>{props.text}</span>}
      </child>
    )
  }
  
  // in child
  render (h) {
    return (
      <div>
        {this.$scopedSlots.default({ text: 'hello' })}
      </div>
    )
  }
  ```
- `babel-plugin-transform-vue-jsx` now also supports camelCase style props:
  
  ``` jsx
  // before
  return <button on-click={this.onClick}></button>
  
  // can now also be written as:
  return <button onClick={this.onClick}></button>
  ```
  
  Note this change has a small implication if you have components that expects props like `onChange`: previously `onChange` will be passed down as a prop, but now it will be treated as a listener (`v-on:change`). All you need to do is instead of calling the prop function (`this.onChange()`), emit an event instead (`this.$emit('change')`). Your component's usage will remain the same to external consumers.

## vue-server-renderer
- No longer requires explicitly setting `process.env.VUE_ENV=server`. When `vue-server-renderer` is used, this flag is now automatically enabled.

## vue-template-compiler
- `parseComponent` now also exposes custom language blocks in `*.vue` files in addition to `<script>`, `<style>` and `<template>`. See #4157 for more details.

## Fixed
- #4268 properly handle unicode newlines `/u2028` and `/u2029` in templates
- #4266 fix dropping scoped CSS after global mixin application when exporting constructors in single file components (@ktsn via #4274)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4731601/assets,https://api.github.com/repos/vuejs/vue/releases/4731601,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.1.0,https://github.com/vuejs/vue/releases/tag/v2.1.0,https://api.github.com/repos/vuejs/vue/zipball/v2.1.0,v2.1.0,False,False
4709835,2016-11-20T03:14:59Z,2016-11-20T17:30:13Z,,"### Fixed
- #4227 fix style binding removal on reused nodes (@defcc via #4235)
- #4233 only treat form bindings as domProps on specific elements
- #4236 fix watcher firing unnecessarily for `NaN` values
- #4237 fix kept-alive components not getting updated props when re-activated
- #4239 fix `transition-group` move class when no `name` prop is provided (@decademoon)
- #4247 fix `v-html` resetting content even when content string stays the same
- #4253 fix duplicate `ref` + `v-for` when used with async components
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4709835/assets,https://api.github.com/repos/vuejs/vue/releases/4709835,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.8,https://github.com/vuejs/vue/releases/tag/v2.0.8,https://api.github.com/repos/vuejs/vue/zipball/v2.0.8,v2.0.8,False,False
4680773,2016-11-16T21:54:25Z,2016-11-16T21:55:42Z,,"### Fixed
- #4209 avoid merging text nodes when the node is a cloned slot node
- #4217 fix `vue/dist/vue.js` external dependency regression when used with Browserify/Webpack
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4680773/assets,https://api.github.com/repos/vuejs/vue/releases/4680773,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.7,https://github.com/vuejs/vue/releases/tag/v2.0.7,https://api.github.com/repos/vuejs/vue/zipball/v2.0.7,v2.0.7,False,False
4669239,2016-11-15T23:05:02Z,2016-11-15T23:09:09Z,,"### Fixed
- #3997 fix component style merging behavior (@defcc via #4138)
- #4098 fix IE in-dom template `<textarea>` placeholder being set as content
- #4143 fix component class merging behavior in SSR (@defcc via #4146)
- #4182 fix v-once inside v-for and v-once with v-if (@defcc via #4200)
- #4185 fix `v-model` path parsing regression (@defcc via #4188)
- #4191 fix data merging edge case
- #4204 fix `v-model.trim` modifier when used on components
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4669239/assets,https://api.github.com/repos/vuejs/vue/releases/4669239,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.6,https://github.com/vuejs/vue/releases/tag/v2.0.6,https://api.github.com/repos/vuejs/vue/zipball/v2.0.6,v2.0.6,False,False
4578712,2016-11-05T03:47:26Z,2016-11-05T03:49:14Z,,"### Fixed
- #4090 fix watcher triggering on unchanged prop with default value
- #4122 fix SVG `<foreignObject>` content namespace
- #4125 fix 2.0.4 regression: comments being rendered as plain text
- #4127 fix 2.0.4 regression: `vue-template-compiler` infinite loop in certain edge cases
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4578712/assets,https://api.github.com/repos/vuejs/vue/releases/4578712,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.5,https://github.com/vuejs/vue/releases/tag/v2.0.5,https://api.github.com/repos/vuejs/vue/zipball/v2.0.5,v2.0.5,False,False
4575333,2016-11-04T20:47:03Z,2016-11-04T20:51:32Z,,"### Build
- The npm distribution now includes `dist/vue.runtime.js`, a UMD version of the runtime only build that can be used in browsers. It is also available on [CDN](https://unpkg.com/vue/dist/vue.runtime.js).

### Improvements
- 20% SSR performance improvements by eliminating closures with context passing (via #4007 by @HerringtonDarkholme)

### Fixed
- fix transition error when using one delay to control all transitions (via #3932 by @guidobouman)
- #3940 fix root v-else not rendering in prod (via #3943 by @chrisvfritz)
- #3942 fix Vue.set not supporting sparse array (via #3947 by @leonlau)
- #3957 fix global props mixin
- #3958, #3979 fix v-model binding with array indice (via #3988 by @defcc)
- #3964 fix `v-once` inside `v-for`
- #3973, #4012 fix parsing templates that contains ""<""
- #4018 fix `.number` modifier for select, radio and checkbox (via #4022 by @defcc)
- #4055 fix `style` merging on component nodes in SSR (via #4076 by @HerringtonDarkholme)
- #4062 fix components option object compatibility with Webpack 2 wildcard import
- fix TypeScript definitions for RenderContext (via #4099 by @kaorun343)
- #4107 fix domProps unset for `v-html`
- fix `attrs` and `domProps` merging on component nodes in SSR
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4575333/assets,https://api.github.com/repos/vuejs/vue/releases/4575333,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.4,https://github.com/vuejs/vue/releases/tag/v2.0.4,https://api.github.com/repos/vuejs/vue/zipball/v2.0.4,v2.0.4,False,False
4377690,2016-10-13T09:27:28Z,2016-10-13T09:28:23Z,,"### Fixed
- #3913 fix v-for list auto-keying with nested `<template>`
- #3917 fix `<select>` infinite update loop with `@change` listener (@defcc via #3922)
- #3919 fix regression for functional components that return string or nothing
- #3930 fix regression for raw render function directive update
- #3931 should not generate children for ""is"" component with inline-template

### vue-template-compiler
- Exposed `preserveWhitespace` option.
- Fixed `pug` compatibility when used with `vue-loader` or `vueify`.

### vue-server-renderer
- #3899 fix entity encoding in IE9
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4377690/assets,https://api.github.com/repos/vuejs/vue/releases/4377690,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.3,https://github.com/vuejs/vue/releases/tag/v2.0.3,https://api.github.com/repos/vuejs/vue/zipball/v2.0.3,v2.0.3,False,False
4365619,2016-10-12T04:54:07Z,2016-10-12T04:58:21Z,,"### Fixed
- #3824 fix static trees with text nodes wrapped in `<template>` (@posva via #3826)
- #3846 fix parsing error for `v-for` inline value string that contains `""in""` (@phanan via #3859)
- #3848 fix directive patching error when an element is replaced with another that has a different directive list
- #3852 fix `<select multiple>` initialization (@defcc via #3908)
- #3867 fix ssr bundle renderer error on commonjs exports
- #3872 fix functional component as named slot
- #3878 allow 2 root nodes with v-if and v-else (@chrisvfritz via #3887)
- #3879 make validation for multi-type prop that contains Boolean consistent (@defcc via #3885)
- #3882 fix deeply nested keep-alive components not being destroyed
- #3883 fix dependency collection for multi-nested arrays
- #3893 fix v-on handler silently failing when value contains whitespaces
- #3894 avoid updating input value during IME composition
- #3895 fix parsing error when template contains special terminator chars (@defcc via #3903)
- #3898 fix `mounted` not called for manually mounted instance with parent
- #3905 fix style module removing styles with value 0 on update
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4365619/assets,https://api.github.com/repos/vuejs/vue/releases/4365619,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.2,https://github.com/vuejs/vue/releases/tag/v2.0.2,https://api.github.com/repos/vuejs/vue/zipball/v2.0.2,v2.0.2,False,False
4277911,2016-09-30T21:12:01Z,2016-09-30T21:21:27Z,,"- Pin npm package main export to the runtime-only build (preserve RC behavior)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4277911/assets,https://api.github.com/repos/vuejs/vue/releases/4277911,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.1,https://github.com/vuejs/vue/releases/tag/v2.0.1,https://api.github.com/repos/vuejs/vue/zipball/v2.0.1,v2.0.1,False,False
4276604,2016-09-30T18:32:01Z,2016-09-30T18:33:06Z,v2.0.0 Ghost in the Shell,"> ""Your effort to remain what you are is what limits you."" - Puppet Master

- [Release blog post](https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8#.vh9f94s2m)
- [Migration guide from 1.x](http://vuejs.org/guide/migration.html)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4276604/assets,https://api.github.com/repos/vuejs/vue/releases/4276604,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0,https://github.com/vuejs/vue/releases/tag/v2.0.0,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0,v2.0.0,False,False
4245330,2016-09-27T21:08:28Z,2016-09-27T21:12:48Z,,"### Fixed
- #3771 Revert `nextTick` to use microtask semantics while preserving functionality in iOS UIWebView >= 9.3.3. (See [details here](https://github.com/vuejs/vue/blob/1d3811af78debc11bd0856016dd102d7d57e8c6a/src/core/util/env.js#L46-L81))
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4245330/assets,https://api.github.com/repos/vuejs/vue/releases/4245330,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-rc.8,https://github.com/vuejs/vue/releases/tag/v2.0.0-rc.8,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-rc.8,v2.0.0-rc.8,False,True
4245139,2016-09-27T20:45:35Z,2016-09-27T20:53:42Z,,"### Fixed
- #3754 fix `v-if` + `v-ref` throwing error
- #3771 Reverted `nextTick` behavior to use microtask semantics while preserving functionality in iOS UIWebView >= 9.3.3. (See [details here](https://github.com/vuejs/vue/blob/dev/src/util/env.js#L84-L131))
- #3758, #3768, #3770, #3777 fix multiple 1.0.27 regressions caused by directive sorting error (via #3776 by @defcc)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4245139/assets,https://api.github.com/repos/vuejs/vue/releases/4245139,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.28,https://github.com/vuejs/vue/releases/tag/v1.0.28,https://api.github.com/repos/vuejs/vue/zipball/v1.0.28,v1.0.28,False,False
4218651,2016-09-23T22:24:50Z,2016-09-23T22:25:32Z,,"### Improvements
- Improved `<transition-group>` move animation performance by avoiding layout thrashing

### Fixed
- #3670 `v-bind` object with no argument should work on components
- #3673 `v-model` value matching should use loose equal (make behavior consistent with 1.x)
- #3689 fix `<select v-model>` initial value out of sync in IE/Edge
- #3693 fix prop default value not used when using `propsData`
- #3729 fix `<option value="""">` cannot be selected with `v-model`
- #3730 fix iOS 10 UIWebView broken update issue
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4218651/assets,https://api.github.com/repos/vuejs/vue/releases/4218651,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-rc.7,https://github.com/vuejs/vue/releases/tag/v2.0.0-rc.7,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-rc.7,v2.0.0-rc.7,False,True
4217594,2016-09-23T19:51:31Z,2016-09-23T19:54:28Z,,"### Fixed
- #3183 fix prop validation failure with `propsData` (#3193 by @kazupon)
- #3184 textarea with v-pre attr should skip compile (#3202 by @hylin)
- #3187 fix error processing single-letter hyphenated props
- #3204 fix `$refs` not updated correctly inside `v-if` (#3217 by @kazupon)
- #3210 fix filter arguments parsing when it contains spaces (#3734 by @defcc)
- #3273 handle backticks in expression (#3273 by @skyronic)
- #3307 v-model checkbox updates should replace the bound array
- #3668 fix required prop warning when using `propsData`
- #3730 fix iOS 10 UIWebView update bug with new nextTick implementation
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4217594/assets,https://api.github.com/repos/vuejs/vue/releases/4217594,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.27,https://github.com/vuejs/vue/releases/tag/v1.0.27,https://api.github.com/repos/vuejs/vue/zipball/v1.0.27,v1.0.27,False,False
4117710,2016-09-13T13:21:02Z,2016-09-13T13:22:19Z,,"### Fixed
- #3610 fix data observation converting prototype keys
- #3642 fix incorrect duplicate slot warning detection
- #3657 fix style binding array syntax not updating due to `toObject` mutating merged objects
- #3663 fix parsing multi-line attribute values in DOM template in IE
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4117710/assets,https://api.github.com/repos/vuejs/vue/releases/4117710,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-rc.6,https://github.com/vuejs/vue/releases/tag/v2.0.0-rc.6,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-rc.6,v2.0.0-rc.6,False,True
4079573,2016-09-08T11:29:48Z,2016-09-08T11:30:31Z,,"### New
- Custom directives now get a new hook: `inserted`, which will be called when the bound element has been inserted into its parent node. (Note this only guarantees parent node presence but not in-document)
- SSR hydration now allows the client to hydrate a server-rendered node when it has no children. (Previously it would throw an error and bail out with a full re-render) This allows the server to render a static ""app shell"" and let the client pick it up.

### Fixed
- Reverted custom directive `bind` call timing due to it leading to incorrect `v-show` property switch timing during initial render.
- #3556 fix v-on patching for cloned slot nodes
- #3559 remove unnecessary appear check in `v-show`
- #3595 fix incorrect duplicate slot warning when they are under `v-if`/`v-else`
- #3611 fix `v-for` patching error by keying nested children by default
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4079573/assets,https://api.github.com/repos/vuejs/vue/releases/4079573,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-rc.5,https://github.com/vuejs/vue/releases/tag/v2.0.0-rc.5,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-rc.5,v2.0.0-rc.5,False,True
4001579,2016-08-29T19:49:00Z,2016-08-29T19:49:47Z,,"### New
- Async component function now supports returning a Promise. Note if you are using async components with `vue-router` you need to update `vue-router` too.

### Fixed
- Fixed hot-reload issues when editing static elements
- #3491 fix vdom patch: properly teardown stable directives
- #3506 fix transition end detection (only check events on target element)
- #3516 fix `v-model` codegen for non-input components with type prop
- #3518 fix event initialization on reused slot nodes
- #3526 fix text parser for multi-line mustache tags
- #3529 ensure custom directive `bind` hook is called after element insertion
- #3533 fix vdom patch: DOM insertion reference node error on reused static node
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/4001579/assets,https://api.github.com/repos/vuejs/vue/releases/4001579,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-rc.4,https://github.com/vuejs/vue/releases/tag/v2.0.0-rc.4,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-rc.4,v2.0.0-rc.4,False,True
3932912,2016-08-20T18:04:54Z,2016-08-20T18:12:10Z,,"### New
- `Vue.set` and `Vue.delete` is now also exposed on Vue instances as `this.$set` and `this.$delete`. **Note this is different from the 1.x counterparts**: they are simply aliases to the global API.
  
  This change eliminates the need to import/require Vue just to access these two methods, and makes it easier to pre-compile standalone Vue components.
- Added a warning when mounting the root instance to `body` or `html`. This is no longer recommended in 2.0.

### Fixed
- #3455 fix refs missing on empty component root
- #3468 ensure `v-model` changes take effect before `v-on` listeners
- #3472 fix incorrect name option warning
- #3474 fix transition insert hook duplicate invocation on slot nodes
- #3478 fix `v-on` with chained key modifiers
- #3484 fix `v-show` should be able to overwrite inline `display: none`
- #3488 fix `v-show` transition enter hook when using raw render function / JSX
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3932912/assets,https://api.github.com/repos/vuejs/vue/releases/3932912,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-rc.3,https://github.com/vuejs/vue/releases/tag/v2.0.0-rc.3,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-rc.3,v2.0.0-rc.3,False,True
3893808,2016-08-16T03:39:07Z,2016-08-16T03:40:00Z,,"### Improvements
- `v-show` now respects the original display value of the element (@chrisvfritz)
- The server renderer now supports rendering `<script>` and `<style>` tags (they are still forbidden on the client) - this allows using a Vue component to render the HTML layout of the entire page. (@naumovs)
- Added warning for missing `v-on` handlers.
- Added warning for duplicate `<slot>` usage which used to work in 1.x but is no longer supported in 2.0.

### Fixed
- Fixed vdom patch errors on components with empty root (e.g. when root has v-if or transition)
- #3433 fix `enter` hook not firing for `v-show` transition
- #3439 fix v-model on `input[type=range]` in IE
- #3440 fix out-in transition entering early when parent re-renders
- #3451 fix native events on components with inline-template
- #3453 fix unnecessary child watcher calls on parent re-render
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3893808/assets,https://api.github.com/repos/vuejs/vue/releases/3893808,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-rc.2,https://github.com/vuejs/vue/releases/tag/v2.0.0-rc.2,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-rc.2,v2.0.0-rc.2,False,True
3862414,2016-08-11T05:43:09Z,2016-08-11T05:48:27Z,,"[WIP Documentation](http://rc.vuejs.org/)

### Fixed
- prop validation now work when code is run across different vms/iframes.

### Breaking Change
- SSR: when using `serverCacheKey`, the component also needs to have a unique `name` option.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3862414/assets,https://api.github.com/repos/vuejs/vue/releases/3862414,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-rc.1,https://github.com/vuejs/vue/releases/tag/v2.0.0-rc.1,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-rc.1,v2.0.0-rc.1,False,True
3852708,2016-08-10T04:55:30Z,2016-08-10T05:02:47Z,,"### New
- Improved SSR error handling when using `bundleRenderer.renderToStream`
- Improved SSR warning when component is missing render function / templates

### Breaking Changes
- `keep-alive` is no longer a special attribute: it is now a wrapper component, similar to `<transition>`:
  
  ``` html
  <keep-alive>
    <component :is=""view""></component>
  </keep-alive>
  ```
  
  This makes it possible to use `keep-alive` on multiple conditional children (note the children should eventually evaluate to a single child - any child other than the first one will be ignored):
  
  ``` html
  <keep-alive>
    <comp-a v-if=""a > 1""></comp-a>
    <comp-b v-else></comp-b>
  </keep-alive>
  ```
  
  When used together with `<transition>`, make sure to nest it inside:
  
  ``` html
  <transition>
    <keep-alive>
      <component :is=""view""></component>
    </keep-alive>
  </transition>
  ```

### Fixed
- #3395 fix `v-show` transition triggering more than necessary
- #3400 fix slot resolution on re-renders
- #3403 fix double quote decoding inside attributes when using DOM template
- #3406 fix static node reused incorrectly inside `v-for`
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3852708/assets,https://api.github.com/repos/vuejs/vue/releases/3852708,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-beta.8,https://github.com/vuejs/vue/releases/tag/v2.0.0-beta.8,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-beta.8,v2.0.0-beta.8,False,True
3826319,2016-08-05T22:14:22Z,2016-08-05T22:18:11Z,,"### New
- Improved warning information for SSR hydration failures.
- Support `:class` and `:style` binding values when using `class` and `style` in `v-bind=""object""`.

### Fixed
- Fixed SSR hydration failures when using `<transition>` that evaluates to empty nodes.
- #3379 `:style` bindings now work for plain strings as well
- #3386 & #3391 slot children not correctly updating

### Breaking Changes
- When using `render` functions, it is now no longer necessary (nor supported) to wrap component children inside a function:
  
  ``` js
  render (h) {
    // before
    return h(Comp, () => [...children])
  
    // after
    return h(Comp, [...children])
  }
  ```
  
  If you are using JSX, make sure to upgrade to `babel-plugin-transform-vue-jsx` to ^3.0.0.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3826319/assets,https://api.github.com/repos/vuejs/vue/releases/3826319,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-beta.7,https://github.com/vuejs/vue/releases/tag/v2.0.0-beta.7,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-beta.7,v2.0.0-beta.7,False,True
3787197,2016-08-01T19:31:13Z,2016-08-01T19:27:48Z,,"### Breaking Changes
- vnode data: `staticAttrs` is removed to ensure proper updates in certain edge cases. This change does not affect the static tree optimization. When authoring render functions, just use `attrs`.

### Fixed
- fix class update edge cases when the new vnode doesn't contain any data
- #3329 allow 2 root nodes with v-if and v-else in template (@chrisvfritz)
- #3334 fix `value` binding with value of `0` (@ktsn)
- #3341 fix whitespace preservation inside `<pre>`
- #3354 fix `v-show` transition when the transition component is used inside the child component template
- #3360 fix patch error when a node with `v-html` or `v-text` also has inner content in template.
- #3365 fix class merging between multiple nested components sharing the same element
- #3367 fix vnode children not evaluated correctly when the children is nested thunk (@chrisvfritz)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3787197/assets,https://api.github.com/repos/vuejs/vue/releases/3787197,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-beta.6,https://github.com/vuejs/vue/releases/tag/v2.0.0-beta.6,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-beta.6,v2.0.0-beta.6,False,True
3747225,2016-07-27T04:25:41Z,2016-07-27T04:43:34Z,,"### New
- Added `type` prop for `<transition>` and `<transition-group>` . This is equivalent to the `type` option for 1.x transition definitions. Accepted values are `""transition""` or `""animation""`.
- `vue-template-compiler` and `vue-server-renderer` packages will now verify if they have the same version with `vue` (if installed via npm). This prevents users from upgrading Vue but forgetting to update these packages as well.

### Fixed
- #3325 fix hoisted static nodes causing incorrect DOM updates
- #3327 fix attribute decoding regression in 2.0.0-beta.4
- fix `vue-loader` image src rewrite bug caused by `vue-template-compiler@2.0.0-beta.3/4`
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3747225/assets,https://api.github.com/repos/vuejs/vue/releases/3747225,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-beta.5,https://github.com/vuejs/vue/releases/tag/v2.0.0-beta.5,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-beta.5,v2.0.0-beta.5,False,True
3736953,2016-07-26T02:07:27Z,2016-07-26T02:07:00Z,,"### Fixed
- Fixed functional components with props causing wrapped components to lose reactivity
- Fixed transition appear check for nested components
- #3324 Fixed HTML tags in inline expression string literals being stripped
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3736953/assets,https://api.github.com/repos/vuejs/vue/releases/3736953,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-beta.4,https://github.com/vuejs/vue/releases/tag/v2.0.0-beta.4,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-beta.4,v2.0.0-beta.4,False,True
3726088,2016-07-24T02:48:10Z,2016-07-24T03:36:09Z,,"### New
- When used on a component, `v-on` can use the `.native` modifier to listen to native DOM events instead of component events:
  
  ``` html
  <my-comp @click.native=""onClick""></my-comp>
  ```
  
  When using render functions, native event handlers need to be nested under `nativeOn` instead of `on` in vnode data:
  
  ``` js
  render (h) {
    return h('my-comp', { nativeOn: { click: () => { ... }}})
  }
  ```
- `v-bind` can now be used to bind to DOM properties instead of attributes with the `.prop` modifier:
  
  ``` html
  <div :text-content.prop=""text""></div>
  ```
  
  The modifier also works for object `v-bind`, which will probably be more readable:
  
  ``` html
  <div v-bind.prop=""{ textContent: text }""></div>
  ```
- Functional components can now also accept slots. However, the slots are lazy evaluated - they are only resolved when you call the `context.slots()` function:
  
  ``` js
  Vue.component('example', {
    functional: true,
    render (h, ctx) {
      const slots = ctx.slots()
      slots.default // <-- access slot content like vm.$slots
    }
  })
  ```

### Breaking Changes
- Vnode data format change: now uses the `domProps` nested object for binding to DOM properties (instead of `props`):
  
  ``` js
  render (h) {
    h('div', { domProps: { innerHTML: '...' }})
  }
  ```
  
  The `props` object is now only used for binding **component props**.
- User watchers created via `vm.$watch` are now fired **before** component re-renders. This gives the user a chance to further update other state before the component re-render, thus avoiding unnecessary updates. For example, you can watch a component prop and update the component's own data when the prop changes.
  
  To do something with the DOM after component updates, just use the `updated` lifecycle hook.

### Fixed
- Fixed some edge cases in `<transition-group>` move animations.
- Fixed non-functional transition wrapper components not updating properly.
- Fixed client-side hydration failed check for elements with `v-html`/`v-text`.
- #3296 incorrect unknown element warning
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3726088/assets,https://api.github.com/repos/vuejs/vue/releases/3726088,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-beta.3,https://github.com/vuejs/vue/releases/tag/v2.0.0-beta.3,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-beta.3,v2.0.0-beta.3,False,True
3674909,2016-07-17T05:53:45Z,2016-07-17T05:56:33Z,,"## Breaking Changes

### Transition API Change

Unfortunately, we have to make some breaking changes to the transition API to ensure it works as expected in all cases when combined with the virtual-dom rendering layer. The good news is that the new API makes transition effects more declarative and flexible, and brings in a few new features.
- #### The `<transition>` component
  
  All single-element transition effects are now applied by wrapping the target element/component with the `<transition>` built-in component. This is an abstract component, which means it does not render an extra DOM element, nor does it show up in the inspected component hierarchy. It simply applies the transition behavior to the wrapped content inside.
  
  The simplest usage example:
  
  ``` html
  <transition>
    <div v-if=""ok"">toggled content</div>
  </transition>
  ```
  
  The component defines a number of props and events that maps directly to the old transition definition options:
  
  **Props**
  - **name: String**
    
    Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `.fade-enter-active`, etc. Defaults to `""v""`.
  - **appear: Boolean**
    
    Whether to apply transition on initial render. Defaults to `false`.
  - **css: Boolean**
    
    Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.
  - **mode: String**
    
    Controls the timing sequence of leaving/entering transitions. Available modes are `""out-in""` and `""in-out""`; defaults to simultaneous.
  - **enterClass, leaveClass, enterActiveClass, leaveActiveClass, appearClass, appearActiveClass: String**
    
    Individually configure transition CSS classes.
  
  Example applying transition to dynamic components:
  
  ``` html
  <transition name=""fade"" mode=""out-in"" appear>
    <component :is=""view""></component>
  </transition>
  ```
  
  **Events**
  
  Corresponds to the JavaScript hooks available in 1.x API.
  - **before-enter**
  - **enter**
  - **after-enter**
  - **before-leave**
  - **leave**
  - **after-leave**
  - **before-appear**
  - **appear**
  - **after-appear**
  
  Example:
  
  ``` html
  <transition @after-enter=""transitionComplete"">
    <div v-show=""ok"">toggled content</div>
  </transition>
  ```
  
  When the entering transition completes, the component's `transitionComplete` method will be called with the transitioned DOM element as the argument.
  
  **Difference from beta.1**
  
  The second `vm` argument has been removed, since now the hooks must be component methods and naturally has access to the owner component's `this` context. For `enter` and `leave` hooks, the presence of `cb` as the second argument indicates the user wants explicit control of the ending timing of the transition.
- #### The `<transition-group>` component
  
  All multi-element transition effects are now applied by wrapping the elements with the `<transition-group>` built-in component. It exposes the same props and events as `<transition>` does. The difference being that:
  1. Unlike `<transition>`, `<transition-group>` renders a real DOM element. By default it renders a `<span>`, and you can configure what element is should render via the `tag` prop. You can also use it with the `is` attribute, e.g. `<ul is=""transition-group"">`.
  2. `<transition-group>` does not support the `mode` prop.
  3. Every child in a `<transition-group>` must be **uniquely keyed**.
  
  Example:
  
  ``` html
  <transition-group tag=""ul"" name=""slide"">
    <li v-for=""item in items"" :key=""item.id"">
      {{ item.text }}
    </li>
  </transition-group>
  ```
  
  **Moving Transitions**
  
  `<transition-group>` supports **moving transitions** via CSS transform. When a child's position on screen has changed after an updated, it will get applied a moving CSS class (auto generated from the `name` prop or configured with the `moveClass` prop). If the CSS `transform` property is ""transition-able"" when the moving class is applied, the element will be smoothly animated to its destination using the [FLIP technique](https://aerotwist.com/blog/flip-your-animations/).
  
  See a [live demo](https://jsfiddle.net/yyx990803/yfpLvjxx/) here.
- #### Creating Reusable Transitions
  
  Now that transitions are applied via components, they are no longer considered an asset type, so the global `Vue.transition()` method and the `transition` option are both deprecated. You can just configure the transition inline with component props and events. But how do we create reusable transition effects now, especially those with custom JavaScript hooks? Well, the answer is creating your own transition components (they are particularly suitable as functional components):
  
  ``` js
  Vue.component('fade', {
    functional: true,
    render (createElement, { children }) {
      const data = {
        props: {
          name: 'fade'
        },
        on: {
          beforeEnter () { /* ... */ }, // <-- Note hooks use camelCase in JavaScript (same as 1.x)
          afterEnter () { /* ... */ }
        }
      }
      return createElement('transition', data, children)
    }
  })
  ```
  
  You can then use it like this:
  
  ``` html
  <fade>
    <div v-if=""ok"">toggled content</div>
  </fade>
  ```

## Fixed
- #3259 fix slot names incorrectly passed down to nested children
- Fix incorrect component warning for `<body>` and `<aside>` (@tommyZZM)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3674909/assets,https://api.github.com/repos/vuejs/vue/releases/3674909,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-beta.2,https://github.com/vuejs/vue/releases/tag/v2.0.0-beta.2,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-beta.2,v2.0.0-beta.2,False,True
3611142,2016-07-07T21:53:22Z,2016-07-07T21:57:15Z,,"## Vue 2.0 is now in beta phase!

This means the API and feature set is now considered complete, and we will try our best at avoiding further breaking changes until the official 2.0 release. The team will now focus on stability, documentation and updating supporting libraries e.g. `vue-router` to work with 2.0.

**Note:** if you are upgrading from a previous 2.0-alpha and using `vue-loader` or `vueify`, make sure to fully re-install your npm dependencies.

## Changes from 2.0.0-alpha.8

### Fixed
- #3176 fix `v-for` list update edge case
- #3179 fix `v-model` on component value always casted to string
- various other internal stability fixes

### Breaking Changes
- Custom directive change:
  - `update` hook will now **always be called** when the component is updated. This makes the lifecycle more consistent with the new rendering model. The user can simply check for `binding.value !== binding.oldValue` to persist the old behavior, or always perform the update (e.g. when the directive is bound to an object that might be mutated instead of replaced).
  - hook naming change: `postupdate` -> `componentUpdated`.
- Transition hooks naming change (now same with 1.x):
  - `onEnter` -> `enter`
  - `onLeave` -> `leave`
- Server-side rendering:
  - The component-level caching option `server.getCacheKey` is renamed to `serverCacheKey` (no longer necessary to nest under the `server` block):
    
    ``` js
    export default {
      // ...
      serverCacheKey: props => props.item.id
    }
    ```
  - `createRenderer` and `createBundleRenderer` no longer uses `lru-cache` as the default cache implementation. The user is now responsible for providing the cache implementation which should adhere to the following interface:
    
    ``` js
    {
      get: (key: string, [cb: Function]) => string | void,
      set: (key: string, val: string) => void,
      has?: (key: string, [cb: Function]) => boolean | void // optional
    }
    ```
    
    For more details, see [docs for SSR caching](https://github.com/vuejs/vue/tree/next/packages/vue-server-renderer#cache).
- Functional component `render` function signature change:
  
  The first argument is still `h` which is `$createElement` bound to the parent instance. Everything else is now passed in the second argument which is a context object:
  
  ``` js
  export default {
    functional: true,
    render (h, context) {
      // extracted and validated props for the functional component itself
      context.props
  
      // raw data for the functional component's vnode
      // without extracted props
      context.data
  
      // **a function** that returns the child elements
      // nested inside the functional component's tag
      context.children
  
      // the parent component instance
      context.parent
    }
  }
  ```
  
  This avoids having to remember the argument order and makes it easier when you only need some of the arguments:
  
  ``` js
  export default {
    functional: true,
    render (h, { data, children }) {
      // simple identity higher-order component
      return h(SomeOtherComponent, data, children)
    }
  }
  ```
  
  Notably, `context.children` is now a **function** instead of already resolved children Array. This is because in most cases when you create a higher-order-component, you will be passing the children function down directly so that it can be invoked in the proper component for better dependency tracking.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3611142/assets,https://api.github.com/repos/vuejs/vue/releases/3611142,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-beta.1,https://github.com/vuejs/vue/releases/tag/v2.0.0-beta.1,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-beta.1,v2.0.0-beta.1,False,True
3544118,2016-06-28T20:58:28Z,2016-06-28T21:18:25Z,,"### Fixed
- #3104 fixed 1.0.25 regression: `v-model` on off-DOM `<select>` causing infinite update loop
- #3101 fixed the ""pluralize"" filter with multi arguments, when selected argument is empty string (@nervgh)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3544118/assets,https://api.github.com/repos/vuejs/vue/releases/3544118,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.26,https://github.com/vuejs/vue/releases/tag/v1.0.26,https://api.github.com/repos/vuejs/vue/zipball/v1.0.26,v1.0.26,False,False
3537307,2016-06-28T09:03:11Z,2016-06-28T09:04:14Z,,"### Fixed
- vdom edge case patch error
- `keep-alive` incorrectly destroying child components of inactive component
- dependencies for `vue-server-renderer`
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3537307/assets,https://api.github.com/repos/vuejs/vue/releases/3537307,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-alpha.8,https://github.com/vuejs/vue/releases/tag/v2.0.0-alpha.8,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-alpha.8,v2.0.0-alpha.8,False,True
3535438,2016-06-28T02:25:13Z,2016-06-28T02:53:10Z,,"### Breaking Changes
- The `init` lifecycle hook has been renamed to `beforeCreated`.
- JavaScript transition hooks now receive the context Vue instance as the second argument:
  
  ``` js
  Vue.transition('example', {
    onEnter (el, vm) {
      // ...
    }
  })
  ```

### New
- `$createElement` can now omit the data argument if no data is needed. If the second argument is truthy and is not an Object, it will be treated as the children.
  
  ``` js
  render (h) {
    // before
    return h('div', null, 'hello')
    // after
    return h('div', 'hello')
  }
  ```
- SSR: Now supports bundle renderer, which runs a pre-bundled app script in a fresh context for each render. This eliminates the need for structuring your application without global state just for the sake of server-side rendering.
- SSR: Now supports component-level caching via `server.getCacheKey` option.
- `Vue.config.errorHandler` now also captures errors thrown in user watcher callbacks.

### Fixed
- #3140 fix v-model `.number` conversion for non-number input
- fix CSS animation initial frame flash
- fix SSR client-side hydration on merged text nodes
- #3155 fix `v-once` when used with `v-for`
- #3157 fix id-resolved transition with `appear: true`
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3535438/assets,https://api.github.com/repos/vuejs/vue/releases/3535438,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-alpha.7,https://github.com/vuejs/vue/releases/tag/v2.0.0-alpha.7,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-alpha.7,v2.0.0-alpha.7,False,True
3502337,2016-06-22T19:33:54Z,2016-06-22T19:52:03Z,,"### New
- Now works with vue-devtools 2.0.0!
- Properly support number keyCodes and custom keyCodes in `v-on`. Custom keyCodes can be defined in `Vue.config.keyCodes`:
  
  ``` js
  Vue.config.keyCodes.a = 65
  ```
  
  ``` html
  <input @keyup.a=""aPressed"">
  ```
- The `binding` object in custom directive hooks now exposes the raw expression as a string:
  
  ``` html
  <div v-custom=""msg""></div>
  ```
  
  ``` js
  Vue.directive('custom', {
    bind (el, binding) {
      console.log(binding.expression) // ""msg""
    }
  })
  ```

### Fixed
- #3133 Fixed computed properties dependency collection error
- #3137 Fixed template error detection incorrectly detecting keywords
- Fixed output for `undefined` and `null` values for `v-model`
- Fixed unary tags handling in single-file component parser
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3502337/assets,https://api.github.com/repos/vuejs/vue/releases/3502337,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-alpha.6,https://github.com/vuejs/vue/releases/tag/v2.0.0-alpha.6,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-alpha.6,v2.0.0-alpha.6,False,True
3470358,2016-06-17T18:22:51Z,2016-06-17T18:36:02Z,,"### New
- The `render` function now receives the component instance's `$createElement` method as its only argument. This avoids having to aliasing `this.$createElement` to something less verbose:
  
  ``` js
  Vue.extend({
    render (h) {
      return h('div', null, 'hello!')
    }
  })
  ```
- **Functional components:**
  
  A component can be defined as a stateless functional component with `functional: true`.
  - A functional component **has no instance** and is simply a function that receives props and children vnodes via arguments, and also return vnode(s).
  - Unlike stateful components, functional components are not restricted by the ""single root node"" rule and can return an Array of multiple vnodes.
  - A functional component's render function receives the following arguments:
    - `createElement`: the parent component's `$createElement` method.
    - `props`: an object containing props
    - `children`: children inside the component's tag as vnodes
  
  Example usage:
  
  ``` js
  Vue.component('wrap-with-tag', {
    functional: true,
    props: ['tag'],
    render (h, props, children) {
      return h(props.tag, null, children)
    }
  })
  ```
  
  When used in template:
  
  ``` html
  <wrap-with-tag tag=""div"">hello</wrap-with-tag>
  ```
  
  Will render:
  
  ``` html
  <div>hello</div>
  ```

### Breaking Changes
- `v-ref` is now no longer a directive: it is now a special attribute similar to `key` and `transition`:
  
  ``` html
  <!-- before -->
  <comp v-ref:foo></comp>
  
  <!-- after -->
  <comp ref=""foo""></comp>
  ```
  
  Dynamic ref bindings are now also supported:
  
  ``` html
  <comp :ref=""dynamicRef""></comp>
  ```
- The `<render>` tag is removed in favor of stateless functional components.
- It is now prohibited to replace a component instance's root `$data`. This prevents some edge cases in the reactivity system and makes the component state more predictable (especially with type-checking systems).
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3470358/assets,https://api.github.com/repos/vuejs/vue/releases/3470358,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-alpha.5,https://github.com/vuejs/vue/releases/tag/v2.0.0-alpha.5,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-alpha.5,v2.0.0-alpha.5,False,True
3463434,2016-06-16T22:29:31Z,2016-06-16T22:33:16Z,,"### New
- `mixins` option can now use constructors returned by `Vue.extend` in addition to plain objects. (@ktsn)

### Fixed
- fix unknown element warning for `<details>` etc in Firefox
- #2890 fix `json` filter with 0 indent (@posva)
- #2983 fix v-model select initial value edge cases in IE
- #2988 fix falsy value output for one time text bindings (@dsonet)
- #2993 fix comment inside `<template>` being treated as string (@simplesmiler)
- #3027 fix MutationObserver-related issues in iOS 9.3 UIWebView (@miccycn)
- #3039 fix component local name option being overwritten by global registration (@kazupon)
- #3062 fix multi-line expression inside HTML interpolation
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3463434/assets,https://api.github.com/repos/vuejs/vue/releases/3463434,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.25,https://github.com/vuejs/vue/releases/tag/v1.0.25,https://api.github.com/repos/vuejs/vue/zipball/v1.0.25,v1.0.25,False,False
3460932,2016-06-16T17:00:55Z,2016-06-16T17:04:38Z,,"### New
- `Vue.config.ignoredElements`: an Array of element tag names to ignore during render. Elements listed in this option will be rendered as plain elements instead of components.

### Fixed
- Wrong `v-for` alias check regex in template compilation error detection
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3460932/assets,https://api.github.com/repos/vuejs/vue/releases/3460932,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-alpha.4,https://github.com/vuejs/vue/releases/tag/v2.0.0-alpha.4,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-alpha.4,v2.0.0-alpha.4,False,True
3452476,2016-06-15T18:22:40Z,2016-06-15T18:27:21Z,,"### Breaking Changes
- When used with `vue-loader` or `vueify` for the scoped CSS feature, content inserted via `<slot>` will be affected by scoped styles in **both the parent and the child**, similar to the root element of the child component. This allows the child component to apply scoped styles to inserted content, although this also means the child component needs to be more careful about its selectors.

### Fixed
- Improved template error detection (fixed a number of false alarms)
- Properly HTML-encode text in server-side rendering.
- Properly support scoped CSS attributes in server-side rendering.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3452476/assets,https://api.github.com/repos/vuejs/vue/releases/3452476,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-alpha.3,https://github.com/vuejs/vue/releases/tag/v2.0.0-alpha.3,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-alpha.3,v2.0.0-alpha.3,False,True
3436212,2016-06-13T23:36:47Z,2016-06-13T23:39:42Z,,"### Breaking Changes
- `v-for` iteration syntax change: see #3073

### Fixed
- Fixed nested `<template>` handling in single-file component parser
- #3054 components not correctly copying static render functions from options (@simplesmiler)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3436212/assets,https://api.github.com/repos/vuejs/vue/releases/3436212,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-alpha.2,https://github.com/vuejs/vue/releases/tag/v2.0.0-alpha.2,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-alpha.2,v2.0.0-alpha.2,False,True
3422168,2016-06-10T23:25:16Z,2016-06-10T23:30:28Z,,"This is the first release of 2.0.
- Recommended for: experiments, prototypes, upgrading small, non-critical 1.x apps
- **NOT** recommended for: production use, upgrading production 1.x apps

Documentation still needs to be worked on. In the meanwhile for changes from 1.x and upgrade information, please refer to [this thread](https://github.com/vuejs/vue/issues/2873).

There is also a [recorded video](https://www.youtube.com/watch?v=c9esL3I4IGM) of the livestream session that went through some of the major changes in 2.0.

### Installation
- [Built files](https://github.com/vuejs/vue/tree/bffb9d1ceafded186beeec8bf62c14b728ee71f7/dist)
- From npm: `npm install vue@next`
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3422168/assets,https://api.github.com/repos/vuejs/vue/releases/3422168,dev,https://api.github.com/repos/vuejs/vue/tarball/v2.0.0-alpha.1,https://github.com/vuejs/vue/releases/tag/v2.0.0-alpha.1,https://api.github.com/repos/vuejs/vue/zipball/v2.0.0-alpha.1,v2.0.0-alpha.1,False,True
3206671,2016-05-11T21:57:29Z,2016-05-11T22:01:24Z,,"### Fixed
- #2852 fixed regression in 1.0.23 that breaks app if the page contains iframes with different origins.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3206671/assets,https://api.github.com/repos/vuejs/vue/releases/3206671,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.24,https://github.com/vuejs/vue/releases/tag/v1.0.24,https://api.github.com/repos/vuejs/vue/zipball/v1.0.24,v1.0.24,False,False
3204130,2016-05-11T16:20:50Z,2016-05-11T16:24:51Z,,"### Fixed
- #2821 fix prop watcher not firing when change is triggered from another watcher
- #2831 fix `ready` hook not firing when instance is mounted into iframes
- #2837 fix `<template slot>` content disappearing on subsequent mounts
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3204130/assets,https://api.github.com/repos/vuejs/vue/releases/3204130,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.23,https://github.com/vuejs/vue/releases/tag/v1.0.23,https://api.github.com/repos/vuejs/vue/zipball/v1.0.23,v1.0.23,False,False
3178762,2016-05-07T21:59:16Z,2016-05-07T22:02:23Z,,"### New
- new option: `propsData`. This option allows you to pass props to an instance created imperatively with `new` without having to wrap it in a parent instance. This is primarily intended to make unit testing easier. [docs](http://vuejs.org/api/#propsData)
- new option: `extends`. Allows declaratively extending another component (could be either a plain options object or a constructor) without having to use `Vue.extend`. This is primarily intended to make it easier to extend between single file components. (@pespantelis) [docs](http://vuejs.org/api/#extends)
- #2676 Added support for decimal places in currency filter (@phanan) [docs](http://vuejs.org/api/#currency)

### Fixed
- #2642 reserve non-resolved `is` attribute for native custom elements
- #2659 exclude `.capture` from `v-on` key filters (@eric6356)
- #2663 fix handling v-if along with v-for on a template tag (@simplesmiler)
- #2666 remove `:is` attribute even when component is cached (@GuillaumeLeclerc)
- #2670 ensure dynamic method resolution for component inline v-on
- #2674 fix async update in WeChat browser (@duanjun)
- #2686 fix deep watch on objects with circular references (@flytreeleft)
- #2687 fix `data` function being called twice (@blake-newman)
- #2707 fix modifiers being incorrectly passed to terminal directives (@blake-newman)
- #2723 default slot should use fallback content if it has only whitespace
- #2731 fix `Vue.delete` when used on a Vue instance (@Jinjiang)
- #2745 handle v-for anchor position when moved by external lib
- #2750 ensure correct watcher invocation order for changes triggered inside user watchers
- #2773 fix `v-model` cursor position by only setting value property when value is changed (@zigomir)
- #2789 do not merge empty class on component placeholder
- #2805 treat template tags as string templates to workaround iOS Safari 9 crash bug
- #2808 `v-bind:class` multiple class names support for array syntax
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/3178762/assets,https://api.github.com/repos/vuejs/vue/releases/3178762,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.22,https://github.com/vuejs/vue/releases/tag/v1.0.22,https://api.github.com/repos/vuejs/vue/zipball/v1.0.22,v1.0.22,False,False
2976562,2016-04-07T22:08:01Z,2016-04-07T22:13:11Z,,"### New
- Component prop type can now be an array of types (@ealves-pt):
  
  ``` js
  props: {
    myProp: [String, Number] // can either be a string or a number
  }
  ```
- Most of the warnings now come with the name of the component it is found in (if a name is available).
- Runtime warnings now use `console.error`, which means they come with stack traces by default. Setting `Vue.config.debug = true` now only enables comment anchor nodes.
- `orderBy` filter improvements (@posva)
  
  The `orderBy` array filter can now accept:
  - multiple sort keys, or
  - an array of sort keys, or
  - a custom comparator function (same with the comparator used in `Array.prototype.sort`)
  
  See [updated docs](http://vuejs.org/api/#orderBy) for examples.
- `:class` bindings now support using a string of multiple classes (@phanan):
  
  ``` html
  <div :class=""{ 'a b c': true }""></div>
  ```
- `track-by` for `v-for` can now accept a path instead of a simple key.

### Fixed
- #2567 fix IE9 inline style bindings that need vendor prefix
- #2573 ensure `v-if` and `v-for` compilation order is not dependent on appearance order. (`v-for` always comes first)
- #2580 initially invalid props should still be reactive
- #2593 fix explicitly setting `Vue.config.devtools` to non-default value
- #2606 prop coercion should be applied to default values (@simplesmiler)
- #2620 text parser should not remove newlines, also fix cache hit (@sirlancelot)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2976562/assets,https://api.github.com/repos/vuejs/vue/releases/2976562,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.21,https://github.com/vuejs/vue/releases/tag/v1.0.21,https://api.github.com/repos/vuejs/vue/zipball/v1.0.21,v1.0.21,False,False
2893601,2016-03-26T21:20:06Z,2016-03-26T21:28:40Z,,"**This is a small patch release with only bug fixes. There were a few new features in [1.0.19](https://github.com/vuejs/vue/releases/v1.0.19) - make sure to check it out.**

### Fixed
- #2563 Fixed error in custom terminal directive implementation that caused infinite loop. (@kazupon)
- #2565 Fixed camelCase <-> kebab-case conversion for custom directive params
- #2569 Fixed reactivity for prop default values
- #2566 Fixed activate hook + keep-alive transition error
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2893601/assets,https://api.github.com/repos/vuejs/vue/releases/2893601,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.20,https://github.com/vuejs/vue/releases/tag/v1.0.20,https://api.github.com/repos/vuejs/vue/zipball/v1.0.20,v1.0.20,False,False
2886705,2016-03-25T07:19:18Z,2016-03-25T07:36:14Z,,"### New
- **Custom terminal directives:** It is now possible to author custom terminal directives (like `v-if` and `v-for`). See [docs](http://vuejs.org/guide/custom-directive.html#terminal) for details. (@kazupon)
- **Improved `v-bind:class` syntax:** It is now possible to mix objects inside arrays (@FadyMak):
  
  ``` html
  <div :class=""[classOne, { classTwo: true, classThree: false }]"">
  </div>
  ```
- `is` attribute can now be bound to an actual component constructor in addition to string Ids. This makes it possible to pass down components as props and then render it using dynamic component:
  
  ``` html
  <!-- pass the registered ""item"" component as a prop -->
  <example :component=""$options.components.item"">
  </example>
  ```
  
  Inside `<example>`'s template:
  
  ``` html
  <!-- just bind ""is"" to the passed component -->
  <component :is=""component""></component>
  ```

### Fixed
- **1.0.18 regression**: `data` functions that do not return an object should not cause a crash. A warning has also been added. (#2517, #2528)
- **1.0.18 regression**: fixed a few cases where props reactivity not working as intended. (#2516, #2549)
- #2542 fixed elements with transition occasionally stuck on leave when removed right after enter.
- Boolean props in the form of `a=""a""` should be interpreted as `true`, just like HTML boolean attributes. This also deals with cases where `html-minifier` auto expands boolean props with no value.
- Fixed cases in IE9 where classes are not merged properly during transclusion.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2886705/assets,https://api.github.com/repos/vuejs/vue/releases/2886705,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.19,https://github.com/vuejs/vue/releases/tag/v1.0.19,https://api.github.com/repos/vuejs/vue/zipball/v1.0.19,v1.0.19,False,False
2837070,2016-03-18T00:37:42Z,2016-03-18T00:50:20Z,,"### New
- Due to security concerns, the devtools hooks are now disabled in production builds by default. However, you can explicitly enable it by setting:
  
  ``` js
  Vue.config.devtools = true
  ```
- Vue's internal observation mechanism has been improved to allow you to take advantage of data that are supposed to be immutable. A common use case is when you are simply replacing a huge data structure that you know will never be mutated with a fresh copy. You can now freeze it with `Object.freeze` and Vue will skip the getter/setter conversion (including its nested values) for that object.
  
  As a reference, in the DBMonster benchmark, simply freezing the data results in 50%+ FPS increase.
- Decent performance improvement (~15%) to watcher's dependency collection process.

### Fixed
- Dynamic slot names were disabled in last version, but is now available again.
- #2424 fix async queue scheduling: new watchers should not be triggered before current watcher's callback is complete.
- #2426 fix error when merging classes with extra whitespace during transclusion.
- #2435 fix slot resolution inside template tags
- #2445 fix attached/ready hooks not called for child components when parent component uses an async activate hook and is inside a fragment.
- #2491 fix two-way filter regression on blur
- #2500 fix template-parser wrongly wrapping certain custom elements as SVG
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2837070/assets,https://api.github.com/repos/vuejs/vue/releases/2837070,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.18,https://github.com/vuejs/vue/releases/tag/v1.0.18,https://api.github.com/repos/vuejs/vue/zipball/v1.0.18,v1.0.18,False,False
2706851,2016-02-29T01:17:19Z,2016-02-29T02:12:04Z,,"### New
- `v-for` now also supports using `of` as the delimiter:
  
  ``` html
  <div v-for=""item of items""></div>
  ```
- `Vue.config.convertAllProperties` is now enabled by default, and this config option has been removed.
- keyCode aliases are now exposed as `Vue.directive('on').keyCodes`. For example you can define a custom key modifier:
  
  ``` js
  Vue.directive('on').keyCodes.f1 = 112
  ```
- The internal transition API is now exposed on `Vue.transition`. For example [this function](https://github.com/vuejs/vue/blob/9e64586fda793e1197edf7450eeb3f9b28f67461/src/transition/index.js#L51-L63) will be exposed as `Vue.transition.applyTransition`. For example usage, see [v-show's source code](https://github.com/vuejs/vue/blob/9e64586fda793e1197edf7450eeb3f9b28f67461/src/directives/public/show.js#L23). **Note: this is an internal API exposed for advanced use cases - the API may change.**

### Fixed
- #2278 allow expressions for literal values in root instance props
- #2287 fix transition hooks call context to be consistent with compilation scope rules
- #2291 fix CSP build minification error
- #2297 avoid implicit reference to global variables (fix usage in NW.js)
- #2300 fix currency filter negative number display
- #2305 fix multiple activate hooks merging
- #2312 fix named/default slot distribution when a slot is passed down as content to a child
- #2345 improve real custom element detection to avoid unnecessary warnings
- #2348 fix slot with `v-if` fallback compilation scope
- #2364 fix expression parsing with ES6 template strings (note: this only fixes the expression parsing, it still depends on whether the browser natively supports ES6 template strings)
- #2366 fix custom terminal directive with global mixin (@rhyzx)
- #2393 fix observing objects with enumerable but non-configurable properties (@saul)
- #2396 fix SVG element transition detection in Chrome
- #2400 fix `v-model` with `debounce` value not immediately synced on form submission
- #2406 fix SVG element fragment linker caching in IE
- #2407 fix `v-bind` value for non-boolean enumerable attributes that expects `""true""` or `""false""` values, e.g. `draggable`
- #2411 `null` or `undefined` should not trigger type check warning for a non-required prop
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2706851/assets,https://api.github.com/repos/vuejs/vue/releases/2706851,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.17,https://github.com/vuejs/vue/releases/tag/v1.0.17,https://api.github.com/repos/vuejs/vue/zipball/v1.0.17,v1.0.17,False,False
2521974,2016-01-30T09:41:39Z,2016-01-30T10:31:17Z,,"### New
- Improved `v-for` re-rendering performance in production mode.
- Vue Devtools is now supported in production builds as well.
- New modifier for `v-on`: `.capture`. Attach the event listener in capture mode.
- New modifier for `v-on`: `.self`. Only triggers the handler if the event was dispatched from the element itself, i.e. `e.target === e.currentTarget`.
- New modifier for `v-bind`: `.camel`, which converts the bound attribute name back to camelCase. This is a workaround for dynamically binding SVG valid camelCase attributes, e.g. `viewBox`, because the browser parses `:viewBox` as `:viewbox`.
  
  Example:
  
  ``` html
  <svg :view-box.camel=""viewBoxValue""></svg>
  ```
- The `.delete` key modifier for `v-on` now also gets triggered on Backspace (which is ""delete"" on Mac keyboards). (@thecrypticace)

### Fixed
- When manually creating a Vue instance, the props can be passed in via the `data` option and it will no longer cause a warning.
- #2144 when a inserted slot element is toggled off by `v-if`, the slot's fallback content will be rendered instead.
- #2169 when binding attributes with `v-bind`, the boolean value `true` now renders to an empty attribute value. This makes the rendered result more consistent with the [HTML5 spec](https://www.w3.org/TR/html5/infrastructure.html#boolean-attributes). If the value `""true""` is desired, then the value passed to `v-bind` should be an actual string rather than a boolean value. (@rhyzx)
- #2199 fix `v-model` jQuery < 1.7 compatibility
- #2206 fix `v-else` fragment not properly destroyed on instance teardown.
- #2219 fix `v-style` prefix detection for `-webkit-filter` in Chrome.
- #2242 fix literal prop handling for negative numbers when used on root instance.
- #2253 templates that has comments outside the root node no longer gets parsed as fragment instances.
- #2254 avoid asset resolution error when asset id is not a string
- #2265 fix v-for range edge cases (when value is NaN)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2521974/assets,https://api.github.com/repos/vuejs/vue/releases/2521974,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.16,https://github.com/vuejs/vue/releases/tag/v1.0.16,https://api.github.com/repos/vuejs/vue/zipball/v1.0.16,v1.0.16,False,False
2448139,2016-01-18T19:43:44Z,2016-01-18T19:58:14Z,,"### Fixed
- Fixed npm distributed build not stripping development-only code when used in Webpack/Browserify production builds.
- #2145 `v-for` now works better with Sortable.
- #2161 fix fragment GC (@elsassph)
- #2163 fix slot duplicated insertion when used with `v-if`
- #2182 improve template parser cache hit (@tgeorgiev) 
- #2183 fix cache size bug when putting multiple entries with the same key (@tgeorgiev)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2448139/assets,https://api.github.com/repos/vuejs/vue/releases/2448139,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.15,https://github.com/vuejs/vue/releases/tag/v1.0.15,https://api.github.com/repos/vuejs/vue/zipball/v1.0.15,v1.0.15,False,False
2408110,2016-01-11T20:12:26Z,2016-01-11T20:57:35Z,,"### New
- Transition definitions can now specify the type of CSS effect it should wait for, either `transition` or `animation`. This is only necessary in situations where you explicitly want Vue's transition system to only care about one type while being able to use the other type. For example, you may want Vue's transition to be based on a CSS animation, but the element also has CSS transition effects on hover.
  
  Example:
  
  ``` js
  Vue.transition('fade', {
    type: 'animation' // only wait for `animationend` events.
  })
  ```
- Transition definitions can now specify the `enterClass` and `leaveClass` for CSS-based transitions. This will override the conventional class names. Useful when you want to combine Vue's transition system with an existing CSS animation library, e.g. [Animate.css](https://daneden.github.io/animate.css/).
  
  Example:
  
  ``` js
  Vue.transition('bounce', {
    type: 'animation',
    enterClass: 'bounceInLeft',
    leaveClass: 'bounceOutRight'
  })
  ```
  
  ``` html
  <div v-show=""ok"" class=""animated"" transition=""bounce"">
    Watch me bounce
  </div>
  ```

### Fixed
- #2083 avoid v-model with lazy firing twice on focus/blur
- #2085 transclude class merging should skip interpolated class
- #2097 one-time interpolations should now work properly inside attributes
- #2100 fix evaluation errors when `v-if` is toggled with transitions
- #2102 fix custom event propagation forwarding in inline statements (@rhyzx)
- #2105 auto cast values to numbers in limitBy
- #2118 fix literal value props with filters
- #2137 allow empty expressions in terminal directives (@rhyzx)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2408110/assets,https://api.github.com/repos/vuejs/vue/releases/2408110,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.14,https://github.com/vuejs/vue/releases/tag/v1.0.14,https://api.github.com/repos/vuejs/vue/zipball/v1.0.14,v1.0.14,False,False
2339325,2015-12-24T22:39:37Z,2015-12-25T03:49:15Z,,"### Fixed
- `Array.prototype.$set(index, value)` now automatically casts the first argument to number. (@pespantelis)
- Fixed `vm.$watch` callback not guaranteed to fire after all internal watchers. (@gebilaoxiong)
- #2064 fix prop two-way sync not working in `created` hook
- #2068 fixed value interpolation erasing initial value when used in combination with `v-model`
- #2072 avoid reversing object keys enumeration order when observing objects in Safari (@yuhere & @galenyuan)
- #2075 fixed class interpolation regression (@pespantelis)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2339325/assets,https://api.github.com/repos/vuejs/vue/releases/2339325,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.13,https://github.com/vuejs/vue/releases/tag/v1.0.13,https://api.github.com/repos/vuejs/vue/zipball/v1.0.13,v1.0.13,False,False
2308399,2015-12-17T23:12:09Z,2015-12-17T23:15:17Z,,"### New
- New prop option: `coerce` (@lepture)
  
  You can now provide a `coerce` function when defining a prop - every time the prop is updated from the parent, it will be passed through the `coerce` function. You can think of it as a one-way filter for props, but defined in the child component.
  
  ``` js
  export default {
    props: {
      msg: {
        type: String,
        coerce: function (val) {
          return val + '' // cast potential values to a string
        }
      }
    }
  }
  ```

### Fixed
- #2001 fix IE9 class merging with both `class` and `:class` during transclusion
- #2015 handle 0 properly when using v-bind for input value
- #2017 prevent v-model syncing value on blur after fragment is removed
- #2021 improve template parser when parsing plain strings containing HTML entities
- #2022 fix `v-show` stuck when it is compiled on out-of-dom element
- #2023 avoid `v-model` attempting to sync value after debounce when it is already unbound
- #2026 fix `v-pre` error when used on component root node
- #2028 avoid debounce on blur for `v-model`
- #2035 fix SVG class interpolation regression
- #2036 non-deep watchers now fire properly when an object's structure has been changed by `Vue.set` or `Vue.delete`.
- #2042 fix `v-bind` when binding `muted` attribute on `<video>` elements
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2308399/assets,https://api.github.com/repos/vuejs/vue/releases/2308399,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.12,https://github.com/vuejs/vue/releases/tag/v1.0.12,https://api.github.com/repos/vuejs/vue/zipball/v1.0.12,v1.0.12,False,False
2263606,2015-12-10T05:00:07Z,2015-12-10T05:17:18Z,,"### New
- `Vue.set(obj, key, val)` now returns the set value.
- Inline statement handlers for a `v-on` on component custom events now has access to the special `$arguments` property:
  
  ``` html
  <my-component @some-event=""handle($arguments[0])""></my-component>
  ```
  
  ``` js
  // inside my-component
  // parent's `handle` method gets 'hello!' as the argument
  this.$emit('some-event', 'hello!')
  ```

### Fixed
- #1929 fix character escaping in expressions
- #1935 fix parsing expressions with dynamic subpath in the form of `['prefix'+i+'suffix']`
- #1946 fix transclusion class merging in IE9
- #1960 fix class interpolations not working with transitions
- #1965 (1) fix default `<slot>` not rendering correct content when another named slot is present, and when both slots are inside a `v-if` fragment.
- #1965 (2) fix default `<slot>` not rendering fallback content when all other content has been selected by named slots.
- #1966 fix `$destroy(true)` not triggering ""detached"" hook on nested children (@tgeorgiev)
- #1985 fix `v-model` checkbox/radio initial value issue (only happens with the combination of `v-for` and Chrome's overly-smart back button input state restoration behavior)
- #1995 fix Observer error when using `vue-router` in Android 5.0 (should be a bug in Android 5.0 but we can work around it)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2263606/assets,https://api.github.com/repos/vuejs/vue/releases/2263606,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.11,https://github.com/vuejs/vue/releases/tag/v1.0.11,https://api.github.com/repos/vuejs/vue/zipball/v1.0.11,v1.0.11,False,False
2173136,2015-11-23T19:59:13Z,2015-11-23T20:00:48Z,,"Fixed `Vue.version` from [1.0.9](https://github.com/vuejs/vue/releases/tag/v1.0.9).
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2173136/assets,https://api.github.com/repos/vuejs/vue/releases/2173136,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.10,https://github.com/vuejs/vue/releases/tag/v1.0.10,https://api.github.com/repos/vuejs/vue/zipball/v1.0.10,v1.0.10,False,False
2172973,2015-11-23T19:29:33Z,2015-11-23T19:32:57Z,,"### Known Issue

The distributed file on CDNs and NPM will expose the incorrect version (`Vue.version = '1.0.8'`). Fixed in [1.0.10](https://github.com/vuejs/vue/releases/tag/v1.0.10).

### New Build Setup
- The source code now uses ES2015 modules and leverages a more efficient build setup. This results in slightly better script parse time and smaller build size.
- When installed via NPM and used with a module bundler (Webpack/Browserify), the main file is now a pre-bundled single file (`dist/vue.common.js`), which should also make builds faster.
- Contributors: please note the build setup has changed. Here's the [updated instructions](https://github.com/vuejs/vue/blob/dev/CONTRIBUTING.md#development-setup).

### Fixed
- #1797 `v-model` and `vm.$set` can now properly initialize non-existent dynamic paths such as `""a[b + 'c']""`.
- #1800 properly preserve whitespace inside raw HTML interpolations
- #1806 avoid duplicate classes during transclusion
- #1816 Fix error when using `Vue.set` and `Vue.delete` on objects created via `Object.create(null)` (@kazupon)
- #1839 Fix event propagation check when there are chained emits.
  - Note this fix changes an undocumented behavior of `vm.$emit`: previously it returns the `vm` itself. Now it returns a boolean value representing whether the event should propagate. **Do not rely on any behavior that is not officially documented.**
- #1850 Fix `v-ref` on elements with both `v-for` and `v-if`.
- props with wrong types on initialization are now still set up with reactivity.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2172973/assets,https://api.github.com/repos/vuejs/vue/releases/2172973,dev,https://api.github.com/repos/vuejs/vue/tarball/v1.0.9,https://github.com/vuejs/vue/releases/tag/v1.0.9,https://api.github.com/repos/vuejs/vue/zipball/v1.0.9,v1.0.9,False,False
2118407,2015-11-12T21:58:49Z,2015-11-12T22:01:22Z,,"### New
- Added support for pre-defined getters/setters on data objects. This feature is off by default and must be turned on by setting `Vue.config.convertAllProperties = true`, since it comes with a small performance cost. (@jdavidberger)
- `v-on` key modifiers now also support all single letters. (@yulon)
- `props` options now supports using prop objects in array syntax again.

### Fixed
- Observer should no longer throw errors when trying to observe objects created via `Object.create(null)`. (@kazupon)
- Fixed an edge case in IE where text interpolations are not processed due to IE randomly splitting the text nodes into multiple adjacent ones.
- #1778 fix incorrect warning for two-way binding on `v-for` alias
- #1779 fix incorrect warning for `v-ref` on non-component elements
- #1781 fix `afterEnter` hook firing before transition finishes
- #1786 fix `$event` variable for `v-on` inline statement handlers with filters
- #1791 avoid `v-for` re-rendering when using `v-model` on primitive values
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2118407/assets,https://api.github.com/repos/vuejs/vue/releases/2118407,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.8,https://github.com/vuejs/vue/releases/tag/1.0.8,https://api.github.com/repos/vuejs/vue/zipball/1.0.8,1.0.8,False,False
2085643,2015-11-06T16:37:59Z,2015-11-06T17:27:49Z,,"### Fixed
- #1724 `v-ref` regression when used on `<router-view>`
- #1727 Boolean props not working properly
- #1729 Unnecessary `is` attribute warning
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2085643/assets,https://api.github.com/repos/vuejs/vue/releases/2085643,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.7,https://github.com/vuejs/vue/releases/tag/1.0.7,https://api.github.com/repos/vuejs/vue/zipball/1.0.7,1.0.7,False,False
2079785,2015-11-05T19:52:33Z,2015-11-05T19:54:27Z,,"> Skipped 1.0.5 because it contains an incorrect dist file.

### New
- The `limitBy` filter now also accepts a second argument which is the starting offset. (@Mat-Moo)
- Added warning for mixed usage of mustache interpolation and `v-bind` for the `class` attribute.

### Fixed
- `v-else` should no longer insert the block multiple times when the condition changes from one falsy value to another falsy value.
- #1669 Improved fragment instance ignored attribute check so it only warn at appropriate times.
- #1671 `$refs` should be reactive for `v-if` checks
- #1683 two-way props should sync properly when first mutating the value then replacing it.
- #1695 `$refs` should be updated when switching between components with `keep-alive`
- #1703 fixed an issue where IE treats an attribute and its `v-bind:` form as the same attribute. (@fergaldoyle)
- #1717 `v-show` should properly skip transition when element is detached. Also fixed behavior difference in Firefox and Chrome.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2079785/assets,https://api.github.com/repos/vuejs/vue/releases/2079785,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.6,https://github.com/vuejs/vue/releases/tag/1.0.6,https://api.github.com/repos/vuejs/vue/zipball/1.0.6,1.0.6,False,False
2079744,2015-11-05T19:36:21Z,2015-11-05T19:46:39Z,,,https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2079744/assets,https://api.github.com/repos/vuejs/vue/releases/2079744,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.5,https://github.com/vuejs/vue/releases/tag/1.0.5,https://api.github.com/repos/vuejs/vue/zipball/1.0.5,1.0.5,False,False
2052076,2015-10-31T20:39:36Z,2015-10-31T20:41:00Z,,"### New
- Better warning for ignored attributes on fragment instances.

### Changed
- Custom directives now have a default priority of 1000. This should make it be bound before most of the built-in directives (except components, partials, slots and flow-controls, of course). This is part of the fix for custom directive dynamic params and should not break existing usage.

### Fixed
- Fixed dynamic `params` for custom directives not working properly. (@kazupon)
- `v-for` context can now properly access parent scope's `$els` and `$refs`. (@TerenceZ)
- `v-bind` on object and `v-bind:class` on object are now in deep mode as expected.
- #1656 Fixed `v-on` filters not applied in correct scope when used with inline statements.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2052076/assets,https://api.github.com/repos/vuejs/vue/releases/2052076,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.4,https://github.com/vuejs/vue/releases/tag/1.0.4,https://api.github.com/repos/vuejs/vue/zipball/1.0.4,1.0.4,False,False
2036795,2015-10-29T02:13:44Z,2015-10-29T02:17:14Z,,"### New
- `v-bind` now support accepting an object without arguments, which would allow dynamic binding of multiple attributes:
  
  ``` html
  <div v-bind=""{ id: someProp, 'other-attr': otherProp }""></div>
  ```
  
  Note when using this syntax to bind `class` and `style`, only plain string values would work.
- `limitBy` filter:
  
  Limit the array to the first N items, as specified by the argument.
  
  ``` html
  <!-- only display first 10 items -->
  <div v-for=""item in items | limitBy 10""></div>
  ```

### Fixed
- #1479 `filterBy` should no longer return duplicate objects when using multiple search keys.
- User-defined component names should no longer be overwritten by option key names.
- Fix edge case for `v-for=""(key, val) in obj""` syntax where the key could be falsy. (@vprimachenko)
- #1639 Fix `title` as prop edge case in IE10/11 (@fergaldoyle)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2036795/assets,https://api.github.com/repos/vuejs/vue/releases/2036795,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.3,https://github.com/vuejs/vue/releases/tag/1.0.3,https://api.github.com/repos/vuejs/vue/zipball/1.0.3,1.0.3,False,False
2036748,2015-10-29T01:46:30Z,2015-10-29T01:59:56Z,,"Not recommended. See [1.0.3](https://github.com/vuejs/vue/releases/edit/1.0.3) instead.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2036748/assets,https://api.github.com/repos/vuejs/vue/releases/2036748,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.2,https://github.com/vuejs/vue/releases/tag/1.0.2,https://api.github.com/repos/vuejs/vue/zipball/1.0.2,1.0.2,False,False
2027567,2015-10-27T17:58:27Z,2015-10-27T18:01:37Z,,"### Fixed
- `v-for=""(index, val) in array""` now updates `index` properly.
- Fixed a memory leak issue when when replacing arrays with overlapping objects.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2027567/assets,https://api.github.com/repos/vuejs/vue/releases/2027567,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.1,https://github.com/vuejs/vue/releases/tag/1.0.1,https://api.github.com/repos/vuejs/vue/zipball/1.0.1,1.0.1,False,False
2022844,2015-10-27T01:40:11Z,2015-10-27T01:42:10Z,1.0.0 Evangelion,"> ""The fate of destruction is also the joy of rebirth."" - SEELE

## About the Release

Please read the [blog post](http://vuejs.org/2015/10/26/1.0.0-release/).

## Known Issues
- `v-for=""(index, val) in items""` syntax doesn't update the `index` properly. This has been fixed in `dev` branch and will be out in 1.0.1.

## Upgrade Guide

### General Tips
- If you are familiar with 0.12. or upgrading an active app from 0.12:
  1. Read through the [notable changes](#notable-changes) below to get a general idea of the relatively big changes.
  2. Read through the [revised official guide](http://vuejs.org/guide/). It is highly recommended to do this before you upgrade.
  3. Upgrade to the [1.0.0 migration build](https://github.com/vuejs/vue/releases/tag/1.0.0-migration) first. The migration build is fully 0.12.16 compatible and also includes all the new features in 1.0.0. It also raises deprecation warnings for any usage of deprecated API.
  4. Consult the [full changelog](#full-changelog) and the [updated API Reference](http://vuejs.org/api/) as you work through the deprecation warnings. Once your app no longer raises any warnings using the migration build, it should work properly in 1.0.0.
- If you are relatively new to Vue.js:
  - Just go read the [official guide](http://vuejs.org/guide/)!

### Notable Changes
- #### Template Syntax Change
  
  This is the biggest change: directive syntax has been overhauled. No more multiple clauses; arguments are now placed inside the attribute name. The attribute value should now always be a single JavaScript expression followed by filters.
  - [1.0.0 Template Cheatsheet](https://github.com/vuejs/vue/wiki/1.0.0-binding-syntax-cheatsheet)
  - [Detailed Changes](#template-syntax-changes)
  - [Docs](http://vuejs.org/guide/syntax.html)
- #### Strict Mode by Default
  
  In the past, asset resolution (components, directives, filters...) has implicit fallback: if an asset is not found in the current component, Vue.js will recursively look for it in its parent, its parent's parent... and so on. This allows you to, say, define a component in the root instance and use it in any child component. It is convenient, however we've found that in large projects it results to implicit coupling between a child component and its ancestors. It also hurts maintainability - when you are looking at a child component in isolation, it's hard to identify where an asset comes from because it could've been provided by **any** ancestor up the component chain.
  
  Therefore, in 1.0 all asset resolution is ""strict"": an asset should either be defined on the current component, or defined as a true global asset (using one of the global `Vue.xxx` asset registration methods).
- #### Bye v-repeat, Hi v-for
  
  `v-repeat` has been replaced by `v-for`, which is **much** faster, but comes with a few differences:
  1. A alias is required now: so you should always do `v-for=""item in items""`, no more `v-for=""items""`.
  2. The scoping is different when you use `v-for` on a component - it no longer automatically injects the data and meta properties like `$index` and `$key` into the component - you now need to explicitly pass them down using props. This makes the child component explicit about where its data comes from.
  - [Detailed Changes](#v-for)
  - [Docs](http://vuejs.org/guide/list.html)
- #### &lt;slot&gt; is the new &lt;content&gt;
  
  The Web Components spec drafters are ditching the `<content>` API in favor of `<slot>`. Since Vue.js components are modeled after Web Components, and since the `<slot>` API does make things more explicit than relying on CSS selectors, we are moving to the `<slot>` API too.
  - [Reference](https://hacks.mozilla.org/2015/06/the-state-of-web-components/)
  - [Docs](http://vuejs.org/guide/components.html#Content_Distribution_with_Slots)

## Full Changelog (from 0.12.16)

### Template Syntax Changes
1. #### Directive Arguments
   
   The concept of multiple clauses (multiple directives separated by comma in the same attribute) is deprecated, and directive arguments are moved into the attribute name:
   
   ``` html
   <!-- before: -->
   <div v-dirname=""arg1: expression1, arg2: expression2"">
   
   <!-- after: -->
   <div
     v-dirname:arg1=""expression1""
     v-dirname:arg2=""expression2"">
   ```
   
   Using real directives as example:
   
   ``` html
   <!-- before: -->
   <div v-on=""click: doThis, keyup: doThat"">
   
   <!-- after: -->
   <div
     v-on:click=""doThis""
     v-on:keyup=""doThat"">
   ```
2. #### Literal Directives
   
   There is no longer ""literal directives"" from the implementation perspective. All directives are reactive by default, which makes it easy to know whether an attribute value is an expression or a literal string. If you wish to pass the directive a literal string, use the following syntax:
   
   ``` html
   <!-- before: no way to tell if this is a string or an expression! -->
   <div v-dirname=""abc"">
   
   <!-- after: explicitly denoting a literal string -->
   <div v-dirname.literal=""abc"">
   ```
   
   The ending `.literal` is called a **Binding Modifier**, which forces the directive to be bound in literal mode. We will see this concept used below for prop binding types as well. In literal mode, the directive's `update` function will be called once, with the literal string as the argument.
3. #### Attribute Bindings
   
   **Mustache tags can only appear inside native attributes.** To dynamically bind a custom attribute or a prop, use the `v-bind` directive (which replaces `v-attr`):
   
   ``` html
   <!-- this is valid -->
   <a href=""{{baseURL}}/abc""></a>
   
   <!-- these are no longer valid -->
   <component is=""{{view}}""></component>
   <partial name=""{{partialName}}""></partial>
   
   <!-- use v-bind for non-native attributes -->
   <component v-bind:is=""view""></component>
   <partial v-bind:name=""partialName""></partial>
   ```
   
   Vue will raise a warning whenever mustaches are used in non-native attributes.
4. #### Props
   
   Previously props use mustaches to indicate reactivity. Now they must use `v-bind`:
   
   ``` html
   <!-- before -->
   <my-comp
     prop=""a literal string""
     prop=""{{expression}}"">
   <my-comp>
   
   <my-comp
     prop=""a literal string""
     v-bind:prop=""expression"">
   </my-comp>
   ```
   
   Binding type indicators (`@` and `*`) are now replaced by more explicit binding modifiers:
   
   ``` html
   <!-- before -->
   <my-comp
     prop=""{{defaultOneWay}}""
     prop=""{{@twoWay}}""
     prop=""{{*oneTime}}"">
   </my-comp>
   
   <!-- after -->
   <my-comp
     v-bind:prop=""defaultOneWay""
     v-bind:prop.sync=""twoWay""
     v-bind:prop.once=""oneTime"">
   </my-comp>
   ```
5. #### Shorthands
   
   You may have noticed we will be using `v-bind` and `v-on` quite a lot. 1.0 will provide optional shorthand syntax for these two directives. `v-bind:` can be shortened to a single colon `:`, while `v-on:` can be shortened to a single `@` symbol:
   
   ``` html
   <!-- attribute binding -->
   <img :src=""imgSrc"">
   
   <!-- event handlers -->
   <input @click=""handleClick"" @keyup=""handleKeyup"">
   
   <!-- props -->
   <my-comp
     :prop=""expression""
     :prop.sync=""twoWay""
     :prop.once=""oneTime"">
   </my-comp>
   
   <!-- special attributes -->
   <component :is=""view""></component>
   <partial :name=""partialName""></partial>
   ```
   
   If you are only using Vue as an enhancement on existing HTML pages, you may want to stick with the `v-` prefixed versions. The shorthand is designed to make the template more succinct when you are building large SPAs where Vue manages everything. Don't worry about it not looking like valid HTML - all browsers can parse it just fine, and Vue removes all the special stuff in the rendered HTML anyway.

### Directive Changes
- #### v-for
  
  `v-repeat` has been deprecated in favor of `v-for`. Differences between `v-for` and `v-repeat`:
  1. Required alias
     
     Alias is required when using `v-for`, and the `item in items` syntax is preferred. It reads more naturally:
     
     ``` html
     <li v-for=""item in items""></li>
     ```
     
     This also means the `$value` meta property will no longer be used. `$index` and `$key` are still available. You can also still refer to the parent scope index in nested loops as `$parent.$index`.
  2. No more anonymous child VMs
     
     Previously, `v-repeat` creates an actual child VM instance with `inherit: true` for every repeated block. This is no longer the case with `v-for`: each repeated block in `v-for` is now a real partially compiled fragment, with a lightweight intermediate ""scope"". This greatly reduces the overhead and as a result you should see significant performance improvement for both initial rendering (up to 100% for non-component loops)  and re-rendering with `track-by` (up to 50%, as tested in dbmonster).
     
     This also means:
     1. Using an extra `<template>` repeat no longer creates the overhead of a child instance.
     2. `v-ref` would not work on `v-for` if the repeated block is not a component, because there are no longer anonymous child instances created in that case.
  3. Component Scoping
     
     Now this is the part that is the most different. Previously when you use a component with `v-repeat`, you get somewhat weird scoping:
     
     ``` html
     <!-- can't use $index here -->
     <comp v-repeat=""item in list""></comp>
     ```
     
     In the above example, `item` and `$index` are automatically available inside the component, but not in the parent template. If you do want to use `$index` in the parent template, you have to create a `<template>` to wrap the repeat. In addition, this requires the component implementation to be aware that it is `v-repeat` specific, because the external data is not received via the standard `props` interface.
     
     With `v-for`, you get the expected scoping:
     
     ``` html
     <comp
       v-for=""item in list""
       :id=""$index""
       :data=""item"">
     </comp>
     ```
     
     And you need to explicitly pass external data into the component as `props`. This makes your component implementation no longer `v-repeat` specific and less magical.
  4. `v-for` also supports the `v-for=""(key, val) in obj""` or `v-for=""(index, val) in arr""` syntax. This allows nested loops to more easily reference the key or index.
  5. `v-for` no longer uses `track-by=""$index""` behavior for Arrays of primitive values by default. It now uses the value itself as the cache key. As a result, `v-for` will raise warning when the Array contains duplicate values and prompt the user to use `track-by=""$index""` to handle duplicate values.
  6. `v-for` no longer converts the value to Array before piping it through filters. Custom filters used on `v-for` will now get the raw value. However, the built-in `filterBy` and `orderBy` filters **will** convert the values into Arrays, so any filters after them will received the converted Array values.
- #### v-class and v-style
  - `v-class` and `v-style` have been deprecated in favor of the new binding syntax (`v-bind:class` and `v-bind:style`). Bindings for `class` and `style` have some dedicated enhancements. You can pass in JavaScript Object or Array literals:
    
    ``` html
    <!-- toggle classes -->
    <div v-bind:class=""{ 'class-a': true, 'class-b': false }""></div>
    <!-- apply a list of classes -->
    <div v-bind:class=""[ dynamicClass, 'literal-class' ]""></div>
    
    <!-- apply style object (camelCase accepted) -->
    <div v-bind:style=""{ fontSize: '14px', color: 'red' }""></div>
    <!-- apply multiple style objects -->
    <div v-bind:style=""[ styleObjectA, styleObjectB ]""></div>
    ```
- #### v-on
  - You can use the `.stop` and `.prevent` modifiers for calling `stopPropagation()` and `preventDefault()`:
    
    ``` html
    <!-- event won't propagate -->
    <a v-on:click.stop=""doThis""></a>
    
    <!-- this will no longer reload the page! -->
    <form v-on:submit.prevent></form>
    ```
  - The `key` filter for `v-on` has been deprecated. `v-on` can now leverage a **Key Modifier** that replaces the old `key` filter (you can use all the old aliases usable in the key filter, or use a direct keyCode):
    
    ``` html
    <!-- before -->
    <input v-on=""
      keyup: handleEnter | key 'enter',
      keyup: handleEsc | key 'esc'"">
    
    <!-- after -->
    <input
      @keyup.enter=""handleEnter""
      @keyup.esc=""handleEsc"">
    ```
  - `v-on` will now also listen to custom Vue events (emitted via `vm.$emit`) when it is used on a child component. The idea is that **props** and **events** should constitute the public API of a component:
    - props for passing data down;
    - events for handling actions up.
    
    A typical component would look like this:
    
    ``` html
    <item-list
      v-bind:items=""items""
      v-bind:mode=""active""
      v-on:ready=""onItemsReady""
      v-on:update=""onItemsUpdate"">
    </item-list>
    ```
    
    With shorthand:
    
    ``` html
    <item-list
      :items=""items""
      :mode=""active""
      @ready=""onItemsReady""
      @update=""onItemsUpdate"">
    </item-list>
    ```
- #### v-ref and v-el
  
  `v-el` and `v-ref` were previously ""literal"" directives, but you just need to give them an argument. Also, to make things more explicit, `vm.$` is now `vm.$refs`, and `vm.$$` is now `vm.$els`.
  
  ``` html
  <!-- child component ref, registers vm.$refs.child -->
  <comp v-ref:child></comp>
  <!-- elsewhere... -->
  {{$refs.child.msg}}
  
  <!-- element ref, registers vm.$els.node -->
  <div v-el:node></div>
  ```
  
  **Caveat:** camelCase names are converted to all lowercase when the HTML is parsed:
  
  ``` html
  <comp v-ref:someThing></comp>
  ```
  
  Gets rendered as:
  
  ``` html
  <comp v-ref:something></comp>
  ```
  
  Thus, it is necessary to use the dash-case <-> camelCase mapping for refs too (similar to props):
  
  ``` html
  <comp v-ref:some-thing></comp>
  {{ $refs.someThing.msg }}
  ```
- #### v-model
  - multiple checkbox input can now be bound to the same `v-model` value (must be an Array):
    
    ``` html
    <input type=""checkbox"" value=""Jack"" v-model=""checkedNames"">
    <input type=""checkbox"" value=""John"" v-model=""checkedNames"">
    <input type=""checkbox"" value=""Mike"" v-model=""checkedNames"">
    ```
    
    With `checkedNames`' initial value being an Array, the checked boxes' values will be pushed into the Array, while unchecked ones will be removed from it. For example, if we check the first two boxes, `checkedNames` will have the value `[""Jack"", ""John""]`. Of course, you can also dynamically bind the value with `v-bind`.
  - The `options` param for `<select v-model>` has been deprecated. You can now just use `v-for` to render the options and it will work properly with the `v-model` on the containing `<select>` element.
- #### v-component
  - `v-component` has been deprecated in favor of the `is` attribute. [Details](https://github.com/yyx990803/vue/issues/1278)
  - The `wait-for` param for components has been deprecated in favor of the new `activate` lifecycle hook. [Details](https://github.com/yyx990803/vue/issues/1169)
- #### New Directive
  - Added `v-else` directive. [Docs](http://vuejs.org/api/#v-else)

### Component API Changes
- `<content>` outlet has been deprecated in favor of the new `<slot>` API. [Details](https://github.com/yyx990803/vue/issues/1167)
- Props syntax has changed as part of the [new binding syntax](https://github.com/yyx990803/vue/issues/1325).
- `$data` can no longer be used as a prop.
- Props with the `data-` prefix are now longer supported.
- Literal props will no longer be auto-casted into Booleans or Numbers - they are now always passed down as Strings.

### Filter Changes
- The `orderBy` filter now expects its second argument to be a number instead of a boolean. The argument was originally called `reverse`, and is now called `order`. A value that is greater than or equal to `0` indicates ascending order, a value smaller than `0` indicates descending order. As a result, the old syntax for descending order still works:
  
  ``` html
  <li v-for=""user in users | orderBy 'name' -1"">
    {{ user.name }}
  <li>
  ```

### General API Changes
- The `prefix` global config has been deprecated. All directives will now consistently use the `v-` prefix.
- The `strict` global config has been deprecated. Asset resolution is now always in strict mode. [Details](https://github.com/yyx990803/vue/issues/1170)
- The `interpolate` global config has been deprecated. Use `v-pre` on elements that should be skipped by the template compiler.
- The `proto` global config has been deprecated. This has served no practical purpose and almost never used.
- The `inherit` option has been deprecated. Alway pass data to child components via props.
- The `$add` method has been deprecated for both Vue instances and observed objects. Use `$set` instead. [Details](https://github.com/yyx990803/vue/issues/1171)
- Event propagation for events sent via `$dispatch` and `$broadcast` now stops when it triggers a handler for the first time, unless the handler explicitly returns `true`. [Details](https://github.com/yyx990803/vue/issues/1175)
- `$dispatch` now also triggers the event on the instance calling it.
- Vue no longer extends `Object.prototype` with `$set` and `$delete` methods. This has been causing issues with libraries that rely on these properties in certain condition checks (e.g. minimongo in Meteor). Instead of `object.$set(key, value)` and `object.$delete(key)`, use the new global methods `Vue.set(object, key, value)` and `Vue.delete(object, key)`.
- `Array.prototype.$remove`: now always treats the argument as the item to search for. (Previously it treats the argument as an index if the argument is a number).
- Instance method `vm.$addChild()` has been deprecated. Instead, a new option, `parent` has been (re)introduced. The usage is pretty simple:
  
  ``` js
  // before
  var child = parent.$addChild(options)
  
  // after
  var child = new Vue({ parent: parent })
  ```
- Global asset registration methods, e.g. `Vue.component`, now returns the registered asset. This means you can now create, globally register and get reference to a component constructor in one step:
  
  ``` js
  var MyComponent = Vue.component('my-component', options)
  
  // equivalent to:
  var MyComponent = Vue.extend(options)
  Vue.component('my-component', MyComponent)
  ```
- `vm.$log()` messages now also include computed properties.
- Prop expressions now support filters.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2022844/assets,https://api.github.com/repos/vuejs/vue/releases/2022844,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0,https://github.com/vuejs/vue/releases/tag/1.0.0,https://api.github.com/repos/vuejs/vue/zipball/1.0.0,1.0.0,False,False
2005888,2015-10-23T00:43:31Z,2015-10-23T00:59:09Z,,"The corresponding migration build for this release is [1.0.0-rc.2-migration](https://github.com/vuejs/vue/releases/tag/1.0.0-rc.2-migration).

### New
- `v-for` now support the `v-for=""(key, val) in obj""` or `v-for=""(index, val) in arr""` syntax. This allows nested loops to more easily reference the key or index.
- `v-on` can now omit the expression if it has modifiers. e.g. `@submit.prevent` will call `preventDefault()` on `submit` events.
- Custom directive API improvement:
  
  Custom directives can now provide a `params` Array, and the Vue compiler will automatically extract these attributes on the element that the directive is bound to. The old undocumented `this.param()` directive instance method has been deprecated.
  
  Example:
  
  ``` html
  <div v-example a=""hi""></div>
  ```
  
  ``` js
  Vue.directive('example', {
    params: ['a'],
    bind: function () {
      console.log(this.params.a) // -> ""hi""
    }
  })
  ```
  
  This API also supports dynamic attributes. The `this.params[key]` value is automatically kept up-to-date. In addition, you can specify a callback when the value has changed:
  
  ``` html
  <div v-example :a=""someValue""></div>
  ```
  
  ``` js
  Vue.directive('example', {
    params: ['a'],
    paramWatchers: {
      a: function (val, oldVal) {
        console.log('a changed!')
      }
    }
  })
  ```

### Fixed
- #1431 props with the same name not properly merged
- #1440 `v-for` components detach hook not called
- #1442 directives on a child component root not resolved in the right scope
- #1458 `:class` array syntax not removing stale classes
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/2005888/assets,https://api.github.com/repos/vuejs/vue/releases/2005888,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-rc.2,https://github.com/vuejs/vue/releases/tag/1.0.0-rc.2,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-rc.2,1.0.0-rc.2,False,False
1968621,2015-10-15T21:14:04Z,2015-10-15T21:36:20Z,,"## Upgrade Note

The API can now be considered stable. Documentation for 1.0.0-rc.1 is available at [rc.vuejs.org](http://rc.vuejs.org/). It is recommended to read through the updated guide section before upgrading.

If you are upgrading from 0.12, the following list of changes may seem a bit overwhelming. To make it easier to migrate your existing app, there is a migration release (1.0.0-alpha.8) with full 0.12.16 compatibility and all the new features in 1.0.0. In addition, the migration release will raise deprecation warnings that will guide you to gradually migrate your app. When your app no longer raise any warnings in 1.0.0-alpha.8, it should work properly in 1.0.0-rc.1.

## Changes from 1.0.0-beta.4
- Added `init` lifecycle hook, which is called before an instance's data observation. This is mainly intended for advanced plugin authors.
- Restrictions on attribute interpolation have been relaxed, now it uses a blacklist instead of a whitelist check which should no longer raise warnings on valid native attributes.

## Full Changes from 0.12.16

### Breaking

#### General
- The data binding syntax has been redesigned. [Details](https://github.com/yyx990803/vue/issues/1325)
- The `prefix` global config has been deprecated. All directives will now consistently use the `v-` prefix.
- The `strict` global config has been deprecated. Asset resolution is now always in strict mode. [Details](https://github.com/yyx990803/vue/issues/1170)
- The `interpolate` global config has been deprecated. Use `v-pre` on elements that should be skipped by the template compiler.
- The `proto` global config has been deprecated. This has served no practical purpose and almost never used.
- The `inherit` option has been deprecated. Alway pass data to child components via props.
- The `$add` method has been deprecated for both Vue instances and observed objects. Use `$set` instead. [Details](https://github.com/yyx990803/vue/issues/1171)
- Event propagation for events sent via `$dispatch` and `$broadcast` now stops when it triggers a handler for the first time, unless the handler explicitly returns `true`. [Details](https://github.com/yyx990803/vue/issues/1175)
- `$dispatch` now also triggers the event on the instance calling it.
- Vue no longer extends `Object.prototype` with `$set` and `$delete` methods. This has been causing issues with libraries that rely on these properties in certain condition checks (e.g. minimongo in Meteor). Instead of `object.$set(key, value)` and `object.$delete(key)`, use the new global methods `Vue.set(object, key, value)` and `Vue.delete(object, key)`.
- `Array.prototype.$remove`: now always treats the argument as the item to search for. (Previously it treats the argument as an index if the argument is a number).
- Instance method `vm.$addChild()` has been deprecated. Instead, a new option, `parent` has been (re)introduced. The usage is pretty simple:
  
  ``` js
  // before
  var child = parent.$addChild(options)
  
  // after
  var child = new Vue({ parent: parent })
  ```
- The `orderBy` filter now expects its second argument to be a number instead of a boolean. The argument was originally called `reverse`, and is now called `order`. A value that is greater than or equal to `0` indicates ascending order, a value smaller than `0` indicates descending order. As a result, the old syntax for descending order still works:
  
  ``` html
  <li v-for=""user in users | orderBy 'name' -1"">
    {{ user.name }}
  <li>
  ```
- Global asset registration methods, e.g. `Vue.component`, now returns the registered asset. This means you can now create, globally register and get reference to a component constructor in one step:
  
  ``` js
  var MyComponent = Vue.component('my-component', options)
  
  // equivalent to:
  var MyComponent = Vue.extend(options)
  Vue.component('my-component', MyComponent)
  ```

#### Directives
- `v-repeat` has been deprecated in favor of `v-for`. [Details](https://github.com/yyx990803/vue/issues/1200)
  
  In addition to the differences specified in the link above:
  - `v-for` no longer uses `track-by=""$index""` behavior for Arrays of primitive values by default. It now uses the value itself as the cache key. As a result, `v-for` will raise warning when the Array contains duplicate values and prompt the user to use `track-by=""$index""` to handle duplicate values.
  - `v-for` no longer converts the value to Array before piping it through filters. Custom filters used on `v-for` will now get the raw value. However, the built-in `filterBy` and `orderBy` filters **will** convert the values into Arrays, so any filters after them will received the converted Array values.
- `v-class` and `v-style` have been deprecated in favor of the new binding syntax (`v-bind:class` and `v-bind:style`, for details see the end of No.3 [here](https://github.com/yyx990803/vue/issues/1325))
- `v-ref` and `v-el` usage has changed. [Details](https://github.com/yyx990803/vue/issues/1292)
- `v-component` has been deprecated in favor of the `is` attribute. [Details](https://github.com/yyx990803/vue/issues/1278)
- Added `v-else` directive. [Details](http://rc.vuejs.org/api/#v-else)
- `v-model`: multiple checkbox input can now be bound to the same `v-model` value (must be an Array):
  
  ``` html
  <input type=""checkbox"" value=""Jack"" v-model=""checkedNames"">
  <input type=""checkbox"" value=""John"" v-model=""checkedNames"">
  <input type=""checkbox"" value=""Mike"" v-model=""checkedNames"">
  ```
  
  With `checkedNames`' initial value being an Array, the checked boxes' values will be pushed into the Array, while unchecked ones will be removed from it. For example, if we check the first two boxes, `checkedNames` will have the value `[""Jack"", ""John""]`. Of course, you can also dynamically bind the value with `v-bind`.
- `v-on`: added two modifiers, `.stop` and `.prevent` which automatically calls `event.stopPropagation()` and `event.preventDefault()` for you:
  
  ``` html
  <!-- event won't propagate -->
  <a v-on:click.stop=""doThis""></a>
  
  <!-- this will no longer reload the page! -->
  <form v-on:submit.prevent=""onSubmit""></form>
  ```
- `v-on` will now also listen to custom Vue events when used on a child component. (See No.6 [here](https://github.com/yyx990803/vue/issues/1325))
- The `key` filter for `v-on` has been deprecated. Instead, use the new key modifer syntax. (See No.7 [here](https://github.com/yyx990803/vue/issues/1325))
- The `options` param for `<select v-model>` has been deprecated. You can now just use `v-for` to render the options and it will work properly with the `v-model` on the containing `<select>` element.
- The `wait-for` param for components has been deprecated in favor of the new `activate` lifecycle hook. [Details](https://github.com/yyx990803/vue/issues/1169)

#### Component API
- `<content>` outlet has been deprecated in favor of the new `<slot>` API. [Details](https://github.com/yyx990803/vue/issues/1167)
- Props syntax has changed as part of the [new binding syntax](https://github.com/yyx990803/vue/issues/1325).
- `$data` can no longer be used as a prop.
- Props with the `data-` prefix are no longer supported.
- Literal props will no longer be auto-casted into Booleans or Numbers - they are now always passed down as Strings.

### Non-Breaking Changes
- `vm.$log()` messages now also include computed properties.
- Prop expressions now support filters.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1968621/assets,https://api.github.com/repos/vuejs/vue/releases/1968621,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-rc.1,https://github.com/vuejs/vue/releases/tag/1.0.0-rc.1,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-rc.1,1.0.0-rc.1,False,True
1941638,2015-10-11T00:47:33Z,2015-10-11T00:48:14Z,,"## About this Release

This is planned to be the last beta release. The first RC will be out next week and official release is planned for end of October.

The corresponding migration build for this release is [1.0.0-alpha.8](https://github.com/yyx990803/vue/releases/tag/1.0.0-alpha.8).

1.0 documentation preview that matches this release is now available at [rc.vuejs.org](http://rc.vuejs.org).

## Changes from 1.0.0-beta.3

### Breaking
- Vue no longer extends `Object.prototype` with `$set` and `$delete` methods. This has been causing issues with libraries that rely on these properties in certain condition checks (e.g. minimongo in Meteor). Instead of `object.$set(key, value)` and `object.$delete(key)`, use the new global methods `Vue.set(object, key, value)` and `Vue.delete(object, key)`.
- Instance method `vm.$addChild()` has been deprecated. Instead, a new option, `parent` has been (re)introduced. The usage is pretty simple:
  
  ``` js
  // before
  var child = parent.$addChild(options)
  
  // after
  var child = new Vue({ parent: parent })
  ```
- The global config `proto` has been deprecated. This has served no practical purpose and almost never used.
- `v-for` no longer uses `track-by=""$index""` behavior for Arrays of primitive values by default. It now uses the value itself as the cache key. As a result, `v-for` will raise warning when the Array contains duplicate values and prompt the user to use `track-by=""$index""` to handle duplicate values.
- `v-for` no longer converts the value to Array before piping it through filters. Custom filters used on `v-for` will now get the raw value. However, the built-in `filterBy` and `orderBy` filters **will** convert the values into Arrays, so any filters after them will received the converted Array values.
- The `orderBy` filter now expects its second argument to be a number instead of a boolean. The argument was originally called `reverse`, and is now called `order`. A value that is greater than or equal to `0` indicates ascending order, a value smaller than `0` indicates descending order. As a result, the old syntax for descending order still works:
  
  ``` html
  <li v-for=""user in users | orderBy 'name' -1"">
    {{ user.name }}
  <li>
  ```
- Global asset registration methods, e.g. `Vue.component`, now returns the registered asset. This means you can now create, globally register and get reference to a component constructor in one step:
  
  ``` js
  var MyComponent = Vue.component('my-component', options)
  
  // equivalent to:
  var MyComponent = Vue.extend(options)
  Vue.component('my-component', MyComponent)
  ```

### Non Breaking
- `v-on` can now handle multiple key modifiers:
  
  ``` html
  <input @keyup.enter.esc=""onEnterOrEsc"">
  ```
- Directive modifiers are now exposed to custom directive instances as `this.modifiers`:
  
  ``` html
  <div v-my-directive.one.two=""xxx"">
  ```
  
  ``` js
  Vue.directive('my-directive', {
    bind: function () {
      this.modifiers.one // -> true
      this.modifiers.two // -> true
    }
  })
  ```

### Fixed
- #1398 Use more reliable visibility check for transitions. This fixes situations where elements are stuck on leave if the parent element is not visible.
- #1399 Modifiers are no longer included in `this.arg` for custom directives.
- #1400 only warn twoWay prop binding type mismatch when the prop is present.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1941638/assets,https://api.github.com/repos/vuejs/vue/releases/1941638,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-beta.4,https://github.com/vuejs/vue/releases/tag/1.0.0-beta.4,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-beta.4,1.0.0-beta.4,False,True
1904552,2015-10-02T20:17:37Z,2015-10-02T20:31:11Z,,"**Upgrade Note:** If you are upgrading to this release from 0.12.x, install **1.0.0-alpha.7** first, which has full 0.12 compatibility and appropriate deprecation warnings that can help you identify deprecations that need to be fixed.

### New
- `v-model`: multiple checkbox input can now be bound to the same `v-model` value (must be an Array):
  
  ``` html
  <input type=""checkbox"" value=""Jack"" v-model=""checkedNames"">
  <input type=""checkbox"" value=""John"" v-model=""checkedNames"">
  <input type=""checkbox"" value=""Mike"" v-model=""checkedNames"">
  ```
  
  With `checkedNames`' initial value being an Array, the checked boxes' values will be pushed into the Array, while unchecked ones will be removed from it. For example, if we check the first two boxes, `checkedNames` will have the value `[""Jack"", ""John""]`. Of course, you can also dynamically bind the value with `v-bind`.
- `v-on`: added two modifiers, `.stop` and `.prevent` which automatically calls `event.stopPropagation()` and `event.preventDefault()` for you:
  
  ``` html
  <!-- event won't propagate -->
  <a v-on:click.stop=""doThis""></a>
  
  <!-- this will no longer reload the page! -->
  <form v-on:submit.prevent=""onSubmit""></form>
  ```

### Changed
- `vm.$dispatch`: now also triggers the event on self.
- `Array.prototype.$remove`: now always treats the argument as the item to search for. (Previously it treats the argument as an index if the argument is a number).

### Fixed
- Improved attribute interpolation validity check by including a11y and a more complete list of global attributes.
- #1363 partial: dynamic partial resolved in wrong scope when inside `v-for`
- #1370 observer: `v-for` alias not reactive when replaced
- #1378 props: error parsing path for two-way props with dynamic paths
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1904552/assets,https://api.github.com/repos/vuejs/vue/releases/1904552,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-beta.3,https://github.com/vuejs/vue/releases/tag/1.0.0-beta.3,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-beta.3,1.0.0-beta.3,False,True
1870119,2015-09-25T20:53:08Z,2015-09-25T20:57:37Z,,"**Upgrade Note:** If you are upgrading to this release from 0.12.x, install 1.0.0-alpha.6 first, which has full 0.12 compatibility and appropriate deprecation warnings that can help you identify deprecations that need to be fixed.

Includes all changes in [0.12.16](https://github.com/yyx990803/vue/releases/tag/0.12.16). In addition:

### New
- Attribute interpolations are back! You can again use this familiar syntax:
  
  ``` html
  <a href=""{{baseUrl}}/abc""></a>
  ```
  
  However, this syntax now has a limitation: **it is now allowed only in native attributes that are appropriate on the current element**. If you use it in a directive, a non-native attribute, or a prop, Vue will warn you. This makes it explicit where mustaches are allowed, while keeping the familiar and syntax which sometimes is more convenient than `v-bind`.
- `v-else` now works with `v-show`:
  
  ``` html
  <div v-show=""ok"">OK</div>
  <div v-else>NOT OK</div>
  ```

### Fixed
- Compatibility with vue-router 0.6.1.
- Fixed event propagation stopping without triggering any handler.
- Fixed special filter arguments, e.g. `in` in `filterBy search in 'name'` not correctly recognized as special case string.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1870119/assets,https://api.github.com/repos/vuejs/vue/releases/1870119,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-beta.2,https://github.com/vuejs/vue/releases/tag/1.0.0-beta.2,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-beta.2,1.0.0-beta.2,False,True
1870051,2015-09-25T20:34:50Z,2015-09-25T20:44:01Z,,"Includes all changes in [0.12.16](https://github.com/yyx990803/vue/releases/tag/0.12.16). In addition:
- `v-else` now works with `v-show`:
  
  ``` html
  <div v-show=""ok"">OK</div>
  <div v-else>NOT OK</div>
  ```
- Adjusted attribute interpolation deprecation warnings to be in accordance with [1.0.0-beta.2](https://github.com/yyx990803/vue/releases/tag/1.0.0-beta.2).
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1870051/assets,https://api.github.com/repos/vuejs/vue/releases/1870051,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-alpha.6,https://github.com/vuejs/vue/releases/tag/1.0.0-alpha.6,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-alpha.6,1.0.0-alpha.6,False,True
1869962,2015-09-25T20:19:56Z,2015-09-25T20:23:36Z,,"### New
- New global method: `Vue.mixin()`.
  
  Apply a global mixin to all Vue instances. This is intended to make it easier for plugins to inject custom behavior. **Not recommended in application code**.
- `vm.$watch` can now accept expressions with filters:
  
  ``` js
  vm.$watch('msg | uppercase', ...)
  ```

### Fixed
- Fixed a performance regression introduced in 0.12 which made filtering super large arrays (> 5000 items) very slow.
- `vm.$interpolate` now always returns a string.

### Internals
- `Vue.config.optionMergeStrategies` is now exposed for plugin authors. (This is already in 1.0.0 series releases)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1869962/assets,https://api.github.com/repos/vuejs/vue/releases/1869962,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.16,https://github.com/vuejs/vue/releases/tag/0.12.16,https://api.github.com/repos/vuejs/vue/zipball/0.12.16,0.12.16,False,False
1845451,2015-09-21T19:11:47Z,2015-09-21T19:13:35Z,,"This is the first beta release for 1.0.0, which implements all the changes / new features currently available in 1.0.0-alpha.5, but without the backwards compatibility. If your app works in 1.0.0-alpha.5 without raising any deprecation warnings, then it should work properly in 1.0.0-beta.1.

The API can be considered relatively stable. Breaking changes are still possible in new beta releases, but will be kept to a minimum with best effort.

## Full Changes from 0.12.15

### Breaking

#### General
- The data binding syntax has been redesigned. [Details](https://github.com/yyx990803/vue/wiki/1.0.0-binding-syntax-reference)
- The `prefix` global config has been deprecated. All directives will now consistently use the `v-` prefix.
- The `strict` global config has been deprecated. Asset resolution is now always in strict mode. [Details](https://github.com/yyx990803/vue/issues/1170)
- The `interpolate` global config has been deprecated. Use `v-pre` on elements that should be skipped by the template compiler.
- The `inherit` option has been deprecated. Alway pass data to child components via props.
- The `$add` method has been deprecated for both Vue instances and observed objects. Use `$set` instead. [Details](https://github.com/yyx990803/vue/issues/1171)
- Event propagation for events sent via `$dispatch` and `$broadcast` now stops when it triggers a handler for the first time, unless the handler explicitly returns `true`. [Details](https://github.com/yyx990803/vue/issues/1175)

#### Directives
- `v-repeat` has been deprecated in favor of `v-for`. [Details](https://github.com/yyx990803/vue/issues/1200)
- `v-class` and `v-style` have been deprecated in favor of the new binding syntax. [Details](https://github.com/yyx990803/vue/wiki/1.0.0-binding-syntax-reference#style-and-class-enhancements)
- `v-ref` and `v-el` usage has changed. [Details](https://github.com/yyx990803/vue/issues/1292)
- `v-component` has been deprecated in favor of the `is` attribute. [Details](https://github.com/yyx990803/vue/issues/1278)
- `v-on` will now also listen to custom Vue events when used on a child component. [Details](https://github.com/yyx990803/vue/wiki/1.0.0-binding-syntax-reference#v-on-on-child-component)
- The `key` filter for `v-on` has been deprecated. Instead, use the new key modifer syntax. [Details](https://github.com/yyx990803/vue/wiki/1.0.0-binding-syntax-reference#v-on-key-modifier)
- The `options` param for `<select v-model>` has been deprecated. You can now just use `v-for` to render the options and it will work properly with the `v-model` on the containing `<select>` element.
- The `wait-for` param for components has been deprecated in favor of the new `activate` lifecycle hook. [Details](https://github.com/yyx990803/vue/issues/1169)

#### Component API
- `<content>` outlet has been deprecated in favor of the new `<slot>` API. [Details](https://github.com/yyx990803/vue/issues/1167)
- Props syntax has changed as part of the [new binding syntax](https://github.com/yyx990803/vue/wiki/1.0.0-binding-syntax-reference#props).
- `$data` can no longer be used as a prop.
- Props with the `data-` prefix are no longer supported.
- Literal props will no longer be auto-casted into Booleans or Numbers - they are now always passed down as Strings.

### Non-Breaking Changes
- `vm.$log()` messages now also include computed properties.
- Prop expressions now support filters.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1845451/assets,https://api.github.com/repos/vuejs/vue/releases/1845451,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-beta.1,https://github.com/vuejs/vue/releases/tag/1.0.0-beta.1,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-beta.1,1.0.0-beta.1,False,True
1839192,2015-09-19T22:14:37Z,2015-09-19T22:25:11Z,,"> Alpha versions are **pre-releases** and the API may change at any time. By using the alpha releases you are responsible for any risk involved. If you have an in-production 0.12 app, it's recommended to wait until the stable 1.0 migration release before upgrading.

## Changes from 1.0.0-alpha.4

### Breaking

**For a full reference of the latest syntax, see #1325**
- `bind-attr` is now replaced by `v-bind:attr`, with `:attr` as shorthand;
- `on-event` is now replaced by `v-on:event`, with `@event` as shorthand; Also, key filter is now denoted with `.` as a modifier: `@keyup.esc=""handleEsc""`.
- Literal directive: `v-dir#=""xxx""` is now replaced by `v-dir.literal=""xxx""`.
- Prop binding types:
  - `:prop@=""twoWay""` is now replaced by `:prop.sync=""twoWay""`
  - `:prop*=""oneTime""` is now replaced by `:prop.once=""oneTime""`
- Child component and element refs:
  - `$.child` is now replaced by `v-ref:child`. `vm.$` is also renamed to `vm.$refs`.
  - `$$.node` is now replaced by `v-el:node`. `vm.$$` is also renamed to `vm.$els`.

### Non-breaking
- `v-on` now also works for custom events when used on a child component.

### Fixed
- all fixes in 0.12.15.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1839192/assets,https://api.github.com/repos/vuejs/vue/releases/1839192,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-alpha.5,https://github.com/vuejs/vue/releases/tag/1.0.0-alpha.5,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-alpha.5,1.0.0-alpha.5,False,True
1839124,2015-09-19T21:33:12Z,2015-09-19T21:37:16Z,,"### Fixed
- #1321 `options` param for `<select v-model>` doesn't work with Array of numbers
- #1322 elements with transition stuck in DOM if it is hidden by CSS
- #1327 `v-model` firing unnecessary update at `compositionend` in lazy mode
- #1330 template parser entity regex fails to detect entities in hex format
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1839124/assets,https://api.github.com/repos/vuejs/vue/releases/1839124,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.15,https://github.com/vuejs/vue/releases/tag/0.12.15,https://api.github.com/repos/vuejs/vue/zipball/0.12.15,0.12.15,False,False
1801982,2015-09-11T18:27:33Z,2015-09-11T19:26:46Z,,"> Alpha versions are **pre-releases** and the API may change at any time. By using the alpha releases you are responsible for any risk involved. If you have an in-production 0.12 app, it's recommended to wait until the stable 1.0 migration release before upgrading.

## Changes from 1.0.0-alpha.3

### Breaking

> For latest binding syntax, see #1173 
- Literal directives now use the `#=` syntax instead of `.=`:
  
  ``` html
  <a v-link#=""/a/b/c""></a>
  ```
- Prop binding type indicators are now placed in the attribute name instead of the value:
  
  ``` html
  <comp
    bind-two-way@=""something""
    bind-one-time*=""something"">
  </comp>
  ```
- `v-el` and `v-ref` are deprecated and now use dedicate syntax:
  
  ``` html
  <!-- registers vm.$.child -->
  <comp $.child></comp>
  
  <!-- registers vm.$$.node -->
  <div $$.node></div>
  
  <!-- caveat: must use dash-case instead of camelCase, similar to props -->
  <!-- registers vm.$.someComp -->
  <comp $.some-comp></comp>
  ```
- `v-component` has been deprecated in favor of the `is` attribute, which is now usable on any element.
- The `prefix` global config has been deprecated.

### New
- `v-else`: must be used following an element with `v-if`.
  
  ``` html
  <div v-if=""ok"">OK</div>
  <div v-else>NOT OK</div>
  ```
- Unsafe delimiters for HTML interpolation can now be configured separately:
  
  ``` js
  Vue.config.unsafeDelimiters = ['{!!', '!!}']
  ```
  
  Note in 1.0.0-alpha when you set `Vue.config.delimiters`, it will still implicitly update the unsafe delimiters following the current rules, but in 1.0.0-beta and above setting `delimiters` will have no effect on `unsafeDelimiters`.

### Non-breaking Changes
- Removed overly aggressive ""unobservable object"" warnings.
- `slot` attributes on transcluded content are now preserved.

### Fixed
- Fixed issue where minified build calling non-existent deprecation warning when using legacy syntax
- #1249 `v-for` error when used with 3rd party sortable plugins (@weislanes)
- #1268 component `<slot>` not compiled in correct scope when inside `v-for`
- #1282 `<slot>` fallback content not compiled in correct scope when inside `v-for`
- #1295 error when triggering transitions on fragments

### Internals, for Advanced Users
- `FragmentFactory` is now exposed as `Vue.FragmentFactory`.
- User can now extend Vue's option merging strategies by adding functions to `Vue.config.optionMergeStrategies`:
  
  ``` js
  Vue.config.optionMergeStrategies.myOption = function (parentValue, childValue) {
    // return merged value
  }
  ```
  
  The above function will be called when calling `Vue.extend({ myOptions: { ... }})`, or when applying a mixin that includes `myOption`.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1801982/assets,https://api.github.com/repos/vuejs/vue/releases/1801982,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-alpha.4,https://github.com/vuejs/vue/releases/tag/1.0.0-alpha.4,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-alpha.4,1.0.0-alpha.4,False,True
1801717,2015-09-11T18:16:33Z,2015-09-11T18:30:55Z,,"### Fixed
- Removed overly aggressive ""unobservable object"" warnings
- #1291 component `attached` hook not called when toggled by `v-if` inside transcluded content
- #1299 `v-model` `options` rebuild error when using optgroups (@evantre)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1801717/assets,https://api.github.com/repos/vuejs/vue/releases/1801717,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.14,https://github.com/vuejs/vue/releases/tag/0.12.14,https://api.github.com/repos/vuejs/vue/zipball/0.12.14,0.12.14,False,False
1779227,2015-09-07T20:21:01Z,2015-09-07T20:28:39Z,,"> Alpha versions are **pre-releases** and the API may change at any time. By using the alpha releases you are responsible for any risk involved. If you have an in-production 0.12 app, it's recommended to wait until the stable 1.0 migration release before upgrading.

### Known Issue
- Not working with vue-router 0.5.2. ~~Please wait for a vue-router update.~~ Please upgrade to vue-router 0.6.0.

### Changes since 1.0.0-alpha.2

> For an detailed overview of the data-binding syntax changes, see [the latest proposal](https://github.com/yyx990803/vue/issues/1173).
- All fixes in [0.12.13](https://github.com/yyx990803/vue/releases/tag/0.12.13)
- Props now share the same `bind-` syntax with normal attributes.
  
  ``` html
  <comp
    literal-prop=""string""
    bind-dynamic-prop=""someThing""
    bind-two-way=""@someThing""
    bind-one-time=""*someThing"">
  </comp>
  ```
- Add `:` shorthand for `bind-`.
  
  The example above can be shortened as:
  
  ``` html
  <comp
    literal-prop=""string""
    :dynamic-prop=""someThing""
    :two-way=""@someThing""
    :one-time=""*someThing"">
  </comp>
  ```
- Event handler key filter delimiter changed from `:` to `-`:
  
  ``` html
  <!-- 1.0.0-alpha.2 -->
  <input on-keyup:esc=""handleEsc"">
  
  <!-- 1.0.0-alpha.3 -->
  <input on-keyup-esc=""handleEsc"">
  ```
- `bind-style` now support an Array of style objects:
  
  ``` html
  <div bind-style=""[styleObjectA, styleObjectB]""></div>
  ```
- Use `.=` syntax to pass a literal string to directives:
  
  ``` html
  <a v-link.=""/a/b/c"">
  ```
  
  `v-link`'s update function will be called once with `""/a/b/c""`.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1779227/assets,https://api.github.com/repos/vuejs/vue/releases/1779227,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-alpha.3,https://github.com/vuejs/vue/releases/tag/1.0.0-alpha.3,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-alpha.3,1.0.0-alpha.3,False,True
1779187,2015-09-07T20:10:12Z,2015-09-07T20:11:16Z,,"### Fixed
- Observer will only attempt to convert a data object if it is not a native object, e.g `window`.
- #1219 inherit: true constructor cache should be context-sensitive
- #1248 performance regression when `v-repeat` has a particularly large source Array.
- #1241 Triggering a transitionend event after enter transition is done in in-out mode causes error (@nkovacs)
- #1244 Leave transition hook is called twice if css:false in in-out mode

### Improvements
- Added `space` alias for `key` filter. (@Coffcer)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1779187/assets,https://api.github.com/repos/vuejs/vue/releases/1779187,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.13,https://github.com/vuejs/vue/releases/tag/0.12.13,https://api.github.com/repos/vuejs/vue/zipball/0.12.13,0.12.13,False,False
1753079,2015-09-01T20:24:28Z,2015-09-01T20:27:23Z,,"> Alpha versions are **pre-releases** and the API may change at any time. By using the alpha releases you are responsible for any risk involved. If you have an in-production 0.12 app, it's recommended to wait until the stable 1.0 migration release before upgrading.

### Changed
- Computed properties are again cached by default (was uncached by default in alpha 1).

### Fixed
- #1234 Filters are not applied with the correct scope inside `v-for`
- Calling `Vue.use` more than once on a plugin will not install it again.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1753079/assets,https://api.github.com/repos/vuejs/vue/releases/1753079,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-alpha.2,https://github.com/vuejs/vue/releases/tag/1.0.0-alpha.2,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-alpha.2,1.0.0-alpha.2,False,True
1747497,2015-08-31T20:59:20Z,2015-08-31T21:14:53Z,,"> Alpha versions are **pre-releases** and the API may change at any time. By using the alpha releases you are responsible for any risk involved. If you have an in-production 0.12 app, it's recommended to wait until the stable 1.0 migration release before upgrading.

1.0.0-alpha.1 is the first release of the 1.0.0-alpha stage. As promised in [1.0.0 release planning](https://github.com/vuejs/Discussion/issues/347), this release contains no breaking changes, but a lot of deprecation warnings and tips on how to migrate to the new features. Try it out in your ^0.12.10 compatible app and let me know how it goes!

For detailed changes, see the [tracking issues](https://github.com/yyx990803/vue/issues?utf8=%E2%9C%93&q=milestone%3A1.0.0-alpha+) and in app deprecation warnings.

Note that at this stage, the API design is still not locked yet; issues marked as ""1.0 proposal"" are still open to discussion. Feedback after trying it out in real apps are particularly appreciated.

You will probably notice the file is a bit larger than previous versions, this is because the alpha releases contain all the backwards compatible code. Once removed in the beta, the file will slim down again.

### Installing

#### NPM

``` bash
npm install vue@1.0.0-alpha.1
```

#### Bower

``` bash
bower install vue#1.0.0-alpha.1
```

Standalone files in the 1.0.0-alpha branch: https://github.com/yyx990803/vue/tree/1.0.0-alpha/dist
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1747497/assets,https://api.github.com/repos/vuejs/vue/releases/1747497,dev,https://api.github.com/repos/vuejs/vue/tarball/1.0.0-alpha.1,https://github.com/vuejs/vue/releases/tag/1.0.0-alpha.1,https://api.github.com/repos/vuejs/vue/zipball/1.0.0-alpha.1,1.0.0-alpha.1,False,True
1724085,2015-08-26T08:48:20Z,2015-08-26T09:09:20Z,,"### Improvements
- `v-model` on checkbox can now bind the model value to expressions instead of just `true` or `false`. Example:
  
  ``` html
  <input type=""checkbox"" v-model=""example"" true-exp=""a"" false-exp=""b"">
  ```
  
  ``` js
  // when checked:
  vm.example === vm.a
  // when unchecked:
  vm.example === vm.b
  ```
- `v-model` on radio also gets the same feature:
  
  ``` html
  <input type=""radio"" v-model=""example"" exp=""a"">
  ```
  
  ``` js
  // when checked:
  vm.example === vm.a
  ```

### Fixed
- `v-model` on checkbox should now update the input checked state based on truthy-ness again. In 0.12.11 it is only checked when value strictly equals `true`.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1724085/assets,https://api.github.com/repos/vuejs/vue/releases/1724085,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.12,https://github.com/vuejs/vue/releases/tag/0.12.12,https://api.github.com/repos/vuejs/vue/zipball/0.12.12,0.12.12,False,False
1720824,2015-08-25T16:57:59Z,2015-08-25T16:58:49Z,,"### Improvements
- Two-way filters for `v-model` have been reworked. A `v-model` binding with read filters will no longer attempt to format the value when the user is still typing; instead it formats the value on blur. This results in a much more natural UX and makes two-way filters much more usable. [Demo](http://jsfiddle.net/yyx990803/0h70puer/)
- `<select v-model=""x"" options=""options"">` now supports Object values. That is to say you can provide the `options` array like this:
  
  ``` js
  options = [
    { text: 'a', value: { msg: 'A' }},
    { text: 'b', value: { msg: 'B' }},
    { text: 'c', value: { msg: 'C' }}
  ]
  ```
  
  And the bound value `x` will be the actual object instead of a serialized string.
- `filterBy` filter has been improved (#1094):
  1. It now accepts multiple `dataKeys` arguments
  2. Each `dataKey` argument can be either a String or an Array of Strings.
  3. You can alternatively provide a custom filter function as the first argument.
  
  Example:
  
  ``` html
  <!-- multiple dataKeys -->
  <div v-repeat=""user in users | filterBy searchText in 'fieldA' 'fieldB'"">
  
  <!-- Array dataKeys -->
  <!-- fields = ['fieldA', 'fieldB'] -->
  <div v-repeat=""user in users | filterBy searchText in fields"">
  
  <!-- filter by function -->
  <div v-repeat=""user in users | filterBy myCustomFilterFunction"">
  ```
- `currency` filter can now accept an empty string argument to output the result without a currency symbol.
- When in `debug` mode, Vue will also print async stack traces for warnings. Previously the stack trace stops at the internal batcher handler due to Vue's async update queue; now the stack trace goes all the way back to what originally triggered the update.
- Component asset names can also be in PascalCase in addition to camelCase: `myComponent` and `MyComponent` will both be interpreted as `my-component` during the lookup.
- Data object properties prefixed with `_` and `$` are now also observed; this means they can be used for data binding, however if it is a root-level property it will **not** be proxied on the vm instance.
  
  For example:
  
  ``` js
  var vm = new Vue({
    data: {
      _test: 123
    }
  })
  vm._test // -> undefined
  vm.$data._test // -> 123
  ```
  
  ``` html
  <!-- also need to access via $data in templates -->
  <p>{{ $data._test }}</p>
  ```
- #### Computed Property Caching
  
  You can now turn off caching for a specific computed property so that it behaves like a simple getter. 
  
  By default, a computed propoerty's cache is only invalidated when one of its reactive dependencies have changed, but this can result in confusion when the user assumes it behaves like a getter.
  
  For example:
  
  ``` js
  computed: {
    example: function () {
      return Date.now() + this.msg
    }
  }
  ```
  
  The cache for `vm.example` only invalidates when `vm.msg` has changed, because Vue has no way to detect whether `Date.now()` has changed or not (polling is obviously a bad idea). So, when you access `vm.example`, it will not change unless `vm.msg` has changed.
  
  This is different from a simple getter-like behavior, where the function is re-evaludated every time the property is accessed. If that is what you want, you can turn off caching for that property like this:
  
  ``` js
  computed: {
    example: {
      get: function () { /* same getter */ },
      cache: false
    }
  }
  ```

### New
- Added `debounce` filter which can be used with `v-on` for debouncing DOM events.
  
  Example:
  
  ``` html
  <input v-on=""input: onInput | denounce 300"">
  ```

### Fixed
- `v-attr` should also set corresponding properties for `selected` and `checked`.
- #1139 error when compiling props for a component with fragment `el`
- #1150 `keep-alive` and `wait-for` not working together
- #1152 dynamic component left undestroyed with `keep-alive` + `wait-for`
- #1155 select option with empty string initial value not initialized properly
- #1162 computed properties evaluation affected by order of data manipulations
- #1185 `v-if` linker cache not taking transclusion host into account
- #1191 resolveAsset not working properly for transcluded components in strict mode
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1720824/assets,https://api.github.com/repos/vuejs/vue/releases/1720824,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.11,https://github.com/vuejs/vue/releases/tag/0.12.11,https://api.github.com/repos/vuejs/vue/zipball/0.12.11,0.12.11,False,False
1648832,2015-08-10T03:39:12Z,2015-08-10T03:46:19Z,,"### Improvements
- Support one static `<option>` inside `<select>` with `v-model` + dynamic options:
  
  ``` html
  <select v-model=""selectedUser"" options=""users"">
    <option value="""">Select a user...</option>
  </select>
  ```
  
  This static option will be selected by default if the `v-model` value is falsy (excluding `0`). Options created from `users` will be appended after the default option.
- Dynamic component `wait-for` listeners are now attached in the component's `created` hook, thus firing the event synchronously in `compiled` hook will now properly trigger the DOM insertion.

### Fixed
- template parser now trims empty textNodes from `<script>` templates, avoiding unnecessarily turning components into fragment mode.
- #1109 mustach tags inside `<textarea>` are interpolated only once
- #1116 transition hangs when immediately leaving after entering
- #1117 synchronously calling `done` in `leave` transition hook causes error
- #1118 nested `<template>` not rendering in Safari
- #1119 `out-in` transition mode not working as desired when switching faster than transition duration.
- #1124 `number` attribute param for `v-model` not respected on `<input type=""radio"">`.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1648832/assets,https://api.github.com/repos/vuejs/vue/releases/1648832,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.10,https://github.com/vuejs/vue/releases/tag/0.12.10,https://api.github.com/repos/vuejs/vue/zipball/0.12.10,0.12.10,False,False
1614788,2015-07-31T20:30:56Z,2015-07-31T20:35:12Z,,"### New
- Support naming assets using camelCase and using them with dash case (similar to props). For example:
  
  ``` js
  // in component options:
  components: {
    // register using camelCase
    myComponent: { /*... */ }
  }
  ```
  
  ``` html
  <!-- use dash case in templates -->
  <my-component></my-component>
  ```
  
  This works nicely with ES6:
  
  ``` js
  import compA from './components/a'
  import compB from './components/b'
  
  export default {
    // ES6 object literal shorthand
    components: {
      compA,
      compB
    }
  }
  ```

### Changed
- In 0.12.8 `v-attr` introduced a new behavior of setting the corresponding property on the element. As it turns out, the only property that needs this behavior is `value` on input elements. In 0.12.9 this behavior now only applies to `value` attribute bindings.

### Fixed
- Fixed error when running inside jsdom.
- #1079 boolean prop default value not respected
- #1080 strict mode inline repeat instances not inheriting parent scope assets
- #1083 interpolations not working in some directive params such as `track-by`
- #1084 not rendering correctly when a component is right inside another one
- #1093 container/template classes are not merged for SVG components
- #1095 Safari <template> content not cloned when inside <content>
- #1097 transcluded `v-if` components assigned wrong $parent
- #1104 & #1105 `v-attr` unnecesasrily setting properties
- #1107 empty string props casted to `0`
- #1108 `v-model` + `v-repeat` of primitive value arrays not syncing booleans and null
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1614788/assets,https://api.github.com/repos/vuejs/vue/releases/1614788,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.9,https://github.com/vuejs/vue/releases/tag/0.12.9,https://api.github.com/repos/vuejs/vue/zipball/0.12.9,0.12.9,False,False
1577491,2015-07-23T15:23:27Z,2015-07-23T17:22:34Z,,"### New
- **Strict mode**: When `Vue.config.strict` is set to `true`, asset lookup will be limited to the current component only. This means a component will only inherit assets from the inheritance chain (via Vue.extend), but not from their parents in the view hierarchy. When strict mode is enabled, assets should be either registered globally, or explicitly depended on by the component that needs them. When enforced, it could result in better encapsulated components in larger projects.

### Improvements
- Source code refactored for better minification when using module bundlers. See [instructions](https://github.com/yyx990803/vue/wiki/Deploying-Vue.js-applications-for-production).
- Computed properties now have their values automatically cached, and is re-evaluated lazily only when needed. This avoids expensive computations being re-run multiple times when a dependency changes.
- `v-attr` now also sets the corresponding property on the element if the property exists. For example, `<input value=""{{val}}"">` will not only update the attribute, but also set the `value` property. If the element doesn't have a corresponding property for the bound attribute, it will not be set.
- `v-repeat` now supports `item in array` syntax:
  
  ``` html
  <div v-repeat=""item in array""></div>
  ```
- `props` declarations can now specify `twoWay: true`, which will throw a warning if the prop's binding type doesn't match.
- When providing default value for a prop, you can now provide a function that returns Object/Array values to avoid having the same reference shared across multiple vms. (#1032)
- You can now prefix any prop attribute with `data-` and it will just work. For example, a prop named `myProp` can be supplied in the template as `data-my-prop`. (#1034)
- Alternative asset option syntax: you can now use an Array to provide assets, but every asset must provide an `id` property in order to be registered. e.g.
  
  ``` js
  var myDirective = {
    id: 'some-dir',
    update: function () { /* ... */ }
  }
  
  new Vue({
    // ...
    directives: [myDirective]
  })
  // the above is equivalent to:
  new Vue({
    directives: {
      'some-dir': myDirective
    }
  })
  ```

### Fixed
- Fixed dependency tracking when `$add`ing properties to objects nested inside arrays.
- #1028 `v-cloak` not removed correctly on conditionally compiled elements.
- #1044 ""leaveCancelled"" not called properly in transitions
- #1063 path parser accepting invalid path
- #1065 class interpolation and `v-class` not working together
- #1067 two-way binding not properly stabilized
- #1071 & #1072 props default values not respected when `data` option is also present
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1577491/assets,https://api.github.com/repos/vuejs/vue/releases/1577491,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.8,https://github.com/vuejs/vue/releases/tag/0.12.8,https://api.github.com/repos/vuejs/vue/zipball/0.12.8,0.12.8,False,False
1506764,2015-07-07T18:51:05Z,2015-07-07T18:59:18Z,,"### Improvements
- The observer now automatically skips object frozen via `Object.freeze`. Frozen objects are always non-reactive.

### Fixed
- #1010 Incorrect scope for transcluded repeater
- #1012 prop initialization overwriting inherited parent scope properties
- #1014 `vm.$add` triggering non-related deep/Array watchers
- #1020 absent Boolean prop not respecting default value in data
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1506764/assets,https://api.github.com/repos/vuejs/vue/releases/1506764,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.7,https://github.com/vuejs/vue/releases/tag/0.12.7,https://api.github.com/repos/vuejs/vue/zipball/0.12.7,0.12.7,False,False
1496531,2015-07-05T07:48:14Z,2015-07-05T07:59:03Z,,"### Improvements
- Props can now be specified using camelCase. Vue will automatically convert the camelCase prop names to hyphenated names when looking for prop attributes. This makes the prop names more consistent: camelCase in JavaScript and expressions, hyphenated as attributes.
  
  Example:
  
  ``` js
  props: {
    camelCase: String
  }
  ```
  
  ``` html
  <my-comp camel-case=""hello""></my-comp>
  ```
  
  Previous usage of directly specifying hyphenated prop names will still work properly, although with the possibility of being deprecated in future versions.

### Fixed
- #1004 `v-component` directive not working with `v-repeat`
- #1005 attached/ready hooks not firing properly for child components
- #1006 destroyed hook not firing properly when unmounting static component
- #1008 `<select>` with selectedIndex=-1 DOM state not persisted when appended to new parent
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1496531/assets,https://api.github.com/repos/vuejs/vue/releases/1496531,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.6,https://github.com/vuejs/vue/releases/tag/0.12.6,https://api.github.com/repos/vuejs/vue/zipball/0.12.6,0.12.6,False,False
1489224,2015-07-02T15:04:28Z,2015-07-02T15:46:03Z,,"### Improvements
- Transcluded components are now considered children of their host component. To better illustrate this:
  
  ``` html
  <tabs><!-- the host -->
    <tab>{{msg}}</tab><!-- the transcluded component -->
  </tabs>
  ```
  
  In previous versions, `<tab>` will be instantiated as a child of the host's parent, so despite being visually nested under `<tabs>`, `<tab>` is actually a sibling of `<tabs>` in the internal component tree. This makes it a bit awkward for `<tab>` and `<tabs>` to communicate between each other.
  
  In 0.12.5, `<tab>` is now a proper child of `<tabs>`. This means inside `<tab>`, `this.$parent` will point to `<tabs>`, and all transcluded `<tab>` instances can be found inside `<tabs>`'s `this.$children` array. This also means that the event system (`$dispatch()` and `$broadcast()`) will now work between the host and the transcluded components.
  
  Note that `{{msg}}`, together with any directives on the transcluded components, will still be compiled in the **host's parent scope**.
  
  This change should make it easier to write a suite of components that are intended to be composed together.
- `props` now have an alternative syntax that is more inline with other options' key-value based style:
  
  ``` js
  props: {
    'prop-a': String, // type check constructor
    'prop-b': null, // accept any type
    'prop-c': { // object descriptor
      type: Number,
      required: true,
      default: 100 // new: default value
    }
  }
  ```
  
  The previous array-based syntax still works, but will likely be deprecated in future versions.
- `props` option objects can now also specify a default value, as seen in the above example.
- Improved Boolean props handling:
  
  When a prop has explicit `Boolean` type specified, it can be used similar to a HTML boolean attribute, e.g. `checked` for input elements. This means it can simply appear as an attribute without a value and its JavaScript value will resolve to `true`, and omitting it will resolve the JavaScript value to `false`.
  
  ``` js
    props: {
      'my-prop': Boolean
    }
  ```
  
  ``` html
    <example my-prop>
      <!-- myProp === true -->
    </example>
  
    <example>
      <!-- myProp === false -->
    </example>
  ```
- Improved `watch` option syntax. You can now use an Object to provide additional options to a watcher:
  
  ``` js
  watch: {
    someValue: {
      handler: function () { /*...*/ }, // or use a method name string
      deep: true,
      immediate: true
    }
  }
  ```

### Fixed
- Fixed cases where templates that contain only `<content>`, `<component>`, `<partial>` or a single component are ignored silently. The first three cases will now turn the instance into a fragment instance and render correctly; the last case will result in a warning.
- Fixed the issue where a parent's registered partials are not available to its children.
- #985 `v-ref` not cleared properly when a static component is torn down.
- #987 `v-if` not working on element directives
- #990 `array.$remove()` not returning the removed element
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1489224/assets,https://api.github.com/repos/vuejs/vue/releases/1489224,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.5,https://github.com/vuejs/vue/releases/tag/0.12.5,https://api.github.com/repos/vuejs/vue/zipball/0.12.5,0.12.5,False,False
1463026,2015-06-25T22:26:13Z,2015-06-25T22:28:22Z,,"### Note

This is a patch release. The last release with breaking changes is [0.12.2](https://github.com/yyx990803/vue/releases/0.12.2).

### Fixed
- Correctly expose the global `Vue.partial()` registration method.
- Fix prop initialization when manually mounting to a CSS selector.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1463026/assets,https://api.github.com/repos/vuejs/vue/releases/1463026,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.4,https://github.com/vuejs/vue/releases/tag/0.12.4,https://api.github.com/repos/vuejs/vue/zipball/0.12.4,0.12.4,False,False
1461742,2015-06-25T17:38:01Z,2015-06-25T17:39:58Z,,"### Note

This is a patch release. The last release with breaking changes is [0.12.2](https://github.com/yyx990803/vue/releases/0.12.2).

### Fixed
- #972 two-way props binding not syncing back to parent when the parent key is a path
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1461742/assets,https://api.github.com/repos/vuejs/vue/releases/1461742,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.3,https://github.com/vuejs/vue/releases/tag/0.12.3,https://api.github.com/repos/vuejs/vue/zipball/0.12.3,0.12.3,False,False
1460851,2015-06-25T14:51:52Z,2015-06-25T14:53:16Z,,"### Breaking Changes
- `replace` option now defaults to `true`. When you use a component in a parent template, the mount-point element will by default be replaced. This has a few implications:
  1. What you write in the component's template will be what gets eventually rendered.
  2. You should in most cases include a component's root element in its template. If the template has more than one top-level elements, or only contains text, it becomes a [fragment instance](http://vuejs.org/guide/best-practices.html#Fragment_Instance).
  3. Remember the scoping rules still applies: attributes & directives on the mount-point element are compiled in parent scope; those on the root element inside the component's template are compiled in child scope.
  
  > If you prefer `replace: false`, or have trouble migrating to this behavior, you can modify the global default by setting `Vue.options.replace = false`.

### Improvements
- Props initialization has been prioritized; their initial values are now accesible in the `created()` hook and the `data()` function.
- `wait-for` component param can now be used on static components too. [Update docs](http://vuejs.org/guide/components.html#wait-for)
- Partials are back, but with a new syntax that is more inline with the custom-element style API:
  
  ``` html
  <!-- static partial -->
  <partial name=""my-partial""></partial>
  
  <!-- dynamic partial -->
  <partial name=""{{partialId}}""></partial>
  ```
- The restriction that `v-component` can only be used on table elements has been relaxed. It is still recommended to use custom-element syntax at all times - the `v-component` syntax should only be used in cases where the semantics demand it, e.g. on table/SVG elements, or a generic component that needs to be applied to different element types.

### Fixed
- Component that only contains `<content></content>` can now be rendered correctly.
- props with `data-` prefix are now stripped and initialized correctly.
- #948 Fix repeat instances incorrectly cahced using parent $key
- #949 Fix incorrectly treating inline-template components that only contain one element as fragment instances.
- #953 Fix currency filter floating point precision.
- #961 Fix incorrectly treating prop paths that contain numbers as literal values
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1460851/assets,https://api.github.com/repos/vuejs/vue/releases/1460851,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.2,https://github.com/vuejs/vue/releases/tag/0.12.2,https://api.github.com/repos/vuejs/vue/zipball/0.12.2,0.12.2,False,False
1413264,2015-06-14T05:28:05Z,2015-06-14T05:29:08Z,,"### Breaking Changes

It is unfortunate that I have to make a breaking change right after the 0.12 release, but I believe this is a necessary change before users have already invested in the new API.
- #### Prop Binding Types have been redesigned.
  
  [updated docs](http://vuejs.org/guide/components.html#Prop_Binding_Types)
  - All prop bindings are now one-way-down by default. This means parent changes are synced to the child but not the other way around. This default is meant to prevent child components from accidentally mutating the parent's state, which can make your app's data flow harder to reason about.
  - You can still explicitly create a two way binding with the new syntax:
    
    ``` html
    <component prop=""{{@ twoWayBound }}""></component>
    ```
  - One-way-up binding type has been removed.
  - One-time binding remains the same using the `prop=""{{* oneTime }}""` syntax.

### New Features
- #### Prop Validation
  
  [updated docs](http://vuejs.org/guide/components.html#Prop_Validation)
  
  You can now optionally define a prop as an object that contains additional validation requirements:
  
  ``` js
  Vue.component('example', {
    props: [
      {
        name: 'on-something',
        type: Function
      },
      {
        name: 'required-prop',
        required: true
      },
      {
        name: 'greater-than-ten',
        // custom validator function
        validator: function (value) {
          return value > 10
        }
      }
    ]
  })
  ```
  
  The `type` can be one of the following native constructors:
  - String
  - Number
  - Boolean
  - Function
  - Object
  - Array
  
  In addition, `type` can also be a custom constructor function and the the assertion will be made with an `instanceof` check.
  
  When a prop validation fails, Vue will refuse the set the value on the child component, and throw a warning if using the development build.
  
  You can still use strings if your props don't need any validation, and you can mix string and object props in the option array.

### Fixed
- #924 multiline expressions in attributes
- #936 `<content>` transclusion regressions
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1413264/assets,https://api.github.com/repos/vuejs/vue/releases/1413264,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.1,https://github.com/vuejs/vue/releases/tag/0.12.1,https://api.github.com/repos/vuejs/vue/zipball/0.12.1,0.12.1,False,False
1409994,2015-06-12T17:34:29Z,2015-06-12T17:35:13Z,0.12.0: Dragon Ball,"> ""If you keep calm you'll never be a super saiyan."" - Goku

## Breaking Changes
- `paramAttributes` option has been renamed to `props`.
- `v-with` has been deprecated. Now `props` are the only way to pass data to a child component.
- `v-component` has been deprecated. Now all components should use the custom tag syntax. For dynamic components, a new syntax is introduced: `<component is=""{{view}}""></component>`.
  - Note: `v-component` will still be available for table elements, due to `<table>`'s content restrictions.
- `v-partial` and `{{> partial}}` have been deprecated.
- `v-events` have been deprecated. It is now recommended to pass down methods as prop callbacks.
- Filter argument syntax has been reworked. Now non-quoted arguments are treated as dynamic paths (and the argument will be auto-retrieved from the vm when the filter function is called); only arguments enclosed in quotes are passed in as plain strings.
  
  Example:
  
  ``` html
  {{ msg | filter argA 'argB' }}
  ```
  
  In the `filter` function, the first argument will be the value of `vm.argA`, and the second argument will be a plain string `""argB""`.
  
  For the reasoning behind it, see [this comment](https://github.com/vuejs/Discussion/issues/158#issuecomment-105256475).
- When `v-ref` is used together with `v-repeat`, and the value being repeated on is an Object, the corresponding ref will also be an Object, with its keys pointing to the associated child instances.
- `vm.$watch()` now accepts an options object for `deep` and `immediate` flags instead of fixed arguments.
- Transition cancel hook: you should now use `enterCancelled` and `leaveCancelled` hooks to handle a cancelled transition. Functions returned in `enter` and `leave` hooks are no longer respected.

## New Features
- #### Async components
  
  [docs](http://vuejs.org/guide/components.html#Async_Components)
  
  Example:
  
  ``` js
    components: {
      async: function (resolve) {
        setTimeout(function () {
          resolve({
            template: '<div>I am async!</div>'
          })
        }, 1000)
      }
    }
  ```
  
  This feature allows you to asynchronously resolve a component. The goal is to enable easy ""lazy loading"" for large apps with multiple pages/sections. Here we are using `setTimeout` simply for demo purposes - you will need to provide your own mechanism for fetching a component definition from the server. One example would be paring this feature with Webpack's code-splitting functionality.
- #### Element Directives
  
  [docs](http://vuejs.org/guide/custom-directive.html#Element_Directives)
  
  Example:
  
  ``` js
    Vue.elementDirective('my-stuff', {
      update: function () { /* ... */ }
    })
  ```
  
  ``` html
    <my-stuff></my-stuff>
  ```
  
  This is similar to Angular's `""E""` mode directive. Basically, instead of treating the custom element as a component, treat it as a directive instead. Note element directives are ""terminal"", which means once Vue encounters an element directive, it will basically skip that element, and the directive is responsible for handling **everything** on and inside that element. This mechanism opens up more flexibility in handling custom elements, without necessarily incurring the overhead of a component instance.

## Improvements
- #### Props
  
  [updated docs](http://vuejs.org/guide/components.html#Data_Flow)
  - props now support explicit binding types:
    - One time: `prop=""{{* parentProp}}""`
    - ~~Oneway down: `prop=""{{< parentProp}}""`~~ **warning: [changed in 0.12.1](https://github.com/yyx990803/vue/releases/tag/0.12.1)**
    - ~~Oneway up: `prop=""{{> parentProp}}""`~~ **warning: [changed in 0.12.1](https://github.com/yyx990803/vue/releases/tag/0.12.1)**
  - props can now contain multiple mustache tags, e.g. `prop=""{{a}} b""`
  - props can now contain filters, e.g. `prop=""{{a | reverse}}""`
  - props can now contain expressions, e.g. `prop=""{{a + b}}""`
  - When a prop's parent expression is not ""settable"", the prop binding will be automatically one-way.
  - All props are created and observed by default when a component is instantiated.
  - Literal props are now supported when manually mounting a root instance.
- #### Transition System
  
  [updated docs](http://vuejs.org/guide/transitions.html)
  
  `v-transition` now adds a `.v-transition` class to the element at all times; in the case of `v-transition=""fade""`, the added class will be `.fade-transition`. This removes the need to manually add an additional class just to give the element transition property.
  
  CSS transitions and JavaScript transition hooks can now work together. The list of available JavaScript hooks have also been expanded. Here is a list of all available hooks:
  - `beforeEnter`
  - `enter`
  - `afterEnter`
  - `enterCancelled`
  - `beforeLeave`
  - `leave`
  - `afterLeave`
  - `leaveCancelled`
  
  You can use these hooks to do additional work while having the CSS part handled for you automatically. The refactor maintains backwards compatibility so your old transitions should still work. One important thing to note though: the `done` callback in `enter` and `leave` hooks is now optional, similar to how it is optional in a Mocha test. Vue will look at the number of arguments of the function to determine whether the hook expects to control when the transition should end. For example:
  
  ``` js
    {
      enter: function (el) {
         // No `done` argument, so the end of the transition
         // will depend on the CSS `transitionend` or
         // `animationend` event.
      }
    }
  ```
  
    vs.
  
  ``` js
    {
      enter: function (el, done) {
        // the `done` callback here indicates that you want
        // to explicitly control when the transition should end.
        // the transition will only end when you call this callback.
      }
    }
  ```
- #### Component Transclusion
  - When a component with `replace:true` is compiled, attributes on its placeholder node are now properly merged with the attributes on the component's template root node. Details:
    - If both nodes have `class` attributes, the class names are merged.
    - If both nodes have the same directive attribute, they will be compiled respectively in their own scope. (placeholder directives in parent scope and template root directives in child scope)
    - If both nodes have the same plain attribute, the template root node will take priority.
  - Support expressions in content selectors. (resolved only once) e.g.
    
    ``` html
    <content select=""p:nth-child({{$index + 1}})""></content>`
    ```
- #### v-repeat
  - When `v-repeat` is used to iterate over an object, the instances are cached using the property key by default. This should avoid the entire list being re-rendered when the object is mutated.
  - `v-repeat` now supports using `track-by=""$index""` when there's no key to track. This causes Vue to reuse the DOM elements and child instances in place without re-ordering them, so prefer using it on simple repeats without interactivity.
  - `v-repeat` now uses `track-by=""$index""` by default when iterating over an Array of primitive values (Strings and Numbers).
  - Support staggering transitions for `v-repeat`. [demo](http://jsfiddle.net/yyx990803/ujqrsu6w/)
    
    Simply add a `stagger` attribute:
    
    ``` html
      <div v-repeat=""list"" v-transition=""fade"" stagger=""100"">
    ```
    
    Enter and leave stagger can be defined separately as `enter-stagger` and `leave-stagger`. The stagger can also be dynamically calculated via a javascript hook:
    
    ``` js
      Vue.transition('fade', {
        stagger: function (index) {
          // increase delay by 50ms for each transitioned item,
          // but limit max delay to 300ms
          return Math.min(300, index * 50)
        }
        // or you can use `enterStagger` and `leaveStagger`
      })
    ```
- #### v-model
  
  `options` param for `v-model` now also respects `disabled: true` in the options array. (via #861 by @holic)
- ### v-class & v-attr
  
  Both `v-class` and `v-attr` now support binding to an Object value. (`v-attr` object support via #902 by @OEvgeny)
- #### General
  - Many new warnings in development build.
  - New instance method: `vm.$nextTick`. This is the same as `Vue.nextTick`, except that it can be called inside instance methods as `this.$nextTick`, and the callback's `this` context will be auto-bound to the current instance. This avoids having to require the global `Vue` inside a component module just to use `Vue.nextTick`.
  - `vm.$watch()` can now also accept a computed function instead of an expression.
  - Paths containing dynamic segments, e.g. `a[b]` will now create the path if not already present, however, it will throw a warning and prompt you to pre-initialize the path if possible.
  - Internally Vue now uses empty text nodes instead of comment nodes as DOM-manipulation anchors. This results in much cleaner HTML output. When in debug mode, comment nodes will still be used to help better analyze the structure of the rendered DOM.
  - Optimized instance initialization, which increases first-render performance by roughly 30%.
  - Warnings in debug mode now prints the error stack instead of invoking the debugger statement.

## Fixed
- #853 `v-repeat` should only sync $value back to original array for non-object arrays.
- vuejs/Discussion#173 props are now properly persisted when an instance's `$data` is replaced.
- #869 `v-repeat` switching between Object/Array values
- #873 `$add` should work when an object is used as a vm's `$data` and observed elsewhere at the same time.
- #887 `v-model` write filter warning check
- #892 typo in compiler settable path regex
- #893 `node.contains` check in IE
- #922 rendering `<template>` tags in SVG
- #928 `filterBy false` doesn't work as intended
- #929 block repeat rearrange error
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1409994/assets,https://api.github.com/repos/vuejs/vue/releases/1409994,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.0,https://github.com/vuejs/vue/releases/tag/0.12.0,https://api.github.com/repos/vuejs/vue/zipball/0.12.0,0.12.0,False,False
1378102,2015-06-04T19:00:19Z,2015-06-04T19:15:08Z,,"### New in 0.12.0-rc2
- Support staggering transitions for `v-repeat`. [demo](http://jsfiddle.net/yyx990803/ujqrsu6w/)
  
  Simply add a `stagger` attribute:
  
  ``` html
    <div v-repeat=""list"" v-transition=""fade"" stagger=""100"">
  ```
  
    Enter and leave stagger can be defined separately as `enter-stagger` and `leave-stagger`. The stagger can also be dynamically calculated via a javascript hook:
  
  ``` js
    Vue.transition('fade', {
      stagger: function (index) {
        // increase delay by 50ms for each transitioned item,
        // but limit max delay to 300ms
        return Math.min(300, index * 50)
      }
      // or you can use `enterStagger` and `leaveStagger`
    })
  ```
- Support expressions in content selectors. (resolved only once) e.g.
  
  ``` html
  <content select=""p:nth-child({{$index + 1}})""></content>`
  ```
- `v-class` can now accept an object value. The keys will be used as class names and toggled based on the truthy-ness of the value.
- Warnings in debug mode now prints the error stack instead of invoking the debugger statement.

### Potentially breaking changes
- When `v-ref` is used together with `v-repeat`, and the value being repeated on is an Object, the corresponding ref will also be an Object, with its keys pointing to the associated child instances.
- Transition cancel hook: you can now use `enterCancelled` and `leaveCancelled` hooks to handle a cancelled transition. Functions returned in `enter` and `leave` hooks are no longer respected.

### Fixed

#887, #892, #893
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1378102/assets,https://api.github.com/repos/vuejs/vue/releases/1378102,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.0-rc2,https://github.com/vuejs/vue/releases/tag/0.12.0-rc2,https://api.github.com/repos/vuejs/vue/zipball/0.12.0-rc2,0.12.0-rc2,False,True
1363271,2015-06-01T20:56:45Z,2015-06-01T21:03:45Z,,"## New in 0.12.0-rc

#### Improvements
- `v-repeat` now supports using `track-by=""$index""` when there's no key to track. This causes Vue to reuse the DOM elements and child instances in place without re-ordering them, so prefer using it on simple repeats without interactivity.
- Literal props are now supported when manually mounting a root instance.
- Paths containing dynamic segments, e.g. `a[b]` will now create the path if not already present, however, it will throw a warning and prompt you to pre-initialize the path if possible.

#### Fixed
- props are now properly persisted when an instance's `$data` is replaced.

## Aggregated change log based on the diffs between 0.12.0-rc and 0.11.10

#### Breaking Changes
- `paramAttributes` option has been renamed to `props`.
- `v-with` has been removed. Now `props` are the only way to pass data to a child component.
- `v-component` has been removed. Now all components should use the custom tag syntax. For dynamic components, a new syntax is introduced: `<component is=""{{view}}""></component>`.
- `v-partial` and `{{> partial}}` have been removed.
- Filter argument syntax has been reworked. Now non-quoted arguments are treated as dynamic paths (and the argument will be auto-retrieved from the vm when the filter function is called); only arguments enclosed in quotes are passed in as plain strings.
  
  Example:
  
  ``` html
  {{ msg | filter argA 'argB' }}
  ```
  
  In the `filter` function, the first argument will be the value of `vm.argA`, and the second argument will be a plain string `""argB""`.
  
  For the reasoning behind it, see [this comment](https://github.com/vuejs/Discussion/issues/158#issuecomment-105256475).

#### New Features
- Async components. Example:
  
  ``` js
  components: {
    async: function (resolve) {
      setTimeout(function () {
        resolve({
          template: '<div>I am async!</div>'
        })
      }, 1000)
    }
  }
  ```
  
  This feature allows you to asynchronously resolve a component. The goal is to enable easy ""lazy loading"" for large apps with multiple pages/sections. Here we are using `setTimeout` simply for demo purposes - you will need to provide your own mechanism for fetching a component definition from the server. One example would be paring this feature with Webpack's code-splitting functionality.
- elementDirectives. Example:
  
  ``` js
  Vue.elementDirective('my-stuff', {
    update: function () { /* ... */ }
  })
  ```
  
  ``` html
  <my-stuff></my-stuff>
  ```
  
  This is similar to Angular's `""E""` mode directive. Basically, instead of treating the custom element as a component, treat it as a directive instead. Note element directives are ""terminal"", which means once Vue encounters an element directive, it will basically skip that element, and the directive is responsible for handling **everything** on and inside that element. This mechanism opens up more flexibility in handling custom elements, without necessarily incurring the overhead of a component instance.

#### Improvements
- props
  - props now support explicit one-way binding with the syntax of `prop=""{{* oneway}}""`
  - props can now contain multiple mustache tags, e.g. `prop=""{{a}} b""`
  - props can now contain filters, e.g. `prop=""{{a | reverse}}""`
  - props can now contain expressions, e.g. `prop=""{{a + b}}""`
  - When a prop's parent expression is not ""settable"", the prop binding will be automatically one-way.
  - All props are created and observed by default when a component is instantiated.
  - Literal props are now supported when manually mounting a root instance.
- Transition system refactor: CSS transitions and JavaScript transition hooks can now work together! The list of available JavaScript hooks have also been expanded. Here is a list of all available hooks:
  - `beforeEnter`
  - `enter`
  - `afterEnter`
  - `beforeLeave`
  - `leave`
  - `afterLeave`
  
  You can use these hooks to do additional work while having the CSS part handled for you automatically. The refactor maintains backwards compatibility so your old transitions should still work. One important thing to note though: the `done` callback in `enter` and `leave` hooks is now optional, similar to how it is optional in a Mocha test. Vue will look at the number of arguments of the function to determine whether the hook expects to control when the transition should end. For example:
  
  ``` js
    {
      enter: function (el) {
         // No `done` argument, so the end of the transition
         // will depend on the CSS `transitionend` or
         // `animationend` event.
      }
    }
  ```
  
    vs.
  
  ``` js
    {
      enter: function (el, done) {
        // the `done` callback here indicates that you want
        // to explicitly control when the transition should end.
        // the transition will only end when you call this callback.
      }
    }
  ```
- `v-repeat`
  - When `v-repeat` is used to iterate over an object, the instances are cached using the property key by default. This should avoid the entire list being re-rendered when the object is mutated.
  - `v-repeat` now supports using `track-by=""$index""` when there's no key to track. This causes Vue to reuse the DOM elements and child instances in place without re-ordering them, so prefer using it on simple repeats without interactivity.
- `v-model`
  - `options` param for `v-model` now also respects `disabled: true` in the options array. (via #861 by @holic)
- Component Transclusion
  - When a component with `replace:true` is compiled, attributes on its placeholder node are now properly merged with the attributes on the component's template root node. Details:
    - If both nodes have `class` attributes, the class names are merged.
    - If both nodes have the same directive attribute, they will be compiled respectively in their own scope. (placeholder directives in parent scope and template root directives in child scope)
    - If both nodes have the same plain attribute, the template root node will take priority.
- General
  - New instance method: `vm.$nextTick`. This is the same as `Vue.nextTick`, except that it can be called inside instance methods as `this.$nextTick`, and the callback's `this` context will be auto-bound to the current instance. This avoids having to require the global `Vue` inside a component module just to use `Vue.nextTick`.
  - Errors in simple path getters are now suppressed by default. e.g. `a.b.c` when `a === {}`
  - Paths containing dynamic segments, e.g. `a[b]` will now create the path if not already present, however, it will throw a warning and prompt you to pre-initialize the path if possible.
  - Internally Vue now uses empty text nodes instead of comment nodes as DOM-manipulation anchors. This results in much cleaner HTML output. When in debug mode, comment nodes will still be used to help better analyze the structure of the rendered DOM.
  - Optimized instance initialization, which increases first-render performance by roughly 30%.

#### Fixed
- #853 `v-repeat` should only sync $value back to original array for non-object arrays.
- vuejs/Discussion#173 props are now properly persisted when an instance's `$data` is replaced.
- #869 `v-repeat` switching between Object/Array values
- #873 `$add` should work when an object is used as a vm's `$data` and observed elsewhere at the same time.

## Staged for 0.12 but not currently in 0.12.0-rc
- `v-class` can now accept an object value. The keys will be used as class names and toggled based on the truthy-ness of the value.
- When `v-ref` is used together with `v-repeat`, and the value being repeated on is an Object, the corresponding ref will also be an Object, with its keys pointing to the associated child instances.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1363271/assets,https://api.github.com/repos/vuejs/vue/releases/1363271,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.0-rc,https://github.com/vuejs/vue/releases/tag/0.12.0-rc,https://api.github.com/repos/vuejs/vue/zipball/0.12.0-rc,0.12.0-rc,False,True
1355674,2015-05-30T02:27:30Z,2015-05-30T02:45:22Z,,"### Improvements
- Transition system refactor: CSS transitions and JavaScript transition hooks can now work together! The list of available JavaScript hooks have also been expanded. Here is a list of all available hooks:
  - `beforeEnter`
  - `enter`
  - `afterEnter`
  - `beforeLeave`
  - `leave`
  - `afterLeave`
  
  You can use these hooks to do additional work while having the CSS part handled for you automatically. The refactor maintains backwards compatibility so your old transitions should still work. One important thing to note though: the `done` callback in `enter` and `leave` hooks is now optional, similar to how it is optional in a Mocha test. Vue will look at the number of arguments of the function to determine whether the hook expects to control when the transition should end. For example:
  
  ``` js
    {
      enter: function (el) {
         // No `done` argument, so the end of the transition
         // will depend on the CSS `transitionend` or
         // `animationend` event.
      }
    }
  ```
  
    vs.
  
  ``` js
    {
      enter: function (el, done) {
        // the `done` callback here indicates that you want
        // to explicitly control when the transition should end.
        // the transition will only end when you call this callback.
      }
    }
  ```
- New instance method: `vm.$nextTick`. This is the same as `Vue.nextTick`, except that it can be called inside instance methods as `this.$nextTick`, and the callback's `this` context will be auto-bound to the current instance. This avoids having to require the global `Vue` inside a component module just to use `Vue.nextTick`.
- Optimized instance initialization, which increases first-render performance by roughly 30%.

### Fixed
- #869
- #873
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1355674/assets,https://api.github.com/repos/vuejs/vue/releases/1355674,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.0-beta5,https://github.com/vuejs/vue/releases/tag/0.12.0-beta5,https://api.github.com/repos/vuejs/vue/zipball/0.12.0-beta5,0.12.0-beta5,False,True
1338268,2015-05-26T15:21:17Z,2015-05-26T15:31:57Z,,"### Breaking Change from 0.12.0-beta3
- Filter argument syntax has been reworked. Now non-quoted arguments are treated as dynamic paths (and the argument will be auto-retrieved from the vm when the filter function is called); only arguments enclosed in quotes are passed in as plain strings.
  
  Example:
  
  ``` html
  {{ msg | filter argA 'argB' }}
  ```
  
  In the `filter` function, the first argument will be the value of `vm.argA`, and the second argument will be a plain string `""argB""`.
  
  For the reasoning behind it, see [this comment](https://github.com/vuejs/Discussion/issues/158#issuecomment-105256475).

### Improvements
- `options` param for `v-model` now also respects `disabled: true` in the options array. (via #861 by @holic)
- `v-transition` now adds a `.v-transition` class at all times; in the case of `v-transition=""fade""`, the added class will be `.fade-transition`. This removes the need to manually add an additional class just to give the element transition property.
- Internally Vue now uses empty text nodes instead of comment nodes as DOM-manipulation anchors. This results in much cleaner HTML output. When in debug mode, comment nodes will still be used to help better analyze the structure of the rendered DOM.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1338268/assets,https://api.github.com/repos/vuejs/vue/releases/1338268,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.0-beta4,https://github.com/vuejs/vue/releases/tag/0.12.0-beta4,https://api.github.com/repos/vuejs/vue/zipball/0.12.0-beta4,0.12.0-beta4,False,True
1328987,2015-05-22T20:07:50Z,2015-05-22T20:14:34Z,,"### Change from 0.12.0-beta2
- Based on community feedback, the syntax for dynamic component has changed to:
  
  ``` html
  <component is=""{{view}}""></component>
  ```

### Improvements
- When `v-repeat` is used to iterate over an object, the instances are cached using the property key by default. This should avoid the entire list being re-rendered when the object is mutated.

### Fixed

#853 `v-repeat` should only sync $value back to original array for non-object arrays.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1328987/assets,https://api.github.com/repos/vuejs/vue/releases/1328987,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.0-beta3,https://github.com/vuejs/vue/releases/tag/0.12.0-beta3,https://api.github.com/repos/vuejs/vue/zipball/0.12.0-beta3,0.12.0-beta3,False,True
1304052,2015-05-16T17:52:42Z,2015-05-16T18:22:37Z,,"Keep in mind things are still subject to change!

### Changed
- `paramAttributes` option has been renamed to `props`.
- `v-with` has been removed. Now `props` are the only way to pass data to a child component.
- `v-component` has been removed. Now all components should use the custom tag syntax. For dynamic components, a new syntax is introduced: `<component type=""{{view}}""></component>`.
- `v-partial` and `{{> partial}}` have been removed.

The goal is to remove some cruft in the API and make things more consistent across the board.

### New Features
- Async components. Example:
  
  ``` js
  components: {
    async: function (resolve) {
      setTimeout(function () {
        resolve({
          template: '<div>I am async!</div>'
        })
      }, 1000)
    }
  }
  ```
  
  This feature allows you to asynchronously resolve a component. The goal is to enable easy ""lazy loading"" for large apps with multiple pages/sections. Here we are using `setTimeout` simply for demo purposes - you will need to provide your own mechanism for fetching a component definition from the server. One example would be paring this feature with Webpack's code-splitting functionality.
- elementDirectives. Example:
  
  ``` js
  Vue.elementDirective('my-stuff', {
    update: function () { /* ... */ }
  })
  ```
  
  ``` html
  <my-stuff></my-stuff>
  ```
  
  This is similar to Angular's `""E""` mode directive. Basically, instead of treating the custom element as a component, treat it as a directive instead. Note element directives are ""terminal"", which means once Vue encounters an element directive, it will basically skip that element, and the directive is responsible for handling **everything** on and inside that element. This mechanism opens up more flexibility in handling custom elements, without necessarily incurring the overhead of a component instance.

### Improvements
- props now support explicit one-way binding with the syntax of `prop=""{{* oneway}}""`
- props can now contain multiple mustache tags, e.g. `prop=""{{a}} b""`
- props can now contain filters, e.g. `prop=""{{a | reverse}}""`
- props can now contain expressions, e.g. `prop=""{{a + b}}""`
- When a prop's parent expression is not ""settable"", the prop binding will be automatically one-way.
- All props are created and observed by default when a component is instantiated.
- When a component with `replace:true` is compiled, attributes on its placeholder node are now properly merged with the attributes on the component's template root node. Details:
  - If both nodes have `class` attributes, the class names are merged.
  - If both nodes have the same directive attribute, they will be compiled respectively in their own scope. (placeholder directives in parent scope and template root directives in child scope)
  - If both nodes have the same plain attribute, the template root node will take priority.
- Errors in simple path getters are now suppressed by default. e.g. `a.b.c` when `a === {}`
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1304052/assets,https://api.github.com/repos/vuejs/vue/releases/1304052,dev,https://api.github.com/repos/vuejs/vue/tarball/0.12.0-beta2,https://github.com/vuejs/vue/releases/tag/0.12.0-beta2,https://api.github.com/repos/vuejs/vue/zipball/0.12.0-beta2,0.12.0-beta2,False,True
1271826,2015-05-07T19:00:36Z,2015-05-07T19:07:01Z,,"Minor patch release: fix a regression where custom element components not working with `v-repeat` (#822)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1271826/assets,https://api.github.com/repos/vuejs/vue/releases/1271826,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.10,https://github.com/vuejs/vue/releases/tag/0.11.10,https://api.github.com/repos/vuejs/vue/zipball/0.11.10,0.11.10,False,False
1266833,2015-05-06T20:40:03Z,2015-05-06T21:19:22Z,,"### New
- Observed objects now also have the `$set` method. `obj.$set(key, val)` is the same as `obj[key] = val`, except that it calls `$add` first if the property doesn't exist.
- `v-events` now also accept a single expression statement.
- `v-transition` now supports dynamic syntax, e.g. `v-transition=""{{transitionToUse}}""`
- Partials now support filters. e.g. `{{> myPartial | transform}}`. The filter function will get the partial string as the first argument.
- Inline expressions now support more globals in addition to `Math` and `Date`, including:
  - `isNaN`
  - `isFinite`
  - `parseInt`
  - `parseFloat`
  - `decodeURI` & `decodeURIComponent`
  - `encodeURI` & `encodeURIComponent`

### Internals

The component transclusion logic has received some major refactoring, improving the overall correctness and code quality. Transcluded content from the parent are now bound to the correct context and remain reactive through compilation/teardowns in `v-if` and partials. The refactor should also result in better performance for the case where `v-repeat` and `v-component` are used together.

### Fixed
- #801 detached hook not firing for transcluded components inside `v-if`
- #802 `vm.$set` not triggering updates in repeated child instances
- #804 transcluded content inside `v-if` are not persistent
- #806 watcher accidentally clearing watcherList on teardown
- #776 & #813 v-with setter error when bound to literal value
- #818 skip css transitions if page is not visible
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1266833/assets,https://api.github.com/repos/vuejs/vue/releases/1266833,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.9,https://github.com/vuejs/vue/releases/tag/0.11.9,https://api.github.com/repos/vuejs/vue/zipball/0.11.9,0.11.9,False,False
1197133,2015-04-21T20:10:40Z,2015-04-21T20:12:55Z,,"Revert `v-repeat` inplace update strategy due to issues in some production use cases and non-substantial perf gain.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1197133/assets,https://api.github.com/repos/vuejs/vue/releases/1197133,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.8,https://github.com/vuejs/vue/releases/tag/0.11.8,https://api.github.com/repos/vuejs/vue/zipball/0.11.8,0.11.8,False,False
1193601,2015-04-21T03:19:46Z,2015-04-21T03:24:55Z,,"Patch release to fix an issue in 0.11.6 where `v-repeat` can get stuck in an infinite loop when moving around block instances (#799)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1193601/assets,https://api.github.com/repos/vuejs/vue/releases/1193601,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.7,https://github.com/vuejs/vue/releases/tag/0.11.7,https://api.github.com/repos/vuejs/vue/zipball/0.11.7,0.11.7,False,False
1184325,2015-04-18T07:11:19Z,2015-04-18T07:18:21Z,,"0.11.6 is finally here!

### New
- Added `inline-template` param for `v-component`.
- Added `debounce` param for `v-model`.
- `option` param for `v-model` now supports filters.
- `v-model` now interopts with jQuery events.

### Changed
- `<content select="""">` selectors now can only select top-level childNodes of the host node. This new behavior is more consistent with the Shadow DOM spec and also fixes issues where the selector can match unwanted nodes in nested transclusions.
- JavaScript transition functions' invocation context are now always the closest vm of the node being transitioned, regardless of which vm the transition directive belongs to. This means if a node being transition is a vm's root node, that vm will be used as the `this` context.
- `v-repeat` now uses an in-place update strategy for better DOM/instance reuse when the following conditions are met:
  - the repeated block doesn't contain components;
  - the repeated list is not using transitions.
    This change should not break existing usage.

### Fixed
- #655 directives on block instance containers are not compiled
- #670 honor `number` option for select with multiple attribute
- #684 attach/detach hooks for transcluded components inside `v-if` are never called
- #695 `name` option should be inherited
- #707 `v-repeat` not working on `$data`
- #715 boolean literals not working with `v-with`
- #716 unwatch causing error during destroy
- #717 error parsing multiline expressions
- #720 return empty string for Infinity and properly format floating point values
- #721 support sorting by $key and $value in `orderBy` filter
- #728 `v-if` and `v-partial` not calling unlink functions when unbound
- #736 parent content loses reactivity when transcluded
- #760 `<textarea>` placeholders become its value in IE10/11
- #761 `v-model` not working `$value` inside `v-repeat`
- #766 `<option value="""">` initial value is undefined
- #772 reserved prefix check cannot handle Number arguments
- #779 bi-directional filters not working in attribute interpolations
- #781 reference errors are not handled in `vm.$get`
- #783 nested repeat instances inherting parent `_reused` flag
- #784 Cannot use global `Date` and the `new` keyword inside expressions
- #791 instances with `inherit:true` calling unlink functions of parent when destroyed

### Many Thanks to These Awesome Contributors!
- @calebboyd 
- @nkovacs 
- @44px 
- @zhongxingdou 
- @nazo 
- @tscanlin 
- @njovin
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/1184325/assets,https://api.github.com/repos/vuejs/vue/releases/1184325,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.6,https://github.com/vuejs/vue/releases/tag/0.11.6,https://api.github.com/repos/vuejs/vue/zipball/0.11.6,0.11.6,False,False
923487,2015-02-05T21:26:28Z,2015-02-05T21:32:37Z,,"0.11.5 is mostly about shipping the changes and fixes that were already done a while ago - fixes for current issues will land in next release.

### Changed
- `Vue.nextTick` now uses `MutationObserver` when available for asynchronous updates, and falls back to `setTimeout`. This should fix issues where Vue doesn't update when the tab is out of focus.
- `v-with` is now two-way binding between a parent property and a child property, instead of a one-way update.

### Fixed
- Fixed an issue where `v-repeat` doesn't work properly on nested arrays when not using identifiers.
- Fixed an issue where `attached` and `detached` hooks are not firing for transcluded components.
- #626, #631, #636, #652, #657, #685
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/923487/assets,https://api.github.com/repos/vuejs/vue/releases/923487,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.5,https://github.com/vuejs/vue/releases/tag/0.11.5,https://api.github.com/repos/vuejs/vue/zipball/0.11.5,0.11.5,False,False
762688,2014-12-07T20:43:01Z,2014-12-07T21:01:27Z,,"### New
- New directive: `v-events`
  
  This directive allows you to listen to a child component's events in the template:
  
  ``` html
  <!-- inside parent template -->
  <div v-component=""child"" v-events=""change: onChildChange""></div>
  ```
  
  When the child component fires a `change` event (via `vm.$emit('change')`, not DOM events), the parent's `onChildChange` method will be invoked. This allows more decoupled parent-child communication without having to hard-code event listeners into the parent component.
  
  Note `v-events` can only be used together with `v-component`, i.e. on the root element of a child component.
- `v-style` improvements
  - Now accepts both camelCase and dash-case, so both `""margin-left""` and `""marginLeft""` work the same way.
  - The old syntax for auto-prefixing (prefix with `$`) has been deprecated; `v-style` now automatically detects and caches the appropriate prefix to add when setting the styles, so you can just use non-prefixed properties without worrying about it.

### Changed
- User watcher callbacks registered via `vm.$watch()` are now guaranteed to be fired after directives that depend on the same data have been updated. For example, if a directive and a `$watch` callback both depend on the data property `a`, when `a` changes, the directive will perform the DOM update first, then the `$watch` callback will be called. This ensures that inside `$watch` callbacks the DOM will always be in a resolved state. Note this mechanism is not guaranteed when `Vue.config.async` has been set to `false`.
- When `Vue.config.debug` is set to true, Vue will now automatically use synchronous mode and throw a `debugger` statement when there is a warning. This enables the user to inspect the full stack trace in browser dev tools.

### Fixed
- fixed a bug that causes custom element syntax + `v-repeat` not working together
- #618
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/762688/assets,https://api.github.com/repos/vuejs/vue/releases/762688,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.4,https://github.com/vuejs/vue/releases/tag/0.11.4,https://api.github.com/repos/vuejs/vue/zipball/0.11.4,0.11.4,False,False
749658,2014-12-02T17:22:05Z,2014-12-02T17:31:06Z,,"- Fixed #615 `paramAttributes` not being compiled correctly
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/749658/assets,https://api.github.com/repos/vuejs/vue/releases/749658,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.3,https://github.com/vuejs/vue/releases/tag/0.11.3,https://api.github.com/repos/vuejs/vue/zipball/0.11.3,0.11.3,False,False
747604,2014-12-02T02:37:44Z,2014-12-02T02:45:12Z,,"### Changed
- Mixins are now resolved before the option object that contains it. An example is by the time your component's `created` hook is called, all its mixins' `created` hooks would have already been called in order.
- Mixins can be composed by including another mixin

### Fixed
- Refactored component scope compilation logic to fix a few edge cases
- Fixed #610, #612, #613
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/747604/assets,https://api.github.com/repos/vuejs/vue/releases/747604,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.2,https://github.com/vuejs/vue/releases/tag/0.11.2,https://api.github.com/repos/vuejs/vue/zipball/0.11.2,0.11.2,False,False
744294,2014-12-01T00:24:21Z,2014-12-01T00:25:18Z,,"### Component compilation scope change

When a component is used in a parent template, e.g.:

``` html
<div v-component=""child"" v-show=""active"" v-on=""click:onClick"">
  <p>{{message}}</p>
</div>
```

The directives (`v-show` and `v-on`) and the transclusion content (`{{message}}`) will now be compiled in the parent's scope. That means the value of `active`, `onClick` and `message` will be resolved against the parent. Any directives/interpolations inside the child's template will be compiled in the child's scope. This ensures a cleaner separation between parent and child components.

### Advanced transition control parameters for `v-component`
- `wait-for`
  
  An event name to wait for on the incoming child component before switching it with the current component.
  This allows you to wait for asynchronous data to be loaded before triggering the transition to avoid unwanted flash of emptiness in between.
  
  **Example:**
  
  ``` html
  <div v-component=""{{view}}"" wait-for=""data-loaded""></div>
  ```
  
  ``` js
  // component definition
  {
    compiled: function () {
      var self = this
      $.ajax({
        // ...
        success: function (data) {
          self.$data = data
          self.emit('data-loaded')
        }
      })
    }
  }
  ```
- `transition-mode`
  
  By default, the transitions for incoming and outgoing components happen simultaneously.
  This param allows you to configure two other modes:
  - `in-out`: New component transitions in first, current component transitions out after incoming transition has finished.
  - `out-in`: Current component transitions out first, new componnent transitions in after outgoing transition has finished.
  
  **Example**
  
  ``` html
  <div v-component=""{{view}}""
    v-transition=""fade""
    transition-mode=""out-in"">
  </div>
  ```

### Exposed additional internals:

Only intended for advanced users who wish to dynamically extend Vue and are familiar with the source code.
- Key code aliases for the `key` filter: Now accessible as `Vue.filter('key').keyCodes`
- Input type handlers for `v-model`: Now accessible as `Vue.directive('model').handlers`
- Parsers and Compiler: Now accessible as `Vue.parsers` & `Vue.compiler`.

### Other new features
- `v-style` now accept an object of CSS property/value pairs. (suggested in #578, and thanks to @skovhus for the pull request!)
- New custom directive option: `deep`.
  
  When this option is set to true and the directive is bound to an object, it will collect all nested properties of that object as dependencies, so that any nested property change will also trigger the directive's `upadte` function.
- When using `data` option in multiple extension/mixins, the returned values will now be recursively merged. (#594)
  
  **Example:**
  
  ``` js
  var A = Vue.extend({
    data: function () {
      return {
        a: 1
      }
    }
  })
  var B = A.extend({
    data: function () {
      return {
        b: 2
      }
    }
  })
  var b = new B()
  b.$log() // -> { a: 1, b: 2 }
  ```
- The `json` filter is now bi-directional and can be used on a `<textarea>` with `v-model` for two-way binding.
- `trackby` for `v-repeat` is now `track-by`, for more consistent naming. The `trackby` usage is still preserved for backwards compatibility.

### Bug fixes

Fixed #557, #558, #561, #569, #580, #589, #592.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/744294/assets,https://api.github.com/repos/vuejs/vue/releases/744294,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.1,https://github.com/vuejs/vue/releases/tag/0.11.1,https://api.github.com/repos/vuejs/vue/zipball/0.11.1,0.11.1,False,False
685140,2014-11-07T01:52:42Z,2014-11-07T02:30:08Z,v0.11.0: Cowboy Bebop,"> ""There are ends we don't desire, but they're inevitable, we have to face them. It's what being human is all about."" - Jet Black

0.11.0 is rewritten from the ground up and contains many breaking changes. Please read through the [change list](https://github.com/yyx990803/vue/blob/master/changes.md) before upgrading.

[Vuejs.org](http://vuejs.org) has been updated to match 0.11.0 API; Docs for 0.10.6 have been moved to [legacy.vuejs.org](http://legacy.vuejs.org).

### Changes since 0.11.0-rc3
- `paramAttributes` option now auto strips `data-` prefixes and uses camelized attribute name as the property name. [Docs](http://vuejs.org/api/options.html#paramAttributes)
- If there is a leaving transition, the `destroyed` hook is now called after the transition has finished and the element has been removed from the DOM.
- JavaScript transition functions now have their `this` context set to the owner vm.
- Fixed: #512, #517, #520, #531, #536, #539, #541
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/685140/assets,https://api.github.com/repos/vuejs/vue/releases/685140,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.0,https://github.com/vuejs/vue/releases/tag/0.11.0,https://api.github.com/repos/vuejs/vue/zipball/0.11.0,0.11.0,False,False
650376,2014-10-24T04:11:30Z,2014-10-24T04:25:18Z,,"### New
- New partial compilation implementation. This enables a few new features/changes:
  - dynamic partial: `<div v-partial=""{{partialId}}""></div>` now reacts to change of `partialId`.
  - new `v-if` implementation: no longer using an anonymous wrapper instance, should work more intuitively.
  - new instance method: `vm.$compile()` can dynamically compile a piece of DOM. [more details](https://github.com/yyx990803/vue/blob/0.11.0-rc3/changes.md#new-methods)
- New global config option: `Vue.config.async`. Defaults to `true`; if set to `false` will force Vue to use synchronous view/watcher updates.
- New instantiation option: [`watch`](https://github.com/yyx990803/vue/blob/0.11.0-rc3/changes.md#new-option-watch)

### Changed
- Custom directive API change:
  - `isFn` option for directives is removed.
  - instead there's a new option: [`acceptStatement`](https://github.com/yyx990803/vue/blob/0.11.0-rc3/changes.md#new-directive-option-acceptstatement).
- Component directive scope change:
  
  directives on the root element of a component from the parent's template will be compiled in the parent's scope. For example:
  
  ``` html
    <div v-component=""comp"" v-show=""ok""></div>
  ```
  
  Here the `v-show` will be compiled in parent scope, thus it is bound to the `ok` property on the parent, not the component itself.
  
  Note that if the directive is part of the component's own template, however, it will be compiled in the component's scope instead.

### Fixed
- #474 
- #481 
- #484 
- #486 
- #489 
- #490 
- #498 
- #505 
- #506 
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/650376/assets,https://api.github.com/repos/vuejs/vue/releases/650376,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.0-rc3,https://github.com/vuejs/vue/releases/tag/0.11.0-rc3,https://api.github.com/repos/vuejs/vue/zipball/0.11.0-rc3,0.11.0-rc3,False,True
609708,2014-10-07T17:07:26Z,2014-10-07T17:27:40Z,,"### API changes
- `$mount()` now creates an empty div if no argument is provided.

### Internal changes

No longer mutates data objects' `__proto__` by default. `Vue.config.proto` now only affects observed Arrays.

### Bug fixes
- fix v-repeat error when dealing with duplicate primitive values
- fix #447 computed properties bound to wrong context
- fix #448 v-attr should remove attribute when value === false
- fix #450 custom element component unnecessary warning
- fix $appendTo & $before target in document check
- fix content transclusion with replace:true + block instance
- fix #458 dynamic component using meta properties
- fix #468 dynamic literals with falsy initial value
- fix #471 merging default data with already observed instance data
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/609708/assets,https://api.github.com/repos/vuejs/vue/releases/609708,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.0-rc2,https://github.com/vuejs/vue/releases/tag/0.11.0-rc2,https://api.github.com/repos/vuejs/vue/zipball/0.11.0-rc2,0.11.0-rc2,False,True
586776,2014-09-27T01:23:47Z,2014-09-27T01:25:50Z,,"This is a release candidate for 0.11.0.

### Changes

https://github.com/yyx990803/vue/blob/0.11.0-rc/changes.md

### Installation
- `npm install vue@0.11.0-rc`
- `component install vue@0.11.0-rc`
- `bower install vue#0.11.0-rc`
- [standalone build](https://github.com/yyx990803/vue/tree/0.11.0-rc/dist)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/586776/assets,https://api.github.com/repos/vuejs/vue/releases/586776,dev,https://api.github.com/repos/vuejs/vue/tarball/0.11.0-rc,https://github.com/vuejs/vue/releases/tag/0.11.0-rc,https://api.github.com/repos/vuejs/vue/zipball/0.11.0-rc,0.11.0-rc,False,True
456663,2014-07-29T02:43:36Z,2014-07-29T04:02:52Z,,"- fix `v-style` error when value is falsy or a number. ( thanks to @dmfilipenko )
- fix the built-in `currency` filter error when value is a string ( thanks to @dmfilipenko )
- fix `Vue.require` for building with Component v1.0+ ( thanks to @kewah )
- Allow template nodes to be passed as a template option ( thanks to @jordangarcia )
- `vm.$destroy()` now accepts an optional argument `noRemove`. When passed in as `true` it will leave the vm's DOM node intact after the vm is destroyed.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/456663/assets,https://api.github.com/repos/vuejs/vue/releases/456663,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.10.6,https://github.com/vuejs/vue/releases/tag/v0.10.6,https://api.github.com/repos/vuejs/vue/zipball/v0.10.6,v0.10.6,False,False
361467,2014-06-06T19:09:35Z,2014-06-06T19:40:24Z,,"This is a bug fix release.

**Improvements**
- mixin methods are now properly tracked in computed properties.
- `v-style` now respects the `!important` suffix. (#278)
- `lazy` option is now automatically inherited if child VM doesn't have this option explicitly set. (#284)
- `v-on` now works properly on iframes from the same origin. (#290)

**Fixed**
- #249 Fixed transitions on some Android 4.1 devices (thanks to @bpierre)
- #253 Fixed parsing error on attribute names containing colons
- #267 Removed extra `cloneNode` in `v-partial` (thanks to @dyu)
- #276 & #281 Fixed child vms removed before parent's transition finishes
- #282 Fixed `v-with` not processed before other directives
- #288 Fixed `v-with` circular updates
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/361467/assets,https://api.github.com/repos/vuejs/vue/releases/361467,master,https://api.github.com/repos/vuejs/vue/tarball/v0.10.5,https://github.com/vuejs/vue/releases/tag/v0.10.5,https://api.github.com/repos/vuejs/vue/zipball/v0.10.5,v0.10.5,False,False
289610,2014-04-25T19:47:12Z,2014-04-25T19:59:37Z,,"### New
- Uses more robust template to DocumentFragment conversion so that table/option elements are properly handled, and SVG tags are created with proper namespace.

### Changed
- When using `v-repeat` on an Array of primitive values, changing `$value` from the repeated instance will no longer sync the change back to the original Array. See explanation in b50e5a5

### Fixed
- #213 
- #234
- #239
- #242 
- #247
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/289610/assets,https://api.github.com/repos/vuejs/vue/releases/289610,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.10.4,https://github.com/vuejs/vue/releases/tag/v0.10.4,https://api.github.com/repos/vuejs/vue/zipball/v0.10.4,v0.10.4,False,False
242672,2014-03-26T23:13:02Z,2014-03-26T23:43:48Z,,"- introduced a new, more robust directive parser that fixes issues like #201
- make sure directives are compiled in the order they appear in the markup
- fix some Bindings removing wrong subscribers of their dependencies when they are unbound.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/242672/assets,https://api.github.com/repos/vuejs/vue/releases/242672,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.10.3,https://github.com/vuejs/vue/releases/tag/v0.10.3,https://api.github.com/repos/vuejs/vue/zipball/v0.10.3,v0.10.3,False,False
239188,2014-03-25T04:19:30Z,2014-03-25T04:21:52Z,,"- fix #198 v-repeat diff not working properly with identifier
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/239188/assets,https://api.github.com/repos/vuejs/vue/releases/239188,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.10.2,https://github.com/vuejs/vue/releases/tag/v0.10.2,https://api.github.com/repos/vuejs/vue/zipball/v0.10.2,v0.10.2,False,False
237360,2014-03-24T08:11:38Z,2014-03-24T08:13:34Z,,"- Fix #195 filters not working in attribute inline bindings
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/237360/assets,https://api.github.com/repos/vuejs/vue/releases/237360,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.10.1,https://github.com/vuejs/vue/releases/tag/v0.10.1,https://api.github.com/repos/vuejs/vue/zipball/v0.10.1,v0.10.1,False,False
236816,2014-03-23T18:53:01Z,2014-03-23T19:00:35Z,v0.10.0: Blade Runner,"> ""A coding sequence cannot be revised once it's been established."" -Tyrell

[Release post](http://vuejs.org/2014/03/22/vuejs-010-release/)

### New
- Literal directives can now contain interpolation tags. These tags will be evaluated only once at compile time. An example usage is conditionally decide which component to instantiate with `v-component=""{{type}}""`. [Doc](http://vuejs.org/guide/directives.html#literal-directives).
- Attributes listed in the `paramAttributes` option now accept mustache interpolations too. They will also only be evaluated once.
- `v-repeat` now accepts an argument which will be used as the identifier for the wrapped object. This allows more explicit property access in repeaters. [Doc](http://vuejs.org/guide/list.html#using-an-identifier).
- Added `v-view` directive which binds to a string value and dynamically instantiate different components using that string as the component ID. [Doc](http://vuejs.org/api/directives.html#v-view).
- Added `filterBy` and `orderBy` filters for `v-repeat`. [Doc](http://vuejs.org/api/filters.html#filterby).
- Custom filters that access properties on its `this` context will be considered **computed filters**. [Doc](http://vuejs.org/guide/filters.html#computed-filters).
- You can now access the event in `v-on` handler expressions as `$event`. Example: `<a v-on=""click:handle('hello', $event)"">Hello</a>`
- Interpolation delimiters can now be customized via the `delimiters` global config option. Example: `Vue.config({ delimiters: [""["", ""]""] })` will change the matched interpolation tags to `[[ ]]` for text bindings and `[[[ ]]]` for html bindings.

### Changed
- `{{>yield}}` syntax has been deprecated. A Web Components spec compatible content insertion mechanism using `<content>` elements has been introduced. [Doc](http://vuejs.org/guide/composition.html#content-insertion-points).
- To use a component as a custom element, the component ID must now contain a hyphen (`-`). This is consistent with the current custom element spec draft.
- `v-repeat` Arrays' augmented methods have been renamed from `set` to `$set(index, value)` and `remove` to `$remove(index | value)`. The prefix better differentiates them from native methods. The `replace` method has been removed.
- When iterating over an Object with `v-repeat`, the object no longer gets a `$repeater` array. Instead, the object is now augmented with two methods: `$add(key, value)` and `$delete(key)`, which will trigger corresponding view updates.
- `v-if` now creates and destroys a child ViewModel instance when the binding value changes, instead of simply removing/inserting the DOM node. In addition, it can no longer be used with `v-repeat`. Use `v-show` or the new built-in array filters instead.
- `v-with` can no longer be used alone. It now must be used with either `v-component` or `v-view`. `v-component` can also be used as an empty directive just to create a child VM using the default `Vue` constructor.
- Production build now strips all warnings and debug logs. To leverage `debug: true`, use the development version. The development version now has more detailed warning messages.

### Fixed
- `event.stopPropagation()` and `event.preventDefault()` inside `v-on` handlers now work as expected.
- `parent` option now works properly when used in `Vue.extend`
- Mustache bindings inside `<textarea>` are now properly interpolated before being set as value.

### Internal
- `v-component`, `v-with` and `v-if` have been re-written for a cleaner compile flow.
- `v-repeat` has been re-written to use refined diff algorithm which triggers minimum DOM manipulations when the array is set to a different instance containing overlapping elements. This makes it efficient to pipe an Array through filters.
- `template` option now directly clones native `<template>`'s content when available.
- Overall performance improvements for both initialization and rendering.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/236816/assets,https://api.github.com/repos/vuejs/vue/releases/236816,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.10.0,https://github.com/vuejs/vue/releases/tag/v0.10.0,https://api.github.com/repos/vuejs/vue/zipball/v0.10.0,v0.10.0,False,False
227361,2014-03-19T21:17:03Z,2014-03-17T17:34:22Z,0.10.0 Release Candidate,"- Build: https://raw.github.com/yyx990803/vue/0.10-rc/dist/vue.js
- Install via Component: `component install yyx990803/vue@0.10.0-rc`
- Install via NPM: `npm install yyx990803/vue#0.10.0-rc`

### New
- Literal directives can now contain mustache interpolation tags. These tags will be evaluated once at compile time. An example would be conditionally choose which component to create with `v-component=""{{type}}""`.
- Attributes listed in the `paramAttributes` option now accept mustache interpolations too. They will also only be evaluated once.
- `v-repeat` now accepts an argument which will be used as the identifier for the wrapped object. This allows more explicit property access in repeaters.
- Added `v-view` directive which binds to a string value and dynamically instantiate different components using that string as the component ID. See the updated [routing example](https://github.com/yyx990803/vue/blob/0.10-rc/test/functional/fixtures/routing.html).
- Added `filterBy` and `orderBy` filters for `v-repeat`. [example](https://github.com/yyx990803/vue/blob/0.10-rc/test/functional/fixtures/array-filters.html)
- Custom filters that access properties on its `this` context will be considered **computed filters**. Any directive that uses a computed filter will be forced into a computed directive even when the binding is a simple keypath.
- You can now access the event in `v-on` handler expressions as `$event`. Example: `<a v-on=""click:handle('hello', $event)"">Hello</a>`
- Interpolation delimiters can now be customized via the `delimiters` global config option. Example: `Vue.config({ delimiters: [""["", ""]""] })` will change the matched interpolation tags to `[[ ]]` for text bindings and `[[[ ]]]` for html bindings.

### Changed
- To use a component as a custom element, the component ID must now contain a hyphen (`-`). This is consistent with the current custom element spec draft.
- `v-repeat` Arrays' augmented methods have been renamed to `$set(index, value)` and `$remove(index | value)` to better differentiate from native methods. The `replace` method has been removed.
- When iterating over an Object with `v-repeat`, the object no longer gets a `$repeater` array. Instead, the object is now augmented with two methods: `$add(key, value)` and `$delete(key)`, which will trigger corresponding view updates.
- Production build now strips all warnings and debug logs. To leverage `debug: true` you now have to use the development version.
- `v-if` now creates and destroys a child ViewModel instance when the binding value changes, instead of simply removing/inserting the DOM node. In addition, it can no longer be used with `v-repeat`. Use `v-show` or the new built-in array filters instead.
- `v-with` can no longer be used alone. It now must be used with either `v-component` or `v-view`. `v-component` can also be used as an empty directive just to create a child VM using the default `Vue` constructor.

### Fixed
- `event.stopPropagation()` and `event.preventDefault()` inside `v-on` handlers now work as expected.
- `parent` option now works properly when used in `Vue.extend`
- Mustache bindings inside `<textarea>` are now properly interpolated before being set as value.

### Internal
- `v-component`, `v-with` and `v-if` have been re-written for a cleaner compile flow.
- `v-repeat` has been re-written to use refined diff algorithm which triggers minimum DOM manipulations when the array is set to a different instance containing overlapping elements. This makes it efficient to pipe an Array through filters.
- The compiling procedure has been further optimized and instantiation perf has increased roughly 20%.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/227361/assets,https://api.github.com/repos/vuejs/vue/releases/227361,dev,https://api.github.com/repos/vuejs/vue/tarball/0.10.0-rc,https://github.com/vuejs/vue/releases/tag/0.10.0-rc,https://api.github.com/repos/vuejs/vue/zipball/0.10.0-rc,0.10.0-rc,False,True
206722,2014-03-02T23:22:14Z,2014-03-03T00:51:31Z,v0.9.3,"### New
- `v-with` can now be used to bind a parent VM's data property to the child VM with a different key, e.g. `v-with=""childKey: parentKey""`. Doc [here](http://vuejs.org/api/directives.html#v-with) and [here](http://vuejs.org/guide/composition.html#inheriting-properties-from-parent).
- added `parent` instantiation option. This allows developer to programmatically create nested VM instances. [Doc](http://vuejs.org/api/instantiation-options.html#parent).
- added new VM instance property: `$options`. This can be used to access custom properties in instantiation options. [Doc](http://vuejs.org/api/instance-properties.html#vm-options).
- added `interpolate` global config option. When set to `false` Vue.js will skip interpolation for all mustache bindings. This is useful when there is server-rendered user content that could potentially include mustache bindings.

### Changed
- when creating custom directives, the developer now need to explicitly pass in `isLiteral: true`, `isEmpty: true` or `isFn:true` to create literal, empty or function directives.

### Fixed
- `$index` and `$key` are no longer directly attached to data objects. They are now meta properties that can only be accessed on VM instances, not the data objects themselves, since the same data object can have different `$index` or `$key` when observed by different VMs.
- Fixed `replace: true` option causing `compiler.el` and `vm.$el` to be pointing to the old, replaced element.
- `array.splice(0)` now properly empties the array in supported browsers.
- When printing an object, e.g. `{{$data}}`, changes inside Array elements now properly propagate out of the Array and trigger change to the object containing the Array.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/206722/assets,https://api.github.com/repos/vuejs/vue/releases/206722,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.9.3,https://github.com/vuejs/vue/releases/tag/v0.9.3,https://api.github.com/repos/vuejs/vue/zipball/v0.9.3,v0.9.3,False,False
200333,2014-02-25T22:29:48Z,2014-02-25T22:31:01Z,v0.9.2,"Fixed
- #136 default value for `paramAttributes`
- #137 skipping transition due to removed force layout
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/200333/assets,https://api.github.com/repos/vuejs/vue/releases/200333,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.9.2,https://github.com/vuejs/vue/releases/tag/v0.9.2,https://api.github.com/repos/vuejs/vue/zipball/v0.9.2,v0.9.2,False,False
199626,2014-02-25T15:33:56Z,2014-02-25T15:36:12Z,v0.9.1,"Patch to fix event delegation regression.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/199626/assets,https://api.github.com/repos/vuejs/vue/releases/199626,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.9.1,https://github.com/vuejs/vue/releases/tag/v0.9.1,https://api.github.com/repos/vuejs/vue/zipball/v0.9.1,v0.9.1,False,False
198981,2014-02-25T06:16:28Z,2014-02-25T06:34:14Z,v0.9.0: Animatrix,"> ""...then man made the machine in his own likeness. Thus did man become the architect of his own demise."" - The Instructor

_Make sure to use latest version instead which fixes a few issues in this release._
- **Breaking Changes**
  - JavaScript transition effect functions are now indicated by `v-effect=""effect-id""`.
  - `Vue.transition()` has been renamed to `Vue.effect()`
  - `v-transition` is now an empty directive, which indicates that the element has CSS transition.
  - `vm.$watch` callbacks are now batched - multiple changes to the same value within a single event loop will result in the callback fired only once, with the latest value.
- **New**
  - `v-animation` for CSS animation support. [doc](http://vuejs.org/guide/transitions.html#css-animations)
  - Wrapped `setTimeout` in JavaScript transition effect functions. [doc](http://vuejs.org/guide/transitions.html#javascript-functions)
  - `paramAttributes` options for initializing data via inline attributes. [doc](http://vuejs.org/api/instantiation-options.html#paramattributes)
  - Extended Component constructors can now use plugins too.
- **Fixed**
  - #129 Extended Component constructors now properly encapsulate assets registered through methods.
- **Internal Changes**
  - `v-on` now delegates on a VM's root element in all cases except for `blur` and `focus` events.
  - `utils.extend` now returns the extended object, thanks to @bpierre !
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/198981/assets,https://api.github.com/repos/vuejs/vue/releases/198981,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.9.0,https://github.com/vuejs/vue/releases/tag/v0.9.0,https://api.github.com/repos/vuejs/vue/zipball/v0.9.0,v0.9.0,False,False
194288,2014-02-20T22:56:26Z,2014-02-20T23:47:51Z,,"- New
  - `v-repeat` optimization: now when reseting the Array, Vue.js performs diffing to find out if the new Array contains any data from the old Array. For any existing data, the associated VM and DOM node will be reused. This greatly improves performance when the repeated VM itself has a complicated inner structure.
  - `v-repeat` can now iterate over Objects too! [doc](http://vuejs.org/guide/list.html#iterating-through-an-object)
  - Component constructors created from `Vue.extend` can now also add more private assets using asset registration methods similar to their global counterparts. [doc](http://vuejs.org/guide/composition.html#encapsulating-private-assets)
  - Original HTML content of a component node will be inserted at `{{>yield}}` inside templates. [doc](http://vuejs.org/guide/composition.html#partials-and-123-yield-125-)
  - add `v-data` for inline data. [doc](http://vuejs.org/api/directives.html#v-data)
  - `v-style` now also accepts a value without argument. The value will be used to set `el.style.cssText`.
- Fixed
  - When the bound value of `v-model` does not exist in data, the inline `value` attribute will be respected and synced into data.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/194288/assets,https://api.github.com/repos/vuejs/vue/releases/194288,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.8.8,https://github.com/vuejs/vue/releases/tag/v0.8.8,https://api.github.com/repos/vuejs/vue/zipball/v0.8.8,v0.8.8,False,False
194286,2014-02-20T19:02:45Z,2014-02-20T23:46:53Z,,"intermediate release.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/194286/assets,https://api.github.com/repos/vuejs/vue/releases/194286,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.8.7,https://github.com/vuejs/vue/releases/tag/v0.8.7,https://api.github.com/repos/vuejs/vue/zipball/v0.8.7,v0.8.7,False,False
185678,2014-02-14T07:42:14Z,2014-02-14T07:12:55Z,,"- Changed
  - `v-component-id` has been shortened to `v-ref`
  - lifecycle hooks `enteredView` and `leftView` have been renamed to `attached` and `detached`.
  - Non-element nodes inside templates are now ignored.
- New
  - `v-cloak`: similar to ngCloak. It is automatically removed when the ViewModel is ready.
- Fixed
  - text bindings now work properly for objects and arrays. However, events emitted from objects inside an Array won't propagate outside of the Array for efficiency concerns. The use case doesn't justify the increase in complexity.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/185678/assets,https://api.github.com/repos/vuejs/vue/releases/185678,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.8.6,https://github.com/vuejs/vue/releases/tag/v0.8.6,https://api.github.com/repos/vuejs/vue/zipball/v0.8.6,v0.8.6,False,False
180686,2014-02-11T19:13:12Z,2014-02-10T22:27:32Z,Patch v0.8.5c,"- `v-model` now properly support `<select>` with `multiple` attribute. Thanks to @duckbox !
- `v-attr` now properly handles boolean attributes e.g. `disabled`. Thanks to @th0r !
- text binding now output Objects and Arrays via `JSON.stringify` instead of blank string. Thanks to @duckbox !
- `v-repeat` can now deal with Arrays of primitive values. [doc](http://vuejs.org/guide/list.html#Arrays_of_Primitive_Values)
- Added a rough implementation for the plugin interface. [doc](http://vuejs.org/guide/plugin.html)
- Added some protection for common template XSS attacks
- Observed Arrays now also has a `set()` method, which is essentially an alias of `replace()`, only for semantic purposes.

### v0.8.5b patch
- removed `isLiteral` option for custom directives. Now custom directives without an `update` method will simply be treated as literal.
- reverted the behavior that when a repeated VM is $destroyed it would remove its data from bound Array, as this would cause trouble when having nested repeat structures. The advice here is never manually $destroy a repeated instance; always do so by manipulating the Array data.

### v0.8.5c patch
- Use updated version of gulp-component to rebuild
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/180686/assets,https://api.github.com/repos/vuejs/vue/releases/180686,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.8.5,https://github.com/vuejs/vue/releases/tag/v0.8.5,https://api.github.com/repos/vuejs/vue/zipball/v0.8.5,v0.8.5,False,False
178584,2014-02-09T02:39:23Z,2014-02-09T02:50:18Z,,"- New
  - `v-style` has been reintroduced to deal with IE removing invalid inline styles. It comes with sweet prefixing sugar! See the [API reference](http://vuejs.org/api/directives.html#v-style) for more details.
  - `isLiteral` option for custom directives. This allows the user to create a directive that literally take its attribute value as the value.
  - Lifecycle hooks mechanism has been rewritten. User can now listen to `'hook:eventName'` on created VMs. (`created` and `ready` events fire synchronously so they cannot be listened to after the VM has been created)
- Fixed
  - #80 throws error in strict mode
  - #81 skipping directives in IE
  - When a repeated VM is directly `$destroy`ed, it now properly removes itself and its data from corresponding Arrays.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/178584/assets,https://api.github.com/repos/vuejs/vue/releases/178584,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.8.4,https://github.com/vuejs/vue/releases/tag/v0.8.4,https://api.github.com/repos/vuejs/vue/zipball/v0.8.4,v0.8.4,False,False
174984,2014-02-07T13:29:28Z,2014-02-06T02:25:25Z,Release v0.8.3,"- New
  - When using `v-component-id` with `v-repeat`, `parent.$[id]` will return an Array of ViewModels mirroring the data Array.
  - use triple mustache for unescaped inline HTML: `{{{ ""<em>"" + msg + ""</em>"" }}}`
  - IE9 no longer requires classList polyfill.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/174984/assets,https://api.github.com/repos/vuejs/vue/releases/174984,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.8.3,https://github.com/vuejs/vue/releases/tag/v0.8.3,https://api.github.com/repos/vuejs/vue/zipball/v0.8.3,v0.8.3,False,False
171744,2014-02-03T22:18:24Z,2014-02-03T22:20:42Z,,"- Fixed
  - defer child components compilation so that they have access to all bindings on parent
  - fix #65 - computed properties that depend on repeated items
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/171744/assets,https://api.github.com/repos/vuejs/vue/releases/171744,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.8.2,https://github.com/vuejs/vue/releases/tag/v0.8.2,https://api.github.com/repos/vuejs/vue/zipball/v0.8.2,v0.8.2,False,False
171038,2014-02-02T05:49:01Z,2014-02-03T14:23:39Z,,"- New
  - Shorthand for getter-only computed properties: just directly pass in a function.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/171038/assets,https://api.github.com/repos/vuejs/vue/releases/171038,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.8.1,https://github.com/vuejs/vue/releases/tag/v0.8.1,https://api.github.com/repos/vuejs/vue/zipball/v0.8.1,v0.8.1,False,False
161989,2014-01-27T05:15:47Z,2014-01-27T05:48:09Z,,"- Changed
  - Computed Properties should now be provided using the `computed` option.
  - when a binding's key is not found on a ViewModel and any of its parents, the binding will be now created on the current vm instead of root vm.
  - `update()` is now optional when creating custom directives.
- Fixed
  - Composition Events will now always cause v-model to lock update.
- Other
  - Internal refactor for binding logic
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/161989/assets,https://api.github.com/repos/vuejs/vue/releases/161989,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.8.0,https://github.com/vuejs/vue/releases/tag/v0.8.0,https://api.github.com/repos/vuejs/vue/zipball/v0.8.0,v0.8.0,False,False
153142,2014-01-19T03:42:55Z,2014-01-19T03:52:58Z,,"- Fixed
  - expressions on repeated items now have correct execution context.
  - inline partials now work correctly with directives that require access to parentNode (v-repeat & v-if)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/153142/assets,https://api.github.com/repos/vuejs/vue/releases/153142,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.7.6,https://github.com/vuejs/vue/releases/tag/v0.7.6,https://api.github.com/repos/vuejs/vue/zipball/v0.7.6,v0.7.6,False,False
146929,2014-01-13T21:04:45Z,2014-01-13T21:06:05Z,,"- New
  - new directive: `v-with`, which can be used in combination with `v-component` or standalone
- Changed
  - `v-component` now takes only a string value (the component id)
  - `Vue.component()` now also registers the component id to be usable as a custom element
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/146929/assets,https://api.github.com/repos/vuejs/vue/releases/146929,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.7.5,https://github.com/vuejs/vue/releases/tag/v0.7.5,https://api.github.com/repos/vuejs/vue/zipball/v0.7.5,v0.7.5,False,False
144599,2014-01-10T21:56:34Z,2014-01-10T23:23:58Z,,"- Changed
  - `v-style` and `v-visible` have been removed because the user can simply interpolate the attributes.
- Fixed
  - fixed issue in Expression Parser when strings in expressions can contain variable names
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/144599/assets,https://api.github.com/repos/vuejs/vue/releases/144599,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.7.4,https://github.com/vuejs/vue/releases/tag/v0.7.4,https://api.github.com/repos/vuejs/vue/zipball/v0.7.4,v0.7.4,False,False
139209,2014-01-06T19:13:12Z,2014-01-06T21:04:35Z,,"- New
  - add support for interpolating bindings in HTML attributes.
- Changes
  - `vm.$watch` now fires callbacks asynchronously, after all bindings updates have been called.
  - `vm.$emit` now triggers callback on self only - propagating events should use `vm.$dispatch`
- Fixed
  - resolve `v-model` Input Method composition issues when it's piped through filters.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/139209/assets,https://api.github.com/repos/vuejs/vue/releases/139209,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.7.3,https://github.com/vuejs/vue/releases/tag/v0.7.3,https://api.github.com/repos/vuejs/vue/zipball/v0.7.3,v0.7.3,False,False
132933,2013-12-28T05:43:40Z,2013-12-28T05:50:05Z,,"- avoid duplicate Observer.convert() because of the new compile procedure.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/132933/assets,https://api.github.com/repos/vuejs/vue/releases/132933,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.7.2,https://github.com/vuejs/vue/releases/tag/v0.7.2,https://api.github.com/repos/vuejs/vue/zipball/v0.7.2,v0.7.2,False,False
132188,2013-12-24T21:58:33Z,2013-12-27T02:25:13Z,v0.7.1: Async binding updates,"Now all binding updates are pushed into a queue and updated asynchronously. This avoids duplicate updates of the same binding when values change multiple times inside a single event loop. In general this brings considerable performance improvement (~40% in the todomvc benchmark).
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/132188/assets,https://api.github.com/repos/vuejs/vue/releases/132188,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.7.1,https://github.com/vuejs/vue/releases/tag/v0.7.1,https://api.github.com/repos/vuejs/vue/zipball/v0.7.1,v0.7.1,False,False
130642,2013-12-24T03:31:05Z,2013-12-24T01:27:31Z,v0.7.0,"- API change: `scope` option is now split into `data` and `methods`. `proto` option has been removed.
- Object observer rewrite: the ViewModel will now directly proxy the value get/set to the `data` object passed in at instantiation. This allows the user to manipulate data directly or on the ViewModel and they will always be in sync.
- The new observe mechanism makes the `v-repeat` and `v-component` much simpler, as a nested object is no longer needed when creating child ViewModels:
  
  **Before**
  
  ``` html
  <div v-component=""list:listOptions"">
      <div v-repeat=""item:model.items"">
          {{item.title}}
      </div>
  </div>
  ```
  
  **After**
  
  ``` html
  <div v-component=""list:listOptions"">
      <div v-repeat=""items"">
          {{title}}
      </div>
  </div>
  ```
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/130642/assets,https://api.github.com/repos/vuejs/vue/releases/130642,dev,https://api.github.com/repos/vuejs/vue/tarball/v0.7.0,https://github.com/vuejs/vue/releases/tag/v0.7.0,https://api.github.com/repos/vuejs/vue/zipball/v0.7.0,v0.7.0,False,False
115392,2013-12-08T00:32:17Z,2013-12-07T23:04:42Z,0.6.0: VueJS,"- rename the library to VueJS
- default directive prefix is now ""v-""
- add ability to create custom elements with `Vue.element()`
- more robust directive parsing and expression parsing
- now user can use the `Math` object within expressions
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vue/releases/115392/assets,https://api.github.com/repos/vuejs/vue/releases/115392,dev,https://api.github.com/repos/vuejs/vue/tarball/0.6.0,https://github.com/vuejs/vue/releases/tag/0.6.0,https://api.github.com/repos/vuejs/vue/zipball/0.6.0,0.6.0,False,False
