id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
8084743,2017-10-11T19:09:47Z,2017-10-11T19:11:51Z,,"### Breaking Changes

> This major release only breaks backwards compatibility if you use TypeScript.

- TypeScript type declarations have been updated to be compatible with Vue core 2.5+ and no longer work with 2.4 and below.

- All type declarations are now exported using ES-style exports, and must be imported using ES modules syntax:

  ``` js
  import { Store } from 'vuex'
  ```",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/8084743/assets,https://api.github.com/repos/vuejs/vuex/releases/8084743,dev,https://api.github.com/repos/vuejs/vuex/tarball/v3.0.0,https://github.com/vuejs/vuex/releases/tag/v3.0.0,https://api.github.com/repos/vuejs/vuex/zipball/v3.0.0,v3.0.0,False,False
8084666,2017-10-11T19:01:28Z,2017-10-11T19:06:13Z,,"### New

- `store.registerModule` can now be called while preserving current state if the module is already registered, by passing a 3rd argument as `{ preserveState: true }`. Useful in server-side rendering.

- New method: `store.subscribeAction()` - similar to `store.subscribe`, but for actions instead.

- Namespaced modules can now also register global actions using the following syntax:

  ``` js
  const module = {
    actions: {
      rootAction: {
        root: true,
        handler: () => {}
      } 
    }
  }
  ```

- The `createLogger` function now also accepts a `logger` option, allowing the user to provide a custom implementation of the `console` object to be used when logging.",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/8084666/assets,https://api.github.com/repos/vuejs/vuex/releases/8084666,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.5.0,https://github.com/vuejs/vuex/releases/tag/v2.5.0,https://api.github.com/repos/vuejs/vuex/zipball/v2.5.0,v2.5.0,False,False
7917436,2017-09-27T21:34:36Z,2017-09-27T21:36:22Z,,"### Fixed

- Allow installation on different copies of Vue for testing purposes
- Fix #731 by moving auto installation code into the store constructor (#914)",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/7917436/assets,https://api.github.com/repos/vuejs/vuex/releases/7917436,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.4.1,https://github.com/vuejs/vuex/releases/tag/v2.4.1,https://api.github.com/repos/vuejs/vuex/zipball/v2.4.1,v2.4.1,False,False
7558989,2017-08-29T15:03:02Z,2017-08-29T15:04:53Z,,"### New

- New helper method `createNamespacedHelpers`: a helper-generator that generates namespaced `mapXXX` helpers for you:

  ``` js
  const { mapState, mapActions } = createNamespacedHelpers('some/nested/module')
  // everything generated by mapState and mapActions are bound to the module.
  ```

  See [docs](https://vuex.vuejs.org/en/modules.html#binding-helpers-with-namespace) for more info.

  (@riophae via #800)

### Misc

- Various typing and assertion improvements.",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/7558989/assets,https://api.github.com/repos/vuejs/vuex/releases/7558989,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.4.0,https://github.com/vuejs/vuex/releases/tag/v2.4.0,https://api.github.com/repos/vuejs/vuex/zipball/v2.4.0,v2.4.0,False,False
6070319,2017-04-13T09:40:42Z,2017-04-13T09:46:07Z,,"- Modules can now declare `state` using a function - this allows the same module definition to be reused (e.g. multiple times in the same store, or in multiple stores)",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/6070319/assets,https://api.github.com/repos/vuejs/vuex/releases/6070319,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.3.0,https://github.com/vuejs/vuex/releases/tag/v2.3.0,https://api.github.com/repos/vuejs/vuex/zipball/v2.3.0,v2.3.0,False,False
5575246,2017-02-26T14:59:31Z,2017-02-26T15:00:04Z,,"- Now exposes ES module build by default for webpack 2 and rollup.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/5575246/assets,https://api.github.com/repos/vuejs/vuex/releases/5575246,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.2.0,https://github.com/vuejs/vuex/releases/tag/v2.2.0,https://api.github.com/repos/vuejs/vuex/zipball/v2.2.0,v2.2.0,False,False
5375274,2017-02-06T20:44:49Z,2017-02-06T20:45:35Z,,"### Fixed
- #524 avoid firing unrelated watchers when calling `registerModule` (@ktsn)
- #528 ensure module local state always refers to actual state (@ktsn)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/5375274/assets,https://api.github.com/repos/vuejs/vuex/releases/5375274,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.1.2,https://github.com/vuejs/vuex/releases/tag/v2.1.2,https://api.github.com/repos/vuejs/vuex/zipball/v2.1.2,v2.1.2,False,False
4946358,2016-12-17T00:40:42Z,2016-12-17T00:42:04Z,,"### Fixed
- fix TypeScript definition for `namespaced` option.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/4946358/assets,https://api.github.com/repos/vuejs/vuex/releases/4946358,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.1.1,https://github.com/vuejs/vuex/releases/tag/v2.1.1,https://api.github.com/repos/vuejs/vuex/zipball/v2.1.1,v2.1.1,False,False
4945955,2016-12-16T23:24:47Z,2016-12-16T23:25:56Z,,"### New

#### Module Namespacing

> Thanks to the great work by @ktsn for bringing us this feature.

Modules can now be auto-namespaced by using the new `namespaced: true` option. The getters, actions and mutations inside a namespaced module will automatically be prefixed with a namespaced inferred from the module's registration path. For example:

``` js
  const store = new Vuex.Store({
    modules: {
      foo: {
        namespaced: true,
        // ...
      }
    }
  })
```

The `foo` module will automatically get assigned the namespace `foo/`.

Everything inside the module are auto resolved to respect the namespace, so toggling between namespaced or not does not affect the code inside the module itself.

See [updated docs](http://vuex.vuejs.org/en/modules.html#namespacing) for more details.

#### Helpers for Namespaced Modules

You can now pass a namespace string as the first argument to the `mapState`, `mapGetters`, `mapActions` and `mapMutations` helpers, so that the mappings are resolved using that module as the context:

``` js
computed: {
  ...mapState('foo', {
    // state is the state of the `foo/` module instead of root
    bar: state => state.bar
  }
},
methods: {
  ...mapActions('foo', [
    // map this.doSomething() to this.$store.dispatch('foo/doSomething')
    'doSomething'
  ])
}
```

[Updated docs](http://vuex.vuejs.org/en/modules.html#binding-helpers-with-namespace).
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/4945955/assets,https://api.github.com/repos/vuejs/vuex/releases/4945955,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.1.0,https://github.com/vuejs/vuex/releases/tag/v2.1.0,https://api.github.com/repos/vuejs/vuex/zipball/v2.1.0,v2.1.0,False,False
4280723,2016-09-30T18:42:59Z,2016-10-01T16:46:09Z,,"- No changes from last RC.

[Docs](http://vuex.vuejs.org/en/index.html)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/4280723/assets,https://api.github.com/repos/vuejs/vuex/releases/4280723,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.0.0,https://github.com/vuejs/vuex/releases/tag/v2.0.0,https://api.github.com/repos/vuejs/vuex/zipball/v2.0.0,v2.0.0,False,False
4222313,2016-09-24T21:48:35Z,2016-09-24T21:55:44Z,,"### New
- Object-style commit is now supported. Note that there's a small difference between 2.0 and 1.0: in 2.0 the mutation objects received by `store.subscribe` will always be in the same format (`{ type, payload }`, regardless of whether it was committed via a normal commit or an object-style commit.

### Changed
- The logger is now exposed at `vuex/dist/logger.js` instead of `vuex/logger.js`. It is now built as UMD so can be used in browsers directly. It exposes the `createVuexLogger` global when used via `<script>` tags.

### Fixed
- #310 fix logger `transformer` option ignored (@ktsn)
- #328 support circular structures in the logger (@ktsn)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/4222313/assets,https://api.github.com/repos/vuejs/vuex/releases/4222313,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.0.0-rc.6,https://github.com/vuejs/vuex/releases/tag/v2.0.0-rc.6,https://api.github.com/repos/vuejs/vuex/zipball/v2.0.0-rc.6,v2.0.0-rc.6,False,True
3889798,2016-08-15T16:41:20Z,2016-08-15T16:45:10Z,,"### Fixed
- Avoid destroy watch callback when registering/unregistering modules (@ktsn)

### Breaking Changes
- The `silent` flag for silent dispatches should no longer be part of the payload, but rather declared in a new, 3rd argument options object:
  
  ``` js
  // before
  store.commit('TEST', { silent: true })
  
  // after
  store.commit('TEST', null, { silent: true })
  ```
- Removed `store.onActionsResolved` as it is found unnecessary.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3889798/assets,https://api.github.com/repos/vuejs/vuex/releases/3889798,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.0.0-rc.5,https://github.com/vuejs/vuex/releases/tag/v2.0.0-rc.5,https://api.github.com/repos/vuejs/vuex/zipball/v2.0.0-rc.5,v2.0.0-rc.5,False,True
3825406,2016-08-05T19:50:58Z,2016-08-05T19:49:48Z,,"### New
- Now supports unregistering dynamic modules via `store.unregisterModule(path: string | Array<string>)`. Note this method can only unregister modules registered dynamically via `store.registerModule`.

### Breaking Changes
- `store.module` renamed to `store.registerModule`.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3825406/assets,https://api.github.com/repos/vuejs/vuex/releases/3825406,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.0.0-rc.4,https://github.com/vuejs/vuex/releases/tag/v2.0.0-rc.4,https://api.github.com/repos/vuejs/vuex/zipball/v2.0.0-rc.4,v2.0.0-rc.4,False,True
3633070,2016-07-11T21:00:37Z,2016-07-11T21:06:32Z,,"## Changes from 2.0.0-rc.1

### New
- reverted `store.watch` deprecation.
- New method: `store.onActionsResolved(cb)`
  
  Call the callback when all current pending actions (ones that return Promises) have been resolved. This is useful for determining initial data fetch completion during server-side rendering.
- New helper: `mapState`
  
  Directly map store state to computed properties.
  
  ``` js
  computed: {
    // other properties...
    ...mapState({
      count: state => state.count,
      withGetters (state, getters) {
        return state.count + getters.countPlusOne + this.prop // <- also has access to `this`
      }
    })
  }
  ```
- New helper: `mapMutations`
  
  Same as `mapActions` except for committing mutations instead.
- Actions now also have access to getters and root state (for module actions):
  
  ``` js
  actions: {
    example: ({ state, getters, rootState, commit }) => {
      // ...
    }
  }
  ```
- Getters now also have access to other getters and root state (for module getters):
  
  ``` js
  getters: {
    example: (state, getters, rootState) => {
    }
  }
  ```

### Fixed
- #243 dynamically registering module should not throw in strict mode
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3633070/assets,https://api.github.com/repos/vuejs/vuex/releases/3633070,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.0.0-rc.3,https://github.com/vuejs/vuex/releases/tag/v2.0.0-rc.3,https://api.github.com/repos/vuejs/vuex/zipball/v2.0.0-rc.3,v2.0.0-rc.3,False,True
3585225,2016-07-05T01:43:43Z,2016-07-05T01:46:50Z,,"### Wasn't 1.0-rc just released?

Yes, the 1.0-rc is consolidating the current API in 0.8.x with very minor breaking changes and marking it as stable. Most current 0.8.x users should be able to easily migrate to 1.0 with minimal effort; However 2.0 introduces some more substantial changes and may not be an easy upgrade for 0.8.x users. We are releasing both in parallel - both will be maintained for bug fixes, the difference being that 1.0 is considered ""done"" and will not receive new features in the future.

### Breaking Changes from 1.0
- `store.dispatch()` is now used for triggering **actions** instead of **mutations**. To trigger a mutation, use the new `store.commit()` method. (See **Actions & Getters in the Store** section below) 
- `store.dispatch()` and `store.commit()` are no longer variadic: it now accepts a single payload value as the second argument:
  
  ``` js
  store.dispatch('action', payload)
  store.commit('mutation', payload)
  ```
- The `vuex` component option has been deprecated. (See **Component Binding Helpers** section for new component binding usage below)
- ~~`store.watch` is deprecated. Use `store.subscribe` to react to mutations.~~ reverted in 2.0.0-rc.3

### Breaking Changes from 0.8.x
- `middlewares` are replaced by `plugins`. A plugin is simply a function that receives the store instance:
  
  ``` js
  const myPlugin = store => {
    store.subscribe((mutation, state) => {
      console.log(`mutation fired: ${mutation.type}`)
      console.log(`with payload:`, mutation.payload)
    })
  }
  ```

### New

#### Actions & Getters in the Store

You can now define actions directly inside the store and trigger them with `store.dispatch(type, payload)`:

``` js
const store = new Vuex.Store({
  state: { count: 0 },
  mutations: {
    inc: state => state.count++
  },
  actions: {
    incAsync: ({ commit }, delay) => {
      setTimeout(() => commit('inc'), delay)
    }
  }
})

store.dispatch('incAsync', 1000) // increment after 1 second
```

Same for getters, except you access getters via `store.getters[name]`:

``` js
const store = new Vuex.Store({
  state: {
    count: 0
  },
  getters: {
    hasAny: state => state.count > 0
  }
})

// access the getter
store.getters.hasAny // -> false
```

#### Composable Action Flow
1. To indicate the completion of an action, return a Promise from the action. `store.dispatch` will return that Promise if there is only a single handler called. If multiple action handlers are matched, it will return a Promise that resolves when all Promises returned by those handlers are resolved.
   
   ``` js
   const store = new Vuex.Store({
     actions: {
       doSomething: ({ commit }, payload) => {
         return callPromiseAPI(payload).then(res => {
            commit('some-mutation', { res })
         })
       }
     }
   })
   
   store.dispatch('doSomething', { id: 1 }).then(() => {
     // action done
   })
   ```
2. Based on (1) and `async/await`, we can have very clean composition between async actions:
   
   ``` js
   const store = new Vuex.Store({
     actions: {
       one: async ({ commit }, payload) => {
         const res = await callPromiseAPI(payload)
         commit('some-mutation', { res })
       },
       two: async ({ dispatch, commit }) => {
         await dispatch('one')
         commit('done')
       }
     }
   })
   
   store.dispatch('two') // fires off complicated async flow
   ```
   
   The convention of returning Promises also allows Vuex to:
   1. better handle errors during async action flow.
   2. simplify store initialization during server-side rendering.

#### Component Binding Helpers

In Vuex 2.0, the `vuex` option will be deprecated in favor of just computed properties and methods. You are free to structure your Vuex store usage the way you prefer. However, we will be keeping the injection for `this.$store` so that you can do this:

``` js
export default {
  computed: {
    a () {
      return this.$store.getters.a
    }
  },
  methods: {
    b (...args) {
      this.$store.dispatch('b', …args)
    }
  }
}
```

The above alleviates the need to import the store everywhere. But it can get verbose when you have many getters and actions in the same component. Therefore we provide two helpers, `mapGetters` and `mapActions`:

``` js
import { mapGetters, mapActions } from 'vuex'

export default {
  computed: mapGetters(['a', 'b', 'c']),
  methods: mapActions(['d', 'e', 'f'])
}
```

So in the component, `this.a` maps to `this.$store.getters.a`, and `this.d(...args)` maps to `this.$store.dispatch('d', ...args)`.

If you want to map a getter/action to a different local name, use an object instead:

``` js
import { mapGetters, mapActions } from 'vuex'

export default {
  computed: mapGetters({
    myComputed: 'a' // map this.myComputed to store.getters.a
  }),
  methods: mapActions({
    myMethod: 'b' // map this.myMethod() to store.dispatch('b')
  })
}
```

Finally, you can easily compose them with local computed properties and methods using Object spread operator:

``` js
import { mapGetters, mapActions } from 'vuex'

export default {
  computed: {
    localComputed () { … },
    ...mapGetters(['a', 'b', 'c', 'd'])
  },
  methods: {
    localMethod () { … },
    ...mapActions(['b'])
  }
}
```

#### Nested Modules Improvements

Actions, getters and mutations are all supported inside modules.

Similar to how a module mutation receives the sub-state-tree of that module, actions and getters defined in a module will receive the sub-state-tree as well. This makes modules portable without having to be aware of the path it is nested under.

Note that module actions, getters and mutations do all share the same registration namespace with other modules, so if you want to ensure your module is well-isolated, you should consider prefixing its mutation/action types and getter names.

#### New API methods
- `store.module(path, moduleOptions)`
  
  Register a module into the store. The `path` argument can be either a string, or an Array of strings. When registering a nested module, its direct parent state tree must already be present.
- `store.subscribe((mutation, state) => { ... })`
  
  Subscribe to state changes. Callback is called after each mutation. Typically used in plugins.

### Reference
- [design discussion](https://github.com/vuejs/vuex/issues/236)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3585225/assets,https://api.github.com/repos/vuejs/vuex/releases/3585225,dev,https://api.github.com/repos/vuejs/vuex/tarball/v2.0.0-rc.1,https://github.com/vuejs/vuex/releases/tag/v2.0.0-rc.1,https://api.github.com/repos/vuejs/vuex/zipball/v2.0.0-rc.1,v2.0.0-rc.1,False,True
3585220,2016-07-05T01:43:00Z,2016-07-05T01:45:45Z,,"### Breaking Changes from rc.1
- The store instance no longer exposes the event emit interface (`on`, `off`, `emit`, `off`).
- Instead of `store.on('mutation', cb)`, a new method `store.subscribe` is introduced. Typical usage inside a plugin would be:
  
  ``` js
  const myPlugin = store => {
    store.subscribe((mutation, state) => {
      // do something...
    })
  }
  ```
  
  See [example internal plugins](https://github.com/vuejs/vuex/tree/master/src/plugins).
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3585220/assets,https://api.github.com/repos/vuejs/vuex/releases/3585220,dev,https://api.github.com/repos/vuejs/vuex/tarball/v1.0.0-rc.2,https://github.com/vuejs/vuex/releases/tag/v1.0.0-rc.2,https://api.github.com/repos/vuejs/vuex/zipball/v1.0.0-rc.2,v1.0.0-rc.2,False,False
3566606,2016-07-01T04:37:33Z,2016-07-01T04:50:26Z,,"### Note

Vuex 1.0 marks a stable version with small breaking changes from 0.6~0.8, but should be a relatively easy upgrade for current users.

There are some bigger breaking changes (also big improvements) planned for 2.0 [here](https://github.com/vuejs/vuex/issues/236). Both 1.0 and 2.0 will be maintained in parallel for a reasonable amount of time.

### New
- Nested modules:
  
  A module can in turn contain sub-modules, so a module can be defined as:
  
  ``` js
  type Module = {
    state?: { [key: string]: any },
    mutations?: { [key: string]: Function },
    modules?: { [key: string]: Module }
  }
  ```
  
  Thanks to @ktsn for implementing this feature.
- New method: `store.replaceState(state)`
  
  Allows explicitly replacing the store's root state. Note this should only be used for state snapshot restoration / time-travel purposes.
- The store instance is now also an event emitter with `on`, `off`, `once` and `emit` methods.

### Breaking Changes
- Middlewares are replaced by plugins. A plugin is simply a function that receives the store as the only argument, and can listen to the `mutation` event on the store:
  
  ``` js
  const myPlugins = store => {
    store.on('mutation', (mutation, state) => {
      // ...
    })
  }
  ```
  
  For more details, see the [updated docs](http://vuex.vuejs.org/en/plugins.html).
- Object style dispatch fix: in the docs, Object style dispatch was described as sending the dispatched object into the mutation handlers as the second argument, but in previous versions the implementation was incorrect. This caused confusions such as #184. In 1.0 it's been fixed to reflect what was described in the docs, however this technically is a breaking change.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3566606/assets,https://api.github.com/repos/vuejs/vuex/releases/3566606,dev,https://api.github.com/repos/vuejs/vuex/tarball/v1.0.0-rc,https://github.com/vuejs/vuex/releases/tag/v1.0.0-rc,https://api.github.com/repos/vuejs/vuex/zipball/v1.0.0-rc,v1.0.0-rc,False,False
3535475,2016-06-28T03:03:28Z,2016-06-28T03:04:15Z,,"Compatibility with Vue 2.0.0-alpha.7.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3535475/assets,https://api.github.com/repos/vuejs/vuex/releases/3535475,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.8.2,https://github.com/vuejs/vuex/releases/tag/v0.8.2,https://api.github.com/repos/vuejs/vuex/zipball/v0.8.2,v0.8.2,False,False
3510833,2016-06-23T17:40:22Z,2016-06-23T17:41:28Z,,"- Now supports both Vue 1.x and 2.0!
- Small breaking change: `store.watch` now only accept functions:
  
  ``` js
  // before
  store.watch('a.b', cb)
  
  // after
  store.watch(state => state.a.b, cb)
  ```
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3510833/assets,https://api.github.com/repos/vuejs/vuex/releases/3510833,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.8.0,https://github.com/vuejs/vuex/releases/tag/v0.8.0,https://api.github.com/repos/vuejs/vuex/zipball/v0.8.0,v0.8.0,False,False
3501627,2016-06-22T18:10:11Z,2016-06-22T18:10:37Z,,"- Fix devtools middleware timetravel
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3501627/assets,https://api.github.com/repos/vuejs/vuex/releases/3501627,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.7.1,https://github.com/vuejs/vuex/releases/tag/v0.7.1,https://api.github.com/repos/vuejs/vuex/zipball/v0.7.1,v0.7.1,False,False
3487441,2016-06-21T08:05:53Z,2016-06-21T08:06:59Z,,"**Use 0.8.0 which supports both Vue 2.0 and 1.x**
- Support Vue 2.0.
- Not compatible with Vue 1.x
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3487441/assets,https://api.github.com/repos/vuejs/vuex/releases/3487441,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.7.0,https://github.com/vuejs/vuex/releases/tag/v0.7.0,https://api.github.com/repos/vuejs/vuex/zipball/v0.7.0,v0.7.0,False,False
3083846,2016-04-23T16:16:21Z,2016-04-23T16:19:37Z,,"- Store module key must now be a single identifier (no longer support nested paths). e.g.:
  
  ``` js
  new Vuex.Store({
    modules: {
      'a.b.c': { ... } // this would no longer work
    }
  })
  ```
  
  This was not a public feature, and it didn't prove useful. It also introduced extra dependency on Vue internals due to the reliance on path parser. It is now removed for simplicities sake.
- Minor warning improvements.
- Silent mutation dispatch support. [Documentation](http://vuex.vuejs.org/en/mutations.html)
- Improved FSB support. [cbfd5b8](https://github.com/vuejs/vuex/commit/cbfd5b8aded8245285176f7669992fd2c2439648)
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/3083846/assets,https://api.github.com/repos/vuejs/vuex/releases/3083846,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.6.3,https://github.com/vuejs/vuex/releases/tag/v0.6.3,https://api.github.com/repos/vuejs/vuex/zipball/v0.6.3,v0.6.3,False,False
2766194,2016-03-08T10:14:33Z,2016-03-08T10:21:51Z,,"### New
- `store.dispatch` now also supports object-format mutations. For example:
  
  ``` js
  store.dispatch({
    type: 'INCREMENT',
    by: 10
  })
  ```
  
  The corresponding mutation handler function will receive the object as the second argument:
  
  ``` js
  mutations: {
    INCREMENT (state, payload) {
      state.count += payload.by
    }
  }
  ```
- `store.hotUpdate` now supports swapping individual modules. Previously `store.hotUpdate({ modules: { someModule }})` would leave the store with only `someModule`, now it simply updates `someModule` and leaves others intact.
- Standalone build now auto installs when global `Vue` is present.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/2766194/assets,https://api.github.com/repos/vuejs/vuex/releases/2766194,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.6.2,https://github.com/vuejs/vuex/releases/tag/v0.6.2,https://api.github.com/repos/vuejs/vuex/zipball/v0.6.2,v0.6.2,False,False
2766144,2016-03-07T02:52:15Z,2016-03-08T10:15:31Z,,"- fixed npm dist build
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/2766144/assets,https://api.github.com/repos/vuejs/vuex/releases/2766144,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.6.1,https://github.com/vuejs/vuex/releases/tag/v0.6.1,https://api.github.com/repos/vuejs/vuex/zipball/v0.6.1,v0.6.1,False,False
2756294,2016-03-07T02:39:46Z,2016-03-07T02:46:06Z,,"> Note: the npm build for this version is wrong - use 0.6.1 instead. Just specify ^6.0.0 and you will get it.

Sorry for another release with breaking changes - but I'd rather ship it sooner than later! Please bear with me before we reach 1.0, but this is pretty close :)

### Breaking
- `vuex.state` option has been renamed to `vuex.getters`:
  
  ``` js
  vuex: {
    getters: {
      count: state => state.count
    }
  }
  ```
  
  `vuex.state` still works - but you will see a deprecation warning about it.
- Getters are now required to be **pure functions**. This means they can no longer access `this`. This makes them globally cacheable - thus the same expensive getter shared across multiple components will be evaluated only once for all of them.
  
  If you need `this` to compute local derived state, just define separate, local computed properties:
  
  ``` js
  vuex: {
    getters: {
      currentId: state => state.currentId
    }
  },
  computed: {
    isCurrent () {
      return this.id === this.currentId
    }
  }
  ```
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/2756294/assets,https://api.github.com/repos/vuejs/vuex/releases/2756294,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.6.0,https://github.com/vuejs/vuex/releases/tag/v0.6.0,https://api.github.com/repos/vuejs/vuex/zipball/v0.6.0,v0.6.0,False,False
2744056,2016-03-04T12:36:34Z,2016-03-04T12:39:17Z,,"- Fixed devtools + strict mode
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/2744056/assets,https://api.github.com/repos/vuejs/vuex/releases/2744056,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.5.1,https://github.com/vuejs/vuex/releases/tag/v0.5.1,https://api.github.com/repos/vuejs/vuex/zipball/v0.5.1,v0.5.1,False,False
2744054,2016-03-04T03:06:04Z,2016-03-04T12:38:37Z,,"### New
- It now works with the Vuex pane in [vue-devtools](https://github.com/vuejs/vue-devtools)!

### Breaking
- `Vuex.createLogger` has been deprecated. The function is now no longer bundled by default, to use it, import it directly:
  
  ``` js
  import createLogger from 'vuex/logger'
  ```
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/2744054/assets,https://api.github.com/repos/vuejs/vuex/releases/2744054,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.5.0,https://github.com/vuejs/vuex/releases/tag/v0.5.0,https://api.github.com/repos/vuejs/vuex/zipball/v0.5.0,v0.5.0,False,False
2723061,2016-03-01T22:37:08Z,2016-03-01T22:50:00Z,,"## Breaking Changes
- Actions are no longer exposed on the store; instead, they should now be directly imported in components and then bound using the new `vuex` option.
- When creating a store, the `mutations` option no longer accepts an Array. Use the new `modules` option for composing state and mutations.

## New

> For reasoning behind the API changes, see #54

After calling `Vue.use(Vuex)`, your Vue components will recognize two new options - `store` and `vuex`.

#### Store Injection

The `store` option is used to inject a Vuex store instance at a root component - the injected store will be available in all child components of the root as `this.$store`.

#### State Getters

The `vuex.state` option allows the component to retrieve state from an injected store using pure functions:

``` js
// inside a Vue component
export default {
  vuex: {
    state: {
      count: state => state.count
    }
  }
}
```

#### Action Binding

The `vuex.actions` option allows components to bind raw actions to its injected store, and expose the bound actions as component methods:

``` js
import { doThis } from '../vuex/actions'

export default {
  vuex: {
    actions: {
      doThis
    }
  }
}
```

``` html
<button @click=""doThis"">Do it</button>
```

#### Module Composition

The `Vuex.Store` constructor now also accepts a `modules` option for easier module composition:

``` js
new Vuex.Store({
  modules: {
    a: {
      state: { ... },
      mutations: { ... }
    },
    b: {
      state: { ... },
      mutations: { ... }
    }
  }
})
```

Each module will be managing a sub-tree of the root state, and the mutations defined in a module will only get that sub-tree as their first argument (instead of the entire state tree for root-level mutations).

### Read the Docs!

The [docs](http://vuex.vuejs.org/en/index.html) has been extensively rewritten to reflect the new recommended API usage. So are the [examples](https://github.com/vuejs/vuex/tree/master/examples). Make sure to read those as well.
",https://api.github.com/users/yyx990803,499550,yyx990803,https://api.github.com/repos/vuejs/vuex/releases/2723061/assets,https://api.github.com/repos/vuejs/vuex/releases/2723061,dev,https://api.github.com/repos/vuejs/vuex/tarball/v0.4.0,https://github.com/vuejs/vuex/releases/tag/v0.4.0,https://api.github.com/repos/vuejs/vuex/zipball/v0.4.0,v0.4.0,False,False
