id,created_at,published_at,name,body,author_url,author_id,author_login,assets_url,url,target_commitish,tarball_url,html_url,zipball_url,tag_name,draft,prerelease
8189115,2017-10-18T18:00:26Z,2017-10-19T21:56:25Z,zfs-0.7.3,"#### Supported Kernels
- Compatible with 2.6.32 - 4.13 Linux kernels.

#### Bug Fixes
- Add DKMS package on Debian-based distributions (zfs) #6044 #6731
- Fix function documentation to correctly mirror code  #6754
- Increase default zloop.sh vdev size  #6758
- Typo in dsl_dataset.h  #6756  #6273
- Fix chattr/cleanup failure  #6749
- Fixes for SPARC support  #6733 #6738 #6750
- Explicitly depend on icp module in initramfs hook  #6751
- Fix boot from ZFS issues  #6700 #6747
- Skip FREEOBJECTS for objects which can't exist  #5699 #6507 #6616
- Free objects when receiving full stream as clone  #5699 #6507 #6616
- Fix intra-pool resumable 'zfs send -t <token>'  #6618 #6619 #6623
- Fix ARC behavior on 32-bit systems  #5352 #6734
- Fix inclusion of libgcc_s.so on Void  #6715
- Use bitwise '&' instead of logical '&&'  #6684 #6722
- Remove unnecessary equality check  #6685
- Use linear abd in vdev_copy_uberblocks()  #6718 #6713
- receive_freeobjects() skips freeing some objects  #6694 #6695
- Scale the dbuf cache with arc_c  #6561
- Add DKMS package on Debian-based distributions (spl) #657
- Add parenthesis to btop and ptob macros (#662)  #660
",https://api.github.com/users/tonyhutter,11469457,tonyhutter,https://api.github.com/repos/zfsonlinux/zfs/releases/8189115/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/8189115,zfs-0.7-release,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.7.3,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.7.3,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.7.3,zfs-0.7.3,False,False
7885316,2017-09-22T18:14:22Z,2017-09-25T23:57:47Z,zfs-0.7.2,"#### Supported Kernels
- Compatible with 2.6.32 - 4.13 Linux kernels.

#### Bug Fixes
- Correct cppcheck errors #6662 #6653
- Increase default arc_c_min #6659
- Export symbol dmu_tx_mark_netfree() #6660
- ZTS fix slog_replay_volume.ksh failure #6654
- Linux 4.14 compat: IO acct, global_page_state, etc #6655 #6635
- Modifying XATTRs doesnt change the ctime #3644 #6586
- Fix volume WR_INDIRECT log replay #6620 #6603
- Improved dnode allocation and dmu_hold_impl() #6611 #6611
- Linux 4.8+ compatibility fix for vm stats #6528
- Disable mount(8) canonical paths in do_mount() #1791 #6429 #6437
- Fix range locking in ZIL commit codepath #6238 #6315 #6356 #6477
- Fix remounting snapshots read-write #6510 #6515
- Fix ZTS grow_pool/setup #6499 #6516
- vdev_id: implement slot numbering by port id #6484
- Fix NULL pointer when O_SYNC read in snapshot #6478 #6494
- zio_dva_throttle_done() should allow zinjected ZIO #6383 #6384
- Man page fixes #6492
- Crash in dbuf_evict_one with DTRACE_PROBE #6463
- Tag zfs-0.7.1- Fix dnode allocation race #6414",https://api.github.com/users/tonyhutter,11469457,tonyhutter,https://api.github.com/repos/zfsonlinux/zfs/releases/7885316/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/7885316,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.7.2,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.7.2,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.7.2,zfs-0.7.2,False,False
7325517,2017-08-08T22:56:11Z,2017-08-08T23:24:43Z,zfs-0.7.1,"#### Supported Kernels
- Compatible with 2.6.32 - 4.12 Linux kernels.

#### Bug Fixes
- Fix dnode allocation race  zfsonlinux/zfs#6414 zfsonlinux/zfs#6439
- Add debug log entries for failed receive records  zfsonlinux/zfs#6465
- dracut: Install commands required for vdev_id  zfsonlinux/zfs#6443 zfsonlinux/zfs#6452
- Only record zio->io_delay on reads and writes  zfsonlinux/zfs#6425 zfsonlinux/zfs#6440
- mmp_on_uberblocks: Use kstat for uberblock counts  zfsonlinux/zfs#6407 zfsonlinux/zfs#6419
- Fix volmode=none property behavior at import time  zfsonlinux/zfs#6426
- Fix aarch64 build  zfsonlinux/zfs#6424 
- Disable zfs_send_007_pos  zfsonlinux/zfs#6422
- Correct man page generation  zfsonlinux/zfs#6409 zfsonlinux/zfs#6411
- Add assert under lock to detect cases of dispach of a preallocated  zfsonlinux/zfs#609
- Remove misguided HAVE_MUTEX_OWNER check, take 2  zfsonlinux/zfs#639 zfsonlinux/zfs#632
- spl-mutex: fix race in mutex_exit  zfsonlinux/zfszfsonlinux/zfs#6401 zfsonlinux/zfs#637
- Add __divmoddi4 and __udivmoddi4 for 32-bit arch zfsonlinux/zfs#6417 zfsonlinux/zfs#636
- Fix aarch64 build  zfsonlinux/zfs#635",https://api.github.com/users/tonyhutter,11469457,tonyhutter,https://api.github.com/repos/zfsonlinux/zfs/releases/7325517/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/7325517,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.7.1,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.7.1,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.7.1,zfs-0.7.1,False,False
7166245,2017-07-26T17:16:20Z,2017-07-26T23:16:03Z,zfs-0.7.0,"#### New Features

- **Resumable `zfs send/receive`** - Allow an interrupted `zfs receive` to be resumed if the stream was prematurely terminated (e.g. due to remote system or network failure).

- **Compressed `zfs send/receive`** - Use the `zfs send -c` option to directly send the compressed data in the ARC or on-disk to another pool without needing to decompress it.

- **Multiple Import Protection** - Prevents a shared pool in a fail-over configuration from being imported on different hosts at the same time.  When the **multihost** pool property is **on**, perform an activity check prior to importing the pool to verify it is not in use.

- **Customized `zpool iostat|status` columns** - Additional columns can be added to the `zpool iostat` and `zpool status` output to show more information.  Several useful scripts are provided which can report drive temperature, SMART data, enclosure LED status, and more.  Administrators and users can add additional scripts to meet their needs.

- **Latency and request size histograms** - Use the `zpool iostat -l` option to show on-the-fly latency stats and `zpool iostat -w` to generate a histogram showing the total latency of each IO.  The `zpool iostat -r` option can be used to show the size of each IO.  These statistics are available per-disk to aid in finding misbehaving devices.

- **Scrub Pause** - The `zpool scrub -p` option can be used to pause/resume an active scrub without having to cancel it.

- **Delegations** - The `zfs allow` and `zfs unallow` subcommands can be used to delegate ZFS administrative permissions for the file systems to non-privileged users.

- **Large dnodes** - This feature improves metadata performance allowing extended attributes, ACLs, and symbolic links with long target names to be stored in the dnode.  This benefits workloads such as SELinux, distributed filesystems like Lustre and Ceph, and any application which makes use of extended attributes.

- **User/group object accounting and quota** - This feature adds per-object user/group accounting and quota limits to the existing space accounting and quota functionality.  The `zfs userspace` and `zfs groupspace` subcommands have been extended to set quota limits and report on object usage.

- **Cryptographic checksums** - Stronger **SHA-512**, **Skein**, or **Edon-R** checksums are available.

- **JBOD Management**
  - **Automatic drive online** - Newly detected devices which are determined to be part of an imported pool are automatically brought online.
  - **Automatic drive replacement** - When the **autoreplace** pool property is **on**, any new device found in the same physical location as a device that previously belonged to the pool, is automatically formatted and replaced. 
  - **Automatic hot spares** - When a device is faulted start a rebuild to a hot-spare device if available.
  - **Fault LEDs** - Set the fault LED for a device when it's faulted, clear it when it has been replaced.
  - **Drive health monitoring** - Automatically fault a device when an excessive number of read, write, or checksum errors are detected.
  - **Force fault** - Use `zpool offline -f` to proactively fault a problematic device.
  - **Multipath aware** - Can be used with advanced multipath configurations.

#### Performance
- **ARC Buffer Data (ABD)** - Allocates ARC data buffers using scatter lists of pages instead of virtual memory.  This approach minimizes fragmentation on the system allowing for a more efficient use of memory.  The reduced demand for virtual memory also improves stability and performance on 32-bit architectures.
- **Compressed ARC** - Cached file data is compressed by default in memory and uncompressed on demand.  This allows for an larger effective cache which improves overall performance.
- **Vectorized RAIDZ** - Hardware optimized RAIDZ which reduces CPU usage.
  Supported SIMD instructions: sse2, ssse3, avx2, avx512f, and avx512bw, neon, neonx2
- **Vectorized checksums** - Hardware optimized Fletcher-4 checksums which reduce CPU usage.
  Supported SIMD instructions: sse2, ssse3, avx2, avx512f, neon
- **GZIP compression offloading** - Hardware optimized GZIP compression offloading with QAT accelerator.
- **Metadata performance** - Overall improved metadata performance.  Optimizations include a multi-threaded allocator, batched quota updates, improved prefetching, and streamlined call paths.
- **Faster RAIDZ resilver** - When resilvering RAIDZ intelligently skips sections of the device which don't need to be rebuilt.

#### Changes in Behavior
* Non-privileged users are allowed to run `zpool list`, `zpool iostat`, `zpool status`, `zpool get`, `zfs list`, and `zfs get`.  These commands no longer need to be added to the `/etc/sudoers` file.
* The permissions of the `/dev/zfs` device have changed from `0600` to `0666` to let ZFS do access control in kernel space and make `zfs allow` and `zfs unallow` work properly. If you have been changing permissions / group owner of the device file yourself your change won't work correctly anymore and breaks proper behavior of `zfs allow`.  From this release forward you should be able to satisfy your use-case with the officially supported `zfs allow` command.
* By default task queues are now dynamic and worker threads will be created and destroyed as needed.  This allows the system to automatically tune itself to ensure the optimal number of threads are used for the active workload which can result in a performance improvement.
* Accessing snapshots over NFS now requires the `crossmnt` option be added to the `/etc/exports` file.  The `nfsd` service is now aware that snapshots are different filesystems.  A result of this change is that older distributions, like CentOS 6.x, can no longer provide access to snapshots over NFS.

#### Supported Kernels
- Compatible with 2.6.32 - 4.12 Linux kernels.

#### Module Options
- The default values for the module options were selected to yield good performance for the majority of workloads and configurations.  They should not need to be tuned for most systems but are available for performance analysis and tuning.  See the `zfs-module-parameters(5)` man page for a more complete description of the options and what they control.
- Added:
  - **dbuf_cache_hiwater_pct** - Percent over `dbuf_cache_max_bytes` when dbufs must be evicted
  - **dbuf_cache_lowater_pct** - Percent below `dbuf_cache_max_bytes` when dbufs stop being evicted
  - **dbuf_cache_max_bytes** - Maximum size in bytes of the dbuf cache
  - **dbuf_cache_max_shift** - Cap the size of the dbuf cache to a log2 fraction of arc size
  - **dmu_object_alloc_chunk_shift** - CPU-specific allocator grabs 2^N objects at once
  - **send_holes_without_birth_time** - Ignore hole_birth txg for zfs send
  - **zfetch_max_distance** - Max bytes to prefetch per stream
  - **zfs_abd_scatter_enabled** - Toggle whether ABD allocations must be linear
  - **zfs_abd_scatter_max_order** - Maximum order allocation used for a scatter ABD
  - **zfs_arc_dnode_limit** - Minimum bytes of dnodes in ARC
  - **zfs_arc_dnode_limit_percent** - Percent of ARC meta buffers for dnodes
  - **zfs_arc_dnode_reduce_percent** - Percentage of excess dnodes to try to unpin
  - **zfs_arc_meta_limit_percent** - Percent of arc size for arc meta limit 
  - **zfs_arc_pc_percent** - Percent of pagecache to reclaim ARC to
  - **zfs_compressed_arc_enabled** - Disable compressed arc buffers
  - **zfs_deadman_checktime_ms** - Dead I/O check interval in milliseconds
  - **zfs_delete_blocks** - Delete files larger than N blocks asynchronously
  - **zfs_dmu_offset_next_sync** - Enable forcing txg sync to find holes
  - **zfs_free_bpobj_enabled** - Enable processing of the free_bpobj 
  - **zfs_metaslab_segment_weight_enabled** - Enable segment-based metaslab selection 
  - **zfs_metaslab_switch_threshold** - Metaslab selection max buckets before switching 
  - **zfs_multihost_fail_intervals** - Max allowed period without a successful mmp write 
  - **zfs_multihost_history** - Historical statistics for last N multihost writes 
  - **zfs_multihost_import_intervals** - Number of zfs_multihost_interval periods to wait for activity 
  - **zfs_multihost_interval** - Milliseconds between mmp writes to each leaf
  - **zfs_multilist_num_sublists** - Number of sublists used in each multilist 
  - **zfs_per_txg_dirty_frees_percent** - Percentage of dirtied blocks from frees in one TXG 
  - **zfs_sync_taskq_batch_pct** - Percentage of CPUs to run an IO worker thread
  - **zfs_vdev_mirror_non_rotating_inc** - Non-rotating media load increment for non-seeking I/O's 
  - **zfs_vdev_mirror_non_rotating_seek_inc** - Non-rotating media load increment for seeking I/O's 
  - **zfs_vdev_mirror_rotating_inc** - Rotating media load increment for non-seeking I/O's
  - **zfs_vdev_mirror_rotating_seek_inc** - Rotating media load increment for seeking I/O's 
  - **zfs_vdev_mirror_rotating_seek_offset** - Offset in bytes from the last I/O to trigger seek increment
  - **zfs_vdev_queue_depth_pct** - Queue depth percentage for each top-level vdev
  - **zfs_vdev_raidz_impl** - Select RAIDZ implementation.
  - **zil_slog_bulk** - Limit in bytes slog sync writes per commit 
  - **zio_dva_throttle_enabled** - Throttle block allocations in the ZIO pipeline 
  - **zvol_request_sync** - Synchronously handle bio requests
  - **zvol_threads** - Max number of threads to handle I/O requests 
  - **zvol_volmode** - Default volmode property value
  - **spl_max_show_tasks** - Max number of tasks shown in taskq proc
  - **spl_panic_halt** - Cause kernel panic on assertion failures
- Removed:
  - **l2arc_nocompress** - Skip compressing L2ARC buffers
  - **zfetch_block_cap** - Max number of blocks to fetch at a time
  - **zfs_arc_num_sublists_per_state** - Number of sublists used in each of the ARC state lists
  - **zfs_disable_dup_eviction** - Disable duplicate buffer eviction 
  - **zfs_vdev_mirror_switch_us** - Switch mirrors every N microseconds
  - **zil_slog_limit** - Max commit bytes to separate log device
- Changed:
  - **zfs_admin_snapshot** - Enable mkdir/rmdir/mv in .zfs/snapshot",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/7166245/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/7166245,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.7.0,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.7.0,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.7.0,zfs-0.7.0,False,False
7033835,2017-07-13T19:10:03Z,2017-07-13T21:10:33Z,v0.7.0-rc5,"#### Supported Kernels
- Compatible with 2.6.32 - 4.12 Linux kernels.

#### New Features
- Added `createtxg` and `guid` native pool properties.
- Added property overriding `-o|-x` to `zfs receive`.
- Added `zpool offline -f` option to force fault a device.
- Added `zpool sync` command to force a transaction group sync.
- Added support to `zpool iostat/status -c` for user provided scripts.
- Added `zpool scrub -p` to pause/resume an active scrub.
- Added `volmode` property from FreeBSD to control volume visibility.
- Added `multihost` pool property which prevents a fail-over configuration
  from importing a shared pool on different hosts at the same time.

#### Performance
- Skip unnecessary resilver IOs for raidz pools.
- Faster multi-threaded object allocation.
  
#### Bug Fixes
- Fixed `zpool scrub` thinking it repaired offline device.
- Fixed `snapdev` property inheritance behavior.
- Fixed unneeded writes when bpobj has no entries.
- Fixed volume deadlock by refining the locking.
- Fixed hang when using volumes on single core systems.
- Fixed `zpool import` finding wrong spare/l2cache when path changes.
- Fixed incorrect warning when raidz and mirror pools do have similar redundancy.
- Fixed memory leak in `zpool event` handling.
- Fixed memory leak in `zvol_set_volsize()`.
- Fixed ida leak in `zvol_create_minor_impl()`.
- Fixed file handle leak in `dir_is_empty_readdir()`.
- Fixed missing `arc_free_cksum()` call in `arc_release()`.
- Fixed mount error message when using kernels without `nbmand` support.
- Fixed inaccurate `zfs send` size estimate for some volumes.
- Fixed L2ARC for devices which don't support 512b access.
- Fixed L2ARC writing beyond target size.
- Fixed panic when setting `zfs_vdev_aggregation_limit=16777216`.
- Fixed panic in bookmark deletion.
- Fixed panic in `zfs create`.
- Fixed panic when running `zpool clear` on a readonly pool.
- Fixed several minor LZ4 issues.
- Fixed `zinject(8)` to allow a fractional percentage of errors to be injected.
- Fixed setting `arc_meta_limit` and `arc_dnode_limit` on change.
- Fixed large dnode send stream flag conflict with upstream.
- Fixed stack usage in `dsl_dir_tempreserve_impl()`.
- Fixed gcc 7.1.1 build warnings.
- Fixed glibc-2.23 compatibility warnings.
- Fixed Clang build warnings.
- Fixed Musl libc build warnings.
- Fixed Linux kernel compatibility issues.
- Fixed need for `--with-linux-obj` option when specifying `--with-linux` to `configure`.
- Fixed `.deb` dependency warnings.
- Fixed `test-runner` to return non-zero exit code on failure.
- Fixed and enabled additional ZFS Test Suite tests.
- Applied 29 upstream OpenZFS patches.
- Applied upstream `mdoc(7)` formatting for `zpool(8)` and `zfs(8)` man pages.
- Assorted documentation and man page updates.

_This tag is the final rc prior to the release of 0.7.0._",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/7033835/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/7033835,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.7.0-rc5,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.7.0-rc5,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.7.0-rc5,zfs-0.7.0-rc5,False,True
6959103,2017-07-10T20:15:09Z,2017-07-10T22:32:03Z,v0.6.5.11,"#### Supported Kernels
- Compatible with 2.6.32 - 4.12-rc3 Linux kernels.  

#### Bug Fixes
- Linux 4.12 compat: super_setup_bdi_name() - add missing code zfsonlinux/zfs#6089 zfsonlinux/zfs#6324
- Musl libc fixes zfsonlinux/zfs#6310
- Increase zfs_vdev_async_write_min_active to 2 zfsonlinux/zfs#5926
- Fix int overflow in zbookmark_is_before()- Fix RHEL 7.4 bio_set_op_attrs build error zfsonlinux/zfs#6234 zfsonlinux/zfs#6271
- Fix RHEL 7.4 bio_set_op_attrs build error zfsonlinux/zfs#6253
- GCC 7.1 fixes zfsonlinux/zfs#6253
- Remove complicated libspl assert wrappers zfsonlinux/zfs#4449
- Compatibilty with glibc-2.23 zfsonlinux/zfs#6132
- glibc 2.5 compat: use correct header for makedev() et al. zfsonlinux/zfs#5945
- Fix RWSEM_SPINLOCK_IS_RAW check failed  zfsonlinux/zfs#622",https://api.github.com/users/tonyhutter,11469457,tonyhutter,https://api.github.com/repos/zfsonlinux/zfs/releases/6959103/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/6959103,zfs-0.6.5-release,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.11,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.11,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.11,zfs-0.6.5.11,False,False
6668307,2017-06-13T22:47:35Z,2017-06-14T21:01:01Z,v0.6.5.10,"#### Supported Kernels
- Compatible with 2.6.32 - 4.12-rc3 Linux kernels.  

#### Performance
- OpenZFS 8005 - poor performance of 1MB writes on certain RAID-Z configurations  zfsonlinux/zfs#5931

#### Bug Fixes
- Add MS_MANDLOCK mount failure message  zfsonlinux/zfs#4729   zfsonlinux/zfs#6199
- Fix import wrong spare/l2 device when path change  zfsonlinux/zfs#6158
- Fix import finding spare/l2cache when path changes  zfsonlinux/zfs#6158
- Linux 4.9 compat: fix zfs_ctldir xattr handling  zfsonlinux/zfs#6189
- Linux 4.12 compat: fix super_setup_bdi_name() call  zfsonlinux/zfs#6147
- Linux 4.12 compat: CURRENT_TIME removed  zfsonlinux/zfs#6114
- Linux 4.12 compat: super_setup_bdi_name()  zfsonlinux/zfs#6089
- Limit zfs_dirty_data_max_max to 4G  zfsonlinux/zfs#6072   zfsonlinux/zfs#6081
- OpenZFS 8166 - zpool scrub thinks it repaired offline device  zfsonlinux/zfs#5806   zfsonlinux/zfs#6103
- vdev_id: fix failure due to multipath -l bug  zfsonlinux/zfs#6039
- Guarantee PAGESIZE alignment for large zio buffers  zfsonlinux/zfs#6084
- Fix harmless ""BARRIER is deprecated"" kernel warning on Centos 6.8  zfsonlinux/zfs#5739 zfsonlinux/zfs#5828
- Add kmap_atomic in dmu_bio_copy- zdb: segfault in dump_bpobj_subobjs()  zfsonlinux/zfs#3905
- Fix atomic_sub_64() i386 assembly implementation  zfsonlinux/zfs#5671   zfsonlinux/zfs#5717
- Fix loop device becomes read-only  zfsonlinux/zfs#5776   zfsonlinux/zfs#5855
- Allow ZVOL bookmarks to be listed recursively  zfsonlinux/zfs#4503   zfsonlinux/zfs#5072
- Fix zfs-mount.service failure on boot  zfsonlinux/zfs#5719
- Fix iput() calls within a tx  zfsonlinux/zfs#5758
- Fix off by one in zpl_lookup  zfsonlinux/zfs#5768
- Linux 4.11 compat: iops.getattr and friends  zfsonlinux/zfs#5875
- Linux 4.11 compat: avoid refcount_t name conflict  zfsonlinux/zfs#5823   zfsonlinux/zfs#5842
- Linux 4.12 compat: PF_FSTRANS was removed  zfsonlinux/spl#614
- Clear PF_FSTRANS over spl_filp_fallocate()  zfsonlinux/splzfsonlinux/zfs#4529
- glibc 2.25 compat: remove assert(X=Y)  zfsonlinux/spl#610
- Linux 4.11 compat: remove stub for __put_task_struct  zfsonlinux/spl#608
- Linux 4.11 compat: add linux/sched/signal.h  zfsonlinux/spl#608
- Linux 4.11 compat: vfs_getattr() takes 4 args  zfsonlinux/spl#608
- Fix powerpc build  zfsonlinux/spl#607
- Linux 4.11 compat: set_task_state() removed  zfsonlinux/spl#603
",https://api.github.com/users/tonyhutter,11469457,tonyhutter,https://api.github.com/repos/zfsonlinux/zfs/releases/6668307/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/6668307,zfs-0.6.5-release,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.10,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.10,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.10,zfs-0.6.5.10,False,False
6210389,2017-05-05T17:34:28Z,2017-05-05T19:15:37Z,v0.7.0-rc4,"#### Supported Kernels
- Compatible with 2.6.32 - 4.11 Linux kernels.

#### New Features
- Added script support to `zpool iostat -c` extended output
- Added `feature@multi_vdev_crash_dump` compatibility
- Added GZIP compression offloading with QAT accelerator

#### Performance
- Fixed performance of 1MB writes on certain RAID-Z configurations (OpenZFS 8005)
- Fixed `lseek(SEEK_HOLE)` performance for dirty files
- Fixed large file delete can starving out write ops (OpenZFS 6569)
- Improved ARC memory reclaim behavior
- Improved asynchronous ZVOL performance
- Allow higher ashift values (up to 16)
- Multi-threaded spa_sync() (OpenZFS 7968)
- Increased `zfs_vdev_async_write_min_active` (to 2) which can speed up rebuilds
- Increased indirect block size (OpenZFS 7104)

#### Bug Fixes
- Fixed immediately update label 2,3 uberblocks when vdev expands
- Fixed human-readable sizes in command line utilities
- Fixed page size alignment for large buffers 
- Fixed `zfs_dirty_data_max_max` limit (4G)
- Fixed incorrect compressed send streams
- Fixed `zdb -e` regression for active cacheless pools
- Fixed `vdev_id` failure due to `multipath -l` bug
- Fixed leak in `send_iterate_fs()`
- Fixed large block/gzip/raidz boot pools allowed
- Fixed ZVOL BLKFLSBUF ioctl invalidates cache
- Fixed block device cache invalidation during `zpool import|labelclear`
- Fixed header inclusions for standards conformance
- Fixed size inflation in `spa_get_worst_case_asize`
- Fixed panic destroying a metaslab deferred range tree (OpenZFS 8023)
- Fixed `zpool create` accepts raidz and mirrors with similar redundancy
- Fixed `zpool list` reporting 16.0e for expandsz (OpenZFS 7885)
- Fixed check ashift validity in `zpool add`
- Fixed wrong offset args in `vdev_cache_write()`
- Fixed 'zdb -o' segmentation fault
- Fixed `zfs_znode_alloc()` failure in `zfs_mknode()` with retry
- Fixed race in rollback, zil close, and zil flush (OpenZFS 3821)
- Fixed `zpool status -v` error message
- Fixed NFS snapdir automounting
- Fixed harmless ""BARRIER is deprecated"" kernel warning on Centos 6.8
- Fixed ARC space accounting leak (OpenZFS 7867)
- Fixed loop device becoming read-only for Linux kernel older than 4.1
- Fixed `dsl_dataset_rollback_sync()` may try to free already free blocks (OpenZFS 7199)
- Fixed off by one in zpl_lookup
- Fixed enclosure LED handling
- Fixed `zfs receive` of deduplicated streams
- Fixed `zfs get` behavior with bookmarks (OpenZFS 7386)
- Added `zdb(8)` lookup files by path (OpenZFS 6410)
- Added `zdb(8)` only dump unique configurations and uberblocks
- Added `zdb -G` to print zfs_dbgmsg's
- Added `zdb -ll` to print the nvlist payload stats
- Added constrained paths to the ZFS Test Suite (OpenZFS 7290)
- Added test framework for the ZED to the ZFS Test Suite (auto-online, auto-replace)
- Added new test cases and enabled additional existing test cases in the ZFS Test Suite
- Added debug and console logs dumping to the ZFS Test Suite
- Allow c99 when building ZFS in the kernel tree
- Applied 106 upstream OpenZFS patches
- Assorted documentation and man page updates

_This tag is provided for evaluation and testing of the upcoming 0.7.0 release._",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/6210389/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/6210389,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.7.0-rc4,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.7.0-rc4,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.7.0-rc4,zfs-0.7.0-rc4,False,True
5356734,2017-02-03T21:12:09Z,2017-02-03T22:22:20Z,v0.6.5.9,"#### Supported Kernels
- Compatible with 2.6.32 - 4.10 Linux kernels.  

#### Bug Fixes
- Linux 4.10 compat: BIO flag changes zfsonlinux/zfs#5499
- Linux 4.9 compat: inode_change_ok() renamed setattr_prepare() zfsonlinux/zfs#5307
- Linux 4.9 compat: remove iops->{set,get,remove}xattr zfsonlinux/zfs#5307
- Linux 4.9 compat: iops->rename() wants flags zfsonlinux/zfs#5307
- Linux 4.9 compat: file_operations->aio_fsync removal zfsonlinux/zfs#5393
- Linux 4.9 compat: Remove dir inode operations from zpl_inode_operations zfsonlinux/zfs#5307
- Linux 4.9 compat: group_info changes zfsonlinux/spl#581
- Linux 4.8 compat: Fix RW_READ_HELD zfsonlinux/zfs#5233
- Linux 4.7 compat: Fix deadlock during lookup on case-insensitive zfsonlinux/zfs#5124 zfsonlinux/zfs#5141 zfsonlinux/zfs#5147 zfsonlinux/zfs#5148
- Linux 3.14 compat: assign inode->set_acl zfsonlinux/zfs#5371 zfsonlinux/zfs#5375
- Linux 2.6.32 compat: Reorder HAVE_BIO_RW_\* checks zfsonlinux/zfs#4951 zfsonlinux/zfs#4959
- Use large stacks when available zfsonlinux/zfs#4059
- Use set_cached_acl() and forget_cached_acl() when possible zfsonlinux/zfs#5378
- Use kernel slab for vn_cache and vn_file_cache zfsonlinux/spl#599
- Fix batch free zpl_posix_acl_release zfsonlinux/zfs#5340 zfsonlinux/zfs#5353
- Fix zfsctl_snapshot_{,un}mount() issues zfsonlinux/zfs#5250
- Fix systemd services configutation through preset file zfsonlinux/zfs#5356
- Fix RLIMIT_FSIZE enforcement zfsonlinux/zfs#5587 zfsonlinux/zfs#5673 zfsonlinux/zfs#5720 zfsonlinux/zfs#5726
- Fix leak on zfs_sb_create() failure zfsonlinux/zfs#5490 zfsonlinux/zfs#5496
- Fix zpl_fallocate_common() creak leak zfsonlinux/zfs#5244 zfsonlinux/zfs#5330
- Fix fchange in zpl_ioctl_setflags() zfsonlinux/zfs#5486
- Fix wrong operator in xvattr.h zfsonlinux/zfs#5486
- Fix counting '@' in dataset namelen zfsonlinux/zfs#5432 zfsonlinux/zfs#5456
- Fix dmu_object_size_from_db() call under spinlock zfsonlinux/zfs#3858
- Fix lookup_bdev() on Ubuntu zfsonlinux/zfs#5336
- Fix receiving custom snapshot properties zfsonlinux/zfs#5189
- Fix bio merging w/noop scheduler zfsonlinux/zfs#5181
- Fix sync behavior for disk vdevs zfsonlinux/zfs#4858
- Fix uninitialized variable in avl_add() zfsonlinux/zfs#3609
- Fix tq_lock contention by making write taskq non-dynamic zfsonlinux/zfs#5236
- Fix atime handling (relatime, lazytime) zfsonlinux/zfs#4482
- Fix splat-cred.c cred usage zfsonlinux/spl#556
- Fix splat memleak zfsonlinux/spl#590
- Fix p0 initializer zfsonlinux/spl#576
- Fix aarch64 type warning zfsonlinux/spl#574
- Fix crgetgroups out-of-bound and misc cred fix zfsonlinux/spl#556
- Remove dead root pool import code zfsonlinux/zfs#4951
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/5356734/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/5356734,zfs-0.6.5-release,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.9,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.9,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.9,zfs-0.6.5.9,False,False
5221290,2017-01-20T18:20:14Z,2017-01-20T19:09:52Z,v0.7.0-rc3,"#### Supported Kernels
- Compatible with 2.6.32 - 4.10 Linux kernels.

#### New Features
- Added ARC Buffer Data (ABD) implementation
- Added OpenZFS FMD ZFS logic to ZED
- Added dynamic metaslab selection (OpenZFS 7303)
- Added support for `.zfs/snapshot` directories on 32-bit systems
- Added support for O_TMPFILE flag
- Added -c to zpool iostat & status to run command

#### Performance
- Added parity generation/rebuild using AVX-512 instructions on x86-64
- Added superscalar fletcher4 optimization
- Added *_by-dnode routines
- Removed unnecessary zio_root() for bonus buf (OpenZFS 7143)
- Reduced `zpool import`, `zpool export` time for pools with a large number of volumes

#### Bug Fixes
- Fixed `zpool import` detection issues
- Fixed unlinked file cannot do xattr operations
- Fixed file attributes
- Fixed vdev_file deadlock
- Fixed temporary pool names
- Fixed zvol `zfs suspend/resume` for receive and rollback
- Fixed `arc_summary.py`
- Fixed 22 [Coverity defects](https://scan.coverity.com/projects/zfsonlinux-zfs)
- Fixed `cstyle -cpP` warnings updated CI to check all PRs
- Applied 20 upstream OpenZFS patches
- Enabled additional ZFS Test Suite test cases
- Assorted documentation and man page updates

_This tag is provided for evaluation and testing of the upcoming 0.7.0 release.
It is not recommended for production use._
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/5221290/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/5221290,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.7.0-rc3,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.7.0-rc3,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.7.0-rc3,zfs-0.7.0-rc3,False,True
4492103,2016-10-26T17:36:56Z,2016-10-26T20:15:04Z,v0.7.0-rc2,"#### Supported Kernels
- Compatible with 2.6.32 - 4.9 Linux kernels.

#### New Features
- Added support for user/group dnode accounting & quota
- Added autoreplace support and enclosure LEDs handling for multipath devices
- Added compressed ARC (OpenZFS 6950)
- Added compressed `zfs send/receive` (OpenZFS 7252)
- Added cryptographic checksums SHA-512, Skein, Edon-R (OpenZFS 4185)
- Added `zpool create -o feature@<feature>=disabled` support
- Added performance regression tests to the ZFS Test Suite
- Added support for real disks to the ZFS Test Suite
- Added python style checking with flake8

#### Performance
- Explicit block device plugging when submitting multiple
- Added parity generation/rebuild using 128-bits NEON for Aarch64
- Added fletcher4 using 128-bits NEON for Aarch64
- Added batched quota object updates (OpenZFS 6988)
- Added allocation throttle (OpenZFS 7090)

#### Bug Fixes
- Fixed dracut module
- Fixed volume bookmarks can be listed recursively
- Fixed various memory leaks in the zfs/zpool utilties
- Fixed `ignore_hole_birth` enabled by default
- Fixed `/etc/mtab` users converted to `/proc/self/mount`
- Fixed 82 [Coverity defects](https://scan.coverity.com/projects/zfsonlinux-zfs)
- Applied 12 upstream OpenZFS patches
- Enabled additional ZFS Test Suite test cases
- Assorted documentation and man page updates

*This tag is provided for evaluation and testing of the upcoming 0.7.0 release.
It is not recommended for production use.*",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/4492103/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/4492103,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.7.0-rc2,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.7.0-rc2,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.7.0-rc2,zfs-0.7.0-rc2,False,True
4093576,2016-09-09T23:20:06Z,2016-09-09T23:23:06Z,v0.6.5.8,"#### Supported Kernels
- Compatible with 2.6.32 - 4.8 Linux kernels.  

#### Changes
- This release contains updates to the systemd service files.  In order to ensure the services are started properly it's recommended that after updating the systemd presets be reset to the defaults.

```
systemctl preset zfs-import-cache zfs-import-scan zfs-mount zfs-share zfs-zed zfs.target
```

#### Bug Fixes
- Linux 4.6, 4.7 and 4.8 compatibility zfsonlinux/spl#549 zfsonlinux/spl#563 zfsonlinux/spl#565 zfsonlinux/spl#566    zfsonlinux/zfs#4664 zfsonlinux/zfs#4665 zfsonlinux/zfs#4717 zfsonlinux/zfs#4726 zfsonlinux/zfs#4892  zfsonlinux/zfs#4899 zfsonlinux/zfs#4922  zfsonlinux/zfs#4944  zfsonlinux/zfs#4946 zfsonlinux/zfs#4951
- Fix new tunable to ignore hole_birth, enabled by default zfsonlinux/zfs#4833  
- Fix rw_tryupgrade() semantics zfsonlinux/spl#534 zfsonlinux/spl#554  
- Fix taskq_wait_outstanding() re-evaluation issue zfsonlinux/spl#553  
- Fix race between taskq_destroy and new spawning thread zfsonlinux/spl#550 zfsonlinux/spl#553
- Fix handle NULL case in spl_kmem_free_track() zfsonlinux/spl#567  
- Fix persist vdev_resilver_txg changes zfsonlinux/zfs#4790  
- Fix array bounds read in zprop_print_one_property() zfsonlinux/zfs#5003  
- Fix call zfs_get_name() with invalid parameter zfsonlinux/zfs#4919  
- Fix incorrect pool state after import zfsonlinux/zfs#4948  
- Fix self-healing IO prior to dsl_pool_init() completion zfsonlinux/zfs#4652  
- Fix stack corruption after importing a pool with a too-long name zfsonlinux/zfs@dc4abb4
- Fix deeply nested nvlist can overflow stack zfsonlinux/zfs#4924  
- Fix dbuf_stats_hash_table_data race zfsonlinux/zfs#4846  
- Fix NULL dereference when accessing dbuf kstat zfsonlinux/zfs#4837  
- Fix NFS fh_to_dentry() should return ESTALE when generation mismatch zfsonlinux/zfs#4828
- Fix allowing accessing XATTR via export handle zfsonlinux/zfs#4828  
- Fix out-of-bound access in zfs_fillpage() zfsonlinux/zfs#4705 zfsonlinux/zfs#4708
- Fix memleak in zpl_parse_options zfsonlinux/zfs#4706 zfsonlinux/zfs#4708  
- Fix arc_prune_task use-after-free zfsonlinux/zfs#4687 zfsonlinux/zfs#4690  
- Fix get_zfs_sb() race with concurrent umount zfsonlinux/zfs@5cff9a0  
- Fix xattr parent inode pinning zfsonlinux/zfs#4359 zfsonlinux/zfs#3508 zfsonlinux/zfs#4413 zfsonlinux/zfs#4827
- Fix xattr purge during iput zfsonlinux/zfs#4359 zfsonlinux/zfs#3508 zfsonlinux/zfs#4413 zfsonlinux/zfs#4827
- Fix metaslab_free_dva(): bad DVA X:Y:Z zfsonlinux/zfs#3937  
- Fix large kmem_alloc in vdev_metaslab_init zfsonlinux/zfs#4752  
- Fix snapdir by skipping ctldir znode in zfs_rezget zfsonlinux/zfs#4514 zfsonlinux/zfs#4661 zfsonlinux/zfs#4672
- Fix libshare performance issue zfsonlinux/zfs#4119  
- Fix ztest truncated cache file zfsonlinux/zfs#4129  
- Fix obeying arc_meta_limit default size when changing arc_max zfsonlinux/zfs#4001
- Fix bug in fix_paths() zfsonlinux/zfs#4632  
- Fix systemd configuration zfsonlinux/zfs#4325 zfsonlinux/zfs#4496 zfsonlinux/zfs#4658 zfsonlinux/zfs#4699
- Fix use kernel provided mutex owner zfsonlinux/spl#540  
- Fix rename 'zed.service' to 'zfs-zed.service' zfsonlinux/zfs#3837  
- Add support for MIPS zfsonlinux/spl#558  
- Add nfs-kernel-server for Debian zfsonlinux/zfs#4350  
- Remove HAVE_CURRENT_UMASK and HAVE_POSIX_ACL_CACHING zfsonlinux/zfs#4922  
- Remove dummy znode from zvol_state zfsonlinux/zfs#4510  
- Fix gcc -Warray-bounds check for dump_object() in zdb zfsonlinux/zfs#4907  
- Handle block pointers with a corrupt logical size zfsonlinux/zfs#4069 zfsonlinux/zfs#4080
",https://api.github.com/users/nedbass,320381,nedbass,https://api.github.com/repos/zfsonlinux/zfs/releases/4093576/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/4093576,zfs-0.6.5-release,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.8,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.8,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.8,zfs-0.6.5.8,False,False
4074350,2016-09-07T17:32:45Z,2017-02-21T19:18:09Z,v0.7.0-rc1,"#### Supported Kernels
- Compatible with 2.6.32 - 4.8 Linux kernels.

#### New Features
- Added `zfs allow/unallow` support
- Added large dnode feature
- Added resumable send/recv feature
- Added `-gLp` to zpool subcommands for alternative vdev names
- Added `-lhHpw` options to `zpool iostat` for avg latency, histograms, & queues
- Added `-r` request size histograms to `zpool iostat`
- Added ZFS Test Suite and `zloop.sh`
- Added support for lazyatime semantics
- Added ""clones"" property
- Added logging on zvol discard operations
- Adding initial Fault Management Logic (FMA)

#### Performance
- Added support for vectorized algorithms (RAIDZ, and Fletcher-4)
- Improved I/O prefetching
- Improved ZFS N-way mirror read performance by using load and locality
- Improved ARC metadata management
- Optimized tree comparison functions

*This tag is provided for evaluation and testing of the upcoming 0.7.0 release.
It is not recommended for production use.*",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/4074350/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/4074350,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.7.0-rc1,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.7.0-rc1,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.7.0-rc1,zfs-0.7.0-rc1,False,True
3216818,2016-05-13T02:39:06Z,2016-05-13T03:12:42Z,v0.6.5.7,"#### Supported Kernels
- Compatible with 2.6.32 - 4.6 Linux kernels.

#### Bug Fixes
- Fix SPL build failure on PowerPC zfsonlinux/spl#516
- Fix user namespaces uid/gid mapping zfsonlinux/zfs#4177
- Fix ZPL miswrite of default POSIX ACL zfsonlinux/zfs#4520
- Linux 4.5 and 4.6 compatibility zfsonlinux/zfs#4537 zfsonlinux/zfs#4489
- Ensure /dev/disk/by-partlabel gets correctly populated zfsonlinux/zfs#4517
- Utilities now work reliably with newly created partitions zfsonlinux/zfs#3708
- Import now reliably uses device names stored in label zfsonlinux/zfs#3043
- Fix possible deadlock in zfs_secpolicy_write_perms ioctl zfsonlinux/zfs#4554
- Fix inverted logic on none elevator comparison zfsonlinux/zfs#4507
- Add 32 bit FS_IOC32_{GET|SET}FLAGS compat ioctls for PPC zfsonlinux/zfs#4477
",https://api.github.com/users/nedbass,320381,nedbass,https://api.github.com/repos/zfsonlinux/zfs/releases/3216818/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/3216818,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.7,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.7,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.7,zfs-0.6.5.7,False,False
2868532,2016-03-23T01:09:06Z,2016-03-23T16:02:46Z,v0.6.5.6,"#### Supported Kernels
- Compatible with 2.6.32 - 4.5 Linux kernels.

#### Bug Fixes
- Remove artificial architecture restrictions in packaging
- Add support for s390[x] zfsonlinux/zfs#4425
- Handle negative dentries in case insensitive filesystem zfsonlinux/zfs#4243
- Fix casesensitivity=insensitive deadlock zfsonlinux/zfs#4136
- Correctly parse zdb -R flag arguments zfsonlinux/zfs#4304
- Fix lock order inversion with zvol_open() zfsonlinux/zfs#3681
- Add support for asynchronous zvol minor operations zfsonlinux/zfs#2217
- Make zvol minor functionality more robust zfsonlinux/zfs#4344
- Prevent zpool_find_vdev() from truncating vdev path zfsonlinux/zfs#4312
- Add -gLP to zpool subcommands for alt vdev names zfsonlinux/zfs#4341
- Fix zpool list -v output for spares and log devices zfsonlinux/zfs#4313
- Fix ZFS send fails to transmit some holes
",https://api.github.com/users/nedbass,320381,nedbass,https://api.github.com/repos/zfsonlinux/zfs/releases/2868532/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/2868532,zfs-0.6.5-release,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.6,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.6,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.6,zfs-0.6.5.6,False,False
2780577,2016-03-09T23:01:10Z,2016-03-09T23:26:19Z,v0.6.5.5,"#### Supported Kernels
- Compatible with 2.6.32 - 4.5 Linux kernels.

#### Bug Fixes
- Linux 4.5 compatibility zfsonlinux/zfs#4228
- Create working debuginfo packages on Red Hat zfsonlinux/zfs#4224
- Make arc_summary.py and dbufstat.py compatible with python3
- musl libc compatibility for mount.zfs option parsing zfsonlinux/zfs#4222
- Prevent arc_c collapse and possible panic zfsonlinux/zfs#3904
- Prevent duplicated xattr between SA and dir zfsonlinux/zfs#4153
- Fix zsb->z_hold_mtx deadlock zfsonlinux/zfs#4106
- Prevent SA header corruption zfsonlinux/zfs#4150
- Allow SPL's copy-builtin to run multiple times zfsonlinux/spl#526
- Use safer flags for in-kernel memory allocations zfsonlinux/spl#523
- Fix potential deadlock in cv_wait() zfsonlinux/zfs#4106
- Fix livelock in shrinker zfsonlinux/zfs#3936
",https://api.github.com/users/nedbass,320381,nedbass,https://api.github.com/repos/zfsonlinux/zfs/releases/2780577/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/2780577,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.5,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.5,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.5,zfs-0.6.5.5,False,False
2397737,2016-01-09T00:16:48Z,2016-01-09T00:19:57Z,v0.6.5.4,"#### Supported Kernels
- Compatible with 2.6.32 - 4.4 Linux kernels.

#### Bug Fixes
- Linux 4.4 compatibility
- Assorted stability fixes
- Better support and stability for NFS-exported snapshots
- Fix kernel warning in unlock_new_inode() and deadlock
- Fix overflow in P2ROUNDUP_TYPED macro
- Fix write performance issue due to bad zfs_dirty_data_max calculation
- Fix builtin kernel builds
- Fix deadlock during direct memory reclaim
- Fix taskq dynamic spawning deadlock
- Build fixes for SPARC
",https://api.github.com/users/nedbass,320381,nedbass,https://api.github.com/repos/zfsonlinux/zfs/releases/2397737/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/2397737,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.4,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.4,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.4,zfs-0.6.5.4,False,False
1956000,2015-10-13T22:36:11Z,2015-10-14T18:06:49Z,v0.6.5.3,"#### Supported Kernels
- Compatible with 2.6.32 - 4.3 Linux kernels.

#### Bug Fixes
- Fix CPU hotplug zfsonlinux/spl#482
- Disable dynamic taskqs by default to avoid deadlock zfsonlinux/spl#484
- Don't import all visible pools in zfs-import init script zfsonlinux/zfs#3777
- Fix use-after-free in vdev_disk_physio_completion zfsonlinux/zfs#3920
- Fix avl_is_empty(&dn->dn_dbufs) assertion zfsonlinux/zfs#3865
",https://api.github.com/users/nedbass,320381,nedbass,https://api.github.com/repos/zfsonlinux/zfs/releases/1956000/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1956000,zfs-0.6.5-release,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.3,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.3,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.3,zfs-0.6.5.3,False,False
1886877,2015-09-30T16:26:40Z,2015-09-30T16:42:04Z,v0.6.5.2,"#### Supported Kernels
- Compatible with 2.6.32 - 4.3 Linux kernels.

#### Bug Fixes
- Init script fixes zfsonlinux/zfs#3816
- Fix uioskip crash when skip to end zfsonlinux/zfs#3806 zfsonlinux/zfs#3850
- Userspace can trigger an assertion zfsonlinux/zfs#3792
- Fix quota userused underflow bug zfsonlinux/zfs#3789
- Fix performance regression from unwanted synchronous I/O zfsonlinux/zfs#3780
- Fix deadlock during ARC reclaim zfsonlinux/zfs#3808 zfsonlinux/zfs#3834
- Fix deadlock with zfs receive and clamscan zfsonlinux/zfs#3719
- Allow NFS activity to defer snapshot unmounts zfsonlinux/zfs#3794
- Linux 4.3 compatibility zfsonlinux/zfs#3799
- Zed reload fixes zfsonlinux/zfs#3773
- Fix PAX Patch/Grsec SLAB_USERCOPY panic zfsonlinux/zfs#3796
- Always remove during dkms uninstall/update zfsonlinux/spl#476
",https://api.github.com/users/nedbass,320381,nedbass,https://api.github.com/repos/zfsonlinux/zfs/releases/1886877/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1886877,zfs-0.6.5-release,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.2,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.2,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.2,zfs-0.6.5.2,False,False
1838977,2015-09-19T20:33:46Z,2015-09-19T21:31:35Z,v0.6.5.1,"#### Supported Kernels
- Compatible with 2.6.32 - 4.2 Linux kernels.

#### Bug Fixes
- Fix zvol corruption with TRIM/discard zfsonlinux/zfs#3798
- Fix NULL as mount(2) syscall data parameter zfsonlinux/zfs#3804
- Fix xattr=sa dataset property not honored zfsonlinux/zfs#3787
",https://api.github.com/users/nedbass,320381,nedbass,https://api.github.com/repos/zfsonlinux/zfs/releases/1838977/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1838977,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5.1,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5.1,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5.1,zfs-0.6.5.1,False,False
1791182,2015-09-11T18:31:42Z,2015-09-11T20:25:41Z,v0.6.5,"#### Supported Kernels
- Compatible with 2.6.32 - 4.2 Linux kernels.

#### New Functionality
- Support for temporary mount options.
- Support for accessing the .zfs/snapshot over NFS.
- Support for estimating send stream size when source is a bookmark.
- Administrative commands are allowed to use reserved space improving robustness.
- New notify ZEDLETs support email and [pushbullet](https://www.pushbullet.com/) notifications.
- New keyword 'slot' for vdev_id.conf to control what is use for the slot number.
- New `zpool export -a` option unmounts and exports all imported pools.
- New `zpool iostat -y` omits the first report with statistics since boot.
- New `zdb` can now open the root dataset.
- New `zdb` can print the numbers of ganged blocks.
- New `zdb -ddddd` can print details of block pointer objects.
- New `zdb -b` performance improved.
- New `zstreamdump -d` prints contents of blocks.

#### New Feature Flags
- **large_blocks** - This feature allows the record size on a dataset to be set larger than 128KB.  We currently support block sizes from 512 bytes to 16MB.  The benefits of larger blocks, and thus larger IO, need to be weighed against the cost of COWing a giant block to modify one byte.  Additionally, very large blocks can have an impact on I/O latency, and also potentially on the memory allocator.  Therefore, we do not allow the record size to be set larger than **zfs_max_recordsize** (default 1MB).  Larger blocks can be created by changing this tuning, pools with larger blocks can always be imported and used, regardless of this setting.
- **filesystem_limits** - This feature enables filesystem and snapshot limits. These limits can be used to control how many filesystems and/or snapshots can be created at the point in the tree on which the limits are set.

#### Performance
- Improved zvol performance on all kernels (>50% higher throughput, >20% lower latency)
- Improved zil performance on Linux 2.6.39 and earlier kernels (10x lower latency)
- Improved allocation behavior on mostly full SSD/file pools (5% to 10% improvement on 90% full pools)
- Improved performance when removing large files.
- Caching improvements (ARC):
  - Better cached read performance due to reduced lock contention.
  - Smarter heuristics for managing the total size of the cache and the distribution of data/metadata.
  - Faster release of cached buffers due to unexpected memory pressure.

#### Changes in Behavior
- Default reserved space was increased from 1.6% to 3.2% of total pool capacity.  This default percentage can be controlled through the new **spa_slop_shift** module option, setting it to **6** will restore the previous percentage.
- Loading of the ZFS module stack is now handled by systemd or the sysv init scripts.  Invoking the zfs/zpool commands will not cause the modules to be automatically loaded.  The previous behavior can be restored by setting the `ZFS_MODULE_LOADING=yes` environment variable but this functionality will be removed in a future release.
- Unified SYSV and Gentoo OpenRC initialization scripts.  The previous functionality has been split in to **zfs-import**, **zfs-mount**, **zfs-share**, and **zfs-zed** scripts.  This allows for independent control of the services and is consistent with the unit files provided for a systemd based system.  Complete details of the functionality provided by the updated scripts can be found [here](https://github.com/zfsonlinux/zfs/commit/2a34db1).
- Task queues are now dynamic and worker threads will be created and destroyed as needed.  This allows the system to automatically tune itself to ensure the optimal number of threads are used for the active workload which can result in a performance improvement.
- Task queue thread priorities were correctly aligned with the default Linux file system thread priorities.  This allows ZFS to compete fairly with other active Linux file systems when the system is under heavy load.
- When **compression=on** the default compression algorithm will be **lz4** as long as the feature is enabled.  Otherwise the default remains **lzjb**.  Similarly **lz4** is now the preferred method for compressing meta data when available.
- The use of mkdir/rmdir/mv in the .zfs/snapshot directory has been disabled by default both locally and via NFS clients.  The **zfs_admin_snapshot** module option can be used to re-enable this functionality.
- LBA weighting is automatically disabled on files and SSDs ensuring the entire device is used fairly.
- `iostat` accounting on zvols running on kernels older than Linux 3.19 is no longer supported.
- The known issues preventing swap on zvols for Linux 3.9 and newer kernels have been resolved.  However, deadlocks are still possible for older kernels.

#### Module Options
- Changed **zfs_arc_c_min** default from 4M to 32M to accommodate large blocks.
- Added **metaslab_aliquot** to control how many bytes are written to a top-level vdev before moving on to the next one.  Increasing this may be helpful when using blocks larger than 1M.
- Added **spa_slop_shift**, see 'reserved space' comment in the 'changes to behavior' section.
- Added **zfs_admin_snapshot**, enable/disable the use of mkdir/rmdir/mv in .zfs/snapshot directory.
- Added **zfs_arc_lotsfree_percent**, throttle I/O when free system memory drops below this percentage.
- Added **zfs_arc_num_sublists_per_state**, used to allow more fine-grained locking.
- Added **zfs_arc_p_min_shift**, used to set a floor on arc_p.
- Added **zfs_arc_sys_free**, the target  number  of  bytes the ARC should leave as free.
- Added **zfs_dbgmsg_enable**, used to enable the 'dbgmsg' kstat.
- Added **zfs_dbgmsg_maxsize**, sets the maximum size of the dbgmsg buffer.
- Added **zfs_max_recordsize**, used to control the maximum allowed record size.
- Added **zfs_arc_meta_strategy**, used to select the preferred ARC reclaim strategy.
- Removed **metaslab_min_alloc_size**, it was unused internally due to prior changes.
- Removed **zfs_arc_memory_throttle_disable**, replaced by **zfs_arc_lotsfree_percent**.
- Removed **zvol_threads**, zvols no longer require a dedicated task queue.
- See `zfs-module-parameters(5)` for complete details on available module options.

#### Bug Fixes
- Improved documentation with many updates, corrections, and additions.
- Improved sysv, systemd, initramfs, and dracut support.
- Improved block pointer validation before issuing IO.
- Improved scrub pause heuristics.
- Improved test coverage.
- Improved heuristics for automatic repair when `zfs_recover=1` module option is set.
- Improved debugging infrastructure via 'dbgmsg' kstat.
- Improved `zpool import` performance.
- Fixed deadlocks in direct memory reclaim.
- Fixed deadlock on db_mtx and dn_holds.
- Fixed deadlock in dmu_objset_find_dp().
- Fixed deadlock during `zfs rollback`.
- Fixed kernel panic due to tsd_exit() in ZFS_EXIT.
- Fixed kernel panic when adding a duplicate dbuf to dn_dbufs.
- Fixed kernel panic due to security / ACL creation failure.
- Fixed kernel panic on unmount due to iput taskq.
- Fixed panic due to corrupt nvlist when running utilities.
- Fixed panic on unmount due to not waiting for all znodes to be released.
- Fixed panic with `zfs clone` from different source and target pools.
- Fixed NULL pointer dereference in dsl_prop_get_ds().
- Fixed NULL pointer dereference in dsl_prop_notify_all_cb().
- Fixed NULL pointer dereference in zfsdev_getminor().
- Fixed I/Os are now aggregated across ZIO priority classes.
- Fixed .zfs/snapshot auto-mounting for all supported kernels.
- Fixed 3-digit octal escapes by changing to 4-digit which disambiguate the output.
- Fixed hard lockup due to infinite loop in zfs_zget().
- Fixed misreported 'alloc' value for cache devices.
- Fixed spurious hung task watchdog stack traces.
- Fixed direct memory reclaim deadlocks.
- Fixed module loading in zfs import systemd service.
- Fixed intermittent libzfs_init() failure to open /dev/zfs.
- Fixed hot-disk sparing for disk vdevs
- Fixed system spinning during ARC reclaim.
- Fixed formatting errors in `zfs(8)`
- Fixed zio pipeline stall by having callers invoke next stage.
- Fixed assertion failed in zrl_tryenter().
- Fixed memory leak in make_root_vdev().
- Fixed memory leak in zpool_in_use().
- Fixed memory leak in libzfs when doing rollback.
- Fixed hold leak in dmu_recv_end_check().
- Fixed refcount leak in bpobj_iterate_impl().
- Fixed misuse of input argument in traverse_visitbp().
- Fixed missing missing mutex_destroy() calls.
- Fixed integer overflows in dmu_read/dmu_write.
- Fixed verify() failure in zio_done().
- Fixed zio_checksum_error() to only include info for ECKSUM errors.
- Fixed -ESTALE to force lookup on missing NFS file handles.
- Fixed spurious failures from dsl_dataset_hold_obj().
- Fixed zfs {ref}compressratio when using with 4k sector size.
- Fixed spurious watchdog warnings in prefetch thread.
- Fixed unfair disk space allocation when vdevs are of unequal size.
- Fixed ashift accounting error writing to cache devices.
- Fixed `zdb -d` has false positive warning when feature@large_blocks=disabled.
- Fixed `zdb -h | -i` seg fault.
- Fixed force-received full stream into a dataset if it has a snapshot.
- Fixed snapshot error handling.
- Fixed 'hangs' while deleting large files.
- Fixed lock contention (rrw_exit) while running a read only load.
- Fixed error message when creating a pool to include all problematic devices.
- Fixed Xen virtual block device detection, partitions are now created.
- Fixed missing E2BIG error handling in zfs_setprop_error().
- Fixed `zpool import` assertion in libzfs_import.c.
- Fixed `zfs send -nv` output to stderr.
- Fixed idle pool potentially running itself out of space.
- Fixed narrow race which allowed `read(2)` to access beyond `fstat(2)`'s reported end-of-file.
- Fixed support for VPATH builds.
- Fixed double counting of HDR_L2ONLY_SIZE in ARC.
- Fixed 'BUG: Bad page state' warning from kernel due to writeback flag.
- Fixed arc_available_memory() to check freemem.
- Fixed arc_memory_throttle() to check pageout.
- Fixed`'zpool create` warning when using zvols in debug builds.
- Fixed loop devices layered on ZFS with 4.1 kernels.
- Fixed zvol contribution to kernel entropy pool.
- Fixed handling of compression flags in arc header.
- Substantial changes to realign code base with illumos.
- Many additional bug fixes.
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/1791182/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1791182,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.5,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.5,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.5,zfs-0.6.5,False,False
1462966,2015-06-25T19:14:20Z,2015-06-26T21:39:51Z,v0.6.4.2,"#### Supported Kernels
- Compatible with 2.6.32 - 4.1 Linux kernels.

#### Bug Fixes
- Fix panic due to corrupt nvlist when running utilities zfsonlinux/zfs#3335
- Fix hard lockup due to infinite loop in zfs_zget() zfsonlinux/zfs#3349
- Fix panic on unmount due to iput taskq zfsonlinux/zfs#3281
- Improve metadata shrinker performance on pre-3.1 kernels zfsonlinux/zfs#3501
- Linux 4.1 compat: use read_iter() / write_iter()
- Linux 3.12 compat: NUMA-aware per-superblock shrinker
- Fix spurious hung task watchdog stack traces zfsonlinux/zfs#3402
- Fix module loading in zfs import systemd service zfsonlinux/zfs#3440
- Fix intermittent libzfs_init() failure to open /dev/zfs zfsonlinux/zfs#2556
",https://api.github.com/users/nedbass,320381,nedbass,https://api.github.com/repos/zfsonlinux/zfs/releases/1462966/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1462966,zfs-0.6.4-release,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.4.2,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.4.2,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.4.2,zfs-0.6.4.2,False,False
1208718,2015-04-23T21:07:02Z,2015-04-24T16:25:24Z,v0.6.4.1,"#### Supported Kernels
- Compatible with 2.6.32 - 4.0 Linux kernels.

#### Bug Fixes
- Fixed io-spare.sh script for ZED.
- Fixed multiple deadlocks which might occur when reclaiming memory.
- Fixed excessive CPU usage for meta data heavy workloads when reclaiming the ARC.
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/1208718/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1208718,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.4.1,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.4.1,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.4.1,zfs-0.6.4.1,False,False
1146741,2015-03-18T20:44:00Z,2015-04-09T21:55:02Z,v0.6.3-1.3,"#### Bug Fixes
- Fixed current_kernel_time() in the time compatibility wrappers
- Linux 3.12 compat: split shrinker has s_shrink
- Linux 3.19 compat: file_inode was added
- Linux 4.0 compat: bdi_setup_and_register()
- Linux compat: misc_register()/misc_deregister()
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/1146741/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1146741,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.3-1.3,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.3-1.3,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.3-1.3,zfs-0.6.3-1.3,False,False
1146729,2014-12-23T18:40:42Z,2015-04-09T21:54:56Z,v0.6.3-1.2,"#### Bug Fixes
- Fixed typo in %post scriptlet
- Fixed ACL-to-mode translation panic for empty ACL
- Fixed freed spill blocks must be undirtied
- Fixed serialization on mutex_exit() to fix race
- Linux 3.12 compat: shrinker semantics
- Linux 3.16 compat: smp_mb__after_clear_bit()
- Linux 3.17 compat: remove wait_on_bit action function
- Linux 3.18 compat: mandatory locks
- Exported ZIL interfaces
- Set spl_kmem_cache_slab_limit=16384 to default
- Set spl_kmem_cache_reclaim=0 to default
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/1146729/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1146729,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.3-1.2,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.3-1.2,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.3-1.2,zfs-0.6.3-1.2,False,False
1146695,2014-10-09T21:10:05Z,2015-04-09T21:54:49Z,v0.6.3-1.1,"#### Bug Fixes
- Fixed panic in zil_commit()
- Fixed DKMS packaging
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/1146695/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1146695,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.3-1.1,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.3-1.1,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.3-1.1,zfs-0.6.3-1.1,False,False
1146050,2013-03-26T15:51:21Z,2015-04-09T18:58:48Z,v0.6.1,"#### New Functionality
- Added Linux 3.9 compatibility
- Added snapdev property to control visibility of zvol snapshots.
- Git <id>-<hash> included in release for working builds.
- Updated dkms and kmod compliant packaging.
- Added man pages for splat, fsck.zfs, mount.zfs, zhack, zinject, zpios, ztest, and zpool-features. 

#### Bug Fixes
- Fixed disk cache flushing for 2.6.37 and newer kernels.
- Fixed hot spare functionality.
- Disabled old on-disk format warning for `zpool status -x`.
- Enabled zfs_arc_memory_throttle_disable by default.
- Improved slab object reclaim behavior.
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/1146050/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1146050,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.1,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.1,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.1,zfs-0.6.1,False,False
1146025,2013-08-22T21:11:55Z,2015-04-09T18:51:42Z,v0.6.2,"#### New Functionality
- Added Linux 3.11 compatibility
- Added arcstat.py script from FreeNAS
- Added 'zpool labelclear' command from FreeBSD
- Added L2ARC compression from Illumos
- Added I/O deadman thread from Illumos
- Added SEEK_DATA/SEEK_HOLE to lseek()/llseek()
- Added writeable arc+l2arc module options
- Improved detection of advanced format (AF) disks
- Improved N-way mirror read performance
- Improved zdb to display SA xattrs

#### Bug Fixes
- Fixed missing zvols on import
- Fixed setting lower ashift with '-o ashift'
- Fixed xattr error handling
- Fixed kernel stack overflows
- Fixed spinning arc_adapt process
- Fixed spinning in iterate_supers_type() on unmount
- Fixed read-only pool unmount hang
- Fixed txg_quiesce deadlock
- Fixed .zfs/snapshot unmount deadlock
- Fixed zfs_readdir() returns type and offset
- Fixed SA based xattrs on symlinks
- Fixed zpool_read_label() so it reads all labels
- Fixed mount flags leaking in to the kernel
- Fixed panic in arc_read()
- Fixed panic in zfs_sb_teardown()/zfs_resume_fs()
- Fixed ARC caching freed blocks from Illumos
- Fixed slow space map condensing from Illumos
- Fixed taskq contention from Illumos
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/1146025/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1146025,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.2,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.2,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.2,zfs-0.6.2,False,False
1145930,2014-06-12T20:36:23Z,2015-04-09T18:38:26Z,v0.6.3,"#### New Functionality
- Compatible with kernels up to Linux 3.14.
- A smoother write throttle for consistent performance under load.
- Smarter caching to improve the cache hit rate for certain workloads.
- Support for Posix style ACLs.
- Support for the immutable and append-only file attributes.
- Support for mounting filesystems with relatime style updates.
- SELinux integration through four new dataset properties.
- Systemd support for better distribution integration.
- A new ZFS Event Daemon (ZED) for pool monitoring and management.
- Support for aarch64 and sparc64 architectures.

#### Bug Fixes
- Many performance improvements.
- Over 200 bug fixes.
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/1145930/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1145930,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.3,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.3,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.3,zfs-0.6.3,False,False
1145795,2015-04-09T03:17:56Z,2015-04-09T18:06:03Z,v0.6.4,"#### Supported Kernels
- Compatible with 2.6.32 - 4.0 Linux kernels.

#### New Functionality
- New feature flags (additional details below):
  - spacemap_histogram
  - extensible_dataset
  - bookmarks
  - enabled_txg
  - hole_birth
  - embedded_data
- New asynchronous I/O (AIO) support.
- New fallocate() FALLOC_FL_PUNCH_HOLE support.
- New fragmentation metric in 'zpool list'.
- New LZ4 compression of meta data.
- New ""redundant_metadata"" property controls desired redundancy level.
- New ""overlay"" property controls behavior for non-empty mount points.
- New 'zpool list -v' shows individual disk capacity.
- New 'zpool get -H' (scripted mode) support.
- New 'zpool create -t' creates a pool with a temporary name.
- New arc_summary.py script from FreeNAS.
- New bash completion support.
- New DTRACE_PROBES integrated with Linux tracepoints.
- New compressed block histograms with zdb.
- New verbatim pool imports with zdb.

#### New Feature Flags
- spacemap_histogram
  
  This features allows ZFS to maintain more information about how free space is organized within the pool.  If this feature is enabled, ZFS will set this feature to active when a new space map object is created or an existing space map is upgraded to the new format.
- extensible_dataset
  
  This feature allows more flexible use of internal ZFS data structures, and exists for other features to depend on.  This feature will be active when the first dependent feature uses it.
- bookmarks
  
  This feature enables use of the zfs bookmark subcommand.  Bookmarks mark the point in time when a snapshot was created, they can be used as the incremental source for a zfs send command.  All bookmarks in the pool can be listed by running zfs list -t bookmark -r poolname.
- enabled_txg
  
  Once this feature is enabled ZFS records the transaction group number in which new features are enabled. This has no user-visible impact, but other features may depend on this feature.
- hole_birth
  
  This feature improves performance of incremental sends (""zfs send -i"") and receives for objects with many holes. The most common case of hole-filled objects is zvols.
- embedded_data
  
  This feature improves the performance and compression ratio of highly-compressible blocks.   Blocks whose contents can compress to 112 bytes or smaller can take advantage of this feature.

#### Bug Fixes
- Fixed I/O error on fs/vol delete corrupting space map.
- Fixed corruption during spacemap reallocation.
- Fixed corruption due to faulty logic when undirtying spill block.
- Fixed stale bonus buffer in recycled dnode_t data corruption.
- Fixed SA header size accounting.
- Fixed O_APPEND flag for open(2).
- Fixed deadlocks caused by direct reclaim by setting PF_FSTRANS.
- Fixed deadlocks on suspended pools.
- Fixed deadlock in zio pipeline caused by mutex_exit() race.
- Fixed deadlock between 'zpool export' and 'zfs list'.
- Fixed deadlock related to 'zfs rename'.
- Fixed deadlock related to z_teardown_inactive_lock.
- Fixed deadlock related to zfs_putpage().
- Fixed deadlock for meta data intensive workloads.
- Fixed panic when removing log device.
- Fixed panic in metaslab init when space_map_open returned ENXIO.
- Fixed panic due to dirtying inodes in a snapshot.
- Fixed panic in dbufstat.py.
- Fixed panic when performing ACL-to-mode translation on empty ACL.
- Fixed SEEK_HOLE misreporting hole at end of file.
- Fixed discrepancies in futimens() timestamps.
- Fixed pool free space leak.
- Fixed L2ARC compressed buffer leak.
- Fixed 'zpool history -i' hang.
- Fixed 'zpool import -t' it should not update the cache file.
- Fixed multiple 'zfs send/recv' failure modes.
- Fixed dracut to export ZFS root pool on shutdown.
- Fixed restore_object now performed in a single transaction.
- Fixed zvol symbolic link handling.
- Fixed per-filesystem memory reclaim.
- Fixed removal of SA in sa_modify_attrs().
- Fixed readdir for .zfs/snapshot directory.
- Fixed maximum zvol transfer size.
- Fixed dmu_sync'ed holes should retain birth time.
- Fixed ctor/dtor called on each alloc/free not once per slab.
- Fixed ZED io-spare.sh script.
- Fixed spurious timeouts when create large pools.
- Improved 'zpool add' dry-run mode.
- Improved 'zfs send -p' to only send properties for sent snapshots.
- Improved 'zpool import' hostid behavior.
- Improved 'zpool import -XF' behavior.
- Improved 'zpool import' when multiple duplicate labels are found.
- Improved 'zfs receive' performance by increasing pipe buffer size.
- Improved 'zfs send' for small blocks by increasing prefetch.
- Improved SPL kmem implementation.
- Improved zvol_get_stats() performance.
- Improved ashift auto-detect and management.
- Improved documentation in man pages.
- Improved handling of damaged block pointers.
- Improved ZED logging
- Rate limited debug backtraces to avoid impacting performance.
- Assorted performance improvements.
- Substantial changes to realign code base with illumos.
- Over 200 additional bug fixes.
",https://api.github.com/users/behlendorf,148917,behlendorf,https://api.github.com/repos/zfsonlinux/zfs/releases/1145795/assets,https://api.github.com/repos/zfsonlinux/zfs/releases/1145795,master,https://api.github.com/repos/zfsonlinux/zfs/tarball/zfs-0.6.4,https://github.com/zfsonlinux/zfs/releases/tag/zfs-0.6.4,https://api.github.com/repos/zfsonlinux/zfs/zipball/zfs-0.6.4,zfs-0.6.4,False,False
